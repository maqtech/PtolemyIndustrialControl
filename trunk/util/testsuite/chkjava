#!/bin/sh
#
# @Authors: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1997-1999 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY

# Script to sanity check java files
# 1) Report protected and private variables that do not have a leading _
# 2) Report lines longer than 80 chars
# 3) Report public methods and variables after private or protected ones
# 4) Make sure that each file includes a copyright, @version and @author
# 5) Make sure that @author and @version are not @author: and @version:
# 6) Check for spaces after commas
# 7) Check for FIXMEs
# 8) Check for lines with trailing spaces
# 9) Check the rating
# 10) Check for bogus spaces around declarations
# 11) Check for %W% %G%, which are from SCCS
# 12) Check for // System.out.println 
# 13) Check for @exception tags that are not worded properly

for file in $@
do

	results=`grep protected $file | grep -v 'protected methods' |
		egrep -v '[ 	]*\*' |
		grep -v 'protected variables' | 
		grep -v 'protected class' | 
		grep -v 'write-protected' |
		grep -v ' _'`
	if [ "x$results" != "x" ]; then
		echo "$results" | awk '{
		    # If this is a constructor, then do not complain  
		    split($2,f,"(")
		    # Skip over comments that start with //
		    if (f[1] != filenm && $0 !~ /^[ 	]*\/\//) {
		        if (printedheader == 0) {
			    print filenm".java: protected does not have a leading _"
			    printedheader = 1
			}
			print $0
		    }
		}' filenm=`basename $file .java`    
	fi

	results=`grep private $file |
		egrep -v '[ 	]*\*' |
		grep -v 'private methods' |
		grep -v 'private class' |
		grep -v 'private static final class' |
		grep -v 'private variables' | grep -v ' _'`
	if [ "x$results" != "x" ]; then
		echo "$results" | awk '{
		    # If this is a constructor, then do not complain  
		    split($2,f,"(")
		    # Skip over comments that start with //
		    # or start with a non whitespace character
   		    if (f[1] != filenm && $0 !~ /^[ 	]*\/\// && $0 !~/^[ 	]*/) {
		        if (printedheader == 0) {
			    print filenm".java: private does not have a leading _"
			    printedheader = 1
			}
			print $0
		    }
		}' filenm=`basename $file .java`    
	fi

	# Look for lines longer than 80 chars
	awk 'length($0) > 80 {if ($0 !~ /[Hh][Rr][Ee][Ff]/ && $1 !~ /@version/ ) {print FILENAME": Line more than 80 chars:"; print $0}}' $file

	# Look for public statements after private etc.
        awk '$1 == "public" {sawpublic=1
				if (sawprivate == 1 && sawinner != 1) {
				   print FILENAME": public is after private"
				   print $0
				}
	     			if (sawprotected == 1 && sawinner != 1) {
				   print FILENAME": public is after protected"
				   print $0
				}
			}
        $1 == "protected" {
				if (sawprivate == 1 && sawinner != 1) {
				   print FILENAME": public is after private"
				   print $0
				}
			}
	$1 == "private" {
			    if ( $0 ~ /private class/ ) {
				# Inner Class
				sawpublic=0
				sawprotected=0
				sawprivate=0
			    } else {
			        # If we have a private constructor, then
			        # allow it to be at the top of the file.
			        # ArrayMath.java has one.
				split($2,constr,"(");
				np=split(FILENAME,path,"/")
				split(path[np],classname,".")
				if (constr[1] !=  classname[1]) {
				    sawprivate=1
				}
			    }
			}    
        $0 ~ /^[	 ]*\/\/*[ 	]*[Ii]nner.*[Cc]lass/ {
			    # If we see an inner class comment, then
			    # we basically ignore any out of order methods
			    # after the comment.
			    sawinner=1
	}' $file

	# Check that certain keywords exist
	words="@version @author Copyright Regents"
	for word in $words
	do
	  egrep -s $word $file > /dev/null
	  retval=$?
    	  if [ $retval != 0 ]; then
	    echo "$file does not contain $word"
	  fi
	done  

	# Look for @version: or @author:
	awk '$0 ~ /@author:/ {
	    print FILENAME": Remove trailing : from @author:" 
	    print $0
	}
	$0 ~ /@version:/ {
	    print FILENAME": Remove trailing : from @version:" 
	    print $0
	}
	$0 ~/@returns/ {
	    print FILENAME": Remove trailing s from @returns" 
	    print $0
	}' $file

	# Check that all commas have spaces
	# A line that contains ", is ok
	# A line that contains ,</i> is ok
	results=`egrep '[^"],[^v" ]' $file | grep -v ',[</i>]'`
	if [ "x$results" != "x" ]; then
	    echo "$file: comma without out trailing space:"
	    echo "$results"
	fi

	# Check for FIXME
	results=`egrep 'FIXME' $file`
	if [ "x$results" != "x" ]; then
	    echo "$file: contains a FIXME"
	    echo "$results"
	fi

	# Check for lines with trailing spaces
	results=`egrep '[ 	]+$' $file`
	if [ "x$results" != "x" ]; then
	    echo "$file: contains trailing spaces or tabs, run rmtrailingspace to fix this"
	    echo "$results"
	fi

	# Check for problems with equals signs
	results=`egrep '[^-|*/ ><+&=\!]=' $file | \
	    egrep -iv 'HREF=|NAME=|=WxH|"="' `
	if [ "x$results" != "x" ]; then
	    echo "$file: contains an equal sign without a leading space"
	    echo "$results"
	fi

	# Check for problems with equals signs
	results=`egrep '=[^ =]' $file | \
	    egrep -iv 'HREF=|NAME=|=WxH|"="' `
	if [ "x$results" != "x" ]; then
	    echo "$file: contains an equal sign without a trailing space"
	    echo "$results"
	fi


	# Check the rating
	results=`egrep '^@AcceptedRating' $file`
	if [ "x$results" != "x" ]; then
	    rating=`echo $results | awk '{print $2}' `
	    if [ "$rating" != "Green" ]; then
		echo "$file: does not have an AcceptedRating of green"
		echo "$results"
	    fi	
	else
	    echo "$file: does not have an @AcceptedRating doc tag"
	fi

	results=`egrep '(public|private|protected) .* .*\(' $file | egrep ' \(|\( ' | grep -v ') throws' ` 
	if [ "x$results" != "x" ]; then
	    echo "$file: has extra spaces around '(' in decl (should be foo(int a)"
	    echo "$results"
	fi

	results=`egrep '(public|private|protected) .* .*\(' $file | egrep '\){'`
	if [ "x$results" != "x" ]; then
	    echo "$file: needs space between ')' and '{' in decl"
	    echo "$results"
	fi

        # 11) Check for %W% %G%, which are from SCCS
	results=`egrep '%W%|%G%' $file`
	if [ "x$results" != "x" ]; then
	    echo "$file: has old SCCS keywords: %W% or %G%"
	    echo "$results"
	fi

        # 12) Check for // System.out.println 
	results=`egrep '//' $file | grep System.out.println`
	if [ "x$results" != "x" ]; then
	    echo "$file: has commented out println statements"
	    echo "$results"
	fi

	# 13) Check for @exception tags that are not worded properly
	# Added a . to this regex so that we find things like
	#  @exception java.util.NoSuchElementException If the enumeration is
	results=`egrep '@exception' $file | egrep -v '@exception [A-Za-z0-9.]* If' | grep -v 'Not thrown in this base class' | grep -v 'Always thrown'`
	if [ "x$results" != "x" ]; then
	    echo "$file: @exception tags should either be"
	    echo "      '@exception MyException If such and such occurs'"
	    echo " or   '@exception MyException Not thrown in this base class'"
	    echo " or   '@exception MyException Always thrown'"
	    echo "$results"
	fi
done

