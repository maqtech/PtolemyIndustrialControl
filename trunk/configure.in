dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run to configure the
dnl	Makefile in this directory.

# Version: $Id$
# Copyright (c) 1997-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY


dnl Don't look for ptolemy/kernel/util/NamedObj.java here, or
dnl else we won't be able to rebuild after make extraclean.
AC_INIT(mk/ptII.mk.in)

# We must have PTII set before running configure.
if test -z "$PTII"; then
    echo "You must set the PTII environment variable before running configure"
    exit 3	
fi 

if test  ! -d "$PTII"; then
    echo "\$PTII is set to '$PTII', but it does not exist"
    exit 3	
fi 

if test  ! -w "$PTII"; then
    echo "\$PTII is set to '$PTII', but it is not writable by you"
    exit 3	
fi 
PTII_DEFAULT=$PTII
# The default value of prefix
AC_PREFIX_DEFAULT($PTII)


#--------------------------------------------------------------------
#	See if there was a command-line option for where Java is;  if
#	not, check to see if the PTJAVA_DIR environment variable is set;
#       if it is not, look for javac on the path.
#--------------------------------------------------------------------

AC_ARG_WITH(java, [  --with-java=DIR         use Java binaries from DIR,
                           defaults to the value of the
                           PTJAVA_DIR environment variable],
    PTJAVA_DIR=$withval)

if test ! -d "$PTJAVA_DIR"; then
    if test -z "$PTJAVA_DIR"; then
	AC_MSG_WARN([PTJAVA_DIR environment variable was not set,
so we search for the java compiler.])

    else
	AC_MSG_WARN([PTJAVA_DIR environment variable is set to
'${PTJAVA_DIR}', which is not a directory,
so we search for the java compiler.])
    fi 
    AC_PATH_PROG(JAVAC, javac)
    if test -x "$JAVAC"; then	
	JAVABIN=`dirname $JAVAC`
	PTJAVA_DIR=`dirname $JAVABIN`
    else
        AC_MSG_WARN([ Failed to find javac, perhaps Java is not installed?])
    fi

    # The default location that we look for the JDK.  This should probably
    # be a list that includes /usr/local/jdk and /opt/jdk
    DEFAULT_JDK=/opt/jdk1.1.6
    if test ! -d "$PTJAVA_DIR"; then
	AC_MSG_WARN(['${PTJAVA_DIR}' is not a directory, using the default '${DEFAULT_JDK}'])
	if test -d "$DEFAULT_JDK"; then
	    PTJAVA_DIR=`cd $DEFAULT_JDK; pwd`	
	else
			    AC_MSG_ERROR([
Java directory $DEFAULT_JDK doesn't exist.
Try --with-java=DIR, or set the JAVA_HOME environment variable.])
	fi	
    fi	
fi

#
# Check that we have the javac that corresponds with PTJAVA_DIR in our path
#
AC_MSG_CHECKING([for the java runtime in $PTJAVA_DIR/bin])
if test -f $PTJAVA_DIR/bin/java; then
    AC_MSG_RESULT($PTJAVA_DIR/bin/java)
    AC_MSG_CHECKING([that you have the right java in your path.])
    AC_PATH_PROG(JAVA, java)
    if test "$PTJAVA_DIR/bin/java" = "$JAVA"; then
	AC_MSG_RESULT([  You have the right java in your path, $PTJAVA_DIR/bin/java = $JAVA])
    else
	AC_MSG_WARN([$PTJAVA_DIR/bin/java is not the same as $JAVA.
Be sure that you don't have a mismatch in JDK versions.])
	JAVA=$PTJAVA_DIR/bin/java
    fi
else
    AC_MSG_ERROR([
  Cannot find $PTJAVA_DIR/bin/java.
  Try --with-java=DIR, or set the JAVA_HOME environment variable.]) 
fi


#
# Check that we have the javac that corresponds with PTJAVA_DIR in our path
#
AC_MSG_CHECKING([for the java compiler in $PTJAVA_DIR/bin])
if test -f $PTJAVA_DIR/bin/javac; then
    AC_MSG_RESULT($PTJAVA_DIR/bin/javac)
    AC_MSG_CHECKING([that you have the right javac in your path.])
    AC_PATH_PROG(JAVAC, javac)
    if test "$PTJAVA_DIR/bin/javac" = "$JAVAC"; then
        AC_MSG_RESULT([  You have the right javac in your path, $PTJAVA_DIR/bin/javac = $JAVAC])
    else
        AC_MSG_WARN([$PTJAVA_DIR/bin/javac is not the same as $JAVAC.
Be sure that you don't have a mismatch in JDK versions.])
	JAVAC=$PTJAVA_DIR/bin/javac
    fi
else
    AC_MSG_ERROR([
  Cannot find $PTJAVA_DIR/bin/javac.
  Try --with-java=DIR, or set the JAVA_HOME environment variable.])
fi


#--------------------------------------------------------------------
#	Figure out whether to use javac -depend or javac -Xdepend
#--------------------------------------------------------------------
JFLAGSINIT=-g

AC_MSG_CHECKING([the Java compiler with a simple compile])
# We need to run javac in the mk directory so that javac from jdk1.1.6
# under NT and cygwin works properly
startdir=`pwd`
cd $srcdir/mk
if env $JAVAC -d $startdir confTest.java ; then
    AC_MSG_RESULT(ok)
    JFLAGS="$JFLAGSINIT -depend"
    AC_MSG_CHECKING([javac $JFLAGS])
    if env $JAVAC -d $startdir $JFLAGS confTest.java ; then
	AC_MSG_RESULT(yes)
    else
	AC_MSG_RESULT(no)
	JFLAGS="$JFLAGSINIT -Xdepend"
	AC_MSG_CHECKING([javac $JFLAGS])
	if env $JAVAC -d $startdir $JFLAGS confTest.java ; then
	    AC_MSG_RESULT(yes)
	else
	    AC_MSG_RESULT(no)
	    AC_MSG_WARN(['$JAVAC -d $startdir -depend confTest.java' and
'$JAVAC -d $startdir -Xdepend confTest.java' both failed, so we don't
know how to build with dependencies taken into account.  This could
cause problems later if you modify .java files that other .java
files depend on])
	    AC_MSG_RESULT($JFLAGS)
	fi
    fi
else
    JFLAGS="$JFLAGSINIT -depend"
   AC_MSG_WARN(['$JAVAC -d $startdir confTest.java' failed,
so we can't figure out whether to use -depend or -Xdepend.
Defaulting to $JFLAGS]);
fi
cd $startdir


#--------------------------------------------------------------------
#	Figure out which separator to use for CLASSPATH
#	So much for write once, run everywhere.
#--------------------------------------------------------------------
AC_MSG_CHECKING([for the proper CLASSPATH separator])
case "`uname -s`" in
    CYGWIN32_NT) CLASSPATHSEPARATOR=";";;
    *) CLASSPATHSEPARATOR=":";;
esac
AC_MSG_RESULT(['$CLASSPATHSEPARATOR'])

#--------------------------------------------------------------------
#	See if there was a command-line option for where javacc is;  if
#	not, check to see if $PTOLEMY/vendors/sun/JavaCC exists
#       if it is does not, look for javacc on the path.
#--------------------------------------------------------------------

AC_MSG_CHECKING([for JavaCC])
AC_ARG_WITH(java, [  --with-javacc=DIR       use JavaCC.zip from DIR,
                           defaults to \$PTOLEMY/vendors/sun/JavaCC],
    JAVACC_DIR=$withval, JAVACC_DIR=$PTOLEMY/vendors/sun/JavaCC)

if test "`uname -s`" = "CYGWIN32_NT"; then
    JJTREE='\$(JAVA) COM.sun.labs.jjtree.Main'
    JAVACC='\$(JAVA) COM.sun.labs.javacc.Main'
    AC_MSG_WARN([Be sure that your CLASSPATH includes JavaCC.zip]);
else
    if test ! -d "$JAVACC_DIR"; then
	AC_MSG_WARN(['${JAVACC_DIR}' is not a directory, 
so we search for the jjtree command.])
	AC_PATH_PROG(JJTREE, jjtree)
	if test -x "$JJTREE"; then	
	    AC_MSG_RESULT([$JJTREE]);
	    JAVACCBIN=`dirname $JJTREE`
	    JAVACC_DIR=`dirname $JAVACCBIN`
	else  	
	    AC_MSG_WARN([Failed to find jjtree]);
	fi
    fi	
    if test -d "$JAVACC_DIR"; then
	AC_MSG_RESULT([$JAVACC_DIR])
	AC_MSG_CHECKING([for jjtree])
 	if test -x "$JAVACC_DIR/bin/jjtree"; then
	    # Note that we don't substitute in the $(JAVACC_DIR) here
	    JJTREE='$(JAVACC_DIR)/bin/jjtree'
	    AC_MSG_RESULT([$JJTREE])
	else    
	    AC_MSG_WARN([Failed to find jjtree in '$JAVACC_DIR/bin']);
	fi    
	AC_MSG_CHECKING([for javacc])
 	if test -x "$JAVACC_DIR/bin/javacc"; then
	    # Note that we don't substitute in the $(JAVACC_DIR) here
	    JAVACC='$(JAVACC_DIR)/bin/javacc'
	    AC_MSG_RESULT([$JAVACC])
	else    
	    AC_MSG_WARN([Failed to find javacc in '$JAVACC_DIR/bin']);
	fi    
    fi
fi

if test ! -d "$JAVACC_DIR"; then
        AC_MSG_WARN([Failed to find javacc, perhaps JavaCC is not installed?
You need not download JavaCC unless you plan on modifying certain files 
in ptolemy/data/expr. 
JavaCC can be downloaded from http://www.sun.com/suntest'])
fi

#--------------------------------------------------------------------
#	See if there was a command-line option for where Tcl Blend is
#--------------------------------------------------------------------

AC_ARG_WITH(java, [  --with-jtclsh=SCRIPT    jtclsh is at BINARY. jtclsh is
                           used for running the test scripts],
    JTCLSH=$withval, JTCLSH=jtclsh)
if test "$JTCLSH" != "jtclsh"; then
    AC_MSG_CHECKING([for jtclsh])
    AC_MSG_RESULT($JTCLSH]);
else
    AC_PATH_PROG(JTCLSH, jtclsh)
    if test ! -x "$JTCLSH"; then	
	AC_MSG_WARN([jtclsh not found.  jtclsh is a startup script for
Tcl Blend, which is used to run the test suite.
You only need to have jtclsh if you are planning on running the test suite.
See http://www.scriptics.com/java for Tcl Blend sources and binaries.])
   fi     
fi 


# Keep these substitutions alphabetical, with a description

# Separator in CLASSPATH,  For Unix, this should be :, for Cygwin, use ;
AC_SUBST(CLASSPATHSEPARATOR)

# javacc binary
AC_SUBST(JAVACC)

# Directory that contains JavaCC, which is used in ptolemy/data/expr
AC_SUBST(JAVACC_DIR)

# Arguments to pass to javac.  Usually something like '-g -depend'
AC_SUBST(JFLAGS)

# jtclsh script, used for test suites
AC_SUBST(JTCLSH)

# jtree binary
AC_SUBST(JTREE)

# Location of the JDK
AC_SUBST(PTJAVA_DIR)

# Location of the PtII directory
AC_SUBST(PTII_DEFAULT)

# Files we substitute in
AC_OUTPUT(mk/ptII.mk ptolemy/plot/ptplot)
