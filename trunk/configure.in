nl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run to configure the
dnl	Makefile in this directory.

# Version: $Id$
# Copyright (c) 1997-2003 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY


dnl Don't look for ptolemy/kernel/util/NamedObj.java here, or
dnl else we won't be able to rebuild after make extraclean.
AC_INIT(mk/ptII.mk.in)

# We must have PTII set before running configure.
if test -z "$PTII"; then
    if test -n "$PTOLEMY"; then
	if test -d "$PTOLEMY/tycho/java"; then
	    echo "\$PTOLEMY/tycho/java exists, setting PTII to that value"
	    PTII="$PTOLEMY/tycho/java"
	    # We should not have to call AC_PREFIX_DEFAULT($PTII) here
	    # but autoconf shuffles things around, so the call to
	    # AC_PREFIX_DEFAULT($PTII) that is 15 or so lines below
	    # actually appears at the top of configure.
	    ac_default_prefix=$PTII
	else
	    echo "You must set the PTII environment variable before running configure"
	    exit 3
	fi
    else
	echo "You must set the PTII environment variable before running configure"
	exit 3
    fi

fi

if test  ! -d "$PTII"; then
    echo "\$PTII is set to '$PTII', but it does not exist"
    exit 3
fi

if test  ! -w "$PTII"; then
    echo "Warning: \$PTII is set to '$PTII', but it is not writable by you."
    echo "This may or may not be a problem.  If you are running under"
    echo "Windows, then you might be able to ignore this problem and"
    echo "proceed with the build.  If you continue to have problems,"
    echo "try upgrading to cygwin1.1.0 or later"
fi

AC_MSG_CHECKING([if \$PTII ('$PTII') contains "cygdrive"])
echo "$PTII" | grep cygdrive > /dev/null
status=$?
if test "$status" -eq 1 ; then
    AC_MSG_RESULT([ok
	'$PTII' does not contain cygdrive, which is right.])
else
    AC_MSG_WARN(['\$PTII == $PTII,
which contains 'cygdrive'.
It could be that you have incorrectly set PTII.
If you have installed Cygwin in c:/cygwin, and your Ptolemy II installation
is in a directory outside of the c:/cygwin tree, then Cygwin may
change your PTII variable to include "/cygdrive/c".  This
will cause problems with non-Cygwin tools like javac that do
not understand /cygdrive/c

Under Cygwin, try permanently setting PTII in the control panel 
(Start->Control Panels->Advanced->Environment Variables)
or temporary set it within bash by using backslashes:
  PTII=c:\\\\users\\\\yourname\\\\ptII
  export PTII
and then rerun
  ./configure
See $PTII/doc/install.htm for details.'])
fi


case "`uname -s`" in
    CYGWIN_NT-*)
        AC_MSG_CHECKING([if \$PTII ('$PTII') contains "cygwin"])
        cygpath -w "$PTII" | grep cygwin > /dev/null
        status=$?
        if test "$status" -eq 1 ; then
	     AC_MSG_RESULT([ok
  \$PTII is '$PTII', which does not contain cygwin, which is right.])
        else
    AC_MSG_WARN([
'cygpath -w \$PTII' == '`cygpath -w $PTII`'
which contains 'cygwin'.
This could happen if your home directory is in the default location
for cygwin which cygwin thinks is /home/yourname,
but windows thinks is c:\\cygwin\\home\\yourname.
This will cause problems with non-Cygwin tools like javac that do
not understand Cygwin directory structure and mounts will not
be able to find files in $PTII.
The solution is to move the Ptolemy II tree outside of
c:\\cygwin and to set the PTII variable to point to that location
and then rerun
  cd \$PTII  
  ./configure
See $PTII/doc/install.htm for details.'])
     fi
     ;;
esac 


# If we are under Cygwin, check that we can find CMD
case "`uname -s`" in
    CYGWIN_NT-*)
	AC_PATH_PROG(CMD_PATH, cmd)
	if test -x "$CMD_PATH"; then
		AC_MSG_RESULT([$CMD_PATH])
	else
		AC_MSG_WARN([Failed to find the 'cmd' command, which
    is used by the $PTII/bin/ptolemy script.
    Under Windows 2000, cmd is usually found at c:\\winnt\\system32\\cmd.exe.
    Under Windows XP, cmd is usually found at c:\\windows\\system32\\cmd.exe.
    You may need to modify your PATH to explicitly include 
    c:\\winnt\\system32 by going or c:\\windows\\system32 by going to
    to Start->Settings->Control Panels->System->Environment and changing
    %SystemRoot%\\system32 to c:\\winnt\\system32 or c:\\windows\\system32.])
	fi
	;;

    *) ;;
esac

PTII_DEFAULT=$PTII
# The default value of prefix
AC_PREFIX_DEFAULT($PTII)


#--------------------------------------------------------------------
#	The PTII directory as a URL
#--------------------------------------------------------------------

# Read the PTII variable and substitute forward slashes
# for backward slashes

case "`uname -s`" in
CYGWIN_ME-*)
	# Windows ME is not a real os, and it does not have CMD.
	# So, we punt
	PTII_DIR=$PTII
	;;
CYGWIN_98-*) 
	# Windows 98 is not a real os, and it does not have CMD.
	# So, we punt
	PTII_DIR=$PTII
	;;
CYGWIN*)
	# We use cmd /c chdir here to get rid of /cygwin/c
	PTII_DIR=`(cd "$PTII"; cmd /c chdir) | tr -d '\r' | sed 's@\\\@/@g'`
	;;
*)
	PTII_DIR=$PTII
	;;
esac

# Substitute %20 for any spaces.
PTII_LOCALURL=`echo "file:///$PTII_DIR" | sed 's/ /%20/g'`
#--------------------------------------------------------------------
#	See if there was a command-line option for where Java is;  if
#	not, check to see if the PTJAVA_DIR environment variable is set;
#       if it is not, look for javac on the path.
#--------------------------------------------------------------------

AC_ARG_WITH(java, [  --with-java=DIR         use Java binaries from DIR,
                           defaults to the value of the
                           PTJAVA_DIR environment variable],
    PTJAVA_DIR=$withval)

if test -d "$PTJAVA_DIR"; then
	AC_MSG_RESULT([
    PTJAVA_DIR environment variable was set to
    '$PTJAVA_DIR', and there is a directory
    at that location, so we will try it.])
else
    if test -z "$PTJAVA_DIR"; then
	AC_MSG_RESULT([PTJAVA_DIR environment variable was not set,
    so we search for the java compiler.])

    else
	AC_MSG_WARN([PTJAVA_DIR environment variable is set to
    '${PTJAVA_DIR}', which is not a directory,
    so we search for the java compiler.])
    fi
    AC_PATH_PROG(JAVAC, javac)
    if test -x "$JAVAC"; then
	JAVABIN=`dirname "$JAVAC"`
	PTJAVA_DIR=`dirname "$JAVABIN"`
	if test "$PTJAVA_DIR" = "/"; then
	    if test -d /usr/java; then
		PTJAVA_DIR=/usr/java
	        AC_MSG_WARN([ Found javac in "$JAVABIN", /usr/java exists, so
  we are setting PTJAVA_DIR to '$PTJAVA_DIR'])
	    fi
	fi

    else
        AC_MSG_WARN([ Failed to find javac, perhaps Java is not installed?])
    fi

    # The default location that we look for the JDK.  This should probably
    # be a list that includes /usr/local/jdk and /opt/jdk
    if test ! -d "$PTJAVA_DIR"; then
	DEFAULT_JDK=/opt/jdk1.3
	if test -d "$DEFAULT_JDK"; then
	    PTJAVA_DIR=`cd "$DEFAULT_JDK"; pwd`
	    AC_MSG_WARN(['${PTJAVA_DIR}' is not a directory, using the default '${DEFAULT_JDK}'])

	else
	    DEFAULT_JDK=/usr/java
	    if test -d "$DEFAULT_JDK"; then
		PTJAVA_DIR=`cd "$DEFAULT_JDK"; pwd`
		AC_MSG_WARN(['${PTJAVA_DIR}' is not a directory, using the default '${DEFAULT_JDK}'])
	    else
			    AC_MSG_ERROR([
Java directory $DEFAULT_JDK doesn't exist.
Be sure that the directory that contains javac and java is in your path.
Typically, under Windows, this directory might be c:\jdk1.3.1\bin
For instructions about adding to a directory to your path permanently,
consult your user documentation.
Under bash, you may temporarily add a directory with something like:
  PATH=/cygdrive/c/jdk1.3.1/bin:\$PATH
  export PATH
  rm config.*; ./configure
You may also try --with-java=DIR, or set the PTJAVA_DIR environment variable
to the directory where your jdk is located:
  PTJAVA_DIR=/cygdrive/c/jdk1.3.1
  export PATH
  rm config.*; ./configure
but adding the directory to your path is likely to work best.])
	    fi
	fi
    fi
fi

#
# Check that we have the javac that corresponds with PTJAVA_DIR in our path
#
AC_MSG_CHECKING([for the java runtime in $PTJAVA_DIR/bin])
if test -f "$PTJAVA_DIR/bin/java" -o -f "$PTJAVA_DIR/bin/java.exe"; then
    AC_MSG_RESULT($PTJAVA_DIR/bin/java)
    AC_MSG_CHECKING([that you have the right java in your path.])
    AC_PATH_PROG(JAVA, java)
    if test "$PTJAVA_DIR/bin/java" = "$JAVA"; then
	AC_MSG_RESULT([  You have the right java in your path,
    $PTJAVA_DIR/bin/java = "$JAVA"])
    else
	AC_MSG_WARN(['$PTJAVA_DIR/bin/java' is not
    the same as '$JAVA'.
    Perhaps '$JAVA' is in your path before
    '$PTJAVA_DIR/bin/java'?
    If you have problems later, be sure that you don't have a mismatch
    in JDK versions.])
	JAVA="$PTJAVA_DIR/bin/java"
    fi
else
    AC_MSG_ERROR([
  Cannot find '$PTJAVA_DIR/bin/java'.
  Try --with-java=DIR, or set the PTJAVA_DIR environment variable.
])
fi


#
# Check that we have the javac that corresponds with PTJAVA_DIR in our path
#
AC_MSG_CHECKING([for the java compiler in $PTJAVA_DIR/bin])
if test -f "$PTJAVA_DIR/bin/javac"; then
    AC_MSG_RESULT($PTJAVA_DIR/bin/javac)
    AC_MSG_CHECKING([that you have the right javac in your path.])
    AC_PATH_PROG(JAVAC, javac)
    if test -x "$JAVAC"; then
	AC_MSG_RESULT([$JAVAC])
    else
	AC_MSG_WARN([Failed to find the 'javac' command in your path.
        This is not necessarily a problem, since
	'$PTJAVA_DIR/bin/javac' was found, but if you have problems,
	then you may want to adjust your path])
    fi
    if test "$PTJAVA_DIR/bin/javac" = "$JAVAC"; then
        AC_MSG_RESULT([  You have the right javac in your path,
	 "$PTJAVA_DIR/bin/javac" = "$JAVAC"])
    else
        AC_MSG_WARN(['$PTJAVA_DIR/bin/javac' is not
	 the same as '$JAVAC'.
	 Perhaps '$JAVAC' is in your path
	 before '$PTJAVA_DIR/bin/javac'?
	 If you have problems later, be sure that you don't have a mismatch
	 in JDK versions.])
	JAVAC="$PTJAVA_DIR/bin/javac"
    fi
else
    AC_MSG_ERROR([
  Cannot find '$PTJAVA_DIR/bin/javac'.
  Try --with-java=DIR, or set the PTJAVA_DIR environment variable.])
fi


#--------------------------------------------------------------------
#	Test the Java Compiler (javac)
#--------------------------------------------------------------------
AC_MSG_CHECKING([the Java compiler with a simple compile])
JVERSION=unknown
# We need to run javac in the config directory so that javac from jdk1.1.6
# under NT and cygwin works properly
startdir=`pwd`
cd "$srcdir/config"
if "$JAVAC" confTest.java ; then
    AC_MSG_RESULT(ok)

    AC_MSG_CHECKING([the value of the java.version Property ])
    # Older versions of cygwin might not have env, but 1.1 does
    if env CLASSPATH="$PTII/config" "$JAVA" confTest > /dev/null; then
	# Run it again and get the results
	JVERSION=`CLASSPATH="$PTII/config" "$JAVA" confTest`
	AC_MSG_RESULT($JVERSION)
    else	
	AC_MSG_ERROR(['CLASSPATH="$PTII/config" "$JAVA" confTest failed.
If java fails, then you will not be able to run Ptolemy II.
This could be because your PTII variable is set incorrectly.
Under Cygwin, try setting PTII in the control panel 
(Start->Control Panels->Advanced->Environment Variables)
or it with backslashes:
  PTII=c:\\\\users\\\\yourname\\\\ptII
  export PTII
and then rerun
  ./configure
See $PTII/doc/install.htm for details.'])
   fi
else
   AC_MSG_ERROR(['CLASSPATH="$PTII/config" "$JAVAC" confTest.java failed.
If javac fails, then you will not be able to compile Ptolemy II.
This could be because your PTII variable is set incorrectly.
Under Cygwin, try setting PTII in the control panel 
(Start->Control Panels->Advanced->Environment Variables)
or it with backslashes:
  PTII=c:\\\\users\\\\yourname\\\\ptII
  export PTII
and then rerun
  ./configure
See $PTII/doc/install.htm for details.'])

fi
cd "$startdir"

#--------------------------------------------------------------------
#	We require JDK1.4 or later
#--------------------------------------------------------------------

AC_MSG_CHECKING([ the JDK version])
JDOCSIZE=
UPGRADE_JVM=no
case "$JVERSION" in
	1.1.*) UPGRADE_JVM=yes;;
	1.2.*) UPGRADE_JVM=yes;;
	1.3.*) UPGRADE_JVM=yes;;
	1.4.*)
		# If we call the jdk1.4 javadoc without -breakiterator,
		# then we get lots of warnings
		JDOCBREAKITERATOR=-breakiterator
        ;;
	*) AC_MSG_RESULT([ok, you are running $JVERSION])
	;;
esac

if test "$UPGRADE_JVM" = "yes"; then
		AC_MSG_ERROR([Ptolemy II requires JDK 1.4 or later.
    JDK 1.2.2 has a bug involving compiling inner classes with protected
    methods.
    The RTOS domain uses java.util.Timer, which is present in JDK 1.3
    and later.
    ptolemy/kernel/attributes/URIAttribute.java uses java.net.URI, which
    is present in JDK 1.4 and later. 
    Please upgrade your JDK to 1.4 and try again]) 	
fi


#--------------------------------------------------------------------
#	Figure out which separator to use for CLASSPATH
#	So much for write once, run everywhere.
#       Find NT4 and Windows 2000 (CYGWIN_NT-4.0 and
#       CYGWIN_NT-5.0 respectively)
#--------------------------------------------------------------------
AC_MSG_CHECKING([for the proper CLASSPATH separator])

# If you mess with this, consider changing the jdkClassPathSeparator
# proc in ptII/util/testsuite/jdktools.tcl
case "`uname -s`" in
    CYGWIN_ME-*) CLASSPATHSEPARATOR=";";;
    CYGWIN_NT-*) CLASSPATHSEPARATOR=";";;
    CYGWIN_98-*) CLASSPATHSEPARATOR=";";;
    *) CLASSPATHSEPARATOR=":";;
esac
AC_MSG_RESULT(['$CLASSPATHSEPARATOR'])

#####################################################################
#####################################################################
#       Below here we look for various packages.
#       Not all Ptolemy software products need all packages, so
#       we usually look for a directory that uses the package first
#
#       Please try to keep the packages vaguely alphabetical
#####################################################################
#####################################################################

#--------------------------------------------------------------------
#       The CaffeineMark Kit is a Java benchmark kit
#	that is used by C code generation
#       See http://www-sor.inria.fr/~java/tools/cmkit
#--------------------------------------------------------------------

# Directory that contains the CaffeineMark Java Benchmark kit
# used by C code generation in copernicus/c
CMKIT_DIR='${PTII}/vendors/cm'

# We only need to look for cm if $PTII/ptolemy/copernicus/c exists
if test ! -d "$PTII/ptolemy/copernicus/c"; then
    AC_MSG_RESULT([$PTII/ptolemy/copernicus/c is not present,
	so we need not find the CaffeineMark Kit.])
else
    AC_MSG_CHECKING([for CaffeineMarkEmbeddedApp.class])
    AC_ARG_WITH(jhdl_jar, [  --with-cmkit=DIR       use CaffeineMark from DIR,
                          defaults to \$PTII/vendors/cm],
	CMKIT_DIR=$withval,
	CMKIT_DIR=$PTII/vendors/cm)

    if test -f "$CMKIT_DIR/CaffeineMarkEmbeddedApp.class"; then
	AC_MSG_RESULT([$CMKIT_DIR])
    else
        AC_MSG_WARN([Failed to find $CMKIT_DIR/CaffeineMarkEmbeddedApp.class
    perhaps CaffeineMark is not installed?
    You need not download CaffeineMark unless you plan on using C code
    generation.  The CaffeineMark kit can be downloaded from
    http://www-sor.inria.fr/~java/tools/cmkit/embed.zip])
	# Note that we don't substitute in the ${PTII} here
	CMKIT_DIR='${PTII}/vendors/cm'
    fi
fi

#--------------------------------------------------------------------
#       commapi is the Java serial interface, see
#	http://java.sun.com/products/javacomm/
#	See if there was a command-line option for commapi is
#       If not, check to see if $PTII/vendors/sun/commapi
#--------------------------------------------------------------------

# We only need to look for commapi if $PTII/ptolemy/actor/lib/comm is present
COMMAPI_USER_DIR="$PTII/ptolemy/actor/lib/comm"
COMMAPI_PRESENT=no
# PTLEGO_DIR is set to lego
# $PTII/ptolemy/apps/makefile if the Java Communications API was found
#
PTLEGO_DIR=
# PTCOMM_DIR is set to comm and used in 
# $PTII/ptolemy/actor/lib/makefile if the Java Communications API was found
#
PTCOMM_DIR=
if test ! -d "$COMMAPI_USER_DIR"; then
    AC_MSG_RESULT([$COMMAPI_USER_DIR is not present,
	so we need not find commapi.])
    # Use curly brackets around PTII so that if commapi is not present
    # then ${PTII} will appear in ptinvoke.
    COMMAPI_DIR='${PTII}/vendors/sun/commapi'
else
    AC_MSG_CHECKING([for commapi directory])
    AC_ARG_WITH(COMMAPI, [  --with-commapi=DIR       use Java commapi from DIR,
                          defaults to \$PTII/vendors/sun/commapi],
	COMMAPI_DIR=$withval,
	COMMAPI_DIR=$PTII/vendors/sun/commapi)

    if test -f "$COMMAPI_DIR/comm.jar"; then
	AC_MSG_RESULT([$COMMAPI_DIR])
	# Subdirectories that contains Java Communications API specific code
	PTLEGO_DIR=lego
	PTCOMM_DIR=comm
	COMMAPI_PRESENT=yes
    else
	AC_MSG_RESULT([Did not find
	'$COMMAPI_DIR/comm.jar'])
	AC_MSG_CHECKING([for commapi by compiling a test program ])
        # We need to run javac in the config directory so that javac from
        # jdk1.1.6 under NT and cygwin works properly
	startdir=`pwd`
	cd "$srcdir/config"
	# Don't use 'env $JAVAC . . .' here, it will not work under Cygwin
	if "$JAVAC" javaCommAPI.java ; then
	    AC_MSG_RESULT(ok)
	    PTLEGO_DIR=lego
	    PTCOMM_DIR=comm
	    COMMAPI_PRESENT=yes
	else
	    COMMAPI_DIR='${PTII}/vendors/sun/commapi'
	fi
	cd "$startdir"
    fi

    if test "$COMMAPI_PRESENT" = "no"; then
        AC_MSG_WARN([Perhaps commapi is not installed?
    You need not download commapi unless you plan the actors in actor.lib.comm.
    The commapi can be downloaded from http://java.sun.com/products/javacomm/
    and placed  in \$PTII/vendors/sun/commapi])
    fi
fi

#--------------------------------------------------------------------
#       Garbage Collector (GC)
#       The C code generator can use the Boehm Garbage Collector
#       See http://www.hpl.hp.com/personal/Hans_Boehm/gc/
#--------------------------------------------------------------------
#
# PTGC_LD_DIRECTIVE is set to the values to pass to cc or ld if
# GC_malloc() can be found either in the default compiler location
# or in $PTII/lib.
# PTGC_LD_DIRECTIVE is used in ptolemy/copernicus/c/
PTGC_LD_DIRECTIVE=

if test ! -d "$PTII/ptolemy/copernicus/c"; then
    AC_MSG_RESULT([$PTII/ptolemy/copernicus/c is not present,
        so we need not find the Boehm GC])
else
    AC_PATH_PROG(PTCC, gcc)
    if test "${PTCC:-none}" != "none"; then
        AC_MSG_RESULT([$PTCC])
        PTJNI_DIR=jni
    else    
        AC_MSG_WARN([Failed to find gcc])
        AC_PATH_PROG(PTCC, cc)
        if test "${PTCC:-none}" != "none"; then
            AC_MSG_RESULT([$PTCC])
            PTJNI_DIR=jni
        else    
            AC_MSG_WARN([Failed to find gcc or cc, so we will
    not be able use GC in $PTII/ptolemy/copernicus/c]);
        fi
    fi

    if test "${PTCC:-none}" != "none"; then
       AC_MSG_CHECKING([for Garbage Collector])
       AC_CHECK_LIB(gc, GC_malloc, PT_GC=yes, PT_GC=no)
       if test "$PT_GC" = "yes"; then
           AC_MSG_RESULT(yes)
       else
           if test -f "$PTII/lib/libgc.a"; then
	      # FIXME: what about Windows?
	      PTGC_LD_DIRECTIVE="\"-L$PTII/lib\" -lgc"
	      AC_MSG_RESULT(use $PTGC_LD_DIRECTIVE)
           else 
	      if test -d "$PTII/vendors/gc/gc6.1"; then
                  AC_MSG_WARN([Failed to find GC_malloc(), but 
    \$PTII/vendors/gc/gc6.1 exists.  See the README.txt file in
    that directory if you would like to use the Garbage Collector
    with the C code generator])
              else 
	          AC_MSG_WARN([Failed to find GC_malloc(), and
    \$PTII/vendors/gc/gc6.1 does not exist.  The Boehm Garbage Collector
    can be downloaded from
    http://www.hpl.hp.com/personal/Hans_Boehm/gc/
    if you wish to use it with the C code generator])
	      fi
           fi 
       fi

    fi

fi


#--------------------------------------------------------------------
#       JAI is the Java Advanced Imaging Framework
#	For more information, 
#       see http://java.sun.com/products/java-media/jai/
#       See if there was a command-line option for where JAI is.
#--------------------------------------------------------------------

# PTJAI_DIR is set to jai and used in
# $PTII/ptolemy/actor/makefile if jai was found
PTJAI_DIR=

# We only need to look for JAI if the actor/lib/jai directory is present
JAI_USER_DIR="$PTII/ptolemy/actor/lib/jai"

if test ! -d "$JAI_USER_DIR"; then
    AC_MSG_RESULT([$JAI_USER_DIR is not present,
	so we need not find JAI - The Java Advanced Imaging API.])
else
    AC_MSG_CHECKING([for Java Advanced Imaging API])
    # We need to run javac in the config directory so that javac from jdk1.1.6
    # under NT and cygwin works properly
    startdir=`pwd`
    cd "$srcdir/config"
    # Don't use 'env $JAVAC . . .' here, it will not work under Cygwin
    if "$JAVAC" JAITest.java ; then
       AC_MSG_RESULT(ok)
       PTJAI_DIR=jai
    else
       AC_MSG_WARN(['"$JAVAC" JAITest.java' failed.
    perhaps the Java Advanced Imaging API is not installed?
    You need not download Jai unless you plan on using the video
    actors in $JAI_USER_DIR
    The JAI API can be downloaded from 
    http://java.sun.com/products/java-media/jai/])	
    fi
    cd "$startdir"
fi

#--------------------------------------------------------------------
#       JHDL is a Java Highlevel Description Language, see
#	http://www.jhdl.org
#       See if there was a command-line option for where JHDL is
#       If not, look for $PTII/vendors/jhdl/ptjhdllib/JHDL.jar
#--------------------------------------------------------------------

# PTJHDL_DIR is set to jhdl and used in
# $PTII/ptolemy/actor/makefile if jhdl was found
PTJHDL_DIR=

# Directory that contains the jhdl jar files
JHDL_JAR='${PTII}/vendors/jhdl/ptjhdllib/JHDL.jar'

# We only need to look for jhdl if $PTII/ptolemy/copernicus/jhdl exists
if test ! -d "$PTII/ptolemy/copernicus/jhdl"; then
    AC_MSG_RESULT([$PTII/ptolemy/copernicus/jhdl is not present,
	so we need not find the JHDL - a Java Optimization Framework.])
    JHDL_JAR='${PTII}/vendors/jhdl/ptjhdllib/JHDL.jar'
else
    AC_MSG_CHECKING([for jhdl jar file])
    AC_ARG_WITH(jhdl_jar, [  --with-jhdl-jar=JARFILE       use JHDL from JARFILE,
                          defaults to \$PTII/vendors/jhdl/ptjhdllib/JHDL.jar],
	JHDL_JAR=$withval,
	JHDL_JAR=$PTII/vendors/jhdl/ptjhdllib/JHDL.jar)

    if test -f "$JHDL_JAR"; then
	AC_MSG_RESULT([$JHDL_JAR])
	# Set to jhdl and used in
	# $PTII/ptolemy/apps/makefile if jhdl was found
	PTJHDL_DIR=jhdl
    else
	JHDL_JAR=$PTII/vendors/jhdl/ptjhdllib/JHDL.jar
	if test -f "$JHDL_JAR"; then
	    AC_MSG_RESULT([$JHDL_JAR])
	    # Set to jhdl and used in
	    # $PTII/ptolemy/apps/makefile if jhdl was found
	    PTJHDL_DIR=jhdl
	fi    
    fi	

    if test "$PTJHDL_DIR" = ""; then
        AC_MSG_WARN([Failed to find PTII/vendors/jhdl/ptjhdllib/JHDL.jar
    perhaps JHDL is not installed?
    You need not download JHDL unless you plan on using code generation
    The JHDL SDK can be downloaded from http://www.jhdl.org])
	# Note that we don't substitute in the ${PTII} here
	JHDL_JAR='${PTII}/vendors/jhdl/ptjhdllib/JHDL.jar'
    fi
fi

#--------------------------------------------------------------------
#       JMF is the Java Media Framework
#	For more information, 
#       see http://java.sun.com/products/java-media/jmf
#       See if there was a command-line option for where JMF is.
#--------------------------------------------------------------------

# PTJMF_DIR is set to jmf and used in
# $PTII/ptolemy/actor/lib/makefile if jmf was found
PTJMF_DIR=

# We only need to look for jmf if $PTII/ptolemy/actor/lib exists
JMF_USER_DIR="$PTII/ptolemy/actor/lib/jmf"
if test ! -d "$JMF_USER_DIR"; then
    AC_MSG_RESULT([$JMF_USER_DIR is not present,
	so we need not find the JMF - The Java Media Framework.])
else
    AC_MSG_CHECKING([for Java Media Framework])
    # We need to run javac in the config directory so that javac
    # from jdk1.1.6 under NT and cygwin works properly
    startdir=`pwd`
    cd "$srcdir/config"
    # Don't use 'env $JAVAC . . .' here, it will not work under Cygwin
    if "$JAVAC" JMFTest.java ; then
        AC_MSG_RESULT(ok)
        PTJMF_DIR=jmf
    else
        AC_MSG_WARN(['"$JAVAC" JMFTest.java' failed.
    perhaps the Java Media Framework (JMF) is not installed?
    You need not download the JMF unless you plan on using the video
    actors in $JMF_USER_DIR
    The JMF SDK can be downloaded from 
    http://java.sun.com/products/java-media/jmf])
    fi
    cd "$startdir"
fi


#--------------------------------------------------------------------
#       The Joystick interface is a Java interface to Joysticks, see
#	http://sourceforge.net/projects/javajoystick/
#       See if there was a command-line option for where Joystick interface is
#       If not, look for $PTII/vendors/misc/joystick
#--------------------------------------------------------------------

# PTJOYSTICK_DIR is set to joystick and used in
# $PTII/ptolemy/actor/lib/makefile if Joystick.jar was found
PTJOYSTICK_DIR=

# Joystick Jar file
JOYSTICK_JAR='${PTII}/vendors/misc/joystick/Joystick.jar'

# We only need to look for jhdl if $PTII/ptolemy/actor/lib/joystick exists
if test ! -d "$PTII/ptolemy/actor/lib/joystick"; then
    AC_MSG_RESULT([$PTII/ptolemy/actor/lib/joystick is not present,
	so we need not find the Joystick interface.])
else
    AC_MSG_CHECKING([for joystick jar file])
    AC_ARG_WITH(jhdl_jar, [  --with-jhdl-jar=JARFILE       use JOYSTICK from JARFILE,
                          defaults to \$PTII/vendors/misc/joystick/Joystick.jar],
	JOYSTICK_JAR=$withval,
	JOYSTICK_JAR=$PTII/vendors/misc/joystick/Joystick.jar)

    if test -f "$JOYSTICK_JAR"; then
	AC_MSG_RESULT([$JOYSTICK_JAR])
	# Set to joystick and used in
	# $PTII/ptolemy/actor/lib/joystick if joystick was found
	PTJOYSTICK_DIR=joystick
    fi	

    if test "$PTJOYSTICK_DIR" = ""; then
        AC_MSG_WARN([Failed to find $JOYSTICK_JAR
    perhaps the Joystick is not installed?
    You need not download the Joystick interface unless you
    plan on using a Joystick with Ptolemy II. 
    The Joystick interface can be downloaded from
    http://sourceforge.net/projects/javajoystick/])
	# Note that we don't substitute in the ${PTII} here
	JOYSTICK_JAR='${PTII}/vendors/misc/joystick/Joystick.jar'
    fi
fi

#--------------------------------------------------------------------
#       Jython is an implementation of Python in Java
#	For more information, 
#       see http://www.jython.org
#       See if there was a command-line option for where JMF is.
#--------------------------------------------------------------------

# PTJYTHON_DIR is set to python (FIXME: should be jython) and used in
# $PTII/ptolemy/actor/lib/makefile if Jython was found.
PTJYTHON_DIR=

# Directory that contains the jython jar files
JYTHON_DIR='${PTII}/vendors/jython'

# We only need to look for jython if $PTII/ptolemy/actor/lib/python exists
# FIXME: Note that the package is called jython, but the directory is python
JYTHON_USER_DIR="$PTII/ptolemy/actor/lib/python"
if test ! -d "$JYTHON_USER_DIR"; then
    AC_MSG_RESULT([$JYTHON_USER_DIR is not present,
	so we need not find the Jython, the java implementation of Python.])
else
    AC_MSG_CHECKING([for Jython, the Java implementation of Jython])
    AC_ARG_WITH(jython_dir, [  --with-jython=DIR       use jython.jar from DIR,
                          defaults to \$PTII/vendors/jython],
	JYTHON_DIR=$withval,
	JYTHON_DIR=$PTII/vendors/jython)

    if test -f "$JYTHON_DIR/jython.jar"; then
	AC_MSG_RESULT([$JYTHON_DIR])
	# FIXME: This is ugly, but we set to python instead of jythong
	# $PTII/ptolemy/actor/lib/makefile if jython was found
	PTJYTHON_DIR=python
    fi	

    if test "$PTJYTHON_DIR" = ""; then
        AC_MSG_WARN([Failed to find PTII/vendors/jython/jython.jar
    perhaps Jython is not installed?
    Jython is a java implementation of Python.
    You need not download Jython unless you plan on using the Jython
    actors in ptolemy/actor/lib/python
    The Jython can be downloaded http://www.jython.org/download.html])
	# Note that we don't substitute in the ${PTII} here
	JYTHON_DIR='${PTII}/vendors/jython'
    fi
fi

#--------------------------------------------------------------------
#	"JXTA technology is a set of open protocols that allow any
#	connected device on the network ranging from cell phones and wireless
#	PDAs to PCs and servers to communicate and collaborate in a P2P
#	manner."
#
#	See http://www.jxta.org
#       See if there was a command-line option for where JXTA is
#       If not, look for $PTII/vendors/sun/jxta/jxta.jar
#--------------------------------------------------------------------

# We only need to look for commapi if $PTII/ptolemy/actor/lib/jxta is present
JXTA_USER_DIR="$PTII/ptolemy/actor/lib/jxta"
# PTJXTA_DIR is set to jxta and used in
# $PTII/actor/lib/makefile if jxta was found
PTJXTA_DIR=

# Directory that contains the jxta jar files
JXTA_DIR='${PTII}/vendors/sun/jxta'

if test ! -d "$JXTA_USER_DIR"; then
    AC_MSG_RESULT([$JXTA_USER_DIR is not present,
	so we need not find JXTA])
else
    AC_MSG_CHECKING([for jxta directory that contains jxta.jar])
    AC_ARG_WITH(jxta_dir, [  --with-jxta=DIR       use jxta.jar from DIR,
                          defaults to \$PTII/vendors/sun/jxta],
	JXTA_DIR=$withval,
	JXTA_DIR=$PTII/vendors/sun/jxta)

    if test -f "$JXTA_DIR/jxta.jar"; then
	AC_MSG_RESULT([$JXTA_DIR])
	# Set to jxta and used in
	# $PTII/ptolemy/actor/lib/makefile if jxta was found
	PTJXTA_DIR=jxta
    fi	

    if test "$PTJXTA_DIR" = ""; then
        AC_MSG_WARN([Failed to find PTII/vendors/sun/jxta/jxta.jar
    perhaps JXTA is not installed?
    You need not download JXTA unless you plan on using the peer to peer
    actors in ptolemy/actor/lib/jxta
    The JXTA SDK can be downloaded from http://www.jxta.org])
	# Note that we don't substitute in the ${PTII} here
	JXTA_DIR='${PTII}/vendors/sun/jxta'
    fi
fi


#--------------------------------------------------------------------
#       Lejos is a Java Virtual machine that runs on the Lego Mindstorm
#	For more information, see http://lejos.sourceforge.net
#	See if there was a command-line option for commapi is
#       If not, check to see if $PTII/vendors/lejos/lejos/lejosBeta3
#--------------------------------------------------------------------

# We only need to look for commapi if $PTII/ptolemy/apps/lejos
LEJOS_USER_DIR="$PTII/ptolemy/apps/lejos"
LEJOS_PRESENT=no
# PTLEJOS_DIR is set to lejos
# $PTII/ptolemy/apps/makefile if the Java Communications API was found
PTLEJOS_DIR=
if test ! -d "$LEJOS_USER_DIR"; then
    AC_MSG_RESULT([$LEJOS_USER_DIR is not present,
	so we need not find lejos.])
    # Use curly brackets around PTII so that if lejos is not present
    # then ${PTII} will appear in ptinvoke.
    LEJOS_DIR='${PTII}/vendors/lejos/lejosBeta3'
else
    if test "$COMMAPI_PRESENT" = "no"; then
        AC_MSG_WARN([Lejos requires commapi, which was not found.])
    else 
	AC_MSG_CHECKING([for lejos directory])
	AC_ARG_WITH(LEJOS, [  --with-lejos=DIR       use Java lejos from DIR,
                          defaults to \$PTII/vendors/lejos/lejosBeta3],
		LEJOS_DIR=$withval,
		LEJOS_DIR=$PTII/vendors/lejos/lejosBeta3)

	if test -d "$LEJOS_DIR/classes/josx"; then
	    AC_MSG_RESULT([$LEJOS_DIR])
	    # Subdirectory that contains Java Communications API specific code
	    PTLEJOS_DIR=lejos
	    LEJOS_PRESENT=yes
	else
	    AC_MSG_WARN([Failed to find $LEJOS_DIR/classes/josx/])
	    LEJOS_DIR='${PTII}/vendors/lejos'
	fi
    fi	
    if test "$LEJOS_PRESENT" = "no"; then
	AC_MSG_WARN([Perhaps Lejos is not installed?
	You need not download Lejos unless you plan on use the Lego Mindstorm
	demos in \$PTII/ptolemy/apps/lejos. Lejos can be downloaded from
	http://lejos.sourceforge.net
	and placed  in \$PTII/vendors/lejos/lejosBeta3])
    fi
fi


#--------------------------------------------------------------------
#	See if there was a command-line option for where javacc is;  if
#	not, check to see if $PTII/vendors/sun/JavaCC exists
#       if it is does not, look for javacc on the path.
#--------------------------------------------------------------------

# We only need to look for JavaCC if $PTII/ptolemy/data/expr exists
if test ! -d "$PTII/ptolemy/data/expr"; then
    AC_MSG_RESULT([$PTII/ptolemy/data/expr is not present,
	so we need not find JavaCC.])
    JAVACC_DIR=$PTII/vendors/sun/JavaCC
    JAVACC=javacc
    JJTREE=jjtree
else
    AC_MSG_CHECKING([for JavaCC])
    AC_ARG_WITH(javacc, [  --with-javacc=DIR       use JavaCC.zip from DIR,
                           defaults to \$PTII/vendors/sun/JavaCC],
	JAVACC_DIR=$withval, JAVACC_DIR=$PTII/vendors/sun/JavaCC)

    if test "`uname -s`" = "CYGWIN_NT-4.0" -o \
		"`uname -s`" = "CYGWIN_NT-5.0" ; then
	JJTREE='"$(JAVA)" COM.sun.labs.jjtree.Main'
	JAVACC='"$(JAVA)" COM.sun.labs.javacc.Main'
	AC_MSG_WARN([
Be sure that your CLASSPATH includes JavaCC.zip, which is located in]);
    else
	if test ! -d "$JAVACC_DIR"; then
	    AC_MSG_WARN([Could not find directory
	'${JAVACC_DIR}'
	so we search for the jjtree command.])
	    AC_PATH_PROG(JJTREE, jjtree)
	    if test -x "$JJTREE"; then
		AC_MSG_RESULT([$JJTREE]);
		JAVACCBIN=`dirname $JJTREE`
		JAVACC_DIR=`dirname $JAVACCBIN`
	    else
		AC_MSG_WARN([Failed to find jjtree]);
	    fi
	fi
	if test -d "$JAVACC_DIR"; then
	    AC_MSG_RESULT([$JAVACC_DIR])
	    AC_MSG_CHECKING([for jjtree])
	    if test -x "$JAVACC_DIR/bin/jjtree"; then
		# Note that we don't substitute in the $(JAVACC_DIR) here
		JJTREE='$(JAVACC_DIR)/bin/jjtree'
		AC_MSG_RESULT([$JJTREE])
	    else
		AC_MSG_WARN([Failed to find jjtree in '$JAVACC_DIR/bin']);
	    fi
	    AC_MSG_CHECKING([for javacc])
	    if test -x "$JAVACC_DIR/bin/javacc"; then
		# Note that we don't substitute in the $(JAVACC_DIR) here
		JAVACC='$(JAVACC_DIR)/bin/javacc'
		AC_MSG_RESULT([$JAVACC])
	    else
		AC_MSG_WARN([Failed to find javacc in '$JAVACC_DIR/bin']);
	    fi
	fi
    fi

    if test ! -d "$JAVACC_DIR"; then
        AC_MSG_WARN([Failed to find javacc, perhaps JavaCC is not installed?
    You need not download JavaCC unless you plan on modifying .jjt files
    in ptolemy/data/expr.
    JavaCC is available from	
    http://www.webgain.com/download/javacc/details.html

    Note that the zip file that gets downloaded is actually an installer
    that must be run to install the JavaCC.zip file that contains the classes.

    Configure looks for JavaCC in $PTII/vendors/sun/JavaCC, so either
    install JavaCC in that location or use the --with-javacc= flag
    and then rerun configure'])
	JJTREE=touch
	JAVACC=touch
    fi
fi

#--------------------------------------------------------------------
#	See if there was a command-line option for where Jacl is
#--------------------------------------------------------------------

# We only need to find Jacl if $PTII/util/testsuite
# exists.  If we are shipping ptplot, then this directory might not
# exist
PTJACL_JAR=$PTII/lib/ptjacl.jar
# JTCLSH uses JAVAFLAGS for use with the 
# vergil/test/VergilConfiguration.tcl test
# We set the ptolemy.ptII.dir property for use in the 
# actor.lib.test.auto.FileWriter{1,2}.xml tests
# JTCLSHFLAGS gets set to -Dptolemy.ptII.isRunningNightlyBuild=true
# when we are running the nightlybuild
JTCLSH='["$(JAVA)" $(JAVAFLAGS) "-Dptolemy.ptII.dir=$(PTII)" $(JTCLSHFLAGS) tcl.lang.Shell]'
# PTJACL_DIR is set to ptjacl and used in $PTII/ptolemy/actor/gui/makefile
# if the ptjacl.jar file was found
PTJACL_DIR= 

if test ! -d "$PTII/util/testsuite"; then
    AC_MSG_RESULT([$PTII/util/testsuite is not present,
	so we need not find Jacl.])
else
    AC_MSG_CHECKING([for ptjacl.jar])
    AC_ARG_WITH(ptjacl_jar, [  --with-ptjacl_jar=PTJACL.JAR  ptjacl.jar file,
                           used for running the test scripts],
	PTJACL_JAR=$withval, PTJACL_JAR=$PTII/lib/ptjacl.jar)

    if test -f "$PTJACL_JAR"; then
	AC_MSG_RESULT([$PTJACL_JAR])
	AC_MSG_CHECKING([for how to run jacl with "$JAVA"])
	# This command starts up Jacl
	if echo "set java::jdkVersion; exit" | CLASSPATH="$PTJACL_JAR" "$JAVA" tcl.lang.Shell; then
		AC_MSG_RESULT(ok)
		PTJACL_DIR=ptjacl
	else
		AC_MSG_RESULT([CLASSPATH="$PTJACL_JAR" "$JAVA" tcl.lang.Shell failed])
		AC_MSG_CHECKING([for how to run jacl with "$JAVA" "$PTJACL_FLAG]")
		if echo "set java::jdkVersion; exit" | CLASSPATH="$PTJACL_JAR" "$JAVA" tcl.lang.Shell; then
			AC_MSG_RESULT(ok)
		else
			AC_MSG_RESULT(['CLASSPATH="$PTJACL_JAR" "$JAVA" tcl.lang.Shell' failed,
	use 'CLASSPATH="$PTJACL_JAR" "$JAVA" tcl.lang.Shell'
	instead. ptjacl is used by the test suite, so you may be able to
	ignore this error.])
		fi
		JTCLSH='["$(JAVA)" $(JAVAFLAGS) "-Dptolemy.ptII.dir=$(PTII)" $(JTCLFLAGS tcl.lang.Shell]'
	fi
    else
	AC_MSG_WARN([The ptjacl.jar file was not found at '$PTJACL_JAR'
    ptjacl.jar is only necessary if you plan on running the test suite.
    You can download ptjacl.jar from
    http://ptolemy.eecs.berkeley.edu/~cxh/java/jacl/ptjacl.html])
    fi
fi

#--------------------------------------------------------------------
#	Test for javax.media.j3d (Java 3D)
#--------------------------------------------------------------------
# PTJAVA3D_DIR is set to gr and used in
# $PTII/ptolemy/actor/lib/makefile if Java 3D was found
PTJAVA3D_DIR=
# We only need to look for Java3D if the gr domain is present
JAVA3D_USER_DIR="$PTII/ptolemy/domains/gr"

if test ! -d "$JAVA3D_USER_DIR"; then
    AC_MSG_RESULT([$JAVA3D_USER_DIR is not present,
	so we need not find Java 3D.])
else
    AC_MSG_CHECKING([for Java 3D])
    # We need to run javac in the config directory so that javac from jdk1.1.6
    # under NT and cygwin works properly
    startdir=`pwd`
    cd "$srcdir/config"
    # Don't use 'env $JAVAC . . .' here, it will not work under Cygwin
    if "$JAVAC" java3dTest.java ; then
       AC_MSG_RESULT(ok)
       PTJAVA3D_DIR=gr
    else
       AC_MSG_WARN(['"$JAVAC" java3dTest.java' failed.
	http://java.sun.com/products/java-media/3D/download.html
	Java 3D is only needed if you want to build in
	$JAVA3D_USER_DIR,
	otherwise the build will proceed fine with out Java 3D.])
    fi
    cd "$startdir"
fi


#--------------------------------------------------------------------
#       Jini is connection technology from Sun, see http://www.sun.com/jini/
#       See if there was a command-line option for where Jini is
#       If not, look in $PTII/vendors/sun/jini/jini1_0_1
#--------------------------------------------------------------------

# We only need to look for jini if the CarTracking demo is present
JINI_USER_DIR="$PTII/ptolemy/domains/ct/demo/jspaces/CarTracking"
JINI_VERSION=jini1_0_1
JINI_PRESENT=no
# PTJSPACES_DIR is set to jspaces and used in
# $PTII/ptolemy/actor/lib/makefile if jini was found
PTJSPACES_DIR=
if test ! -d "$JINI_USER_DIR"; then
    AC_MSG_RESULT([$JINI_USER_DIR is not present,
	so we need not find Jini.])
    # We don't use JINI_VERSION here so that we don't expand PTII
    # in the makefile
    JINI_DIR='\$PTII/vendors/sun/jini/jini1_0_1'
else
    AC_MSG_CHECKING([for jini directory])
    AC_ARG_WITH(jini, [  --with-jini=DIR       use Jini from DIR,
                          defaults to \$PTII/vendors/sun/$JINI_VERSION],
	JINI_DIR=$withval,
	JINI_DIR=$PTII/vendors/sun/jini/$JINI_VERSION)

    if test -d "$JINI_DIR"; then
	AC_MSG_RESULT([$JINI_DIR])
	JINI_PRESENT=yes
	# Subdirectory that contains Java spaces specific code
	PTJSPACES_DIR=jspaces
    else
	JINI_DIR='$PTII'/vendors/sun/jini/$JINI_VERSION
    fi
    if test "$JINI_PRESENT" = "no"; then
        AC_MSG_WARN([Failed to find $JINI_DIR/lib/jini-core.jar
    Perhaps Jini is not installed?
    You need not download Jini unless you plan on use Jini and JavaSpaces
    Jini can be downloaded from http://java.sun.com/jini and placed
    in \$PTII/vendors/sun/jini/$JINI_VERSION])
    fi

fi



#--------------------------------------------------------------------
#       Java Native Interface (JNI)
#       Ptolemy II can interface to native code using JNI
#--------------------------------------------------------------------
# PTJNI_DIR is set to jni and used in
# $PTII/makefile if gcc or cc is found.
PTJNI_DIR=

if test ! -d "$PTII/jni"; then
    AC_MSG_RESULT([$PTII/jni is not present,
        so we need not find gcc or cc])
else
    AC_PATH_PROG(PTCC, gcc)
    if test "${PTCC:-none}" != "none"; then
        AC_MSG_RESULT([$PTCC])
        PTJNI_DIR=jni
    else    
        AC_MSG_WARN([Failed to find gcc])
        AC_PATH_PROG(PTCC, cc)
        if test "${PTCC:-none}" != "none"; then
            AC_MSG_RESULT([$PTCC])
            PTJNI_DIR=jni
        else    
            AC_MSG_WARN([Failed to find gcc or cc, so we will
    not be able to compile the JNI interface in $PTII/jni]);
        fi
    fi

    AC_MSG_CHECKING([for the proper JNI architecture])
    case "`uname -s`" in
        CYGWIN_ME-*) PTJNI_ARCHITECTURE=win32;;
	CYGWIN_NT-*) PTJNI_ARCHITECTURE=win32;;
	CYGWIN_98-*) PTJNI_ARCHITECTURE=win32;;
	Linux) PTJNI_ARCHITECTURE=linux;;
	SunOS) PTJNI_ARCHITECTURE=solaris;;
	*) PTJNI_ARCHITECTURE=unknown;;
    esac

    AC_MSG_RESULT(['$PTJNI_ARCHITECTURE'])

    AC_MSG_CHECKING([for the proper JNI architecture include directory])
    if test ! -d "$PTJAVA_DIR/include/$PTJNI_ARCHITECTURE"; then 
	AC_MSG_WARN(["$PTJAVA_DIR/include/$PTJNI_ARCHITECTURE" was not found.
    As a result, compilation of JNI actors will fail.])
    else 
	AC_MSG_RESULT([$PTJAVA_DIR/include/$PTJNI_ARCHITECTURE])
    fi

    AC_MSG_CHECKING([for the proper shared library prefix])
    case "`uname -s`" in
        CYGWIN_ME-*) PTJNI_SHAREDLIBRARY_PREFIX=;;
	CYGWIN_NT-*) PTJNI_SHAREDLIBRARY_PREFIX=;;
	CYGWIN_98-*) PTJNI_SHAREDLIBRARY_PREFIX=;;
	SunOS)	 PTJNI_SHAREDLIBRARY_PREFIX=lib;;
	*) PTJNI_SHAREDLIBRARY_PREFIX=lib;;
    esac
    AC_MSG_RESULT(['$PTJNI_SHAREDLIBRARY_PREFIX'])

    AC_MSG_CHECKING([for the proper shared library suffix])
    case "`uname -s`" in
        CYGWIN_ME-*) PTJNI_SHAREDLIBRARY_SUFFIX=dll;;
	CYGWIN_NT-*) PTJNI_SHAREDLIBRARY_SUFFIX=dll;;
	CYGWIN_98-*) PTJNI_SHAREDLIBRARY_SUFFIX=dll;;
	SunOS)	 PTJNI_SHAREDLIBRARY_SUFFIX=so;;
	*) PTJNI_SHAREDLIBRARY_SUFFIX=unknown;;
    esac
    AC_MSG_RESULT(['$PTJNI_SHAREDLIBRARY_SUFFIX'])

    AC_MSG_CHECKING([for the proper shared library flag])
    case "`uname -s`" in
        CYGWIN_ME-*) PTJNI_SHAREDLIBRARY_CFLAG=-Wl,--add-stdcall-alias;;
	CYGWIN_NT-*) PTJNI_SHAREDLIBRARY_CFLAG=-Wl,--add-stdcall-alias;;
	CYGWIN_98-*) PTJNI_SHAREDLIBRARY_CFLAG=-Wl,--add-stdcall-alias;;
	SunOS)	 PTJNI_SHAREDLIBRARY_CFLAG=-fPIC;;
	*) PTJNI_SHAREDLIBRARY_CFLAG=;;
    esac
    AC_MSG_RESULT(['$PTJNI_SHAREDLIBRARY_CFLAG'])
fi

#--------------------------------------------------------------------
#      	Jode is a java decompiler.  It is useful for looking at the contents
#       of class files.  It can be downloaded from 
#	http://jode.sourceforge.net/download.php
#	Jode is full GPL, so we can't distribute it without making Ptolemy
#	GPL'd as well.
#--------------------------------------------------------------------

# PTJODE_DIR is set to jode and used in
# $PTII/ptolemy/apps/makefile if jode was found
#PTJODE_DIR=

# Note that we don't substitute in the ${PTII} or $(JODE_DIR) here
# Defaults for ptII.mk and bin/ptinvoke.in
# Use {} here instead of () because bin/ptinvoke uses JODE_DIR and JODE_CLASSES
# and under /bin/sh $(FOO) does not work, but ${FOO} does
JODE_DIR='${PTII}/vendors/jode/1.1.1'
JODE_CLASSES='${JODE_DIR}/jode.jar'

# We only need to look for jode if $PTII/ptolemy/apps/jode exists
if test ! -d "$PTII/vendors/jode"; then
    AC_MSG_RESULT([$PTII/vendors/jode is not present,
	so we need not find Jode, which is a java disassembler.])
else
    AC_MSG_CHECKING([for jode directory])
    AC_ARG_WITH(jode, [  --with-jode=DIR       use JODE from DIR,
                          defaults to \$PTII/vendors/jode/1.1.1],
	JODE_DIR=$withval,
	JODE_DIR=$PTII/vendors/jode/1.1.1)

    if test -d "$JODE_DIR"; then
	AC_MSG_RESULT([$JODE_DIR])
        AC_MSG_CHECKING([for \$JODE_DIR/jode.jar])
	if test -f "$JODE_DIR/jode.jar"; then
	    AC_MSG_RESULT([$JODE_DIR/jode.jar])
	    JODE_CLASSES=$JODE_DIR/jode.jar
	    AC_MSG_RESULT([$JODE_CLASSES])
        else
	    JODE_CLASSES=no
        fi
    fi
    	
    if test "$JODE_CLASSES" = "no"; then
        AC_MSG_WARN([Failed to find jode/jode.jar
    perhaps Jode is not installed?
    Jode is used to disassemble Java .class files and is only necessary
    if you plan on debugging the byte code based code generator.
    Jode can be downloaded from http://jode.sourceforge.net/download.php])
	# Note that we don't substitute in the ${PTII} or $(JODE_DIR) here
	JODE_DIR='${PTII}/vendors/jode/1.1.1'
   	JODE_CLASSES='${JODE_DIR}/jode.jar'
    #else
	# Set to jode and used in
	# $PTII/ptolemy/apps/makefile if jode was found
	#PTJODE_DIR=jode
    fi
fi


#--------------------------------------------------------------------
#       KVM is the JDK for PalmOS
#	See if there was a command-line option for where
#       j2me_cldc/bin/api/classes is;  if not,
#       check to see if $PTII/vendors/sun/j2me_cldc exists
#--------------------------------------------------------------------

# PTKVM_DIR is set to kvm and used in
# $PTII/ptolemy/makefile if kvm was found
PTKVM_DIR=
#
# We only need to look for kvm if $PTII/ptolemy/apps/kvm exists
if test ! -d "$PTII/ptolemy/apps/kvm"; then
    AC_MSG_RESULT([$PTII/ptolemy/apps/kvm is not present,
	so we need not find the PalmOS kvm.])
    KVM_DIR='${PTII}/vendors/sun/j2me_cldc'
    # Unfortunately, j2me_cldc does not ship with a jar of zip file
    # It needs to be built
    KVM_CLASSES='$(KVM_DIR)/bin/api/classes'
else
    AC_MSG_CHECKING([for kvm directory])
    AC_ARG_WITH(kvm, [  --with-kvm=DIR       use PalmOS KVM from DIR,
                          defaults to \$PTII/vendors/sun/j2me_cldc],
	KVM_DIR=$withval,
	KVM_DIR=$PTII/vendors/sun/j2me_cldc)

    if test -d "$KVM_DIR"; then
	AC_MSG_RESULT([$KVM_DIR])
        AC_MSG_CHECKING([for \$KVM_DIR/bin/api/classes])
	if test -d "$KVM_DIR/bin/api/classes"; then
	    KVM_CLASSES='$(KVM_DIR)/bin/api/classes'
	    AC_MSG_RESULT([$KVM_CLASSES])
        else
	    KVM_CLASSES=no
        fi
    else
	AC_MSG_RESULT([Not found in $KVM_DIR])
	AC_MSG_CHECKING([for kvm directory in /j2me_cldc])
	# Likely place for kvm under windows
	KVM_DIR=/j2me_cldc
        if test -d "$KVM_DIR"; then
	    AC_MSG_RESULT([$KVM_DIR])
            AC_MSG_CHECKING([for \$KVM_DIR/bin/api/classes])
	    if test -d "$KVM_DIR/bin/api/classes"; then
	        KVM_CLASSES='$(KVM_DIR)/bin/api/classes'
	        AC_MSG_RESULT([$KVM_CLASSES])
            else
	        KVM_CLASSES=no
            fi
        else
		KVM_CLASSES=no
        fi

    fi
    if test "$KVM_CLASSES" = "no"; then
        AC_MSG_WARN([Failed to find j2me_cldc/bin/api/classes,
    perhaps Kvm is not installed?
    You need not download Kvm unless you plan on building applications
    for the Palm Pilot or Handspring Visor.
    Kvm can be downloaded from http://java.sun.com/products/cldc])
	# Note that we don't substitute in the ${PTII} or $(KVM_DIR) here
	KVM_DIR='${PTII}/vendors/sun/kvm'
   	KVM_CLASSES='$(KVM_DIR)/bin/api/classes'
    else
	# Set to kvm and used in
	# $PTII/ptolemy/makefile if kvm was found
	PTKVM_DIR=kvm
    fi
fi

#--------------------------------------------------------------------
#       MATLAB Interface
#       check to see if matlab is in the user's path
#--------------------------------------------------------------------
# PTMATLAB_DIR is set to matlab and used in
# $PTII/ptolemy/makefile if matlab, extern/include/libeng.def and gcc are found
PTMATLAB_DIR=

# Set PTWINDOWS to true if we are running under Windows
PTWINDOWS=no
case "`uname -s`" in
CYGWIN*)
	PTWINDOWS=yes
	;;
esac

if test "$PTWINDOWS" = "no"; then
    AC_MSG_WARN([The Matlab interface only works under Windows.
    You are running `uname -s`.])
else
    # We only need to look for matlab if $PTII/ptolemy/matlab exists
    if test ! -d "$PTII/ptolemy/matlab"; then
	AC_MSG_RESULT([$PTII/ptolemy/matlab is not present,
	    so we need not find matlab, gcc and dlltool.])
	MATLAB_DIR=/matlab
	PTCC=gcc
	PTDLLTOOL=dlltool
    else
	AC_PATH_PROG(MATLAB, matlab)
	if test "${MATLAB:-none}" = "none"; then
	    AC_MSG_WARN([Failed to find matlab executable in the path.
    Perhaps Matlab is not installed?
    If Matlab is not present, then the Ptolemy II/Matlab interface in
    \$PTII/ptolemy/matlab will not be usable.]);
	else 
	    startdir=`pwd`
	    cd "$srcdir/config"
	    if "$JAVAC" MatlabRootDirectory.java ; then
		AC_MSG_RESULT(ok)
		AC_MSG_CHECKING([the value of the Matlab root directory ])
		if env CLASSPATH="$PTII/config" "$JAVA" MatlabRootDirectory "$MATLAB"> /dev/null; then
		    # Run it again and get the results
		    MATLAB_DIR=`CLASSPATH="$PTII/config" "$JAVA" MatlabRootDirectory "$MATLAB"`
		    AC_MSG_RESULT('$MATLAB_DIR')
		else	
		    AC_MSG_WARN(['CLASSPATH="$PTII/config" $JAVA MatlabRootDirectory "$MATLAB"' failed.
    We will not be able to compile the Matlab interface in ptolemy/matlab]);
		fi
	    else
		AC_MSG_WARN(['CLASSPATH="$PTII/config" $JAVAC SystemJar.java' failed.
    We will not be able to compile the Matlab interface in ptolemy/matlab]);
	    fi
	    cd "$startdir"

	    if test ! -d "$MATLAB_DIR"; then
		    AC_MSG_WARN([Failed to find '${MATLAB_DIR}'
	    If Matlab is not present, then the Ptolemy II/Matlab interface in
    \$PTII/ptolemy/matlab will not be usable.]);
	    else
		if test -f "${MATLAB_DIR}/extern/include/libeng.def"; then
		    AC_MSG_RESULT([$MATLAB_DIR])
		    AC_PATH_PROG(PTCC, gcc)
		    if test "${PTCC:-none}" != "none"; then
			AC_MSG_RESULT([$PTCC])
			PTMATLAB_DIR=matlab
		    else    
			AC_MSG_WARN([Failed to find gcc])
			AC_PATH_PROG(PTCC, cc)
			if test "${PTCC:-none}" != "none"; then
			    AC_MSG_RESULT([$PTCC])
			    PTMATLAB_DIR=matlab
			else	
			    AC_MSG_WARN([Failed to find gcc or cc, so we will
    not be able to compile the Matlab interface in ptolemy/matlab]);
			fi
		    fi
		    AC_PATH_PROG(PTDLLTOOL, dlltool)
		    if test "${PTDLLTOOL:-none}" = "none"; then
			PTMATLAB_DIR=
			AC_MSG_WARN([Failed to find dlltool, so we will
    not be able to compile the Matlab interface in ptolemy/matlab]);
		    fi
		else 
		    AC_MSG_WARN([Failed to find matlab libeng.def file at
    ${MATLAB_DIR}/extern/include/libeng.def. 
    Perhaps Matlab is not installed?]);
		fi
	    fi
	fi
    fi	
fi


#--------------------------------------------------------------------
#       Soot is a Java Optimization Framework, see
#	http://www.sable.mcgill.ca/soot/
#       See if there was a command-line option for where Soot is
#       If not, look in $PTII/vendors/sun/soot
#--------------------------------------------------------------------

# PTCOPERNICUS_DIR is set to copernicus and used in
# $PTII/ptolemy/makefile if soot was found
PTCOPERNICUS_DIR=

# Directory that contains the soot jar files
SOOT_DIR='${PTII}/lib'

# Soot needs to find java.lang.Object	
# Use {} here instead of () because bin/ptinvoke uses JAVA_SYSTEM_JAR
# and under /bin/sh $(FOO) does not work, but ${FOO} does
JAVA_SYSTEM_JAR='${PTJAVA_DIR}jre/lib/rt.jar'

# We don't bother overriding this below so that something close
# to the right default is in ptII.mk and the user can just change
# SOOT_DIR or JAVA_SYSTEM_JAR	
# Use {} here instead of () because bin/ptinvoke uses SOOT_CLASSES
SOOT_CLASSES='${SOOT_DIR}/sootclasses.jar${CLASSPATHSEPARATOR}${SOOT_DIR}/jasminclasses.jar${CLASSPATHSEPARATOR}${JAVA_SYSTEM_JAR}'

# We only need to look for soot if $PTII/ptolemy/copernicus exists
if test ! -d "$PTII/ptolemy/copernicus"; then
    AC_MSG_RESULT([$PTII/ptolemy/copernicus is not present,
	so we need not find the Soot - a Java Optimization Framework.])
    SOOT_DIR='${PTII}/lib'
else
    AC_MSG_CHECKING([for soot directory])
    AC_ARG_WITH(soot, [  --with-soot=DIR       use SOOT from DIR,
                          defaults to \$PTII/lib],
	SOOT_DIR=$withval,
	SOOT_DIR=$PTII/lib)

    if test -d "$SOOT_DIR"; then
	AC_MSG_RESULT([$SOOT_DIR])
        AC_MSG_CHECKING([for \$SOOT_DIR/sootclasses.jar])
	if test -f "$SOOT_DIR/sootclasses.jar"; then
	    AC_MSG_RESULT([$SOOT_DIR/sootclasses.jar])
	    AC_MSG_CHECKING([for \$SOOT_DIR/jasminclasses.jar])
  	    if test -f "$SOOT_DIR/jasminclasses.jar"; then
                AC_MSG_RESULT([$SOOT_DIR/jasminclasses.jar])
            fi
	    AC_MSG_RESULT([$SOOT_CLASSES])
        else
	    SOOT_CLASSES_FOUND=no
        fi
    # else
    # We could look in other places . . .
    fi
    	
    if test "$SOOT_CLASSES_FOUND" = "no"; then
        AC_MSG_WARN([Failed to find soot/sootclasses.jar
    perhaps Soot is not installed?
    You need not download Soot unless you plan on using code generation
    The Soot SDK can be downloaded from http://www.sable.mcgill.ca/soot/])
	# Note that we don't substitute in the ${PTII} or $(SOOT_DIR) here
	SOOT_DIR='${PTII}/lib'
    else
	# Set to copernicus and used in
	# $PTII/ptolemy/makefile if soot was found
	PTCOPERNICUS_DIR=copernicus
    fi

    AC_MSG_CHECKING([for rt.jar by compiling config/SystemJar.java])
    AC_ARG_WITH(javasystemjar, [  --with-javasystemjar=DIR       use rt.lib from DIR,
                          defaults to JRE java.home property],
	JAVA_SYSTEM_JAR=$withval,
	JAVA_SYSTEM_JAR='$(PTJAVA_DIR)/jre/lib/rt.jar')

    startdir=`pwd`
    cd "$srcdir/config"
    if "$JAVAC" SystemJar.java ; then
	AC_MSG_RESULT(ok)
	AC_MSG_CHECKING([the value of the java.home property ])
	if env CLASSPATH="$PTII/config" "$JAVA" SystemJar > /dev/null; then
	    # Run it again and get the results
	    JAVA_SYSTEM_JAR=`CLASSPATH="$PTII/config" "$JAVA" SystemJar`
   	    AC_MSG_RESULT('$JAVA_SYSTEM_JAR')
	else	
	    AC_MSG_ERROR(['CLASSPATH="$PTII/config" "$JAVA" SystemJar failed.
    Classes that use Soot will compile, but will fail to run.'])
        fi
    else
	AC_MSG_ERROR(['cd "$srcdir/config"; "$JAVAC" SystemJar.java failed.
    Classes that use Soot will compile, but will fail to run.'])
    fi
    cd "$startdir"
fi


#--------------------------------------------------------------------
#       TINI is the JDK for Dallas Tini board, see
#	www.ibutton.com
#	See if there was a command-line option for where
#       tinisk is;  if not,
#       check to see if $PTII/vendors/dalsemi/tini/bin/tiniclasses.jar exists
#--------------------------------------------------------------------

# PTTINI_DIR is set to tini and used in
# $PTII/ptolemy/apps/makefile if tini was found
PTTINI_DIR=
#
# We only need to look for tini if $PTII/ptolemy/apps/tini exists
if test ! -d "$PTII/ptolemy/apps/tini"; then
    AC_MSG_RESULT([$PTII/ptolemy/apps/tini is not present,
	so we need not find the Dallas Semiconductor tini.])
    TINI_DIR='${PTII}/vendors/dalsemi/tini'
    TINI_CLASSES='${TINI_DIR}/bin/tini.jar'
else
    AC_MSG_CHECKING([for tini directory])
    AC_ARG_WITH(tini, [  --with-tini=DIR       use TINI from DIR,
                          defaults to \$PTII/vendors/dalsemi/tini],
	TINI_DIR=$withval,
	TINI_DIR=$PTII/vendors/dalsemi/tini)

    if test -d "$TINI_DIR"; then
    	AC_MSG_RESULT([$TINI_DIR])
      	AC_MSG_CHECKING([for \$TINI_DIR/bin/tini.jar])
	if test -f "$TINI_DIR/bin/tini.jar"; then
	   AC_MSG_RESULT([$TINI_DIR/bin/tini.jar])
	   TINI_CLASSES='${TINI_DIR}/bin/tini.jar'
	else
	   TINI_CLASSES=no
        fi
	AC_MSG_RESULT([$TINI_CLASSES])
    fi
    if test "$TINI_CLASSES" = "no"; then
        AC_MSG_WARN([Failed to find tini/bin/tiniclasses.jar
    perhaps Tini is not installed?
    You need not download Tini unless you plan on building applications
    for the Dallas Semiconductor Tini board.
    The Tini SDK can be downloaded from http://www.ibutton.com])
	# Note that we don't substitute in the ${PTII} or $(TINI_DIR) here
	TINI_DIR='${PTII}/vendors/dalsemi/tini'
   	TINI_CLASSES='${TINI_DIR}/bin/tini.jar'
    else
	# Set to tini and used in
	# $PTII/ptolemy/apps/makefile if tini was found
	PTTINI_DIR=tini
    fi
fi

#--------------------------------------------------------------------
#       GiottoSDK is an embedded implementation of the Giotto language
#	www.eecs.berkeley.edu/~fresco/giotto
#
#       check to see if $PTII/vendors/giotto/giotto.jar exists
#--------------------------------------------------------------------

# PTGIOTTO_DIR is set to Giotto and used in
# $PTII/ptolemy/apps/makefile if tini was found
PTGIOTTO_DIR=
#
if test ! -d "$PTII/ptolemy/domains/giotto"; then
    AC_MSG_RESULT([$PTII/ptolemy/domains/giotto is not present,
	so we need not find the Giotto SDK.])
    GIOTTO_DIR='${PTII}/vendors/giotto'
    GIOTTO_CLASSES='${GIOTTO_DIR}/giotto.jar'
else
    AC_MSG_CHECKING([for giotto directory])
    AC_ARG_WITH(tini, [  --with-giotto=DIR       use GiottoSDF from DIR,
                          defaults to \$PTII/vendors/giotto],
	GIOTTO_DIR=$withval,
	GIOTTO_DIR=$PTII/vendors/giotto)

    if test -d "$GIOTTO_DIR"; then
    	AC_MSG_RESULT([$GIOTTO_DIR])
      	AC_MSG_CHECKING([for \$GIOTTO_DIR/giotto.jar])
	if test -f "$GIOTTO_DIR/giotto.jar"; then
	   AC_MSG_RESULT([$GIOTTO_DIR/giotto.jar])
	   GIOTTO_CLASSES='${GIOTTO_DIR}/giotto.jar'
	else
	   GIOTTO_CLASSES=no
        fi
	AC_MSG_RESULT([$GIOTTO_CLASSES])
    fi
    if test "$GIOTTO_CLASSES" = "no"; then
        AC_MSG_WARN([Failed to find giotto/giotto.jar
    perhaps Giotto is not installed?
    You need not download Giotto unless you plan on generating code for 
    Giotto models.
    The Giotto SDK can be downloaded from http://www.eecs.berkeley.edu/~fresco/giotto])
	# Note that we don't substitute in the ${PTII} or $(GIOTTO_DIR) here
	GIOTTO_DIR='${PTII}/vendors/giotto'
   	GIOTTO_CLASSES='${GIOTTO_DIR}/giotto.jar'
    else
	# Set to giotto and used in
	# $PTII/ptolemy/copernicus/java/ if giotto was found
	PTGIOTTO_DIR=giotto
    fi
fi

#--------------------------------------------------------------------
#       WABA is the JDK for PalmOS
#	See if there was a command-line option for where
#       wabask is;  if not,
#       check to see if $PTII/vendors/misc/waba/wabasdk exists
#--------------------------------------------------------------------

# PTWABA_DIR is set to waba and used in
# $PTII/ptolemy/makefile if waba was found
PTWABA_DIR=
#
# We only need to look for waba if $PTII/ptolemy/apps/kvm exists
if test ! -d "$PTII/ptolemy/apps/kvm"; then
    AC_MSG_RESULT([$PTII/ptolemy/apps/kvm is not present,
	so we need not find the PalmOS waba.])
    WABA_DIR='${PTII}/vendors/misc/waba/wabasdk'
    # Unfortunately, j2me_cldc does not ship with a jar of zip file
    # It needs to be built
    WABA_CLASSES='$(WABA_DIR)/classes'
else
    AC_MSG_CHECKING([for waba directory])
    AC_ARG_WITH(waba, [  --with-waba=DIR       use PalmOS WABA from DIR,
                          defaults to \$PTII/vendors/misc/waba/wabasdk],
	WABA_DIR=$withval,
	WABA_DIR=$PTII/vendors/misc/waba/wabasdk)

    if test -d "$WABA_DIR"; then
	AC_MSG_RESULT([$WABA_DIR])
        AC_MSG_CHECKING([for \$WABA_DIR/classes])
	if test -d "$WABA_DIR/classes"; then
	    WABA_CLASSES='$(WABA_DIR)/classes'
	    AC_MSG_RESULT([$WABA_CLASSES])
        else
	    WABA_CLASSES=no
        fi
    else
	AC_MSG_RESULT([Not found in $WABA_DIR])
	AC_MSG_CHECKING([for waba directory in /waba])
	# Likely place for waba under windows
	WABA_DIR=/waba/wabasdk
        if test -d "$WABA_DIR"; then
	    AC_MSG_RESULT([$WABA_DIR])
            AC_MSG_CHECKING([for \$WABA_DIR/classes])
	    if test -d "$WABA_DIR/classes"; then
	        WABA_CLASSES='$(WABA_DIR)/classes'
	        AC_MSG_RESULT([$WABA_CLASSES])
            else
	        WABA_CLASSES=no
            fi
        else
		WABA_CLASSES=no
        fi

    fi
    if test "$WABA_CLASSES" = "no"; then
        AC_MSG_WARN([Failed to find waba/wabasdk
    perhaps Waba is not installed?
    You need not download Waba unless you plan on building applications
    for the Palm Pilot or Handspring Visor.
    Waba can be downloaded from http://www.wabasoft.com])
	# Note that we don't substitute in the ${PTII} or $(WABA_DIR) here
	WABA_DIR='${PTII}/vendors/misc/waba/wabasdk'
   	WABA_CLASSES='$(WABA_DIR)/classes'
    else
	# Set to waba and used in
	# $PTII/ptolemy/makefile if waba was found
	PTWABA_DIR=waba
    fi
fi


# Keep these substitutions alphabetical, with a description

# Separator in CLASSPATH,  For Unix, this should be :, for Cygwin use ;
AC_SUBST(CLASSPATHSEPARATOR)

# Directory that contains the CaffeineMark Java Benchmark kit
# used by C code generation in copernicus/c
AC_SUBST(CMKIT_DIR)

# Directory that contains the Java Serial Comm API
AC_SUBST(COMMAPI_DIR)

# If Commapi is present, then set to yes, otherwise set to no
AC_SUBST(COMMAPI_PRESENT)

# Location of rt.jar, usually $(PTJAVA_DIR)/jre/lib/rt.jar
# However, we have to be careful of backslashes and /cygwin
# Soot uses this variable to find java.lang.Object
AC_SUBST(JAVA_SYSTEM_JAR)

# javacc binary
AC_SUBST(JAVACC)

# Directory that contains JavaCC, which is used in ptolemy/data/expr
AC_SUBST(JAVACC_DIR)

# If we are running under JDK1.4, then set JDOCBREAKITERATOR = -breakiterator
AC_SUBST(JDOCBREAKITERATOR)

# Jar file that contains JDHL, see http://www.jhdl.org
AC_SUBST(JHDL_JAR)

# Jini home directory, see http://www.sun.com/jini/
AC_SUBST(JINI_DIR)

# If Jini is present, the set to yes, otherwise, set to no
AC_SUBST(JINI_PRESENT)

# Jar file that contains Joystick interface,
# see http://sourceforge.net/projects/javajoystick/
AC_SUBST(JOYSTICK_JAR)

# jtclsh script, used for test suites
AC_SUBST(JTCLSH)

# jtree binary
AC_SUBST(JTREE)

# JDK Version determined by running confTest.class and getting java.version
AC_SUBST(JVERSION)

# jode.jar used in bin/ptinvoke to start up Jode, the .class disassembler
AC_SUBST(JODE_CLASSES)

# Jython home directory that contains jython.jar, see http://www.jython.org
AC_SUBST(JYTHON_DIR)

# JXTA home directory that contains jxta.jar, see http://www.jxta.org
AC_SUBST(JXTA_DIR)

# kvm/tools/classes.jar file used by the PalmOS KVM
AC_SUBST(KVM_CLASSES)

# Directory that contains the kvm used by PalmOS
AC_SUBST(KVM_DIR)

# Set to the location of the lejos installation, usually in
# $PTII/vendors/lejos
AC_SUBST(LEJOS_DIR)

# Set to the location of the matlab installation, e.g. /matlabr11
# This directory usually contains bin,...
AC_SUBST(MATLAB_DIR)

# Set to copernicus and used in $PTII/ptolemy/makefile if Soot was found
AC_SUBST(PTCOPERNICUS_DIR)

# Set to gcc if gcc was found and used in $PTII/ptolemy/matlab/makefile.
AC_SUBST(PTCC)

# PTCOMM_DIR is set to comm and used in 
# $PTII/ptolemy/actor/lib/makefile if the Java Communications API was found
#
AC_SUBST(PTCOMM_DIR)

# Set to dlltool if dlltool was found and used in
# $PTII/ptolemy/matlab/makefile.
AC_SUBST(PTDLLTOOL)

# PTGC_LD_DIRECTIVE is set to the values to pass to cc or ld if
# GC_malloc() can be found either in the default compiler location
# or in $PTII/lib.
# PTGC_LD_DIRECTIVE is used in ptolemy/copernicus/c/
AC_SUBST(PTGC_LD_DIRECTIVE)

# Location of the the PTII directory
# $PTII/ptolemy/plot/ptplot.jnlp.in reads this
AC_SUBST(PTII)

# Set to ptjacl and used in
# $PTII/ptolemy/actor/gui/makefile if ptjacl.jar was found
AC_SUBST(PTJACL_DIR)

# ptjacl.jar file, used to run the test suites
AC_SUBST(PTJACL_JAR)

# Set to jai and used in 
# $PTII/ptolemy/actor/lib/makefile if Java Advanced Imaging was found
AC_SUBST(PTJAI_DIR)

# Location of the JDK
AC_SUBST(PTJAVA_DIR)

# Set to gr and used in
# $PTII/ptolemy/domains/makefile if Java 3D was found
AC_SUBST(PTJAVA3D_DIR)

# Set to jhdl if JDHL.jar was found
AC_SUBST(PTJHDL_DIR)

# Set to jmf if jmf.jar was found
AC_SUBST(PTJMF_DIR)

# JNI architecture, used to compile C files
AC_SUBST(PTJNI_ARCHITECTURE)

# Set to jni and used in 
# $PTII/makefile if gcc or cc was found
AC_SUBST(PTJNI_DIR)

# JNI shared library suffix, under Solaris this would be -fPIC.
AC_SUBST(PTJNI_SHAREDLIBRARY_CFLAG)

# JNI shared library prefix, under Solaris this would be lib.
AC_SUBST(PTJNI_SHAREDLIBRARY_PREFIX)

# JNI shared library suffix, under Windows this would be dll.
AC_SUBST(PTJNI_SHAREDLIBRARY_SUFFIX)

# Set to joystick if Joystick.jar was found
AC_SUBST(PTJOYSTICK_DIR)

# Set to jspaces and used in
# $PTII/ptolemy/actor/lib/makefile if jini was found
AC_SUBST(PTJSPACES_DIR)

# Set to python if jython.jar was found
AC_SUBST(PTJYTHON_DIR)

# Set to jxta ans used in
# $PTII/actor/lib/makefile if jxta.jar was found
AC_SUBST(PTJXTA_DIR)

# Set to kvm and used in
# $PTII/ptolemy/apps/makefile if kvm was found
AC_SUBST(PTKVM_DIR)

# Set to lego and used in
# $PTII/ptolemy/apps/makefile if the Java Communications API was found
AC_SUBST(PTLEGO_DIR)

# Set to lejos and used in
# $PTII/ptolemy/apps/makefile if the Java Communications API was found
# and Legos was found
AC_SUBST(PTLEJOS_DIR)

# Set to matlab and used in
# $PTII/ptolemy/makefile if the Matlab was found.
AC_SUBST(PTMATLAB_DIR)

# Set to tini and used in
# $PTII/ptolemy/apps/makefile if TINI was found
AC_SUBST(PTTINI_DIR)

# Set to giotto and used in
# $PTII/ptolemy/apps/makefile if Giotto was found
AC_SUBST(PTGIOTTO_DIR)

# Set to waba and used in
# $PTII/ptolemy/apps/makefile if Waba was found
AC_SUBST(PTWABA_DIR)

# Location of the local $PTII directory as a file:/// URL
# This variable is used with the Java Network Launching Protocol files
AC_SUBST(PTII_LOCALURL)

# tini/bin/tinclasses.jar file used Soot - a Java Optimization Framework
AC_SUBST(SOOT_CLASSES)

# Directory that contains the Soot installation
AC_SUBST(SOOT_DIR)

# tini/bin/tiniclasses.jar file used by the Dallas Semi Tini
AC_SUBST(TINI_CLASSES)

# Directory that contains the Tini installation
AC_SUBST(TINI_DIR)

# giotto/giotto.jar file used by GiottoSDK
AC_SUBST(GIOTTO_CLASSES)

# Directory that contains the GiottoSDK installation
AC_SUBST(GIOTTO_DIR)

# waba/tools/classes.jar file used by the PalmOS WABA
AC_SUBST(WABA_CLASSES)

# Directory that contains the waba used by PalmOS
AC_SUBST(WABA_DIR)


# Files we substitute in
AC_OUTPUT(mk/ptII.mk bin/ptinvoke, chmod a+x bin/ptinvoke)

