dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run to configure the
dnl	Makefile in this directory.

# Version: $Id$
# Copyright (c) 1997-2000 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY


dnl Don't look for ptolemy/kernel/util/NamedObj.java here, or
dnl else we won't be able to rebuild after make extraclean.
AC_INIT(mk/ptII.mk.in)

# We must have PTII set before running configure.
if test -z "$PTII"; then
    if test -n "$PTOLEMY"; then
	if test -d "$PTOLEMY/tycho/java"; then
	    echo "\$PTOLEMY/tycho/java exists, setting PTII to that value"
	    PTII="$PTOLEMY/tycho/java"
	    # We should not have to call AC_PREFIX_DEFAULT($PTII) here
	    # but autoconf shuffles things around, so the call to
	    # AC_PREFIX_DEFAULT($PTII) that is 15 or so lines below
	    # actually appears at the top of configure.
	    ac_default_prefix=$PTII
	else
	    exit 3
	fi    
    else
	echo "You must set the PTII environment variable before running configure"
	exit 3
    fi

fi 

if test  ! -d "$PTII"; then
    echo "\$PTII is set to '$PTII', but it does not exist"
    exit 3	
fi 

if test  ! -w "$PTII"; then
    echo "Warning: \$PTII is set to '$PTII', but it is not writable by you."
    echo "This may or may not be a problem.  If you are running under"
    echo "Windows, then you might be able to ignore this problem and" 
    echo "proceed with the build.  If you continue to have problems,"
    echo "try upgrading to cygwin1.1.0 or later"

	
fi 

PTII_DEFAULT=$PTII
# The default value of prefix
AC_PREFIX_DEFAULT($PTII)


#--------------------------------------------------------------------
#	See if there was a command-line option for where Java is;  if
#	not, check to see if the PTJAVA_DIR environment variable is set;
#       if it is not, look for javac on the path.
#--------------------------------------------------------------------

AC_ARG_WITH(java, [  --with-java=DIR         use Java binaries from DIR,
                           defaults to the value of the
                           PTJAVA_DIR environment variable],
    PTJAVA_DIR=$withval)

if test ! -d "$PTJAVA_DIR"; then
    if test -z "$PTJAVA_DIR"; then
	AC_MSG_WARN([PTJAVA_DIR environment variable was not set,
so we search for the java compiler.])

    else
	AC_MSG_WARN([PTJAVA_DIR environment variable is set to
'${PTJAVA_DIR}', which is not a directory,
so we search for the java compiler.])
    fi 
    AC_PATH_PROG(JAVAC, javac)
    if test -x "$JAVAC"; then	
	JAVABIN=`dirname $JAVAC`
	PTJAVA_DIR=`dirname $JAVABIN`
	if test "$PTJAVA_DIR" = "/"; then
	    if test -d /usr/java; then
		PTJAVA_DIR=/usr/java
	        AC_MSG_WARN([ Found javac in '$JAVABIN', /usr/java exists, so
  we are setting PTJAVA_DIR to '$PTJAVA_DIR'])
	    fi	
	fi

    else
        AC_MSG_WARN([ Failed to find javac, perhaps Java is not installed?])
    fi

    # The default location that we look for the JDK.  This should probably
    # be a list that includes /usr/local/jdk and /opt/jdk
    if test ! -d "$PTJAVA_DIR"; then
	DEFAULT_JDK=/opt/jdk1.2.2
	if test -d "$DEFAULT_JDK"; then
	    PTJAVA_DIR=`cd $DEFAULT_JDK; pwd`	
	    AC_MSG_WARN(['${PTJAVA_DIR}' is not a directory, using the default '${DEFAULT_JDK}'])

	else 
	    DEFAULT_JDK=/usr/java
	    if test -d "$DEFAULT_JDK"; then
		PTJAVA_DIR=`cd $DEFAULT_JDK; pwd`	
		AC_MSG_WARN(['${PTJAVA_DIR}' is not a directory, using the default '${DEFAULT_JDK}'])
	    else
			    AC_MSG_ERROR([
Java directory $DEFAULT_JDK doesn't exist.
Try --with-java=DIR, or set the PTJAVA_DIR environment variable.])
	    fi
	fi	
    fi	
fi

#
# Check that we have the javac that corresponds with PTJAVA_DIR in our path
#
AC_MSG_CHECKING([for the java runtime in $PTJAVA_DIR/bin])
if test -f "$PTJAVA_DIR/bin/java" -o -f "$PTJAVA_DIR/bin/java.exe"; then
    AC_MSG_RESULT($PTJAVA_DIR/bin/java)
    AC_MSG_CHECKING([that you have the right java in your path.])
    AC_PATH_PROG(JAVA, java)
    if test "$PTJAVA_DIR/bin/java" = "$JAVA"; then
	AC_MSG_RESULT([  You have the right java in your path, $PTJAVA_DIR/bin/java = $JAVA])
    else
	AC_MSG_WARN([$PTJAVA_DIR/bin/java is not the same as $JAVA.
    Perhaps $JAVA is in your path before $PTJAVA_DIR/bin/java?
    If you have problems later, be sure that you don't have a mismatch
    in JDK versions.])
	JAVA=$PTJAVA_DIR/bin/java
    fi
else
    AC_MSG_ERROR([
  Cannot find $PTJAVA_DIR/bin/java.
  Try --with-java=DIR, or set the PTJAVA_DIR environment variable.]) 
fi


#
# Check that we have the javac that corresponds with PTJAVA_DIR in our path
#
AC_MSG_CHECKING([for the java compiler in $PTJAVA_DIR/bin])
if test -f "$PTJAVA_DIR/bin/javac"; then
    AC_MSG_RESULT($PTJAVA_DIR/bin/javac)
    AC_MSG_CHECKING([that you have the right javac in your path.])
    AC_PATH_PROG(JAVAC, javac)
    if test "$PTJAVA_DIR/bin/javac" = "$JAVAC"; then
        AC_MSG_RESULT([  You have the right javac in your path, $PTJAVA_DIR/bin/javac = $JAVAC])
    else
        AC_MSG_WARN([$PTJAVA_DIR/bin/javac is not the same as $JAVAC.
    Perhaps $JAVAC is in your path before $PTJAVA_DIR/bin/javac?
    If you have problems later, be sure that you don't have a mismatch
    in JDK versions.])
	JAVAC="$PTJAVA_DIR/bin/javac"
    fi
else
    AC_MSG_ERROR([
  Cannot find $PTJAVA_DIR/bin/javac.
  Try --with-java=DIR, or set the PTJAVA_DIR environment variable.])
fi


#--------------------------------------------------------------------
#	Test the Java Compiler (javac)
#--------------------------------------------------------------------
AC_MSG_CHECKING([the Java compiler with a simple compile])
# We need to run javac in the config directory so that javac from jdk1.1.6
# under NT and cygwin works properly
startdir=`pwd`
cd $srcdir/config
# Don't use 'env $JAVAC . . .' here, it will not work under Cygwin
if $JAVAC confTest.java ; then
    AC_MSG_RESULT(ok)

    AC_MSG_CHECKING([the value of the java.version Property ])
    # Strip out the JDK1.3beta messages under Solaris2.5.1
    JVERSION=`CLASSPATH=$PTII/config $JAVA confTest | 
	grep -v "Warning! The libthread.so on your system is an older version than" |
	grep -v "the one this VM was tested with. Please read the install documentation for" |
	grep -v "patch installation instructions."`	
    AC_MSG_RESULT($JVERSION)

else
   AC_MSG_WARN(['$JAVAC confTest.java' failed'])
fi
cd $startdir


#--------------------------------------------------------------------
#	Figure out which separator to use for CLASSPATH
#	So much for write once, run everywhere.
#       Find NT4 and Windows 2000 (CYGWIN_NT-4.0 and
#       CYGWIN_NT-5.0 respectively)
#--------------------------------------------------------------------
AC_MSG_CHECKING([for the proper CLASSPATH separator])

case "`uname -s`" in
    CYGWIN_NT-*) CLASSPATHSEPARATOR=";";;
    *) CLASSPATHSEPARATOR=":";;
esac
AC_MSG_RESULT(['$CLASSPATHSEPARATOR'])

case "`uname -s`" in
    CYGWIN_NT-*)
	AC_PATH_PROG(CMD_PATH, cmd)
	if test -x "$CMD_PATH"; then 
		AC_MSG_RESULT([$CMD_PATH])
	else
		AC_MSG_WARN([Failed to find the 'cmd' command, which
    is used by the $PTII/bin/ptolemy script.  Usually cmd is found
    at c:\\winnt\\system32\\cmd.exe.  You may need to modify your
    PATH to explicitly include c:\\winnt\\system32 by going
    to Start->Settings->Control Panels->System->Environment and changing
    %SystemRoot%\\system32 to c:\\winnt\\system32])

	fi
	;;

    *) ;;
esac
#####################################################################
#####################################################################
#       Below here we look for various packages.
#       Not all Ptolemy software products need all packages, so
#       we usually look for a directory that uses the package first
#
#       Please try to keep the packages vaguely alphabetical
#####################################################################
#####################################################################

#--------------------------------------------------------------------
#       commapi is the Java serial interface, see
#	http://java.sun.com/products/javacomm/
#	See if there was a command-line option for commapi is
#       If not, check to see if $PTII/vendors/sun/commapi
#--------------------------------------------------------------------

# We only need to look for commapi if $PTII/ptolemy/apps/lego
COMMAPI_USER_DIR="$PTII/ptolemy/apps/lego"
COMMAPI_PRESENT=no
# PTLEGO_DIR is set to lego
# $PTII/ptolemy/apps/makefile if the Java Communications API was found
# 
PTLEGO_DIR=
if test ! -d "$COMMAPI_USER_DIR"; then
    AC_MSG_RESULT([$COMMAPI_USER_DIR is not present, so we need not
find commapi])
    # Use curly brackets around PTII so that if commapi is not present
    # then ${PTII} will appear in ptinvoke.
    COMMAPI_DIR='${PTII}/vendors/sun/commapi'
else
    AC_MSG_CHECKING([for commapi directory])
    AC_ARG_WITH(COMMAPI, [  --with-commapi=DIR       use Java commapi from DIR,
                          defaults to \$PTII/vendors/sun/commapi],
	COMMAPI_DIR=$withval,
	COMMAPI_DIR=$PTII/vendors/sun/commapi)

    if test -f "$COMMAPI_DIR/comm.jar"; then
	AC_MSG_RESULT([$COMMAPI_DIR])
	# Subdirectory that contains Java Communications API specific code
	PTLEGO_DIR=lego
	COMMAPI_PRESENT=yes
    else    
        AC_MSG_WARN(['Failed to find $COMMAPI_DIR/comm.jar'])
	COMMAPI_DIR='${PTII}/vendors/sun/commapi'
    fi    

    if test "$COMMAPI_PRESENT" = "no"; then
        AC_MSG_WARN(['Perhaps commapi is not installed?
    You need not download commapi unless you plan on use the Lego Mindstorm
    demos in \$PTII/ptolemy\apps. commapi can be downloaded from
    http://java.sun.com/products/javacomm/
    and placed  in \$PTII/vendors/sun/commapi'])
    fi	
fi


#--------------------------------------------------------------------
#	See if there was a command-line option for where javacc is;  if
#	not, check to see if $PTII/vendors/sun/JavaCC exists
#       if it is does not, look for javacc on the path.
#--------------------------------------------------------------------

# We only need to look for JavaCC if $PTII/ptolemy/data/expr exists
if test ! -d "$PTII/ptolemy/data/expr"; then
    AC_MSG_RESULT([$PTII/ptolemy/data/expr is not present, so we need not
find JavaCC])
    JAVACC_DIR=$PTII/vendors/sun/JavaCC
    JAVACC=javacc
    JJTREE=jjtree
else
    AC_MSG_CHECKING([for JavaCC])
    AC_ARG_WITH(javacc, [  --with-javacc=DIR       use JavaCC.zip from DIR,
                           defaults to \$PTII/vendors/sun/JavaCC],
	JAVACC_DIR=$withval, JAVACC_DIR=$PTII/vendors/sun/JavaCC)

    if test "`uname -s`" = "CYGWIN_NT-4.0" -o \
		"`uname -s`" = "CYGWIN_NT-5.0" ; then
	JJTREE='\$(JAVA) COM.sun.labs.jjtree.Main'
	JAVACC='\$(JAVA) COM.sun.labs.javacc.Main'
	AC_MSG_WARN([Be sure that your CLASSPATH includes JavaCC.zip]);
    else
	if test ! -d "$JAVACC_DIR"; then
	    AC_MSG_WARN(['${JAVACC_DIR}' is not a directory, 
    so we search for the jjtree command.])
	    AC_PATH_PROG(JJTREE, jjtree)
	    if test -x "$JJTREE"; then	
		AC_MSG_RESULT([$JJTREE]);
		JAVACCBIN=`dirname $JJTREE`
		JAVACC_DIR=`dirname $JAVACCBIN`
	    else  	
		AC_MSG_WARN([Failed to find jjtree]);
	    fi
	fi	
	if test -d "$JAVACC_DIR"; then
	    AC_MSG_RESULT([$JAVACC_DIR])
	    AC_MSG_CHECKING([for jjtree])
	    if test -x "$JAVACC_DIR/bin/jjtree"; then
		# Note that we don't substitute in the $(JAVACC_DIR) here
		JJTREE='$(JAVACC_DIR)/bin/jjtree'
		AC_MSG_RESULT([$JJTREE])
	    else    
		AC_MSG_WARN([Failed to find jjtree in '$JAVACC_DIR/bin']);
	    fi    
	    AC_MSG_CHECKING([for javacc])
	    if test -x "$JAVACC_DIR/bin/javacc"; then
		# Note that we don't substitute in the $(JAVACC_DIR) here
		JAVACC='$(JAVACC_DIR)/bin/javacc'
		AC_MSG_RESULT([$JAVACC])
	    else    
		AC_MSG_WARN([Failed to find javacc in '$JAVACC_DIR/bin']);
	    fi    
	fi
    fi

    if test ! -d "$JAVACC_DIR"; then
        AC_MSG_WARN([Failed to find javacc, perhaps JavaCC is not installed?
    You need not download JavaCC unless you plan on modifying certain files 
    in ptolemy/data/expr. 
    JavaCC used to be available from http://www.sun.com/suntest'])
	JJTREE=touch
	JAVACC=touch
    fi
fi

#--------------------------------------------------------------------
#	See if there was a command-line option for where Jacl is
#--------------------------------------------------------------------

# We only need to find Jacl if $PTII/util/testsuite
# exists.  If we are shipping ptplot, then this directory might not
# exist
PTJACL_JAR=$PTII/lib/ptjacl.jar
# The reference version of JDK 1.2 has a -native flag
# If we don't use -native, then some of the threading tests fail
PTJACL_JFLAG=-native
JTCLSH='["$(JAVA)" $(PTJACL_JFLAG) tcl.lang.Shell]'

if test ! -d "$PTII/util/testsuite"; then
    AC_MSG_RESULT([$PTII/util/testsuite is not a directory, so we need not
find Jacl])
else
    AC_MSG_CHECKING([for ptjacl.jar])
    AC_ARG_WITH(ptjacl_jar, [  --with-ptjacl_jar=PTJACL.JAR  ptjacl.jar file,
                           used for running the test scripts],
	PTJACL_JAR=$withval, PTJACL_JAR=$PTII/lib/ptjacl.jar)

    if test -f "$PTJACL_JAR"; then
	AC_MSG_RESULT([$PTJACL_JAR])
	AC_MSG_CHECKING([for how to run jacl with "$JAVA" "$PTJACL_JFLAG"])
	# This command starts up Jacl
	if echo "set java::jdkVersion; exit" | CLASSPATH=$PTJACL_JAR "$JAVA" $PTJACL_JFLAG tcl.lang.Shell; then
		AC_MSG_RESULT(ok)
	else
		AC_MSG_RESULT([CLASSPATH=$PTJACL_JAR "$JAVA" $PTJACL_JFLAG tcl.lang.Shell failed])
		PTJACL_JFLAG=
		AC_MSG_CHECKING([for how to run jacl with "$JAVA" "$PTJACL_FLAG]")
		if echo "set java::jdkVersion; exit" | CLASSPATH=$PTJACL_JAR "$JAVA" $PTJACL_JFLAG tcl.lang.Shell; then
			AC_MSG_RESULT(ok)
		else
			AC_MSG_RESULT(['CLASSPATH=$PTJACL_JAR "$JAVA" $PTJACL_JFLAG tcl.lang.Shell' failed,
	use 'CLASSPATH=$PTJACL_JAR "$JAVA" tcl.lang.Shell'
	instead. ptjacl is used by the test suite, so you may be able to
	ignore this error.])
		fi
		JTCLSH='["$(JAVA)" tcl.lang.Shell]'
	fi
    else
	AC_MSG_WARN([The ptjacl.jar file was not found at '$PTJACL_JAR'
    ptjacl.jar is only necessary if you plan on running the test suite.
    You can download ptjacl.jar from
    http://ptolemy.eecs.berkeley.edu/~cxh/java/jacl/ptjacl.html])
    fi	 
fi

#--------------------------------------------------------------------
#	Test for javax.media.j3d (Java 3D)
#--------------------------------------------------------------------
# PTJAVA3D_DIR is set to gr and used in 
# $PTII/ptolemy/actor/lib/makefile if Java 3D was found
PTJAVA3D_DIR=
# We only need to look for Java3D if the gr demo is present
JAVA3D_USER_DIR="$PTII/ptolemy/domains/gr"

if test ! -d "$JAVA3D_USER_DIR"; then
    AC_MSG_RESULT([$JAVA3D_USER_DIR
  is not present, so we need not find Java 3D])
else
    AC_MSG_CHECKING([for Java 3D])
    # We need to run javac in the config directory so that javac from jdk1.1.6
    # under NT and cygwin works properly
    startdir=`pwd`
    cd $srcdir/config
    # Don't use 'env $JAVAC . . .' here, it will not work under Cygwin
    if $JAVAC java3dTest.java ; then
       AC_MSG_RESULT(ok)
       PTJAVA3D_DIR=gr 
    else
       AC_MSG_WARN(['$JAVAC java3dTest.java' failed.
    http://java.sun.com/products/java-media/3D/download.html
    Java 3D is only needed if you want to build in
    $JAVA3D_USER_DIR,
    otherwise the build will proceed fine with out Java 3D.])
    fi
fi
cd $startdir

#--------------------------------------------------------------------
#	Test for javax.sound
#--------------------------------------------------------------------
# PTJAVASOUND_DIR is set to javasound and used in 
# $PTII/ptolemy/actor/lib/makefile if javasound was found
PTJAVASOUND_DIR=

AC_MSG_CHECKING([for javax.sound])
# We need to run javac in the config directory so that javac from jdk1.1.6
# under NT and cygwin works properly
startdir=`pwd`
cd $srcdir/config
# Don't use 'env $JAVAC . . .' here, it will not work under Cygwin
if $JAVAC javasoundTest.java ; then
    AC_MSG_RESULT(ok)
    PTJAVASOUND=javasound	
else
   AC_MSG_WARN(['$JAVAC javasoundTest.java' failed.
    Perhaps you are running under JDK1.2?
    javasound is used in actor.lib, but you can probably get away without it.])
fi
cd $startdir

#--------------------------------------------------------------------
#       Jini is connection technology from Sun, see http://www.sun.com/jini/
#       See if there was a command-line option for where Jini is
#       If not, look in $PTII/vendors/sun/jini/jini1_0_1
#--------------------------------------------------------------------

# We only need to look for jini if the CarTracking demo is present
JINI_USER_DIR="$PTII/ptolemy/domains/ct/demo/jspaces/CarTracking"
JINI_VERSION=jini1_0_1
JINI_PRESENT=no
# PTJSPACES_DIR is set to jspaces and used in 
# $PTII/ptolemy/actor/lib/makefile if jini was found
PTJSPACES_DIR=
if test ! -d "$JINI_USER_DIR"; then
    AC_MSG_RESULT([$JINI_USER_DIR
  is not present, so we need not find Jini])
    # We don't use JINI_VERSION here so that we don't expand PTII
    # in the makefile	
    JINI_DIR='\$PTII/vendors/sun/jini/jini1_0_1'
else
    AC_MSG_CHECKING([for jini directory])
    AC_ARG_WITH(jini, [  --with-jini=DIR       use Jini from DIR,
                          defaults to \$PTII/vendors/sun/$JINI_VERSION],
	JINI_DIR=$withval,
	JINI_DIR=$PTII/vendors/sun/jini/$JINI_VERSION)

    if test -d "$JINI_DIR"; then
	AC_MSG_RESULT([$JINI_DIR])
	JINI_PRESENT=yes
	# Subdirectory that contains Java spaces specific code
	PTJSPACES_DIR=jspaces
    else    
	JINI_DIR='$PTII'/vendors/sun/jini/$JINI_VERSION
    fi    
    if test "$JINI_PRESENT" = "no"; then
        AC_MSG_WARN(['Failed to find $JINI_DIR/lib/jini-core.jar
    Perhaps Jini is not installed?
    You need not download Jini unless you plan on use Jini and JavaSpaces
    Jini can be downloaded from http://java.sun.com/jini' and placed
    in \$PTII/vendors/sun/jini/$JINI_VERSION'])
    fi	

fi



#--------------------------------------------------------------------
#       KVM is the JDK for PalmOS
#	See if there was a command-line option for where
#       j2me_cldc/bin/api/classes is;  if not,
#       check to see if $PTII/vendors/sun/j2me_cldc exists
#--------------------------------------------------------------------

# PTKVM_DIR is set to kvm and used in 
# $PTII/ptolemy/makefile if kvm was found
PTKVM_DIR=
#
# We only need to look for kvm if $PTII/ptolemy/apps/kvm exists
if test ! -d "$PTII/ptolemy/apps/kvm"; then
    AC_MSG_RESULT([$PTII/ptolemy/apps/kvm is not present, so we need not
find the PalmOS kvm])
    KVM_DIR='${PTII}/vendors/sun/j2me_cldc'
    # Unfortunately, j2me_cldc does not ship with a jar of zip file
    # It needs to be built	
    KVM_CLASSES='$(KVM_DIR)/bin/api/classes'
else
    AC_MSG_CHECKING([for kvm directory])
    AC_ARG_WITH(kvm, [  --with-kvm=DIR       use PalmOS KVM from DIR,
                          defaults to \$PTII/vendors/sun/j2me_cldc],
	KVM_DIR=$withval,
	KVM_DIR=$PTII/vendors/sun/j2me_cldc)

    if test -d "$KVM_DIR"; then
	AC_MSG_RESULT([$KVM_DIR])
        AC_MSG_CHECKING([for \$KVM_DIR/bin/api/classes])
	if test -d "$KVM_DIR/bin/api/classes"; then
	    KVM_CLASSES='$(KVM_DIR)/bin/api/classes'
	    AC_MSG_RESULT([$KVM_CLASSES])
        else
	    KVM_CLASSES=no
        fi
    else    
	AC_MSG_RESULT([Not found in $KVM_DIR])
	AC_MSG_CHECKING([for kvm directory in /j2me_cldc])
	# Likely place for kvm under windows
	KVM_DIR=/j2me_cldc
        if test -d "$KVM_DIR"; then
	    AC_MSG_RESULT([$KVM_DIR])
            AC_MSG_CHECKING([for \$KVM_DIR/bin/api/classes])
	    if test -d "$KVM_DIR/bin/api/classes"; then
	        KVM_CLASSES='$(KVM_DIR)/bin/api/classes'
	        AC_MSG_RESULT([$KVM_CLASSES])
            else
	        KVM_CLASSES=no
            fi
        else 
		KVM_CLASSES=no
        fi

    fi
    if test "$KVM_CLASSES" = "no"; then
        AC_MSG_WARN(['Failed to find j2me_cldc/bin/api/classes,
    perhaps Kvm is not installed?
    You need not download Kvm unless you plan on building applications
    for the Palm Pilot or Handspring Visor.
    Kvm can be downloaded from http://java.sun.com/products/cldc'])
	# Note that we don't substitute in the ${PTII} or $(KVM_DIR) here
	KVM_DIR='${PTII}/vendors/sun/kvm'
   	KVM_CLASSES='$(KVM_DIR)/bin/api/classes'
    else 
	# Set to kvm and used in 
	# $PTII/ptolemy/makefile if kvm was found
	PTKVM_DIR=kvm
    fi    
fi

#--------------------------------------------------------------------
#       TINI is the JDK for Dallas Tini board, see
#	www.ibutton.com
#	See if there was a command-line option for where
#       tinisk is;  if not,
#       check to see if $PTII/vendors/dalsemi/tini/bin/tiniclasses.jar exists
#--------------------------------------------------------------------

# PTTINI_DIR is set to tini and used in 
# $PTII/ptolemy/apps/makefile if tini was found
PTTINI_DIR=
#
# We only need to look for tini if $PTII/ptolemy/apps/tini exists
if test ! -d "$PTII/ptolemy/apps/tini"; then
    AC_MSG_RESULT([$PTII/ptolemy/apps/tini is not present, so we need not
find the Dallas Semiconductor tini])
    TINI_DIR='${PTII}/vendors/dalsemi/tini'
    TINI_CLASSES='$(TINI_DIR)/bin/tiniclasses.jar$(CLASSPATHSEPARATOR)$(TINI_DIR)/bin/tini.jar'
else
    AC_MSG_CHECKING([for tini directory])
    AC_ARG_WITH(tini, [  --with-tini=DIR       use TINI from DIR,
                          defaults to \$PTII/vendors/dalsemi/tini],
	TINI_DIR=$withval,
	TINI_DIR=$PTII/vendors/dalsemi/tini)

    if test -d "$TINI_DIR"; then
	AC_MSG_RESULT([$TINI_DIR])
        AC_MSG_CHECKING([for \$TINI_DIR/bin/tiniclasses.jar])
	if test -f "$TINI_DIR/bin/tiniclasses.jar"; then
	    AC_MSG_RESULT([$TINI_DIR/bin/tiniclasses.jar])
	    AC_MSG_CHECKING([for \$TINI_DIR/bin/tini.jar])
  	    if test -f "$TINI_DIR/bin/tini.jar"; then
                AC_MSG_RESULT([$TINI_DIR/bin/tini.jar])
	        TINI_CLASSES='$(TINI_DIR)/bin/tiniclasses.jar$(CLASSPATHSEPARATOR)$(TINI_DIR)/bin/tini.jar'
	    else	
	        TINI_CLASSES='$(TINI_DIR)/bin/tiniclasses.jar'
            fi
	    AC_MSG_RESULT([$TINI_CLASSES])
        else
	    TINI_CLASSES=no
        fi
    else    
	AC_MSG_RESULT([Not found in $TINI_DIR])
	AC_MSG_CHECKING([for tini directory in /tini])
	# Likely place for tini under windows
	TINI_DIR=/tini
        if test -d "$TINI_DIR"; then
	    AC_MSG_RESULT([$TINI_DIR])
            AC_MSG_CHECKING([for \$TINI_DIR/bin/tiniclasses.jar])
	    if test -f "$TINI_DIR/bin/tiniclasses.jar"; then
	        AC_MSG_RESULT([$TINI_DIR/bin/tiniclasses.jar])
	        AC_MSG_CHECKING([for \$TINI_DIR/bin/tini.jar])
	        if test -f "$TINI_DIR/bin/tini.jar"; then
	            AC_MSG_RESULT([$TINI_DIR/bin/tini.jar])
	            TINI_CLASSES='$(TINI_DIR)/bin/tiniclasses.jar$(CLASSPATHSEPARATOR)$(TINI_DIR)/bin/tini.jar'
	        else	
	            TINI_CLASSES='$(TINI_DIR)/bin/tiniclasses.jar'
	        fi 
            fi
	    AC_MSG_RESULT([$TINI_CLASSES])
        else
	    TINI_CLASSES='$(TINI_DIR)/bin/tiniclasses.jar$(CLASSPATHSEPARATOR)$(TINI_DIR)/bin/tini.jar'
	    AC_MSG_RESULT([$TINI_CLASSES])
        fi

    fi
    if test "$TINI_CLASSES" = "no"; then
        AC_MSG_WARN(['Failed to find tini/bin/tiniclasses.jar
    perhaps Tini is not installed?
    You need not download Tini unless you plan on building applications
    for the Dallas Semiconductor Tini board.
    The Tini SDK can be downloaded from http://www.ibutton.com'])
	# Note that we don't substitute in the ${PTII} or $(TINI_DIR) here
	TINI_DIR='${PTII}/vendors/dalsemi/tini'
   	TINI_CLASSES='$(TINI_DIR)/bin/tiniclasses.jar$(CLASSPATHSEPARATOR)$(TINI_DIR)/bin/tini.jar'
    else 
	# Set to tini and used in 
	# $PTII/ptolemy/apps/makefile if tini was found
	PTTINI_DIR=tini
    fi    
fi

#--------------------------------------------------------------------
#       WABA is the JDK for PalmOS
#	See if there was a command-line option for where
#       wabask is;  if not,
#       check to see if $PTII/vendors/misc/waba/wabasdk exists
#--------------------------------------------------------------------

# PTWABA_DIR is set to waba and used in 
# $PTII/ptolemy/makefile if waba was found
PTWABA_DIR=
#
# We only need to look for waba if $PTII/ptolemy/apps/kvm exists
if test ! -d "$PTII/ptolemy/apps/kvm"; then
    AC_MSG_RESULT([$PTII/ptolemy/apps/kvm is not present, so we need not
find the PalmOS waba])
    WABA_DIR='${PTII}/vendors/misc/waba/wabasdk'
    # Unfortunately, j2me_cldc does not ship with a jar of zip file
    # It needs to be built	
    WABA_CLASSES='$(WABA_DIR)/classes'
else
    AC_MSG_CHECKING([for waba directory])
    AC_ARG_WITH(waba, [  --with-waba=DIR       use PalmOS WABA from DIR,
                          defaults to \$PTII/vendors/misc/waba/wabasdk],
	WABA_DIR=$withval,
	WABA_DIR=$PTII/vendors/misc/waba/wabasdk)

    if test -d "$WABA_DIR"; then
	AC_MSG_RESULT([$WABA_DIR])
        AC_MSG_CHECKING([for \$WABA_DIR/classes])
	if test -d "$WABA_DIR/classes"; then
	    WABA_CLASSES='$(WABA_DIR)/classes'
	    AC_MSG_RESULT([$WABA_CLASSES])
        else
	    WABA_CLASSES=no
        fi
    else    
	AC_MSG_RESULT([Not found in $WABA_DIR])
	AC_MSG_CHECKING([for waba directory in /waba])
	# Likely place for waba under windows
	WABA_DIR=/waba/wabasdk
        if test -d "$WABA_DIR"; then
	    AC_MSG_RESULT([$WABA_DIR])
            AC_MSG_CHECKING([for \$WABA_DIR/classes])
	    if test -d "$WABA_DIR/classes"; then
	        WABA_CLASSES='$(WABA_DIR)/classes'
	        AC_MSG_RESULT([$WABA_CLASSES])
            else
	        WABA_CLASSES=no
            fi
        else 
		WABA_CLASSES=no
        fi

    fi
    if test "$WABA_CLASSES" = "no"; then
        AC_MSG_WARN(['Failed to find waba/wabasdk
    perhaps Waba is not installed?
    You need not download Waba unless you plan on building applications
    for the Palm Pilot or Handspring Visor.
    Waba can be downloaded from http://www.wabasoft.com'])
	# Note that we don't substitute in the ${PTII} or $(WABA_DIR) here
	WABA_DIR='${PTII}/vendors/misc/waba/wabasdk'
   	WABA_CLASSES='$(WABA_DIR)/classes'
    else 
	# Set to waba and used in 
	# $PTII/ptolemy/makefile if waba was found
	PTWABA_DIR=waba
    fi    
fi

# Keep these substitutions alphabetical, with a description

# Separator in CLASSPATH,  For Unix, this should be :, for Cygwin use ;
AC_SUBST(CLASSPATHSEPARATOR)

# Directory that contains the Java Serial Comm API
AC_SUBST(COMMAPI_DIR)

# If Commapi is present, then set to yes, otherwise set to no
AC_SUBST(COMMAPI_PRESENT)

# javacc binary
AC_SUBST(JAVACC)

# Directory that contains JavaCC, which is used in ptolemy/data/expr
AC_SUBST(JAVACC_DIR)

# Jini home directory, see http://www.sun.com/jini/
AC_SUBST(JINI_DIR)

# If Jini is present, the set to yes, otherwise, set to no
AC_SUBST(JINI_PRESENT)

# jtclsh script, used for test suites
AC_SUBST(JTCLSH)

# jtree binary
AC_SUBST(JTREE)

# JDK Version determined by running confTest.class and getting java.version
AC_SUBST(JVERSION)

# kvm/tools/classes.jar file used by the PalmOS KVM
AC_SUBST(KVM_CLASSES)

# Directory that contains the kvm used by PalmOS
AC_SUBST(KVM_DIR)

# ptjacl.jar file, used to run the test suites
AC_SUBST(PTJACL_JAR)

# Flag to pass to java when we start up jacl
AC_SUBST(PTJACL_JFLAG)

# Location of the JDK
AC_SUBST(PTJAVA_DIR)

# Set to gr and used in 
# $PTII/ptolemy/domains/makefile if Java 3D was found
AC_SUBST(PTJAVA3D_DIR)

# Set to javasound and used in 
# $PTII/ptolemy/actor/lib/makefile if javasound was found
AC_SUBST(PTJAVASOUND_DIR)

# Set to jspaces and used in 
# $PTII/ptolemy/actor/lib/makefile if jini was found
AC_SUBST(PTJSPACES_DIR)

# Set to kvm and used in 
# $PTII/ptolemy/apps/makefile if kvm was found
AC_SUBST(PTKVM_DIR)

# Set to lego and used in 
# $PTII/ptolemy/apps/makefile if the Java Communications API was found
AC_SUBST(PTLEGO_DIR)

# Set to tini and used in 
# $PTII/ptolemy/apps/makefile if TINI was found
AC_SUBST(PTTINI_DIR)

# Set to waba and used in 
# $PTII/ptolemy/apps/makefile if Waba was found
AC_SUBST(PTWABA_DIR)

# Location of the PtII directory
AC_SUBST(PTII_DEFAULT)

# tini/bin/tinclasses.jar file used by the Dallas Semi Tini
AC_SUBST(TINI_CLASSES)

# Directory that contains the Tini installation
AC_SUBST(TINI_DIR)

# waba/tools/classes.jar file used by the PalmOS WABA
AC_SUBST(WABA_CLASSES)

# Directory that contains the waba used by PalmOS
AC_SUBST(WABA_DIR)


# Files we substitute in
AC_OUTPUT(mk/ptII.mk bin/ptinvoke, chmod a+x bin/ptinvoke)

