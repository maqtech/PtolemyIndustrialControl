package org.terraswarm.gdp;
import org.ptolemy.fmi.NativeSizeT; //Use NativeSizeT intead of NativeSize.  Fixed in makefile
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : src/gdp/ep/ep_mem.h:9</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ep_malloc_functions extends Structure {
	/** C type : m_malloc_callback* */
	public ep_malloc_functions.m_malloc_callback m_malloc;
	/** C type : m_realloc_callback* */
	public ep_malloc_functions.m_realloc_callback m_realloc;
	/** C type : m_valloc_callback* */
	public ep_malloc_functions.m_valloc_callback m_valloc;
	/** C type : m_free_callback* */
	public ep_malloc_functions.m_free_callback m_free;
	/** <i>native declaration : src/gdp/ep/ep_mem.h:5</i> */
	public interface m_malloc_callback extends Callback {
		Pointer apply(NativeSizeT size_t1);
	};
	/** <i>native declaration : src/gdp/ep/ep_mem.h:6</i> */
	public interface m_realloc_callback extends Callback {
		Pointer apply(Pointer voidPtr1, NativeSizeT size_t1);
	};
	/** <i>native declaration : src/gdp/ep/ep_mem.h:7</i> */
	public interface m_valloc_callback extends Callback {
		Pointer apply(NativeSizeT size_t1);
	};
	/** <i>native declaration : src/gdp/ep/ep_mem.h:8</i> */
	public interface m_free_callback extends Callback {
		void apply(Pointer voidPtr1);
	};
	public ep_malloc_functions() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("m_malloc", "m_realloc", "m_valloc", "m_free");
	}
	/**
	 * @param m_malloc C type : m_malloc_callback*<br>
	 * @param m_realloc C type : m_realloc_callback*<br>
	 * @param m_valloc C type : m_valloc_callback*<br>
	 * @param m_free C type : m_free_callback*
	 */
	public ep_malloc_functions(ep_malloc_functions.m_malloc_callback m_malloc, ep_malloc_functions.m_realloc_callback m_realloc, ep_malloc_functions.m_valloc_callback m_valloc, ep_malloc_functions.m_free_callback m_free) {
		super();
		this.m_malloc = m_malloc;
		this.m_realloc = m_realloc;
		this.m_valloc = m_valloc;
		this.m_free = m_free;
	}
	public ep_malloc_functions(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ep_malloc_functions implements Structure.ByReference {
		
	};
	public static class ByValue extends ep_malloc_functions implements Structure.ByValue {
		
	};
}
