package org.terraswarm.gdp;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import org.terraswarm.gdp.Gdp10Library.__sFILEX;
/**
 * <i>native declaration : /usr/include/stdio.h:58</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class FILE extends Structure {
	/**
	 * current position in (some) buffer<br>
	 * C type : unsigned char*
	 */
	public Pointer _p;
	/** read space left for getc() */
	public int _r;
	/** write space left for putc() */
	public int _w;
	/** flags, below; this FILE is free if 0 */
	public short _flags;
	/** fileno, if Unix descriptor, else -1 */
	public short _file;
	/**
	 * the buffer (at least 1 byte, if !NULL)<br>
	 * C type : __sbuf
	 */
	public __sbuf _bf;
	/** 0 or -_bf._size, for inline putc */
	public int _lbfsize;
	/**
	 * cookie passed to io functions<br>
	 * C type : void*
	 */
	public Pointer _cookie;
	/** C type : _close_callback* */
	public FILE._close_callback _close;
	/** C type : _read_callback* */
	public FILE._read_callback _read;
	/** C type : _seek_callback* */
	public FILE._seek_callback _seek;
	/** C type : _write_callback* */
	public FILE._write_callback _write;
	/**
	 * ungetc buffer<br>
	 * C type : __sbuf
	 */
	public __sbuf _ub;
	/**
	 * additions to FILE to not break ABI<br>
	 * C type : __sFILEX*
	 */
	public __sFILEX _extra;
	/** saved _r when _r is counting ungetc data */
	public int _ur;
	/**
	 * guarantee an ungetc() buffer<br>
	 * C type : unsigned char[3]
	 */
	public byte[] _ubuf = new byte[3];
	/**
	 * guarantee a getc() buffer<br>
	 * C type : unsigned char[1]
	 */
	public byte[] _nbuf = new byte[1];
	/**
	 * buffer for fgetln()<br>
	 * C type : __sbuf
	 */
	public __sbuf _lb;
	/** stat.st_blksize (may be != _bf._size) */
	public int _blksize;
	/**
	 * current lseek offset (see WARNING)<br>
	 * C type : fpos_t
	 */
	public long _offset;
	/** <i>native declaration : /usr/include/stdio.h:54</i> */
	public interface _close_callback extends Callback {
		int apply(Pointer voidPtr1);
	};
	/** <i>native declaration : /usr/include/stdio.h:55</i> */
	public interface _read_callback extends Callback {
		int apply(Pointer voidPtr1, Pointer charPtr1, int int1);
	};
	/** <i>native declaration : /usr/include/stdio.h:56</i> */
	public interface _seek_callback extends Callback {
		long apply(Pointer voidPtr1, long fpos_t1, int int1);
	};
	/** <i>native declaration : /usr/include/stdio.h:57</i> */
	public interface _write_callback extends Callback {
		int apply(Pointer voidPtr1, Pointer charPtr1, int int1);
	};
	public FILE() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("_p", "_r", "_w", "_flags", "_file", "_bf", "_lbfsize", "_cookie", "_close", "_read", "_seek", "_write", "_ub", "_extra", "_ur", "_ubuf", "_nbuf", "_lb", "_blksize", "_offset");
	}
	public FILE(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends FILE implements Structure.ByReference {
		
	};
	public static class ByValue extends FILE implements Structure.ByValue {
		
	};
}
