package org.terraswarm.gdp;
// // import com.ochafik.lang.jnaerator.runtime.CharByReference;
import org.ptolemy.fmi.NativeSizeT; //Use NativeSizeT intead of NativeSize
// // import com.ochafik.lang.jnaerator.runtime.NativeSizeTByReference; // Commented out by makefile because NativeSizeTByReference is not in jna.
// import com.ochafik.lang.jnaerator.runtime.globals.GlobalInt;
// import com.ochafik.lang.jnaerator.runtime.globals.GlobalPointerType;
// import com.ochafik.lang.jnaerator.runtime.globals.GlobalStruct;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.WString;
import com.sun.jna.ptr.ByteByReference;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;
/**
 * JNA Wrapper for library <b>gdp.1.0</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Gdp10Library extends Library {
	public static final String JNA_LIBRARY_NAME = "gdp.1.0";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Gdp10Library.JNA_LIBRARY_NAME);
	public static final Gdp10Library INSTANCE = (Gdp10Library)Native.loadLibrary(Gdp10Library.JNA_LIBRARY_NAME, Gdp10Library.class);
	public static final int _PC_LINK_MAX = 0;
	public static final int _PC_MAX_CANON = 1;
	public static final int _PC_MAX_INPUT = 2;
	public static final int _PC_NAME_MAX = 3;
	public static final int _PC_PATH_MAX = 4;
	public static final int _PC_PIPE_BUF = 5;
	public static final int _PC_CHOWN_RESTRICTED = 6;
	public static final int _PC_NO_TRUNC = 7;
	public static final int _PC_VDISABLE = 8;
	public static final int _PC_SYNC_IO = 9;
	public static final int _PC_ASYNC_IO = 10;
	public static final int _PC_PRIO_IO = 11;
	public static final int _PC_SOCK_MAXBUF = 12;
	public static final int _PC_FILESIZEBITS = 13;
	public static final int _PC_REC_INCR_XFER_SIZE = 14;
	public static final int _PC_REC_MAX_XFER_SIZE = 15;
	public static final int _PC_REC_MIN_XFER_SIZE = 16;
	public static final int _PC_REC_XFER_ALIGN = 17;
	public static final int _PC_ALLOC_SIZE_MIN = 18;
	public static final int _PC_SYMLINK_MAX = 19;
	public static final int _PC_2_SYMLINKS = 20;
	public static final int _SC_ARG_MAX = 0;
	public static final int _SC_CHILD_MAX = 1;
	public static final int _SC_CLK_TCK = 2;
	public static final int _SC_NGROUPS_MAX = 3;
	public static final int _SC_OPEN_MAX = 4;
	public static final int _SC_STREAM_MAX = 5;
	public static final int _SC_TZNAME_MAX = 6;
	public static final int _SC_JOB_CONTROL = 7;
	public static final int _SC_SAVED_IDS = 8;
	public static final int _SC_REALTIME_SIGNALS = 9;
	public static final int _SC_PRIORITY_SCHEDULING = 10;
	public static final int _SC_TIMERS = 11;
	public static final int _SC_ASYNCHRONOUS_IO = 12;
	public static final int _SC_PRIORITIZED_IO = 13;
	public static final int _SC_SYNCHRONIZED_IO = 14;
	public static final int _SC_FSYNC = 15;
	public static final int _SC_MAPPED_FILES = 16;
	public static final int _SC_MEMLOCK = 17;
	public static final int _SC_MEMLOCK_RANGE = 18;
	public static final int _SC_MEMORY_PROTECTION = 19;
	public static final int _SC_MESSAGE_PASSING = 20;
	public static final int _SC_SEMAPHORES = 21;
	public static final int _SC_SHARED_MEMORY_OBJECTS = 22;
	public static final int _SC_AIO_LISTIO_MAX = 23;
	public static final int _SC_AIO_MAX = 24;
	public static final int _SC_AIO_PRIO_DELTA_MAX = 25;
	public static final int _SC_DELAYTIMER_MAX = 26;
	public static final int _SC_MQ_OPEN_MAX = 27;
	public static final int _SC_MQ_PRIO_MAX = 28;
	public static final int _SC_VERSION = 29;
	public static final int _SC_PAGESIZE = 30;
	public static final int _SC_RTSIG_MAX = 31;
	public static final int _SC_SEM_NSEMS_MAX = 32;
	public static final int _SC_SEM_VALUE_MAX = 33;
	public static final int _SC_SIGQUEUE_MAX = 34;
	public static final int _SC_TIMER_MAX = 35;
	public static final int _SC_BC_BASE_MAX = 36;
	public static final int _SC_BC_DIM_MAX = 37;
	public static final int _SC_BC_SCALE_MAX = 38;
	public static final int _SC_BC_STRING_MAX = 39;
	public static final int _SC_COLL_WEIGHTS_MAX = 40;
	public static final int _SC_EQUIV_CLASS_MAX = 41;
	public static final int _SC_EXPR_NEST_MAX = 42;
	public static final int _SC_LINE_MAX = 43;
	public static final int _SC_RE_DUP_MAX = 44;
	public static final int _SC_CHARCLASS_NAME_MAX = 45;
	public static final int _SC_2_VERSION = 46;
	public static final int _SC_2_C_BIND = 47;
	public static final int _SC_2_C_DEV = 48;
	public static final int _SC_2_FORT_DEV = 49;
	public static final int _SC_2_FORT_RUN = 50;
	public static final int _SC_2_SW_DEV = 51;
	public static final int _SC_2_LOCALEDEF = 52;
	public static final int _SC_PII = 53;
	public static final int _SC_PII_XTI = 54;
	public static final int _SC_PII_SOCKET = 55;
	public static final int _SC_PII_INTERNET = 56;
	public static final int _SC_PII_OSI = 57;
	public static final int _SC_POLL = 58;
	public static final int _SC_SELECT = 59;
	public static final int _SC_UIO_MAXIOV = 60;
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:87</i><br>
	 * _SC_IOV_MAX = _SC_UIO_MAXIOV
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:88</i><br>
	 * _SC_PII_INTERNET_STREAM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:89</i><br>
	 * _SC_PII_INTERNET_DGRAM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:90</i><br>
	 * _SC_PII_OSI_COTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:91</i><br>
	 * _SC_PII_OSI_CLTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:92</i><br>
	 * _SC_PII_OSI_M
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:93</i><br>
	 * _SC_T_IOV_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:94</i><br>
	 * _SC_THREADS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:95</i><br>
	 * _SC_THREAD_SAFE_FUNCTIONS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:96</i><br>
	 * _SC_GETGR_R_SIZE_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:97</i><br>
	 * _SC_GETPW_R_SIZE_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:98</i><br>
	 * _SC_LOGIN_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:99</i><br>
	 * _SC_TTY_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:100</i><br>
	 * _SC_THREAD_DESTRUCTOR_ITERATIONS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:101</i><br>
	 * _SC_THREAD_KEYS_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:102</i><br>
	 * _SC_THREAD_STACK_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:103</i><br>
	 * _SC_THREAD_THREADS_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:104</i><br>
	 * _SC_THREAD_ATTR_STACKADDR
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:105</i><br>
	 * _SC_THREAD_ATTR_STACKSIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:106</i><br>
	 * _SC_THREAD_PRIORITY_SCHEDULING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:107</i><br>
	 * _SC_THREAD_PRIO_INHERIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:108</i><br>
	 * _SC_THREAD_PRIO_PROTECT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:109</i><br>
	 * _SC_THREAD_PROCESS_SHARED
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:110</i><br>
	 * _SC_NPROCESSORS_CONF
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:111</i><br>
	 * _SC_NPROCESSORS_ONLN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:112</i><br>
	 * _SC_PHYS_PAGES
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:113</i><br>
	 * _SC_AVPHYS_PAGES
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:114</i><br>
	 * _SC_ATEXIT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:115</i><br>
	 * _SC_PASS_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:116</i><br>
	 * _SC_XOPEN_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:117</i><br>
	 * _SC_XOPEN_XCU_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:118</i><br>
	 * _SC_XOPEN_UNIX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:119</i><br>
	 * _SC_XOPEN_CRYPT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:120</i><br>
	 * _SC_XOPEN_ENH_I18N
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:121</i><br>
	 * _SC_XOPEN_SHM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:122</i><br>
	 * _SC_2_CHAR_TERM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:123</i><br>
	 * _SC_2_C_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:124</i><br>
	 * _SC_2_UPE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:125</i><br>
	 * _SC_XOPEN_XPG2
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:126</i><br>
	 * _SC_XOPEN_XPG3
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:127</i><br>
	 * _SC_XOPEN_XPG4
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:128</i><br>
	 * _SC_CHAR_BIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:129</i><br>
	 * _SC_CHAR_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:130</i><br>
	 * _SC_CHAR_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:131</i><br>
	 * _SC_INT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:132</i><br>
	 * _SC_INT_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:133</i><br>
	 * _SC_LONG_BIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:134</i><br>
	 * _SC_WORD_BIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:135</i><br>
	 * _SC_MB_LEN_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:136</i><br>
	 * _SC_NZERO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:137</i><br>
	 * _SC_SSIZE_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:138</i><br>
	 * _SC_SCHAR_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:139</i><br>
	 * _SC_SCHAR_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:140</i><br>
	 * _SC_SHRT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:141</i><br>
	 * _SC_SHRT_MIN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:142</i><br>
	 * _SC_UCHAR_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:143</i><br>
	 * _SC_UINT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:144</i><br>
	 * _SC_ULONG_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:145</i><br>
	 * _SC_USHRT_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:146</i><br>
	 * _SC_NL_ARGMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:147</i><br>
	 * _SC_NL_LANGMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:148</i><br>
	 * _SC_NL_MSGMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:149</i><br>
	 * _SC_NL_NMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:150</i><br>
	 * _SC_NL_SETMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:151</i><br>
	 * _SC_NL_TEXTMAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:152</i><br>
	 * _SC_XBS5_ILP32_OFF32
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:153</i><br>
	 * _SC_XBS5_ILP32_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:154</i><br>
	 * _SC_XBS5_LP64_OFF64
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:155</i><br>
	 * _SC_XBS5_LPBIG_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:156</i><br>
	 * _SC_XOPEN_LEGACY
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:157</i><br>
	 * _SC_XOPEN_REALTIME
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:158</i><br>
	 * _SC_XOPEN_REALTIME_THREADS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:159</i><br>
	 * _SC_ADVISORY_INFO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:160</i><br>
	 * _SC_BARRIERS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:161</i><br>
	 * _SC_BASE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:162</i><br>
	 * _SC_C_LANG_SUPPORT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:163</i><br>
	 * _SC_C_LANG_SUPPORT_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:164</i><br>
	 * _SC_CLOCK_SELECTION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:165</i><br>
	 * _SC_CPUTIME
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:166</i><br>
	 * _SC_THREAD_CPUTIME
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:167</i><br>
	 * _SC_DEVICE_IO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:168</i><br>
	 * _SC_DEVICE_SPECIFIC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:169</i><br>
	 * _SC_DEVICE_SPECIFIC_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:170</i><br>
	 * _SC_FD_MGMT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:171</i><br>
	 * _SC_FIFO
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:172</i><br>
	 * _SC_PIPE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:173</i><br>
	 * _SC_FILE_ATTRIBUTES
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:174</i><br>
	 * _SC_FILE_LOCKING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:175</i><br>
	 * _SC_FILE_SYSTEM
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:176</i><br>
	 * _SC_MONOTONIC_CLOCK
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:177</i><br>
	 * _SC_MULTI_PROCESS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:178</i><br>
	 * _SC_SINGLE_PROCESS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:179</i><br>
	 * _SC_NETWORKING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:180</i><br>
	 * _SC_READER_WRITER_LOCKS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:181</i><br>
	 * _SC_SPIN_LOCKS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:182</i><br>
	 * _SC_REGEXP
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:183</i><br>
	 * _SC_REGEX_VERSION
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:184</i><br>
	 * _SC_SHELL
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:185</i><br>
	 * _SC_SIGNALS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:186</i><br>
	 * _SC_SPAWN
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:187</i><br>
	 * _SC_SPORADIC_SERVER
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:188</i><br>
	 * _SC_THREAD_SPORADIC_SERVER
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:189</i><br>
	 * _SC_SYSTEM_DATABASE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:190</i><br>
	 * _SC_SYSTEM_DATABASE_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:191</i><br>
	 * _SC_TIMEOUTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:192</i><br>
	 * _SC_TYPED_MEMORY_OBJECTS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:193</i><br>
	 * _SC_USER_GROUPS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:194</i><br>
	 * _SC_USER_GROUPS_R
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:195</i><br>
	 * _SC_2_PBS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:196</i><br>
	 * _SC_2_PBS_ACCOUNTING
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:197</i><br>
	 * _SC_2_PBS_LOCATE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:198</i><br>
	 * _SC_2_PBS_MESSAGE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:199</i><br>
	 * _SC_2_PBS_TRACK
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:200</i><br>
	 * _SC_SYMLOOP_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:201</i><br>
	 * _SC_STREAMS
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:202</i><br>
	 * _SC_2_PBS_CHECKPOINT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:203</i><br>
	 * _SC_V6_ILP32_OFF32
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:204</i><br>
	 * _SC_V6_ILP32_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:205</i><br>
	 * _SC_V6_LP64_OFF64
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:206</i><br>
	 * _SC_V6_LPBIG_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:207</i><br>
	 * _SC_HOST_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:208</i><br>
	 * _SC_TRACE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:209</i><br>
	 * _SC_TRACE_EVENT_FILTER
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:210</i><br>
	 * _SC_TRACE_INHERIT
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:211</i><br>
	 * _SC_TRACE_LOG
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:212</i><br>
	 * _SC_LEVEL1_ICACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:213</i><br>
	 * _SC_LEVEL1_ICACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:214</i><br>
	 * _SC_LEVEL1_ICACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:215</i><br>
	 * _SC_LEVEL1_DCACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:216</i><br>
	 * _SC_LEVEL1_DCACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:217</i><br>
	 * _SC_LEVEL1_DCACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:218</i><br>
	 * _SC_LEVEL2_CACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:219</i><br>
	 * _SC_LEVEL2_CACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:220</i><br>
	 * _SC_LEVEL2_CACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:221</i><br>
	 * _SC_LEVEL3_CACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:222</i><br>
	 * _SC_LEVEL3_CACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:223</i><br>
	 * _SC_LEVEL3_CACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:224</i><br>
	 * _SC_LEVEL4_CACHE_SIZE
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:225</i><br>
	 * _SC_LEVEL4_CACHE_ASSOC
	 */
	/**
	 * Conversion Error : _SC_UIO_MAXIOV<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:226</i><br>
	 * _SC_LEVEL4_CACHE_LINESIZE
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:227</i><br>
	 * _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:228</i><br>
	 * _SC_RAW_SOCKETS
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:229</i><br>
	 * _SC_V7_ILP32_OFF32
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:230</i><br>
	 * _SC_V7_ILP32_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:231</i><br>
	 * _SC_V7_LP64_OFF64
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:232</i><br>
	 * _SC_V7_LPBIG_OFFBIG
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:233</i><br>
	 * _SC_SS_REPL_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:234</i><br>
	 * _SC_TRACE_EVENT_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:235</i><br>
	 * _SC_TRACE_NAME_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:236</i><br>
	 * _SC_TRACE_SYS_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:237</i><br>
	 * _SC_TRACE_USER_EVENT_MAX
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:238</i><br>
	 * _SC_XOPEN_STREAMS
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:239</i><br>
	 * _SC_THREAD_ROBUST_PRIO_INHERIT
	 */
	/**
	 * Conversion Error : _SC_LEVEL1_ICACHE_SIZE<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/bits/confname.h:240</i><br>
	 * _SC_THREAD_ROBUST_PRIO_PROTECT
	 */
	/** The default search path. */
	public static final int _CS_PATH = 0;
	public static final int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;
	public static final int _CS_GNU_LIBC_VERSION = 2;
	public static final int _CS_GNU_LIBPTHREAD_VERSION = 3;
	public static final int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;
	public static final int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;
	public static final int _CS_LFS_CFLAGS = 1000;
	public static final int _CS_LFS_LDFLAGS = 1001;
	public static final int _CS_LFS_LIBS = 1002;
	public static final int _CS_LFS_LINTFLAGS = 1003;
	public static final int _CS_LFS64_CFLAGS = 1004;
	public static final int _CS_LFS64_LDFLAGS = 1005;
	public static final int _CS_LFS64_LIBS = 1006;
	public static final int _CS_LFS64_LINTFLAGS = 1007;
	public static final int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;
	public static final int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;
	public static final int _CS_XBS5_ILP32_OFF32_LIBS = 1102;
	public static final int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;
	public static final int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;
	public static final int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;
	public static final int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;
	public static final int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;
	public static final int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;
	public static final int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;
	public static final int _CS_XBS5_LP64_OFF64_LIBS = 1110;
	public static final int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;
	public static final int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;
	public static final int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;
	public static final int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;
	public static final int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;
	public static final int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;
	public static final int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;
	public static final int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;
	public static final int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;
	public static final int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;
	public static final int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;
	public static final int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;
	public static final int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;
	public static final int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;
	public static final int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;
	public static final int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;
	public static final int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;
	public static final int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;
	public static final int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;
	public static final int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;
	public static final int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;
	public static final int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;
	public static final int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;
	public static final int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;
	public static final int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;
	public static final int _CS_V6_ENV = 1148;
	public static final int _CS_V7_ENV = 1149;
	/**
	 * This is the structure from the libstdc++ codecvt class.<br>
	 * <i>native declaration : /usr/include/libio.h:17</i><br>
	 * enum values
	 */
	public static interface __codecvt_result {
		/** <i>native declaration : /usr/include/libio.h:13</i> */
		public static final int __codecvt_ok = 0;
		/** <i>native declaration : /usr/include/libio.h:14</i> */
		public static final int __codecvt_partial = 1;
		/** <i>native declaration : /usr/include/libio.h:15</i> */
		public static final int __codecvt_error = 2;
		/** <i>native declaration : /usr/include/libio.h:16</i> */
		public static final int __codecvt_noconv = 3;
	};
	/**
	 * Types of sockets.<br>
	 * <i>native declaration : /usr/include/bits/socket.h:18</i><br>
	 * enum values
	 */
	public static interface __socket_type {
		/**
		 * Sequenced, reliable, connection-based<br>
		 * byte streams.<br>
		 * <i>native declaration : /usr/include/bits/socket.h:3</i>
		 */
		public static final int SOCK_STREAM = 1;
		/**
		 * Connectionless, unreliable datagrams<br>
		 * of fixed maximum length.<br>
		 * <i>native declaration : /usr/include/bits/socket.h:5</i>
		 */
		public static final int SOCK_DGRAM = 2;
		/**
		 * Raw protocol interface.<br>
		 * <i>native declaration : /usr/include/bits/socket.h:6</i>
		 */
		public static final int SOCK_RAW = 3;
		/**
		 * Reliably-delivered messages.<br>
		 * <i>native declaration : /usr/include/bits/socket.h:7</i>
		 */
		public static final int SOCK_RDM = 4;
		/**
		 * Sequenced, reliable, connection-based,<br>
		 * datagrams of fixed maximum length.<br>
		 * <i>native declaration : /usr/include/bits/socket.h:9</i>
		 */
		public static final int SOCK_SEQPACKET = 5;
		/**
		 * Datagram Congestion Control Protocol.<br>
		 * <i>native declaration : /usr/include/bits/socket.h:10</i>
		 */
		public static final int SOCK_DCCP = 6;
		/**
		 * Linux specific way of getting packets<br>
		 * at the dev level.  For writing rarp and<br>
		 * other similar things on the user level.<br>
		 * <i>native declaration : /usr/include/bits/socket.h:13</i>
		 */
		public static final int SOCK_PACKET = 10;
		/**
		 * Atomically set close-on-exec flag for the<br>
		 * new descriptor(s).<br>
		 * <i>native declaration : /usr/include/bits/socket.h:15</i>
		 */
		public static final int SOCK_CLOEXEC = 2000000;
		/**
		 * Atomically mark descriptor(s) as<br>
		 * non-blocking.<br>
		 * <i>native declaration : /usr/include/bits/socket.h:17</i>
		 */
		public static final int SOCK_NONBLOCK = 4000;
	};
	/** Process out-of-band data. */
	public static final int MSG_OOB = 0x01;
	/** Peek at incoming messages. */
	public static final int MSG_PEEK = 0x02;
	/** Don't use local routing. */
	public static final int MSG_DONTROUTE = 0x04;
	/** Control data lost before delivery. */
	public static final int MSG_CTRUNC = 0x08;
	/** Supply or ask second address. */
	public static final int MSG_PROXY = 0x10;
	public static final int MSG_TRUNC = 0x20;
	/** Nonblocking IO. */
	public static final int MSG_DONTWAIT = 0x40;
	/** End of record. */
	public static final int MSG_EOR = 0x80;
	/** Wait for a full request. */
	public static final int MSG_WAITALL = 0x100;
	public static final int MSG_FIN = 0x200;
	public static final int MSG_SYN = 0x400;
	/** Confirm path validity. */
	public static final int MSG_CONFIRM = 0x800;
	public static final int MSG_RST = 0x1000;
	/** Fetch message from error queue. */
	public static final int MSG_ERRQUEUE = 0x2000;
	/** Do not generate SIGPIPE. */
	public static final int MSG_NOSIGNAL = 0x4000;
	/** Sender will send more. */
	public static final int MSG_MORE = 0x8000;
	/** Wait for at least one packet to return. */
	public static final int MSG_WAITFORONE = 0x10000;
	/**
	 * Set close_on_exit for file<br>
	 * descriptor received through<br>
	 * SCM_RIGHTS.
	 */
	public static final int MSG_CMSG_CLOEXEC = 0x40000000;
	/** Transfer file descriptors. */
	public static final int SCM_RIGHTS = 0x01;
	public static final int PTHREAD_CREATE_JOINABLE = 0;
	public static final int PTHREAD_CREATE_DETACHED = 1;
	public static final int PTHREAD_MUTEX_TIMED_NP = 0;
	public static final int PTHREAD_MUTEX_RECURSIVE_NP = 1;
	public static final int PTHREAD_MUTEX_ERRORCHECK_NP = 2;
	public static final int PTHREAD_MUTEX_ADAPTIVE_NP = 3;
	public static final int PTHREAD_MUTEX_NORMAL = (int)Gdp10Library.PTHREAD_MUTEX_TIMED_NP;
	public static final int PTHREAD_MUTEX_RECURSIVE = (int)Gdp10Library.PTHREAD_MUTEX_RECURSIVE_NP;
	public static final int PTHREAD_MUTEX_ERRORCHECK = (int)Gdp10Library.PTHREAD_MUTEX_ERRORCHECK_NP;
	public static final int PTHREAD_MUTEX_DEFAULT = (int)Gdp10Library.PTHREAD_MUTEX_NORMAL;
	public static final int PTHREAD_MUTEX_STALLED = 0;
	public static final int PTHREAD_MUTEX_STALLED_NP = (int)Gdp10Library.PTHREAD_MUTEX_STALLED;
	public static final int PTHREAD_MUTEX_ROBUST = ((int)Gdp10Library.PTHREAD_MUTEX_STALLED + 1);
	public static final int PTHREAD_MUTEX_ROBUST_NP = (int)Gdp10Library.PTHREAD_MUTEX_ROBUST;
	public static final int PTHREAD_RWLOCK_PREFER_READER_NP = 0;
	public static final int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;
	public static final int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;
	public static final int PTHREAD_RWLOCK_DEFAULT_NP = (int)Gdp10Library.PTHREAD_RWLOCK_PREFER_READER_NP;
	public static final int PTHREAD_INHERIT_SCHED = 0;
	public static final int PTHREAD_EXPLICIT_SCHED = 1;
	public static final int PTHREAD_SCOPE_SYSTEM = 0;
	public static final int PTHREAD_SCOPE_PROCESS = 1;
	public static final int PTHREAD_PROCESS_PRIVATE = 0;
	public static final int PTHREAD_PROCESS_SHARED = 1;
	public static final int PTHREAD_CANCEL_ENABLE = 0;
	public static final int PTHREAD_CANCEL_DISABLE = 1;
	public static final int PTHREAD_CANCEL_DEFERRED = 0;
	public static final int PTHREAD_CANCEL_ASYNCHRONOUS = 1;
	/**
	 * <i>native declaration : src/gdp/gdp/gdp.h:25</i><br>
	 * enum values
	 */
	public static interface gdp_iomode_t {
		/**
		 * no mode specified<br>
		 * <i>native declaration : src/gdp/gdp/gdp.h:20</i>
		 */
		public static final int GDP_MODE_ANY = 0;
		/**
		 * read only<br>
		 * <i>native declaration : src/gdp/gdp/gdp.h:22</i>
		 */
		public static final int GDP_MODE_RO = 1;
		/**
		 * append only<br>
		 * <i>native declaration : src/gdp/gdp/gdp.h:24</i>
		 */
		public static final int GDP_MODE_AO = 2;
	};
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _LFS64_ASYNCHRONOUS_IO = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_LEAVE_ANYCAST = (int)28;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int _POSIX2_CHARCLASS_NAME_MAX = (int)14;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int F_LOCK = (int)1;
	/** <i>native declaration : /usr/include/bits/wchar.h</i> */
	public static final int __WCHAR_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_USER_BUF = (int)1;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int F_TLOCK = (int)2;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_SETTLS = (int)0x00080000;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_CREATED = (int)201;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int F_TEST = (int)3;
	/** <i>native declaration : /usr/include/stdlib.h</i> */
	public static final int __lldiv_t_defined = (int)1;
	/** <i>native declaration : /usr/include/bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_RWLOCKATTR_T = (int)8;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int SEEK_END = (int)2;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_DELETE_DONT_CLOSE = (int)0x40;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int EAI_SYSTEM = (int)-11;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_ONCE_INIT = (int)0;
	/** <i>native declaration : /usr/include/bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_BARRIERATTR_T = (int)4;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_SPIN_LOCKS = (int)200809;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _LFS_LARGEFILE = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int SOL_DECNET = (int)261;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int CHAR_MAX = (int)127;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int MCAST_LEAVE_SOURCE_GROUP = (int)47;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int R_OK = (int)4;
	/** <i>native declaration : /usr/include/bits/setjmp.h</i> */
	public static final int _BITS_SETJMP_H = (int)1;
	/** <i>native declaration : src/gdp/ep/ep_registry.h</i> */
	public static final int EP_REGISTRY_SENDMAIL = (int)0x102;
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((4) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((4) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_PMTUDISC_WANT = (int)1;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_NOTACCEPTABLE = (int)406;
	/**
	 * define<br>
	 * Conversion Error : ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((203) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((203) & ((1UL << 42) - 1)))
	 */
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((403) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((403) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_BLUETOOTH = (int)31;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_PPPOX = (int)24;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((5) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((5) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : src/gdp/ep/ep_conf.h</i> */
	public static final int EP_OSCF_64BITPTR = (int)0;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_MAX_INPUT = (int)255;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_2292HOPOPTS = (int)3;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_ROSE = (int)11;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_RECVERR = (int)11;
	/**
	 * define<br>
	 * Conversion Error : { { 0, 0, 0, 0, 0, (void*)0, 0, 0 } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/pthread.h:0</i><br>
	 * { { 0, 0, 0, 0, 0, (void*)0, 0, 0 } }
	 */
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _LFS64_STDIO = (int)1;
	/** <i>native declaration : src/gdp/ep/ep.h</i> */
	public static final int EP_LIB_USEPTHREADS = (int)0x00000001;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_INTERNAL = (int)10;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_AX25 = (int)3;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_HAVE_PRINTF_FP = (int)1;
	/** <i>native declaration : /usr/include/bits/wchar.h</i> */
	public static final int __WCHAR_MAX = (int)(2147483647);
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_RTSIG_MAX = (int)8;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IOS_OUTPUT = (int)2;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_NETLINK = (int)16;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int _EP_STAT_MODSHIFT = (int)42;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_ASYNCHRONOUS_IO = (int)200809;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_INET6 = (int)10;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_ASH = (int)18;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_IEEE802154 = (int)36;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_BUFSIZ = (int)8192;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _BSD_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_USING_THUNKS = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX = (int)1;
	/** <i>native declaration : /usr/include/time.h</i> */
	public static final int __timer_t_defined = (int)1;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int __LITTLE_ENDIAN = (int)1234;
	/** <i>native declaration : /usr/include/wchar.h</i> */
	public static final int __mbstate_t_defined = (int)1;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IOS_INPUT = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_UNSPEC = (int)0;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_FLAGS2_MMAP = (int)1;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int ____FILE_defined = (int)1;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_TTY_NAME_MAX = (int)9;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int BIG_ENDIAN = (int)4321;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int CHAR_MIN = (int)(-128);
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int SOL_IPV6 = (int)41;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int _EP_STAT_DETBITS = (int)42;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _UNISTD_H = (int)1;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int TRY_AGAIN = (int)2;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_APPLETALK = (int)5;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int EAI_MEMORY = (int)-10;
	/** <i>native declaration : /usr/include/bits/stdio_lim.h</i> */
	public static final int L_ctermid = (int)9;
	/** <i>native declaration : /usr/include/bits/waitflags.h</i> */
	public static final int __WCLONE = (int)0x80000000;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final String _PATH_NETWORKS = (String)"/etc/networks";
	/** <i>native declaration : /usr/include/bits/waitflags.h</i> */
	public static final int WEXITED = (int)4;
	/** <i>native declaration : /usr/include/bits/typesizes.h</i> */
	public static final int _BITS_TYPESIZES_H = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_TIMERS = (int)200809;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int EAI_FAIL = (int)-4;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_LOCAL = (int)1;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int _POSIX2_LINE_MAX = (int)2048;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_CPUTIME = (int)0;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_AIO_LISTIO_MAX = (int)2;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int NO_DATA = (int)4;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_XPG2 = (int)1;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int _ENDIAN_H = (int)1;
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((18) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((18) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_XPG4 = (int)1;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_XPG3 = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_MULTICAST_ALL = (int)49;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int EP_STAT_MOD_GENERIC = (int)0;
	/** <i>native declaration : src/gdp/ep/ep_conf.h</i> */
	public static final int EP_OSCF_HAS_STDBOOL_H = (int)1;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int EP_STAT_SEV_OK = (int)(0);
	/** <i>native declaration : src/gdp/ep/ep_registry.h</i> */
	public static final int EP_REGISTRY_USER = (int)0x001;
	/** <i>native declaration : /usr/include/bits/wordsize.h</i> */
	public static final int __WORDSIZE = (int)64;
	/** <i>native declaration : /usr/include/bits/environments.h</i> */
	public static final String __LP64_OFF64_LDFLAGS = (String)"-m64";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX2 = (int)1;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_SYMLINK_MAX = (int)255;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_MTU_DISCOVER = (int)23;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_HAVE_IO_GETLINE_INFO = (int)1;
	/** <i>native declaration : /usr/include/bits/wchar.h</i> */
	public static final int _BITS_WCHAR_H = (int)1;
	/** <i>native declaration : src/gdp/ep/ep_conf.h</i> */
	public static final int EP_OSCF_HAS_STRING_H = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_PHONET = (int)35;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_NETROM = (int)6;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_FORBIDDEN = (int)403;
	/** <i>native declaration : /usr/include/bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_RWLOCK_T = (int)56;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int AI_ALL = (int)0x0010;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_HOST_NAME_MAX = (int)255;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_MEMORY_PROTECTION = (int)200809;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_SKIPWS = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _XOPEN_SHM = (int)1;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_IS_FILEBUF = (int)0x2000;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_SPAWN = (int)200809;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX_IMPLICITLY = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_ECONET = (int)19;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_SEMAPHORES = (int)200809;
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((11) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((11) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int EAI_FAMILY = (int)-6;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_NGROUPS_MAX = (int)8;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_UNIX = (int)1;
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int PTHREAD_DESTRUCTOR_ITERATIONS = (int)4;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IOS_APPEND = (int)8;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_ATTR_STACKSIZE = (int)200809;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int AI_NUMERICSERV = (int)0x0400;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_PIPE_BUF = (int)512;
	/**
	 * define<br>
	 * Conversion Error : ((((7) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((12) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((7) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((12) & ((1UL << 42) - 1)))
	 */
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((17) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((17) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_CHECKSUM = (int)7;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_PRIO_PROTECT = (int)200809;
	/** <i>native declaration : src/gdp/ep/ep_conf.h</i> */
	public static final int EP_OSCF_HAS_INTTYPES_H = (int)1;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int EAI_AGAIN = (int)-3;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_ROUTE = (int)16;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_ADD_MEMBERSHIP = (int)35;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_SHOWPOINT = (int)400;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_KEY = (int)15;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_HAVE_SYS_WAIT = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_SAVED_IDS = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_MONOTONIC_CLOCK = (int)0;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_PPPOX = (int)24;
	/** <i>native declaration : /usr/include/bits/waitflags.h</i> */
	public static final int __WNOTHREAD = (int)0x20000000;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_BLOCK_SOURCE = (int)38;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_RE_DUP_MAX = (int)255;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_STDIO = (int)40000;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_RDS = (int)21;
	/**
	 * define<br>
	 * Conversion Error : ((((4) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((3) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/ep/ep_statcodes.h:0</i><br>
	 * ((((4) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((3) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/waitflags.h</i> */
	public static final int WSTOPPED = (int)2;
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int PTHREAD_KEYS_MAX = (int)1024;
	/** <i>native declaration : src/gdp/ep/ep_registry.h</i> */
	public static final int EP_REGISTRY_EPLIB = (int)0x100;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __STDC_IEC_559_COMPLEX__ = (int)1;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int PTHREAD_BARRIER_SERIAL_THREAD = (int)-1;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int UCHAR_MAX = (int)255;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_MAX_MEMBERSHIPS = (int)20;
	/** <i>native declaration : /usr/include/bits/waitstatus.h</i> */
	public static final int __WCOREFLAG = (int)0x80;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_VERSION = (int)700;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _ATFILE_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_AIO_MAX = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_ATTR_STACKADDR = (int)200809;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_ERR_SEEN = (int)0x20;
	/**
	 * define<br>
	 * Conversion Error : ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((205) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((205) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_RAW_SOCKETS = (int)200809;
	/** <i>native declaration : /usr/include/bits/waitstatus.h</i> */
	public static final int __W_CONTINUED = (int)0xffff;
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((502) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((502) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RTHDR_LOOSE = (int)0;
	/** <i>native declaration : /usr/include/bits/environments.h</i> */
	public static final String __ILP32_OFFBIG_CFLAGS = (String)"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64";
	/**
	 * define<br>
	 * Conversion Error : ((((7) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((0) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/ep/ep_statcodes.h:0</i><br>
	 * ((((7) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((0) & ((1UL << 42) - 1)))
	 */
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((505) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((505) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/endian.h</i> */
	public static final int __BYTE_ORDER = (int)1234;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_FLAGS2_NOTCANCEL = (int)2;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_VALID = (int)203;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((413) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((413) & ((1UL << 42) - 1)))
	 */
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((8) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((8) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_PRIORITY_SCHEDULING = (int)200809;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_ISDN = (int)34;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_IO_IO_FILE_VERSION = (int)0x20001;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_X25 = (int)9;
	/** <i>native declaration : /usr/include/time.h</i> */
	public static final int __time_t_defined = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __STDC_IEC_559__ = (int)1;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final String P_tmpdir = (String)"/tmp";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_FORTIFY_LEVEL = (int)0;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RTHDR = (int)57;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_RIGHT = (int)4;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_SNA = (int)22;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_ROBUST_PRIO_INHERIT = (int)200809;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final long ULLONG_MAX = (long)-1L;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_SYMLOOP_MAX = (int)8;
	/** <i>native declaration : /usr/include/bits/stdio_lim.h</i> */
	public static final int L_tmpnam = (int)20;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int _POSIX2_EXPR_NEST_MAX = (int)32;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX199309 = (int)1;
	/**
	 * define<br>
	 * Conversion Error : ((((4) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((9) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((4) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((9) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RECVHOPOPTS = (int)53;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_ROUTER_ALERT = (int)22;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int F_OK = (int)0;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_LEGACY = (int)1;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_MAGIC = (int)0xFBAD0000;
	/** <i>native declaration : /usr/include/pthread.h</i> */
	// public static final Pointer PTHREAD_CANCELED = (Pointer)-1;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_CURRENTLY_PUTTING = (int)0x800;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int IPPORT_RESERVED = (int)1024;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _XOPEN_REALTIME = (int)1;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int EP_STAT_SEV_ERROR = (int)(5);
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int MCAST_JOIN_SOURCE_GROUP = (int)46;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_NOTIMPL = (int)501;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_IPX = (int)4;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int EAI_NONAME = (int)-2;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RECVRTHDR = (int)56;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_PMTUDISC_DO = (int)2;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((406) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((406) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _SVID_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_LEFT = (int)2;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_RECVOPTS = (int)6;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_UNIX = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_DSTOPTS = (int)59;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_ORIGDSTADDR = (int)20;
	/**
	 * define<br>
	 * Conversion Error : ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((201) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((201) & ((1UL << 42) - 1)))
	 */
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((13) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((13) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_LINK_MAX = (int)8;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_DROP_SOURCE_MEMBERSHIP = (int)40;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_MSFILTER = (int)41;
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int DELAYTIMER_MAX = (int)2147483647;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_PROXYNOTSUP = (int)505;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int SOMAXCONN = (int)128;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_SIGQUEUE_MAX = (int)32;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int USHRT_MAX = (int)65535;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_ASH = (int)18;
	/**
	 * define<br>
	 * Conversion Error : ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((200) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((200) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IOS_NOCREATE = (int)32;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_NEWNET = (int)0x40000000;
	/** <i>native declaration : /usr/include/alloca.h</i> */
	public static final int _ALLOCA_H = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_PMTUDISC_PROBE = (int)3;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_BOOLALPHA = (int)200000;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_TIED_PUT_GET = (int)0x400;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((2) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/ep/ep_statcodes.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((2) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int BUFSIZ = (int)8192;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_NAMES_HAVE_UNDERSCORE = (int)0;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_SHELL = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_NETBEUI = (int)13;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final String _PATH_HEQUIV = (String)"/etc/hosts.equiv";
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((0) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/ep/ep_statcodes.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((0) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_WANPIPE = (int)25;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_NOTFOUND = (int)404;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_XCU_VERSION = (int)4;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_DEFAULT_MULTICAST_LOOP = (int)1;
	/** <i>native declaration : src/gdp/ep/ep_conf.h</i> */
	public static final int EP_OSCF_HAS_STDLIB_H = (int)1;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_STREAM_MAX = (int)8;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int NI_MAXSERV = (int)32;
	/** <i>native declaration : src/gdp/ep/ep_conf.h</i> */
	public static final int EP_OSCF_HAS_UNISTD_H = (int)1;
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h</i><br>
	 * = { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }
	 */
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_IPX = (int)4;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_RXRPC = (int)33;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_DETACHED = (int)0x00400000;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((402) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((402) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int SCHED_FIFO = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_REGEXP = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_ECONET = (int)19;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _POSIX2_SW_DEV = (int)200809;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int SEEK_CUR = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_NETLINK = (int)16;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_INET = (int)2;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int STDOUT_FILENO = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_ATMSVC = (int)20;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_XOPEN2K = (int)1;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int _POSIX2_BC_SCALE_MAX = (int)99;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC_MINOR__ = (int)12;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_PKTINFO = (int)50;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int F_ULOCK = (int)0;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_CHILD_MAX = (int)25;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int EP_STAT_SEV_ABORT = (int)(7);
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_FREEBIND = (int)15;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int MCAST_JOIN_GROUP = (int)42;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int MCAST_LEAVE_GROUP = (int)45;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int W_OK = (int)2;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_TRACE_LOG = (int)-1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_DEFAULT_MULTICAST_TTL = (int)1;
	/** <i>native declaration : /usr/include/bits/environments.h</i> */
	public static final int _POSIX_V6_LPBIG_OFFBIG = (int)-1;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int BC_SCALE_MAX = (int)99;
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((7) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((7) & ((1UL << 42) - 1)))
	 */
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((1) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((1) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/waitflags.h</i> */
	public static final int WNOWAIT = (int)0x01000000;
	/** <i>native declaration : /usr/include/bits/stdio_lim.h</i> */
	public static final int FOPEN_MAX = (int)16;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _FEATURES_H = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RECVDSTOPTS = (int)58;
	/** <i>native declaration : /usr/include/stdlib.h</i> */
	public static final int RAND_MAX = (int)2147483647;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((412) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((412) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/waitflags.h</i> */
	public static final int WUNTRACED = (int)2;
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int MQ_PRIO_MAX = (int)32768;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ATFILE = (int)1;
	/** <i>native declaration : /usr/include/bits/time.h</i> */
	public static final int _STRUCT_TIMEVAL = (int)1;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int _NETDB_H = (int)1;
	/** <i>native declaration : src/gdp/ep/ep_registry.h</i> */
	public static final int EP_REGISTRY_UCB = (int)0x103;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int MB_LEN_MAX = (int)16;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _POSIX2_VERSION = (int)200809;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_BADGATEWAY = (int)502;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_CHANGED = (int)204;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_BADREQ = (int)400;
	/** <i>native declaration : /usr/include/bits/sockaddr.h</i> */
	public static final int _BITS_SOCKADDR_H = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_UNIX = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX2_CHAR_TERM = (int)200809;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_CRYPT = (int)1;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int AI_V4MAPPED = (int)0x0008;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_PASSSEC = (int)18;
	/** <i>native declaration : /usr/include/bits/environments.h</i> */
	public static final String __LP64_OFF64_CFLAGS = (String)"-m64";
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_MULTICAST_HOPS = (int)18;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int NETDB_SUCCESS = (int)0;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_SEM_VALUE_MAX = (int)32767;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_RECVRETOPTS = (int)7;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int BYTE_ORDER = (int)1234;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int _LIBC_LIMITS_H_ = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RECVPKTINFO = (int)49;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_SAFE_FUNCTIONS = (int)200809;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_PMTUDISC = (int)10;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_SIGHAND = (int)0x00000800;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int NETDB_INTERNAL = (int)-1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_PHONET = (int)35;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_SUCCESS = (int)200;
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((501) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((501) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int L_INCR = (int)1;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_USER_LOCK = (int)0x8000;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_BRIDGE = (int)7;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_UNBLOCK_SOURCE = (int)37;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final String _G_VTABLE_LABEL_PREFIX = (String)"__vt_";
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int LOGIN_NAME_MAX = (int)256;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_BAD_SEEN = (int)0x4000;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int _POSIX2_BC_BASE_MAX = (int)99;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_PROCESS_SHARED = (int)200809;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_DONT_CLOSE = (int)100000;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int _IOLBF = (int)1;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((2) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((2) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int _LIMITS_H = (int)1;
	/** <i>native declaration : /usr/include/bits/environments.h</i> */
	public static final String __ILP32_OFF32_CFLAGS = (String)"-m32";
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final long SSIZE_MAX = (long)9223372036854775807L;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_GWTIMEOUT = (int)504;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int __FLOAT_WORD_ORDER = (int)1234;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int NO_ADDRESS = (int)4;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int EAI_SERVICE = (int)-8;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final int ____gwchar_t_defined = (int)1;
	/** <i>native declaration : src/gdp/gdp/gdp.h</i> */
	public static final int GDP_EVENT_DATA = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _BITS_POSIX_OPT_H = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_APPLETALK = (int)5;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_VFORK = (int)0x00004000;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_MULTICAST_IF = (int)17;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_TYPED_MEMORY_OBJECTS = (int)-1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_IRDA = (int)23;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_READER_WRITER_LOCKS = (int)200809;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IOS_BIN = (int)128;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_SECURITY = (int)14;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_IUCV = (int)32;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_BUFSIZ = (int)8192;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int SOL_IP = (int)0;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_OCT = (int)40;
	/**
	 * define<br>
	 * Conversion Error : ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((202) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((202) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final String _PATH_PROTOCOLS = (String)"/etc/protocols";
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_UNITBUF = (int)20000;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_TIPC = (int)30;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int EP_STAT_MAX_MODULES = (int)((1 << 8) - 1);
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_TIPC = (int)30;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int EP_STAT_MOD_ERRNO = (int)0x0FE;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int _EP_STAT_MODBITS = (int)8;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_FILE = (int)1;
	/** <i>native declaration : /usr/include/bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_MUTEX_T = (int)40;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final String _PATH_SERVICES = (String)"/etc/services";
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_DROP_MEMBERSHIP = (int)21;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_UNIFIED_JUMPTABLES = (int)1;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IOS_NOREPLACE = (int)64;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_SYNCHRONIZED_IO = (int)200809;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int NI_NOFQDN = (int)4;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int EP_STAT_SEV_SEVERE = (int)(6);
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_XFRM_POLICY = (int)35;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CSIGNAL = (int)0x000000ff;
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((503) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((503) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/pthreadtypes.h</i> */
	public static final int __PTHREAD_MUTEX_HAVE_PREV = (int)1;
	/** <i>native declaration : src/gdp/ep/ep_conf.h</i> */
	public static final int EP_OSCF_HAS_STDINT_H = (int)1;
	/** <i>native declaration : /usr/include/bits/environments.h</i> */
	public static final String __ILP32_OFFBIG_LDFLAGS = (String)"-m32";
	/** <i>native declaration : src/gdp/gdp/gdp.h</i> */
	public static final int GDP_GCL_PNAME_LEN = (int)43;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_IPSEC_POLICY = (int)34;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_REENTRANT_FUNCTIONS = (int)1;
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int SEM_VALUE_MAX = (int)(2147483647);
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_XOPEN2K8 = (int)1;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int __CPU_SETSIZE = (int)1024;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int __POSIX2_THIS_VERSION = (int)200809;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IOS_ATEND = (int)4;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_MULTICAST_TTL = (int)33;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_IEEE802154 = (int)36;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_TOOLARGE = (int)413;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int EXPR_NEST_MAX = (int)32;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _XOPEN_ENH_I18N = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_2292RTHDR = (int)5;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int L_SET = (int)0;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int NO_RECOVERY = (int)3;
	/** <i>native declaration : /usr/include/bits/pthreadtypes.h</i> */
	public static final int _BITS_PTHREADTYPES_H = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_AUTHHDR = (int)10;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_BSD = (int)1;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int _EP_STAT_SEVBITS = (int)3;
	/** <i>native declaration : src/gdp/ep/ep_registry.h</i> */
	public static final int EP_REGISTRY_NEOPHILIC = (int)0x101;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int NI_DGRAM = (int)16;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_LLC = (int)26;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_HAVE_LONG_DOUBLE_IO = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _XOPEN_REALTIME_THREADS = (int)1;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int LINE_MAX = (int)2048;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int PDP_ENDIAN = (int)3412;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_MAX = (int)37;
	/** <i>native declaration : /usr/include/bits/environments.h</i> */
	public static final int _POSIX_V6_LP64_OFF64 = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_SECURITY = (int)14;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final long LONG_MIN = (long)(-9223372036854775807L - 1);
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_UNAUTH = (int)401;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_HAVE_BOOL = (int)1;
	/**
	 * define<br>
	 * Conversion Error : ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((0) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/ep/ep_statcodes.h:0</i><br>
	 * ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((0) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_TCLASS = (int)67;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int NI_NUMERICSERV = (int)2;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_ADD_MEMBERSHIP = (int)20;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int SOL_AAL = (int)265;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_SVID = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_TRACE_EVENT_FILTER = (int)-1;
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int TTY_NAME_MAX = (int)32;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ISOC99 = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_OPTIONS = (int)4;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ISOC95 = (int)1;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int LITTLE_ENDIAN = (int)1234;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_HAVE_IO_FILE_OPEN = (int)1;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int AI_CANONNAME = (int)0x0002;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_MESSAGE_PASSING = (int)200809;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_MQ_OPEN_MAX = (int)8;
	/** <i>native declaration : /usr/include/bits/uio.h</i> */
	public static final int UIO_MAXIOV = (int)1024;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_DELETED = (int)202;
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = (int)4;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_NETROM = (int)6;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_TZNAME_MAX = (int)6;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_PRIORITIZED_IO = (int)200809;
	/** <i>native declaration : /usr/include/time.h</i> */
	public static final int __clockid_t_defined = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_CHOWN_RESTRICTED = (int)0;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_HOPOPTS = (int)54;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_RECVORIGDSTADDR = (int)20;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_CONTENT = (int)205;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int STDERR_FILENO = (int)2;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_PMTUDISC_PROBE = (int)3;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int X_OK = (int)1;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _POSIX2_LOCALEDEF = (int)200809;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final long LONG_MAX = (long)9223372036854775807L;
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int _POSIX_THREAD_KEYS_MAX = (int)128;
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int __PDP_ENDIAN = (int)3412;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_WANPIPE = (int)25;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final int _INTTYPES_H = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_PACKET = (int)17;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int MCAST_MSFILTER = (int)48;
	/**
	 * define<br>
	 * Conversion Error : ((((4) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((0) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/ep/ep_statcodes.h:0</i><br>
	 * ((((4) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((0) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int _EP_STAT_REGSHIFT = (int)(42 + 8);
	/** <i>native declaration : /usr/include/bits/wordsize.h</i> */
	public static final int __WORDSIZE_COMPAT32 = (int)1;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_NEWPID = (int)0x20000000;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int MCAST_BLOCK_SOURCE = (int)43;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_UPPERCASE = (int)1000;
	/** <i>native declaration : /usr/include/stdlib.h</i> */
	public static final int _STDLIB_H = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_JOIN_GROUP = (int)20;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_CLOCKRES_MIN = (int)20000000;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int EP_STAT_MAX_DETAIL = (int)((1 << 42) - 1);
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_NEWUSER = (int)0x10000000;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_JOB_CONTROL = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_MTU_DISCOVER = (int)10;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_config_h = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_PRIO_INHERIT = (int)200809;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RTHDRDSTOPTS = (int)55;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int AI_PASSIVE = (int)0x0001;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_NEWIPC = (int)0x08000000;
	/** <i>native declaration : /usr/include/bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_COND_T = (int)48;
	/** <i>native declaration : /usr/include/bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_ATTR_T = (int)56;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int AI_NUMERICHOST = (int)0x0004;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_MAX_CANON = (int)255;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int BC_DIM_MAX = (int)2048;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int SOL_ICMPV6 = (int)58;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_PMTUDISC_DONT = (int)0;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_ROUTER_ALERT = (int)5;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_HAVE_MMAP = (int)1;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int HOST_NOT_FOUND = (int)1;
	/**
	 * define<br>
	 * Conversion Error : ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((204) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((0) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((204) & ((1UL << 42) - 1)))
	 */
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((0) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/ep/ep_statcodes.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((0) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int __FILE_defined = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_UNICAST_HOPS = (int)16;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_FLAGS2_USER_WBUF = (int)8;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int SOL_IRDA = (int)266;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_NO_WRITES = (int)8;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int SOL_ATM = (int)264;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_DELAYTIMER_MAX = (int)32;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_FILE = (int)1;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_IN_BACKUP = (int)0x100;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_RECVTTL = (int)12;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_INTERNAL = (int)500;
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((504) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((504) & ((1UL << 42) - 1)))
	 */
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((404) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((404) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_LLC = (int)26;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_NO_READS = (int)4;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_RDS = (int)21;
	/** <i>native declaration : /usr/include/bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_MUTEXATTR_T = (int)4;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_TIMER_MAX = (int)32;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_LOCAL = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_MISC = (int)1;
	/** <i>native declaration : /usr/include/bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_BARRIER_T = (int)32;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ANSI = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RXHOPOPTS = (int)54;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_BRIDGE = (int)7;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_PARENT = (int)0x00008000;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int SOL_PACKET = (int)263;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RXDSTOPTS = (int)59;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_UNBUFFERED = (int)2;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_DEC = (int)20;
	/** <i>native declaration : /usr/include/time.h</i> */
	public static final int __clock_t_defined = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_PKTOPTIONS = (int)9;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((10) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((10) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_REALTIME_SIGNALS = (int)200809;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_SPORADIC_SERVER = (int)-1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_IRDA = (int)23;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_NEED_STDARG_H = (int)1;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_OPEN_MAX = (int)20;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_2292HOPLIMIT = (int)8;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_BADOPT = (int)402;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_SVCUNAVAIL = (int)503;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_MEMLOCK_RANGE = (int)200809;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((400) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((400) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_MEMLOCK = (int)200809;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_ADVISORY_INFO = (int)200809;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_LOGIN_NAME_MAX = (int)9;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_ADD_SOURCE_MEMBERSHIP = (int)39;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_TTL = (int)2;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_NEXTHOP = (int)9;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_MAGIC_MASK = (int)0xFFFF0000;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _POSIX_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int NI_NUMERICHOST = (int)1;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_MODULE = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_ROSE = (int)11;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_SYSVSEM = (int)0x00040000;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_ARG_MAX = (int)4096;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_ASYNC_IO = (int)1;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_CHILD_CLEARTID = (int)0x00200000;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_FS = (int)0x00000200;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int STDIN_FILENO = (int)0;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_PTRACE = (int)0x00002000;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_JOIN_ANYCAST = (int)27;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_NO_TRUNC = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_2292DSTOPTS = (int)4;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_IO = (int)0x80000000;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_RECVTOS = (int)13;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _LFS64_LARGEFILE = (int)1;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_FIXED = (int)10000;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_LEAVE_GROUP = (int)21;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_PRECONFAILED = (int)412;
	/** <i>native declaration : /usr/include/bits/uio.h</i> */
	public static final int _BITS_UIO_H = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_ATMSVC = (int)20;
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h</i><br>
	 * = { { 0, 0, 0, 0, 0, (void*)0, 0, 0 } }
	 */
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int _SS_SIZE = (int)128;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int BC_BASE_MAX = (int)99;
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int _POSIX_THREAD_THREADS_MAX = (int)64;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int EP_STAT_MAX_REGISTRIES = (int)((1 << 11) - 1);
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_TOS = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_TIMEOUTS = (int)200809;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_UNSUPMEDIA = (int)415;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_VTABLE_LABEL_HAS_LENGTH = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC_HAVE_LONG_LONG = (int)1;
	/** <i>native declaration : /usr/include/stdlib.h</i> */
	public static final int EXIT_SUCCESS = (int)0;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_VM = (int)0x00000100;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_FILES = (int)0x00000400;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_LINKED = (int)0x80;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int SCHAR_MAX = (int)127;
	/** <i>native declaration : /usr/include/bits/environments.h</i> */
	public static final int _XBS5_LPBIG_OFFBIG = (int)-1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_RXRPC = (int)33;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int SEEK_SET = (int)0;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_DROP_MEMBERSHIP = (int)36;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_BLUETOOTH = (int)31;
	/**
	 * define<br>
	 * Conversion Error : ((((7) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((15) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((7) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((15) & ((1UL << 42) - 1)))
	 */
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((415) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((415) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/stdio_lim.h</i> */
	public static final int FILENAME_MAX = (int)4096;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int _EP_STAT_REGBITS = (int)11;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RTHDR_STRICT = (int)1;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int _POSIX2_COLL_WEIGHTS_MAX = (int)2;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final String _PATH_HOSTS = (String)"/etc/hosts";
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_IUCV = (int)32;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_SHOWBASE = (int)200;
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int AIO_PRIO_DELTA_MAX = (int)20;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_2292PKTOPTIONS = (int)6;
	/** <i>native declaration : /usr/include/bits/environments.h</i> */
	public static final int _XBS5_LP64_OFF64 = (int)1;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_SCIENTIFIC = (int)4000;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int AI_ADDRCONFIG = (int)0x0020;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC__ = (int)2;
	/** <i>native declaration : /usr/include/bits/stdio_lim.h</i> */
	public static final int TMP_MAX = (int)238328;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int MCAST_UNBLOCK_SOURCE = (int)44;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_HAVE_SYS_WAIT = (int)1;
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int PTHREAD_STACK_MIN = (int)16384;
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int _STDINT_H = (int)1;
	/** <i>native declaration : /usr/include/bits/environments.h</i> */
	public static final int _POSIX_V7_LPBIG_OFFBIG = (int)-1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_DECnet = (int)12;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((4) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/ep/ep_statcodes.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((4) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_MULTICAST_IF = (int)32;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GNU_LIBRARY__ = (int)6;
	/** <i>native declaration : /usr/include/bits/byteswap.h</i> */
	public static final int _BITS_BYTESWAP_H = (int)1;
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h</i><br>
	 * = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }
	 */
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_ADDRFORM = (int)1;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final long UINT_MAX = (long)4294967295L;
	/** <i>native declaration : /usr/include/bits/waitflags.h</i> */
	public static final int WNOHANG = (int)1;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int SCHAR_MIN = (int)(-128);
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int __defined_schedparam = (int)1;
	/** <i>native declaration : /usr/include/bits/environments.h</i> */
	public static final String __ILP32_OFF32_LDFLAGS = (String)"-m32";
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_MAX = (int)37;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_TRACE_INHERIT = (int)-1;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_THREAD = (int)0x00010000;
	/** <i>native declaration : src/gdp/gdp/gdp_stat.h</i> */
	public static final int GDP_COAP_METHNOTALLOWED = (int)405;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_NEWNS = (int)0x00020000;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _BITS_POSIX1_LIM_H = (int)1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_CAN = (int)29;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_PARENT_SETTID = (int)0x00100000;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int EAI_OVERFLOW = (int)-12;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_PMTUDISC_DONT = (int)0;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final long LLONG_MAX = (long)9223372036854775807L;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int NULL = (int)(0);
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RTHDR_TYPE_0 = (int)0;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IOS_TRUNC = (int)16;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int EP_STAT_SEV_WARN = (int)(4);
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_SHARED_MEMORY_OBJECTS = (int)200809;
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((19) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((19) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_HAVE_MREMAP = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_TRANSPARENT = (int)19;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_SEM_NSEMS_MAX = (int)256;
	/** <i>native declaration : /usr/include/stdlib.h</i> */
	public static final int __ldiv_t_defined = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __STDC_ISO_10646__ = (int)200009;
	/** <i>native declaration : /usr/include/bits/pthreadtypes.h</i> */
	public static final int __SIZEOF_PTHREAD_CONDATTR_T = (int)4;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_ATMPVC = (int)8;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int SOL_RAW = (int)255;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int EAI_BADFLAGS = (int)-1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_CAN = (int)29;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_CLOCK_SELECTION = (int)200809;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_NAME_MAX = (int)14;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_IPV6 = (int)200809;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_HAVE_SYS_CDEFS = (int)1;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _POSIX2_C_DEV = (int)200809;
	/** <i>native declaration : src/gdp/ep/ep_conf.h</i> */
	public static final int EP_OSCF_USE_PTHREADS = (int)1;
	/**
	 * define<br>
	 * Conversion Error : { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/pthread.h:0</i><br>
	 * { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }
	 */
	/** <i>native declaration : /usr/include/bits/types.h</i> */
	public static final int _BITS_TYPES_H = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final char _POSIX_VDISABLE = (char)'\0';
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_ATMPVC = (int)8;
	/** <i>native declaration : /usr/include/bits/typesizes.h</i> */
	public static final int __FD_SETSIZE = (int)1024;
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((500) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((500) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int EAI_SOCKTYPE = (int)-7;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _POSIX_C_SOURCE = (int)200809;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_INET6 = (int)10;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int SCHED_RR = (int)2;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_XFRM_POLICY = (int)17;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final long LLONG_MIN = (long)(-9223372036854775807L - 1L);
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int _POSIX2_RE_DUP_MAX = (int)255;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_ROUTE = (int)16;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RECVHOPLIMIT = (int)51;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _LFS_ASYNCHRONOUS_IO = (int)1;
	/** <i>native declaration : /usr/include/bits/waitflags.h</i> */
	public static final int __WALL = (int)0x40000000;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int EOF = (int)(-1);
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_HDRINCL = (int)3;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_UNSPEC = (int)0;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_HOPLIMIT = (int)52;
	/** <i>native declaration : /usr/include/stdlib.h</i> */
	public static final int EXIT_FAILURE = (int)1;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int COLL_WEIGHTS_MAX = (int)255;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_RETOPTS = (int)7;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_PKTINFO = (int)8;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int SHRT_MIN = (int)(-32768);
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RECVERR = (int)25;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _POSIX2_C_BIND = (int)200809;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_MINTTL = (int)21;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_PACKET = (int)17;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_RECVTCLASS = (int)66;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_PATH_MAX = (int)256;
	/**
	 * define<br>
	 * Conversion Error : ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((1) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/ep/ep_statcodes.h:0</i><br>
	 * ((((6) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x100) & ((1UL << 11) - 1)) << (42 + 8)) | (((0) & ((1UL << 8) - 1)) << 42) | ((1) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int NI_MAXHOST = (int)1025;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_KEY = (int)15;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int CHAR_BIT = (int)8;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int SOL_X25 = (int)262;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_MULTICAST_LOOP = (int)34;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_AX25 = (int)3;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_PMTUDISC_DO = (int)2;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_FSYNC = (int)200809;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final String _PATH_NSSWITCH_CONF = (String)"/etc/nsswitch.conf";
	/** <i>native declaration : /usr/include/endian.h</i> */
	public static final int __BIG_ENDIAN = (int)4321;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_DECnet = (int)12;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int _POSIX2_BC_STRING_MAX = (int)1000;
	/** <i>native declaration : src/gdp/ep/ep.h</i> */
	public static final Pointer EP_GEN_DEADBEEF = new Pointer(0xDEADBEEF); // Fixed by cxh in makefile.
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_NETBEUI = (int)13;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int INT_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX199506 = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_V6ONLY = (int)26;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int _POSIX_VERSION = (int)200809;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_SPORADIC_SERVER = (int)-1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_MTU = (int)14;
	/** <i>native declaration : /usr/include/netdb.h</i> */
	public static final int NI_NAMEREQD = (int)8;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _OLD_STDIO_MAGIC = (int)0xFABC0000;
	/** <i>native declaration : /usr/include/bits/local_lim.h</i> */
	public static final int HOST_NAME_MAX = (int)64;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_THREADS = (int)200809;
	/** <i>native declaration : src/gdp/ep/ep_conf.h</i> */
	public static final int EP_OSCF_HAS_SYS_TYPES_H = (int)1;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((6) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((6) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_MTU = (int)24;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int _STDIO_H = (int)1;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_MAPPED_FILES = (int)200809;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int CHARCLASS_NAME_MAX = (int)2048;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_NEWUTS = (int)0x04000000;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_ISDN = (int)34;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_CPUTIME = (int)0;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((401) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((401) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_HEX = (int)100;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int AF_INET = (int)2;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int RE_DUP_MAX = (int)(0x7fff);
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int MCAST_EXCLUDE = (int)0;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_MULTICAST_LOOP = (int)19;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_BARRIERS = (int)200809;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _XOPEN_STREAMS = (int)-1;
	/** <i>native declaration : /usr/include/bits/sigset.h</i> */
	public static final int _SIGSET_H_types = (int)1;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int SHRT_MAX = (int)32767;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((14) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((14) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/pthread.h</i> */
	public static final int _PTHREAD_H = (int)1;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int _BITS_POSIX2_LIM_H = (int)1;
	/** <i>native declaration : /usr/include/sched.h</i> */
	public static final int _SCHED_H = (int)1;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_PMTUDISC_WANT = (int)1;
	/** <i>native declaration : src/gdp/ep/ep_stat.h</i> */
	public static final int _EP_STAT_SEVSHIFT = (int)((42 + 8) + 11);
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IPV6_2292PKTINFO = (int)2;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_EOF_SEEN = (int)0x10;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_PRIORITY_SCHEDULING = (int)200809;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_TRACE = (int)-1;
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_SNA = (int)22;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_LINE_BUF = (int)0x200;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((16) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((16) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int _IONBF = (int)2;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_UNTRACED = (int)0x00800000;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int IP_IPSEC_POLICY = (int)16;
	/** <i>native declaration : /usr/include/bits/posix_opt.h</i> */
	public static final int _POSIX_THREAD_ROBUST_PRIO_PROTECT = (int)-1;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int BC_STRING_MAX = (int)1000;
	/** <i>native declaration : src/gdp/ep/ep_registry.h</i> */
	public static final int EP_REGISTRY_GENERIC = (int)0x000;
	/** <i>native declaration : /usr/include/limits.h</i> */
	public static final int INT_MAX = (int)2147483647;
	/** <i>native declaration : /usr/include/bits/environments.h</i> */
	public static final int _POSIX_V7_LP64_OFF64 = (int)1;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_SHOWPOS = (int)2000;
	/** <i>native declaration : /usr/include/bits/waitflags.h</i> */
	public static final int WCONTINUED = (int)8;
	/**
	 * define<br>
	 * Conversion Error : { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/pthread.h:0</i><br>
	 * { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }
	 */
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int SCHED_OTHER = (int)0;
	/** <i>native declaration : /usr/include/unistd.h</i> */
	public static final int L_XTND = (int)2;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_MQ_PRIO_MAX = (int)32;
	/** <i>native declaration : /usr/include/_G_config.h</i> */
	public static final int _G_HAVE_ATEXIT = (int)1;
	/**
	 * define<br>
	 * Conversion Error : ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((405) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((5) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((405) & ((1UL << 42) - 1)))
	 */
	/**
	 * define<br>
	 * Conversion Error : ((((4) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((3) & ((1UL << 42) - 1)))<br>
	 * SKIPPED:<br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:0</i><br>
	 * ((((4) & ((1UL << 3) - 1)) << ((42 + 8) + 11)) | (((0x103) & ((1UL << 11) - 1)) << (42 + 8)) | (((1) & ((1UL << 8) - 1)) << 42) | ((3) & ((1UL << 42) - 1)))
	 */
	/** <i>native declaration : /usr/include/bits/socket.h</i> */
	public static final int PF_X25 = (int)9;
	/** <i>native declaration : /usr/include/bits/in.h</i> */
	public static final int MCAST_INCLUDE = (int)1;
	/** <i>native declaration : /usr/include/bits/sched.h</i> */
	public static final int CLONE_CHILD_SETTID = (int)0x01000000;
	/** <i>native declaration : /usr/include/libio.h</i> */
	public static final int _IO_IS_APPENDING = (int)0x1000;
	/** <i>native declaration : /usr/include/bits/posix1_lim.h</i> */
	public static final int _POSIX_SSIZE_MAX = (int)32767;
	/** <i>native declaration : /usr/include/stdio.h</i> */
	public static final int _IOFBF = (int)0;
	/** <i>native declaration : /usr/include/bits/posix2_lim.h</i> */
	public static final int _POSIX2_BC_DIM_MAX = (int)2048;
	/** <i>native declaration : /usr/include/stdlib.h:128</i> */
	public interface __compar_fn_t extends Callback {
		int apply(Pointer voidPtr1, Pointer voidPtr2);
	};
	/** <i>native declaration : /usr/include/stdlib.h:254</i> */
	public interface atexit___func_callback extends Callback {
		void apply();
	};
	/** <i>native declaration : /usr/include/stdlib.h:255</i> */
	public interface on_exit___func_callback extends Callback {
		void apply(int __status, Pointer __arg);
	};
	/**
	 * Read NBYTES bytes from COOKIE into a buffer pointed to by BUF.<br>
	 * Return number of bytes read.<br>
	 * <i>native declaration : /usr/include/libio.h:57</i>
	 */
	public interface __io_read_fn extends Callback {
		NativeLong apply(Pointer __cookie, Pointer __buf, NativeSizeT __nbytes);
	};
	/**
	 * Write N bytes pointed to by BUF to COOKIE.  Write all N bytes<br>
	 * unless there is an error.  Return number of bytes written, or -1 if<br>
	 * there is an error without writing anything.  If the file has been<br>
	 * opened for append (__mode.__append set), then set the file pointer<br>
	 * to the end of the file and then do the write; if not, just write at<br>
	 * the current file pointer.<br>
	 * <i>native declaration : /usr/include/libio.h:66</i>
	 */
	public interface __io_write_fn extends Callback {
		NativeLong apply(Pointer __cookie, Pointer __buf, NativeSizeT __n);
	};
	/**
	 * Move COOKIE's file position to *POS bytes from the<br>
	 * beginning of the file (if W is SEEK_SET),<br>
	 * the current position (if W is SEEK_CUR),<br>
	 * or the end of the file (if W is SEEK_END).<br>
	 * Set *POS to the new file position.<br>
	 * Returns zero if successful, nonzero if not.<br>
	 * <i>native declaration : /usr/include/libio.h:75</i>
	 */
	public interface __io_seek_fn extends Callback {
		int apply(Pointer __cookie, NativeLongByReference __pos, int __w);
	};
	/**
	 * Close COOKIE.<br>
	 * <i>native declaration : /usr/include/libio.h:77</i>
	 */
	public interface __io_close_fn extends Callback {
		int apply(Pointer __cookie);
	};
	/**
	 * status handling function<br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:3</i>
	 */
	public interface EP_STAT2 extends Callback {
		Gdp10Library.EP_STAT_callback apply(Pointer EP_STAT_HANDLER_FUNCP);
	};
	/** <i>native declaration : src/gdp/ep/ep_stat.h:51</i> */
	public interface EP_STAT_callback extends Callback {
		/**
		 * @param estat status code<br>
		 * @param defmsg default message
		 */
		int apply(org.terraswarm.gdp.EP_STAT.ByValue estat, Pointer defmsg, Object... av);
	};
	/** <i>native declaration : /usr/include/bits/sched.h:20</i> */
	public interface clone___fn_callback extends Callback {
		int apply(Pointer __arg);
	};
	/** <i>native declaration : /usr/include/pthread.h:666</i> */
	public interface pthread_create___start_routine_callback extends Callback {
		Pointer apply(Pointer voidPtr1);
	};
	/** <i>native declaration : /usr/include/pthread.h:667</i> */
	public interface pthread_once___init_routine_callback extends Callback {
		void apply();
	};
	/** <i>native declaration : /usr/include/pthread.h:668</i> */
	public interface pthread_key_create___destr_function_callback extends Callback {
		void apply(Pointer voidPtr1);
	};
	/** <i>native declaration : /usr/include/pthread.h:669</i> */
	public interface pthread_atfork___prepare_callback extends Callback {
		void apply();
	};
	/** <i>native declaration : /usr/include/pthread.h:670</i> */
	public interface pthread_atfork___parent_callback extends Callback {
		void apply();
	};
	/** <i>native declaration : /usr/include/pthread.h:671</i> */
	public interface pthread_atfork___child_callback extends Callback {
		void apply();
	};
	/** <i>native declaration : src/gdp/gdp/gdp.h:131</i> */
	public interface gdp_gcl_sub_cbfunc_t extends Callback {
		/**
		 * @param gclh the GCL triggering the call<br>
		 * @param datum the message triggering the call
		 */
		void apply(Pointer gclh, gdp_datum datum, Pointer cbarg);
	};
	/**
	 * Test for access to NAME using the real UID and real GID.<br>
	 * Original signature : <code>int access(__const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:15</i><br>
	 * @deprecated use the safer methods {@link #access(java.lang.String, int)} and {@link #access(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int access(Pointer __name, int __type);
	/**
	 * Test for access to NAME using the real UID and real GID.<br>
	 * Original signature : <code>int access(__const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:15</i>
	 */
	int access(String __name, int __type);
	/**
	 * Test for access to FILE relative to the directory FD is open on.<br>
	 * If AT_EACCESS is set in FLAG, then use effective IDs like `eaccess',<br>
	 * otherwise use real IDs like `access'.<br>
	 * Original signature : <code>int faccessat(int, __const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:22</i><br>
	 * @deprecated use the safer methods {@link #faccessat(int, java.lang.String, int, int)} and {@link #faccessat(int, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int faccessat(int __fd, Pointer __file, int __type, int __flag);
	/**
	 * Test for access to FILE relative to the directory FD is open on.<br>
	 * If AT_EACCESS is set in FLAG, then use effective IDs like `eaccess',<br>
	 * otherwise use real IDs like `access'.<br>
	 * Original signature : <code>int faccessat(int, __const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:22</i>
	 */
	int faccessat(int __fd, String __file, int __type, int __flag);
	/**
	 * Move FD's file position to OFFSET bytes from the<br>
	 * beginning of the file (if WHENCE is SEEK_SET),<br>
	 * the current position (if WHENCE is SEEK_CUR),<br>
	 * or the end of the file (if WHENCE is SEEK_END).<br>
	 * Return the new file position.<br>
	 * Original signature : <code>__off_t lseek(int, __off_t, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:31</i>
	 */
	NativeLong lseek(int __fd, NativeLong __offset, int __whence);
	/**
	 * Close the file descriptor FD.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int close(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:38</i>
	 */
	int close(int __fd);
	/**
	 * Read NBYTES into BUF from FD.  Return the<br>
	 * number read, -1 for errors or 0 for EOF.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t read(int, void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:46</i>
	 */
	NativeLong read(int __fd, Pointer __buf, NativeSizeT __nbytes);
	/**
	 * Write N bytes of BUF to FD.  Return the number written, or -1.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t write(int, __const void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:53</i>
	 */
	NativeLong write(int __fd, Pointer __buf, NativeSizeT __n);
	/**
	 * Read NBYTES into BUF from FD at the given position OFFSET without<br>
	 * changing the file pointer.  Return the number read, -1 for errors<br>
	 * or 0 for EOF.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t pread(int, void*, size_t, __off_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:62</i>
	 */
	NativeLong pread(int __fd, Pointer __buf, NativeSizeT __nbytes, NativeLong __offset);
	/**
	 * Write N bytes of BUF to FD at the given position OFFSET without<br>
	 * changing the file pointer.  Return the number written, or -1.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>ssize_t pwrite(int, __const void*, size_t, __off_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:70</i>
	 */
	NativeLong pwrite(int __fd, Pointer __buf, NativeSizeT __n, NativeLong __offset);
	/**
	 * Create a one-way communication channel (pipe).<br>
	 * If successful, two file descriptors are stored in PIPEDES;<br>
	 * bytes written on PIPEDES[1] can be read from PIPEDES[0].<br>
	 * Returns 0 if successful, -1 if not.<br>
	 * Original signature : <code>int pipe(int[2])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:78</i><br>
	 * @deprecated use the safer methods {@link #pipe(java.nio.IntBuffer)} and {@link #pipe(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pipe(IntByReference __pipedes);
	/**
	 * Create a one-way communication channel (pipe).<br>
	 * If successful, two file descriptors are stored in PIPEDES;<br>
	 * bytes written on PIPEDES[1] can be read from PIPEDES[0].<br>
	 * Returns 0 if successful, -1 if not.<br>
	 * Original signature : <code>int pipe(int[2])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:78</i>
	 */
	int pipe(IntBuffer __pipedes);
	/**
	 * Schedule an alarm.  In SECONDS seconds, the process will get a SIGALRM.<br>
	 * If SECONDS is zero, any currently scheduled alarm will be cancelled.<br>
	 * The function returns the number of seconds remaining until the last<br>
	 * alarm scheduled would have signaled, or zero if there wasn't one.<br>
	 * There is no return value to indicate an error, but you can set `errno'<br>
	 * to 0 and check its value after calling `alarm', and this might tell you.<br>
	 * The signal may come late due to processor scheduling.<br>
	 * Original signature : <code>int alarm(unsigned int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:89</i>
	 */
	int alarm(int __seconds);
	/**
	 * Make the process sleep for SECONDS seconds, or until a signal arrives<br>
	 * and is not ignored.  The function returns the number of seconds less<br>
	 * than SECONDS which it actually slept (thus zero if it slept the full time).<br>
	 * If a signal handler does a `longjmp' or modifies the handling of the<br>
	 * SIGALRM signal while inside `sleep' call, the handling of the SIGALRM<br>
	 * signal afterwards is undefined.  There is no return value to indicate<br>
	 * error, but if `sleep' returns SECONDS, it probably didn't work.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int sleep(unsigned int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:102</i>
	 */
	int sleep(int __seconds);
	/**
	 * Set an alarm to go off (generating a SIGALRM signal) in VALUE<br>
	 * microseconds.  If INTERVAL is nonzero, when the alarm goes off, the<br>
	 * timer is reset to go off every INTERVAL microseconds thereafter.<br>
	 * Returns the number of microseconds remaining before the alarm.<br>
	 * Original signature : <code>__useconds_t ualarm(__useconds_t, __useconds_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:110</i>
	 */
	int ualarm(int __value, int __interval);
	/**
	 * Sleep USECONDS microseconds, or until a signal arrives that is not blocked<br>
	 * or ignored.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int usleep(__useconds_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:118</i>
	 */
	int usleep(int __useconds);
	/**
	 * Suspend the process until a signal arrives.<br>
	 * This always returns -1 and sets `errno' to EINTR.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int pause()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:126</i>
	 */
	int pause();
	/**
	 * Change the owner and group of FILE.<br>
	 * Original signature : <code>int chown(__const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:131</i><br>
	 * @deprecated use the safer methods {@link #chown(java.lang.String, int, int)} and {@link #chown(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int chown(Pointer __file, int __owner, int __group);
	/**
	 * Change the owner and group of FILE.<br>
	 * Original signature : <code>int chown(__const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:131</i>
	 */
	int chown(String __file, int __owner, int __group);
	/**
	 * Change the owner and group of the file that FD is open on.<br>
	 * Original signature : <code>int fchown(int, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:136</i>
	 */
	int fchown(int __fd, int __owner, int __group);
	/**
	 * Change owner and group of FILE, if it is a symbolic<br>
	 * link the ownership of the symbolic link is changed.<br>
	 * Original signature : <code>int lchown(__const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:142</i><br>
	 * @deprecated use the safer methods {@link #lchown(java.lang.String, int, int)} and {@link #lchown(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int lchown(Pointer __file, int __owner, int __group);
	/**
	 * Change owner and group of FILE, if it is a symbolic<br>
	 * link the ownership of the symbolic link is changed.<br>
	 * Original signature : <code>int lchown(__const char*, __uid_t, __gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:142</i>
	 */
	int lchown(String __file, int __owner, int __group);
	/**
	 * Change the owner and group of FILE relative to the directory FD is open<br>
	 * on.<br>
	 * Original signature : <code>int fchownat(int, __const char*, __uid_t, __gid_t, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:148</i><br>
	 * @deprecated use the safer methods {@link #fchownat(int, java.lang.String, int, int, int)} and {@link #fchownat(int, com.sun.jna.Pointer, int, int, int)} instead
	 */
	@Deprecated 
	int fchownat(int __fd, Pointer __file, int __owner, int __group, int __flag);
	/**
	 * Change the owner and group of FILE relative to the directory FD is open<br>
	 * on.<br>
	 * Original signature : <code>int fchownat(int, __const char*, __uid_t, __gid_t, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:148</i>
	 */
	int fchownat(int __fd, String __file, int __owner, int __group, int __flag);
	/**
	 * Change the process's working directory to PATH.<br>
	 * Original signature : <code>int chdir(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:153</i><br>
	 * @deprecated use the safer methods {@link #chdir(java.lang.String)} and {@link #chdir(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int chdir(Pointer __path);
	/**
	 * Change the process's working directory to PATH.<br>
	 * Original signature : <code>int chdir(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:153</i>
	 */
	int chdir(String __path);
	/**
	 * Change the process's working directory to the one FD is open on.<br>
	 * Original signature : <code>int fchdir(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:158</i>
	 */
	int fchdir(int __fd);
	/**
	 * Get the pathname of the current working directory,<br>
	 * and put it in SIZE bytes of BUF.  Returns NULL if the<br>
	 * directory couldn't be determined or SIZE was too small.<br>
	 * If successful, returns BUF.  In GNU, if BUF is NULL,<br>
	 * an array is allocated with `malloc'; the array is SIZE<br>
	 * bytes long, unless SIZE == 0, in which case it is as<br>
	 * big as necessary.<br>
	 * Original signature : <code>char* getcwd(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:169</i><br>
	 * @deprecated use the safer methods {@link #getcwd(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #getcwd(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	Pointer getcwd(Pointer __buf, NativeSizeT __size);
	/**
	 * Get the pathname of the current working directory,<br>
	 * and put it in SIZE bytes of BUF.  Returns NULL if the<br>
	 * directory couldn't be determined or SIZE was too small.<br>
	 * If successful, returns BUF.  In GNU, if BUF is NULL,<br>
	 * an array is allocated with `malloc'; the array is SIZE<br>
	 * bytes long, unless SIZE == 0, in which case it is as<br>
	 * big as necessary.<br>
	 * Original signature : <code>char* getcwd(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:169</i>
	 */
	Pointer getcwd(ByteBuffer __buf, NativeSizeT __size);
	/**
	 * Put the absolute pathname of the current working directory in BUF.<br>
	 * If successful, return BUF.  If not, put an error message in<br>
	 * BUF and return NULL.  BUF should be at least PATH_MAX bytes long.<br>
	 * Original signature : <code>char* getwd(char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:176</i><br>
	 * @deprecated use the safer methods {@link #getwd(java.nio.ByteBuffer)} and {@link #getwd(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer getwd(Pointer __buf);
	/**
	 * Put the absolute pathname of the current working directory in BUF.<br>
	 * If successful, return BUF.  If not, put an error message in<br>
	 * BUF and return NULL.  BUF should be at least PATH_MAX bytes long.<br>
	 * Original signature : <code>char* getwd(char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:176</i>
	 */
	Pointer getwd(ByteBuffer __buf);
	/**
	 * Duplicate FD, returning a new file descriptor on the same file.<br>
	 * Original signature : <code>int dup(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:181</i>
	 */
	int dup(int __fd);
	/**
	 * Duplicate FD to FD2, closing FD2 and making it open on the same file.<br>
	 * Original signature : <code>int dup2(int, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:186</i>
	 */
	int dup2(int __fd, int __fd2);
	/**
	 * Replace the current process, executing PATH with arguments ARGV and<br>
	 * environment ENVP.  ARGV and ENVP are terminated by NULL pointers.<br>
	 * Original signature : <code>int execve(__const char*, const char*[], const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:194</i><br>
	 * @deprecated use the safer methods {@link #execve(java.lang.String, java.lang.String[], java.lang.String[])} and {@link #execve(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execve(Pointer __path, PointerByReference __argv, PointerByReference __envp);
	/**
	 * Replace the current process, executing PATH with arguments ARGV and<br>
	 * environment ENVP.  ARGV and ENVP are terminated by NULL pointers.<br>
	 * Original signature : <code>int execve(__const char*, const char*[], const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:194</i>
	 */
	int execve(String __path, String __argv[], String __envp[]);
	/**
	 * Execute the file FD refers to, overlaying the running program image.<br>
	 * ARGV and ENVP are passed to the new program, as for `execve'.<br>
	 * Original signature : <code>int fexecve(int, const char*[], const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:200</i><br>
	 * @deprecated use the safer methods {@link #fexecve(int, java.lang.String[], java.lang.String[])} and {@link #fexecve(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int fexecve(int __fd, PointerByReference __argv, PointerByReference __envp);
	/**
	 * Execute the file FD refers to, overlaying the running program image.<br>
	 * ARGV and ENVP are passed to the new program, as for `execve'.<br>
	 * Original signature : <code>int fexecve(int, const char*[], const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:200</i>
	 */
	int fexecve(int __fd, String __argv[], String __envp[]);
	/**
	 * Execute PATH with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execv(__const char*, const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:205</i><br>
	 * @deprecated use the safer methods {@link #execv(java.lang.String, java.lang.String[])} and {@link #execv(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execv(Pointer __path, PointerByReference __argv);
	/**
	 * Execute PATH with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execv(__const char*, const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:205</i>
	 */
	int execv(String __path, String __argv[]);
	/**
	 * Execute PATH with all arguments after PATH until a NULL pointer,<br>
	 * and the argument after that for environment.<br>
	 * Original signature : <code>int execle(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:211</i><br>
	 * @deprecated use the safer methods {@link #execle(java.lang.String, java.lang.String, java.lang.Object)} and {@link #execle(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int execle(Pointer __path, Pointer __arg, Object... varArgs1);
	/**
	 * Execute PATH with all arguments after PATH until a NULL pointer,<br>
	 * and the argument after that for environment.<br>
	 * Original signature : <code>int execle(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:211</i>
	 */
	int execle(String __path, String __arg, Object... varArgs1);
	/**
	 * Execute PATH with all arguments after PATH until<br>
	 * a NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execl(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:217</i><br>
	 * @deprecated use the safer methods {@link #execl(java.lang.String, java.lang.String, java.lang.Object)} and {@link #execl(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int execl(Pointer __path, Pointer __arg, Object... varArgs1);
	/**
	 * Execute PATH with all arguments after PATH until<br>
	 * a NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execl(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:217</i>
	 */
	int execl(String __path, String __arg, Object... varArgs1);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if it contains<br>
	 * no slashes, with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execvp(__const char*, const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:223</i><br>
	 * @deprecated use the safer methods {@link #execvp(java.lang.String, java.lang.String[])} and {@link #execvp(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int execvp(Pointer __file, PointerByReference __argv);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if it contains<br>
	 * no slashes, with arguments ARGV and environment from `environ'.<br>
	 * Original signature : <code>int execvp(__const char*, const char*[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:223</i>
	 */
	int execvp(String __file, String __argv[]);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if<br>
	 * it contains no slashes, with all arguments after FILE until a<br>
	 * NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execlp(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:230</i><br>
	 * @deprecated use the safer methods {@link #execlp(java.lang.String, java.lang.String, java.lang.Object)} and {@link #execlp(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int execlp(Pointer __file, Pointer __arg, Object... varArgs1);
	/**
	 * Execute FILE, searching in the `PATH' environment variable if<br>
	 * it contains no slashes, with all arguments after FILE until a<br>
	 * NULL pointer and environment from `environ'.<br>
	 * Original signature : <code>int execlp(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:230</i>
	 */
	int execlp(String __file, String __arg, Object... varArgs1);
	/**
	 * Add INC to priority of the current process.<br>
	 * Original signature : <code>int nice(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:235</i>
	 */
	int nice(int __inc);
	/**
	 * Terminate program execution with the low-order 8 bits of STATUS.<br>
	 * Original signature : <code>void _exit(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:240</i>
	 */
	void _exit(int __status);
	/**
	 * Get file-specific configuration information about PATH.<br>
	 * Original signature : <code>long pathconf(__const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:4</i><br>
	 * @deprecated use the safer methods {@link #pathconf(java.lang.String, int)} and {@link #pathconf(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	NativeLong pathconf(Pointer __path, int __name);
	/**
	 * Get file-specific configuration information about PATH.<br>
	 * Original signature : <code>long pathconf(__const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:4</i>
	 */
	NativeLong pathconf(String __path, int __name);
	/**
	 * Get file-specific configuration about descriptor FD.<br>
	 * Original signature : <code>long fpathconf(int, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:9</i>
	 */
	NativeLong fpathconf(int __fd, int __name);
	/**
	 * Get the value of the system variable NAME.<br>
	 * Original signature : <code>long sysconf(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:14</i>
	 */
	NativeLong sysconf(int __name);
	/**
	 * Get the value of the string-valued system variable NAME.<br>
	 * Original signature : <code>size_t confstr(int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:19</i><br>
	 * @deprecated use the safer methods {@link #confstr(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #confstr(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	NativeSizeT confstr(int __name, Pointer __buf, NativeSizeT __len);
	/**
	 * Get the value of the string-valued system variable NAME.<br>
	 * Original signature : <code>size_t confstr(int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:19</i>
	 */
	NativeSizeT confstr(int __name, ByteBuffer __buf, NativeSizeT __len);
	/**
	 * Get the process ID of the calling process.<br>
	 * Original signature : <code>__pid_t getpid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:24</i>
	 */
	int getpid();
	/**
	 * Get the process ID of the calling process's parent.<br>
	 * Original signature : <code>__pid_t getppid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:29</i>
	 */
	int getppid();
	/**
	 * Get the process group ID of the calling process.<br>
	 * This function is different on old BSD.<br>
	 * Original signature : <code>__pid_t getpgrp()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:35</i>
	 */
	int getpgrp();
	/**
	 * Get the process group ID of process PID.<br>
	 * Original signature : <code>__pid_t __getpgid(__pid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:40</i>
	 */
	int __getpgid(int __pid);
	/**
	 * Original signature : <code>__pid_t getpgid(__pid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:42</i>
	 */
	int getpgid(int __pid);
	/**
	 * Set the process group ID of the process matching PID to PGID.<br>
	 * If PID is zero, the current process's process group ID is set.<br>
	 * If PGID is zero, the process ID of the process is used.<br>
	 * Original signature : <code>int setpgid(__pid_t, __pid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:49</i>
	 */
	int setpgid(int __pid, int __pgid);
	/**
	 * Set the process group ID of the calling process to its own PID.<br>
	 * This is exactly the same as `setpgid (0, 0)'.<br>
	 * Original signature : <code>int setpgrp()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:55</i>
	 */
	int setpgrp();
	/**
	 * Create a new session with the calling process as its leader.<br>
	 * The process group IDs of the session and the calling process<br>
	 * are set to the process ID of the calling process, which is returned.<br>
	 * Original signature : <code>__pid_t setsid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:62</i>
	 */
	int setsid();
	/**
	 * Return the session ID of the given process.<br>
	 * Original signature : <code>__pid_t getsid(__pid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:67</i>
	 */
	int getsid(int __pid);
	/**
	 * Get the real user ID of the calling process.<br>
	 * Original signature : <code>__uid_t getuid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:72</i>
	 */
	int getuid();
	/**
	 * Get the effective user ID of the calling process.<br>
	 * Original signature : <code>__uid_t geteuid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:77</i>
	 */
	int geteuid();
	/**
	 * Get the real group ID of the calling process.<br>
	 * Original signature : <code>__gid_t getgid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:82</i>
	 */
	int getgid();
	/**
	 * Get the effective group ID of the calling process.<br>
	 * Original signature : <code>__gid_t getegid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:87</i>
	 */
	int getegid();
	/**
	 * If SIZE is zero, return the number of supplementary groups<br>
	 * the calling process is in.  Otherwise, fill in the group IDs<br>
	 * of its supplementary groups in LIST and return the number written.<br>
	 * Original signature : <code>int getgroups(int, __gid_t[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:94</i><br>
	 * @deprecated use the safer methods {@link #getgroups(int, java.nio.IntBuffer)} and {@link #getgroups(int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getgroups(int __size, IntByReference __list);
	/**
	 * If SIZE is zero, return the number of supplementary groups<br>
	 * the calling process is in.  Otherwise, fill in the group IDs<br>
	 * of its supplementary groups in LIST and return the number written.<br>
	 * Original signature : <code>int getgroups(int, __gid_t[])</code><br>
	 * <i>native declaration : /usr/include/unistd.h:94</i>
	 */
	int getgroups(int __size, IntBuffer __list);
	/**
	 * Set the user ID of the calling process to UID.<br>
	 * If the calling process is the super-user, set the real<br>
	 * and effective user IDs, and the saved set-user-ID to UID;<br>
	 * if not, the effective user ID is set to UID.<br>
	 * Original signature : <code>int setuid(__uid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:102</i>
	 */
	int setuid(int __uid);
	/**
	 * Set the real user ID of the calling process to RUID,<br>
	 * and the effective user ID of the calling process to EUID.<br>
	 * Original signature : <code>int setreuid(__uid_t, __uid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:108</i>
	 */
	int setreuid(int __ruid, int __euid);
	/**
	 * Set the effective user ID of the calling process to UID.<br>
	 * Original signature : <code>int seteuid(__uid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:113</i>
	 */
	int seteuid(int __uid);
	/**
	 * Set the group ID of the calling process to GID.<br>
	 * If the calling process is the super-user, set the real<br>
	 * and effective group IDs, and the saved set-group-ID to GID;<br>
	 * if not, the effective group ID is set to GID.<br>
	 * Original signature : <code>int setgid(__gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:121</i>
	 */
	int setgid(int __gid);
	/**
	 * Set the real group ID of the calling process to RGID,<br>
	 * and the effective group ID of the calling process to EGID.<br>
	 * Original signature : <code>int setregid(__gid_t, __gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:127</i>
	 */
	int setregid(int __rgid, int __egid);
	/**
	 * Set the effective group ID of the calling process to GID.<br>
	 * Original signature : <code>int setegid(__gid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:132</i>
	 */
	int setegid(int __gid);
	/**
	 * Clone the calling process, creating an exact copy.<br>
	 * Return -1 for errors, 0 to the new process,<br>
	 * and the process ID of the new process to the old process.<br>
	 * Original signature : <code>__pid_t fork()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:139</i>
	 */
	int fork();
	/**
	 * Clone the calling process, but without copying the whole address space.<br>
	 * The calling process is suspended until the new process exits or is<br>
	 * replaced by a call to `execve'.  Return -1 for errors, 0 to the new process,<br>
	 * and the process ID of the new process to the old process.<br>
	 * Original signature : <code>__pid_t vfork()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:147</i>
	 */
	int vfork();
	/**
	 * Return the pathname of the terminal FD is open on, or NULL on errors.<br>
	 * The returned storage is good only until the next call to this function.<br>
	 * Original signature : <code>char* ttyname(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:153</i>
	 */
	Pointer ttyname(int __fd);
	/**
	 * Store at most BUFLEN characters of the pathname of the terminal FD is<br>
	 * open on in BUF.  Return 0 on success, otherwise an error number.<br>
	 * Original signature : <code>int ttyname_r(int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:159</i><br>
	 * @deprecated use the safer methods {@link #ttyname_r(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #ttyname_r(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int ttyname_r(int __fd, Pointer __buf, NativeSizeT __buflen);
	/**
	 * Store at most BUFLEN characters of the pathname of the terminal FD is<br>
	 * open on in BUF.  Return 0 on success, otherwise an error number.<br>
	 * Original signature : <code>int ttyname_r(int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:159</i>
	 */
	int ttyname_r(int __fd, ByteBuffer __buf, NativeSizeT __buflen);
	/**
	 * Return 1 if FD is a valid descriptor associated<br>
	 * with a terminal, zero if not.<br>
	 * Original signature : <code>int isatty(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:165</i>
	 */
	int isatty(int __fd);
	/**
	 * Return the index into the active-logins file (utmp) for<br>
	 * the controlling terminal.<br>
	 * Original signature : <code>int ttyslot()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:171</i>
	 */
	int ttyslot();
	/**
	 * Make a link to FROM named TO.<br>
	 * Original signature : <code>int link(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:176</i><br>
	 * @deprecated use the safer methods {@link #link(java.lang.String, java.lang.String)} and {@link #link(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int link(Pointer __from, Pointer __to);
	/**
	 * Make a link to FROM named TO.<br>
	 * Original signature : <code>int link(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:176</i>
	 */
	int link(String __from, String __to);
	/**
	 * Like link but relative paths in TO and FROM are interpreted relative<br>
	 * to FROMFD and TOFD respectively.<br>
	 * Original signature : <code>int linkat(int, __const char*, int, __const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:182</i><br>
	 * @deprecated use the safer methods {@link #linkat(int, java.lang.String, int, java.lang.String, int)} and {@link #linkat(int, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int linkat(int __fromfd, Pointer __from, int __tofd, Pointer __to, int __flags);
	/**
	 * Like link but relative paths in TO and FROM are interpreted relative<br>
	 * to FROMFD and TOFD respectively.<br>
	 * Original signature : <code>int linkat(int, __const char*, int, __const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:182</i>
	 */
	int linkat(int __fromfd, String __from, int __tofd, String __to, int __flags);
	/**
	 * Make a symbolic link to FROM named TO.<br>
	 * Original signature : <code>int symlink(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:187</i><br>
	 * @deprecated use the safer methods {@link #symlink(java.lang.String, java.lang.String)} and {@link #symlink(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int symlink(Pointer __from, Pointer __to);
	/**
	 * Make a symbolic link to FROM named TO.<br>
	 * Original signature : <code>int symlink(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:187</i>
	 */
	int symlink(String __from, String __to);
	/**
	 * Read the contents of the symbolic link PATH into no more than<br>
	 * LEN bytes of BUF.  The contents are not null-terminated.<br>
	 * Returns the number of characters read, or -1 for errors.<br>
	 * Original signature : <code>ssize_t readlink(__const char*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:194</i><br>
	 * @deprecated use the safer methods {@link #readlink(java.lang.String, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #readlink(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	NativeLong readlink(Pointer __path, Pointer __buf, NativeSizeT __len);
	/**
	 * Read the contents of the symbolic link PATH into no more than<br>
	 * LEN bytes of BUF.  The contents are not null-terminated.<br>
	 * Returns the number of characters read, or -1 for errors.<br>
	 * Original signature : <code>ssize_t readlink(__const char*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:194</i>
	 */
	NativeLong readlink(String __path, ByteBuffer __buf, NativeSizeT __len);
	/**
	 * Like symlink but a relative path in TO is interpreted relative to TOFD.<br>
	 * Original signature : <code>int symlinkat(__const char*, int, __const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:199</i><br>
	 * @deprecated use the safer methods {@link #symlinkat(java.lang.String, int, java.lang.String)} and {@link #symlinkat(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int symlinkat(Pointer __from, int __tofd, Pointer __to);
	/**
	 * Like symlink but a relative path in TO is interpreted relative to TOFD.<br>
	 * Original signature : <code>int symlinkat(__const char*, int, __const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:199</i>
	 */
	int symlinkat(String __from, int __tofd, String __to);
	/**
	 * Like readlink but a relative PATH is interpreted relative to FD.<br>
	 * Original signature : <code>ssize_t readlinkat(int, __const char*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:204</i><br>
	 * @deprecated use the safer methods {@link #readlinkat(int, java.lang.String, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #readlinkat(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	NativeLong readlinkat(int __fd, Pointer __path, Pointer __buf, NativeSizeT __len);
	/**
	 * Like readlink but a relative PATH is interpreted relative to FD.<br>
	 * Original signature : <code>ssize_t readlinkat(int, __const char*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:204</i>
	 */
	NativeLong readlinkat(int __fd, String __path, ByteBuffer __buf, NativeSizeT __len);
	/**
	 * Remove the link NAME.<br>
	 * Original signature : <code>int unlink(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:209</i><br>
	 * @deprecated use the safer methods {@link #unlink(java.lang.String)} and {@link #unlink(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int unlink(Pointer __name);
	/**
	 * Remove the link NAME.<br>
	 * Original signature : <code>int unlink(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:209</i>
	 */
	int unlink(String __name);
	/**
	 * Remove the link NAME relative to FD.<br>
	 * Original signature : <code>int unlinkat(int, __const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:214</i><br>
	 * @deprecated use the safer methods {@link #unlinkat(int, java.lang.String, int)} and {@link #unlinkat(int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int unlinkat(int __fd, Pointer __name, int __flag);
	/**
	 * Remove the link NAME relative to FD.<br>
	 * Original signature : <code>int unlinkat(int, __const char*, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:214</i>
	 */
	int unlinkat(int __fd, String __name, int __flag);
	/**
	 * Remove the directory PATH.<br>
	 * Original signature : <code>int rmdir(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:219</i><br>
	 * @deprecated use the safer methods {@link #rmdir(java.lang.String)} and {@link #rmdir(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int rmdir(Pointer __path);
	/**
	 * Remove the directory PATH.<br>
	 * Original signature : <code>int rmdir(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:219</i>
	 */
	int rmdir(String __path);
	/**
	 * Return the foreground process group ID of FD.<br>
	 * Original signature : <code>__pid_t tcgetpgrp(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:224</i>
	 */
	int tcgetpgrp(int __fd);
	/**
	 * Set the foreground process group ID of FD set PGRP_ID.<br>
	 * Original signature : <code>int tcsetpgrp(int, __pid_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:229</i>
	 */
	int tcsetpgrp(int __fd, int __pgrp_id);
	/**
	 * Return the login name of the user.<br>
	 * This function is a possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* getlogin()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:236</i>
	 */
	Pointer getlogin();
	/**
	 * Return at most NAME_LEN characters of the login name of the user in NAME.<br>
	 * If it cannot be determined or some other error occurred, return the error<br>
	 * code.  Otherwise return 0.<br>
	 * This function is a possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getlogin_r(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:245</i><br>
	 * @deprecated use the safer methods {@link #getlogin_r(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #getlogin_r(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int getlogin_r(Pointer __name, NativeSizeT __name_len);
	/**
	 * Return at most NAME_LEN characters of the login name of the user in NAME.<br>
	 * If it cannot be determined or some other error occurred, return the error<br>
	 * code.  Otherwise return 0.<br>
	 * This function is a possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getlogin_r(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:245</i>
	 */
	int getlogin_r(ByteBuffer __name, NativeSizeT __name_len);
	/**
	 * Set the login name returned by `getlogin'.<br>
	 * Original signature : <code>int setlogin(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:250</i><br>
	 * @deprecated use the safer methods {@link #setlogin(java.lang.String)} and {@link #setlogin(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int setlogin(Pointer __name);
	/**
	 * Set the login name returned by `getlogin'.<br>
	 * Original signature : <code>int setlogin(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:250</i>
	 */
	int setlogin(String __name);
	/**
	 * Many other libraries have conflicting prototypes for getopt, with<br>
	 * differences in the consts, in stdlib.h.  To avoid compilation<br>
	 * errors, only prototype getopt for the GNU C library.<br>
	 * Original signature : <code>int getopt(int, const char**, const char*)</code><br>
	 * <i>native declaration : /usr/include/getopt.h:33</i><br>
	 * @deprecated use the safer methods {@link #getopt(int, java.lang.String[], java.lang.String)} and {@link #getopt(int, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int getopt(int ___argc, PointerByReference ___argv, Pointer __shortopts);
	/**
	 * Many other libraries have conflicting prototypes for getopt, with<br>
	 * differences in the consts, in stdlib.h.  To avoid compilation<br>
	 * errors, only prototype getopt for the GNU C library.<br>
	 * Original signature : <code>int getopt(int, const char**, const char*)</code><br>
	 * <i>native declaration : /usr/include/getopt.h:33</i>
	 */
	int getopt(int ___argc, String ___argv[], String __shortopts);
	/**
	 * Put the name of the current host in no more than LEN bytes of NAME.<br>
	 * The result is null-terminated if LEN is large enough for the full<br>
	 * name and the terminator.<br>
	 * Original signature : <code>int gethostname(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:6</i><br>
	 * @deprecated use the safer methods {@link #gethostname(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #gethostname(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int gethostname(Pointer __name, NativeSizeT __len);
	/**
	 * Put the name of the current host in no more than LEN bytes of NAME.<br>
	 * The result is null-terminated if LEN is large enough for the full<br>
	 * name and the terminator.<br>
	 * Original signature : <code>int gethostname(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:6</i>
	 */
	int gethostname(ByteBuffer __name, NativeSizeT __len);
	/**
	 * Set the name of the current host to NAME, which is LEN bytes long.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int sethostname(__const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:12</i><br>
	 * @deprecated use the safer methods {@link #sethostname(java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #sethostname(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int sethostname(Pointer __name, NativeSizeT __len);
	/**
	 * Set the name of the current host to NAME, which is LEN bytes long.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int sethostname(__const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:12</i>
	 */
	int sethostname(String __name, NativeSizeT __len);
	/**
	 * Set the current machine's Internet number to ID.<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int sethostid(long)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:18</i>
	 */
	int sethostid(NativeLong __id);
	/**
	 * Get and set the NIS (aka YP) domain name, if any.<br>
	 * Called just like `gethostname' and `sethostname'.<br>
	 * The NIS domain name is usually the empty string when not using NIS.<br>
	 * Original signature : <code>int getdomainname(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:25</i><br>
	 * @deprecated use the safer methods {@link #getdomainname(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #getdomainname(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int getdomainname(Pointer __name, NativeSizeT __len);
	/**
	 * Get and set the NIS (aka YP) domain name, if any.<br>
	 * Called just like `gethostname' and `sethostname'.<br>
	 * The NIS domain name is usually the empty string when not using NIS.<br>
	 * Original signature : <code>int getdomainname(char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:25</i>
	 */
	int getdomainname(ByteBuffer __name, NativeSizeT __len);
	/**
	 * Original signature : <code>int setdomainname(__const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:27</i><br>
	 * @deprecated use the safer methods {@link #setdomainname(java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #setdomainname(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int setdomainname(Pointer __name, NativeSizeT __len);
	/**
	 * Original signature : <code>int setdomainname(__const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:27</i>
	 */
	int setdomainname(String __name, NativeSizeT __len);
	/**
	 * Revoke access permissions to all processes currently communicating<br>
	 * with the control terminal, and then send a SIGHUP signal to the process<br>
	 * group of the control terminal.<br>
	 * Original signature : <code>int vhangup()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:34</i>
	 */
	int vhangup();
	/**
	 * Revoke the access of all descriptors currently open on FILE.<br>
	 * Original signature : <code>int revoke(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:39</i><br>
	 * @deprecated use the safer methods {@link #revoke(java.lang.String)} and {@link #revoke(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int revoke(Pointer __file);
	/**
	 * Revoke the access of all descriptors currently open on FILE.<br>
	 * Original signature : <code>int revoke(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:39</i>
	 */
	int revoke(String __file);
	/**
	 * Enable statistical profiling, writing samples of the PC into at most<br>
	 * SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling<br>
	 * is enabled, the system examines the user PC and increments<br>
	 * SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,<br>
	 * disable profiling.  Returns zero on success, -1 on error.<br>
	 * Original signature : <code>int profil(unsigned short*, size_t, size_t, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:48</i><br>
	 * @deprecated use the safer methods {@link #profil(java.nio.ShortBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, com.ochafik.lang.jnaerator.runtime.NativeSizeT, int)} and {@link #profil(com.sun.jna.ptr.ShortByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeT, com.ochafik.lang.jnaerator.runtime.NativeSizeT, int)} instead
	 */
	@Deprecated 
	int profil(ShortByReference __sample_buffer, NativeSizeT __size, NativeSizeT __offset, int __scale);
	/**
	 * Enable statistical profiling, writing samples of the PC into at most<br>
	 * SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling<br>
	 * is enabled, the system examines the user PC and increments<br>
	 * SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,<br>
	 * disable profiling.  Returns zero on success, -1 on error.<br>
	 * Original signature : <code>int profil(unsigned short*, size_t, size_t, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:48</i>
	 */
	int profil(ShortBuffer __sample_buffer, NativeSizeT __size, NativeSizeT __offset, int __scale);
	/**
	 * Turn accounting on if NAME is an existing file.  The system will then write<br>
	 * a record for each process as it terminates, to this file.  If NAME is NULL,<br>
	 * turn accounting off.  This call is restricted to the super-user.<br>
	 * Original signature : <code>int acct(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:55</i><br>
	 * @deprecated use the safer methods {@link #acct(java.lang.String)} and {@link #acct(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int acct(Pointer __name);
	/**
	 * Turn accounting on if NAME is an existing file.  The system will then write<br>
	 * a record for each process as it terminates, to this file.  If NAME is NULL,<br>
	 * turn accounting off.  This call is restricted to the super-user.<br>
	 * Original signature : <code>int acct(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:55</i>
	 */
	int acct(String __name);
	/**
	 * Successive calls return the shells listed in `/etc/shells'.<br>
	 * Original signature : <code>char* getusershell()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:60</i>
	 */
	Pointer getusershell();
	/**
	 * Discard cached info.<br>
	 * Original signature : <code>void endusershell()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:65</i>
	 */
	void endusershell();
	/**
	 * Rewind and re-read the file.<br>
	 * Original signature : <code>void setusershell()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:70</i>
	 */
	void setusershell();
	/**
	 * Put the program in the background, and dissociate from the controlling<br>
	 * terminal.  If NOCHDIR is zero, do `chdir ("/")'.  If NOCLOSE is zero,<br>
	 * redirects stdin, stdout, and stderr to /dev/null.<br>
	 * Original signature : <code>int daemon(int, int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:77</i>
	 */
	int daemon(int __nochdir, int __noclose);
	/**
	 * Make PATH be the root directory (the starting point for absolute paths).<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int chroot(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:83</i><br>
	 * @deprecated use the safer methods {@link #chroot(java.lang.String)} and {@link #chroot(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int chroot(Pointer __path);
	/**
	 * Make PATH be the root directory (the starting point for absolute paths).<br>
	 * This call is restricted to the super-user.<br>
	 * Original signature : <code>int chroot(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:83</i>
	 */
	int chroot(String __path);
	/**
	 * Prompt with PROMPT and read a string from the terminal without echoing.<br>
	 * Uses /dev/tty if possible; otherwise stderr and stdin.<br>
	 * Original signature : <code>char* getpass(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:89</i><br>
	 * @deprecated use the safer methods {@link #getpass(java.lang.String)} and {@link #getpass(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer getpass(Pointer __prompt);
	/**
	 * Prompt with PROMPT and read a string from the terminal without echoing.<br>
	 * Uses /dev/tty if possible; otherwise stderr and stdin.<br>
	 * Original signature : <code>char* getpass(__const char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:89</i>
	 */
	Pointer getpass(String __prompt);
	/**
	 * Make all changes done to FD actually appear on disk.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int fsync(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:96</i>
	 */
	int fsync(int __fd);
	/**
	 * Return identifier for the current host.<br>
	 * Original signature : <code>long gethostid()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:101</i>
	 */
	NativeLong gethostid();
	/**
	 * Make all changes done to all files actually appear on disk.<br>
	 * Original signature : <code>void sync()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:106</i>
	 */
	void sync();
	/**
	 * Return the number of bytes in a page.  This is the system's page size,<br>
	 * which is not necessarily the same as the hardware page size.<br>
	 * Original signature : <code>int getpagesize()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:112</i>
	 */
	int getpagesize();
	/**
	 * Return the maximum number of file descriptors<br>
	 * the current process could possibly have.<br>
	 * Original signature : <code>int getdtablesize()</code><br>
	 * <i>native declaration : /usr/include/unistd.h:118</i>
	 */
	int getdtablesize();
	/**
	 * Truncate FILE to LENGTH bytes.<br>
	 * Original signature : <code>int truncate(__const char*, __off_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:123</i><br>
	 * @deprecated use the safer methods {@link #truncate(java.lang.String, com.sun.jna.NativeLong)} and {@link #truncate(com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	int truncate(Pointer __file, NativeLong __length);
	/**
	 * Truncate FILE to LENGTH bytes.<br>
	 * Original signature : <code>int truncate(__const char*, __off_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:123</i>
	 */
	int truncate(String __file, NativeLong __length);
	/**
	 * Truncate the file FD is open on to LENGTH bytes.<br>
	 * Original signature : <code>int ftruncate(int, __off_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:128</i>
	 */
	int ftruncate(int __fd, NativeLong __length);
	/**
	 * Set the end of accessible data space (aka "the break") to ADDR.<br>
	 * Returns zero on success and -1 for errors (with errno set).<br>
	 * Original signature : <code>int brk(void*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:134</i>
	 */
	int brk(Pointer __addr);
	/**
	 * Increase or decrease the end of accessible data space by DELTA bytes.<br>
	 * If successful, returns the address the previous end of data space<br>
	 * (i.e. the beginning of the new space, if DELTA > 0);<br>
	 * returns (void *) -1 for errors (with errno set).<br>
	 * Original signature : <code>void* sbrk(intptr_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:142</i><br>
	 * @deprecated use the safer methods {@link #sbrk(java.nio.IntBuffer)} and {@link #sbrk(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer sbrk(IntByReference __delta);
	/**
	 * Increase or decrease the end of accessible data space by DELTA bytes.<br>
	 * If successful, returns the address the previous end of data space<br>
	 * (i.e. the beginning of the new space, if DELTA > 0);<br>
	 * returns (void *) -1 for errors (with errno set).<br>
	 * Original signature : <code>void* sbrk(intptr_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:142</i>
	 */
	Pointer sbrk(IntBuffer __delta);
	/**
	 * Invoke `system call' number SYSNO, passing it the remaining arguments.<br>
	 * This is completely system-dependent, and not often useful.<br>
	 * In Unix, `syscall' sets `errno' for all errors and most calls return -1<br>
	 * for errors; in many systems you cannot pass arguments or get return<br>
	 * values for all system calls (`pipe', `fork', and `getppid' typically<br>
	 * among them).<br>
	 * In Mach, all system calls take normal arguments and always return an<br>
	 * error code (zero for success).<br>
	 * Original signature : <code>long syscall(long, null)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:154</i>
	 */
	NativeLong syscall(NativeLong __sysno, Object... varArgs1);
	/**
	 * `lockf' is a simpler interface to the locking facilities of `fcntl'.<br>
	 * LEN is always relative to the current file position.<br>
	 * The CMD argument is one of the following.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int lockf(int, int, __off_t)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:163</i>
	 */
	int lockf(int __fd, int __cmd, NativeLong __len);
	/**
	 * Synchronize at least the data part of a file with the underlying<br>
	 * media.<br>
	 * Original signature : <code>int fdatasync(int)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:169</i>
	 */
	int fdatasync(int __fildes);
	/**
	 * Return the name of the controlling terminal.<br>
	 * Original signature : <code>char* ctermid(char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:174</i><br>
	 * @deprecated use the safer methods {@link #ctermid(java.nio.ByteBuffer)} and {@link #ctermid(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer ctermid(Pointer __s);
	/**
	 * Return the name of the controlling terminal.<br>
	 * Original signature : <code>char* ctermid(char*)</code><br>
	 * <i>native declaration : /usr/include/unistd.h:174</i>
	 */
	Pointer ctermid(ByteBuffer __s);
	/**
	 * Maximum length of a multibyte character in the current locale.<br>
	 * Original signature : <code>size_t __ctype_get_mb_cur_max()</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:19</i>
	 */
	NativeSizeT __ctype_get_mb_cur_max();
	/**
	 * Convert a string to a floating-point number.<br>
	 * Original signature : <code>double atof(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:24</i><br>
	 * @deprecated use the safer methods {@link #atof(java.lang.String)} and {@link #atof(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	double atof(Pointer __nptr);
	/**
	 * Convert a string to a floating-point number.<br>
	 * Original signature : <code>double atof(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:24</i>
	 */
	double atof(String __nptr);
	/**
	 * Convert a string to an integer.<br>
	 * Original signature : <code>int atoi(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:29</i><br>
	 * @deprecated use the safer methods {@link #atoi(java.lang.String)} and {@link #atoi(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int atoi(Pointer __nptr);
	/**
	 * Convert a string to an integer.<br>
	 * Original signature : <code>int atoi(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:29</i>
	 */
	int atoi(String __nptr);
	/**
	 * Convert a string to a long integer.<br>
	 * Original signature : <code>long atol(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:34</i><br>
	 * @deprecated use the safer methods {@link #atol(java.lang.String)} and {@link #atol(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	NativeLong atol(Pointer __nptr);
	/**
	 * Convert a string to a long integer.<br>
	 * Original signature : <code>long atol(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:34</i>
	 */
	NativeLong atol(String __nptr);
	/**
	 * Convert a string to a long long integer.<br>
	 * Original signature : <code>long long atoll(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:39</i><br>
	 * @deprecated use the safer methods {@link #atoll(java.lang.String)} and {@link #atoll(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	NativeLong atoll(Pointer __nptr);
	/**
	 * Convert a string to a long long integer.<br>
	 * Original signature : <code>long long atoll(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:39</i>
	 */
	NativeLong atoll(String __nptr);
	/**
	 * Convert a string to a floating-point number.<br>
	 * Original signature : <code>double strtod(__const char*, char**)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:44</i><br>
	 * @deprecated use the safer methods {@link #strtod(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #strtod(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double strtod(Pointer __nptr, PointerByReference __endptr);
	/**
	 * Convert a string to a floating-point number.<br>
	 * Original signature : <code>double strtod(__const char*, char**)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:44</i>
	 */
	double strtod(String __nptr, PointerByReference __endptr);
	/**
	 * Likewise for `float' and `long double' sizes of floating-point numbers.<br>
	 * Original signature : <code>float strtof(__const char*, char**)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:49</i><br>
	 * @deprecated use the safer methods {@link #strtof(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #strtof(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	float strtof(Pointer __nptr, PointerByReference __endptr);
	/**
	 * Likewise for `float' and `long double' sizes of floating-point numbers.<br>
	 * Original signature : <code>float strtof(__const char*, char**)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:49</i>
	 */
	float strtof(String __nptr, PointerByReference __endptr);
	/**
	 * Original signature : <code>long double strtold(__const char*, char**)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:51</i><br>
	 * @deprecated use the safer methods {@link #strtold(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #strtold(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	double strtold(Pointer __nptr, PointerByReference __endptr);
	/**
	 * Original signature : <code>long double strtold(__const char*, char**)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:51</i>
	 */
	double strtold(String __nptr, PointerByReference __endptr);
	/**
	 * Convert a string to a long integer.<br>
	 * Original signature : <code>long strtol(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:56</i><br>
	 * @deprecated use the safer methods {@link #strtol(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtol(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtol(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to a long integer.<br>
	 * Original signature : <code>long strtol(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:56</i>
	 */
	NativeLong strtol(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned long integer.<br>
	 * Original signature : <code>long strtoul(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:61</i><br>
	 * @deprecated use the safer methods {@link #strtoul(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoul(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtoul(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned long integer.<br>
	 * Original signature : <code>long strtoul(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:61</i>
	 */
	NativeLong strtoul(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to a quadword integer.<br>
	 * Original signature : <code>long long strtoq(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:66</i><br>
	 * @deprecated use the safer methods {@link #strtoq(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoq(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtoq(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to a quadword integer.<br>
	 * Original signature : <code>long long strtoq(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:66</i>
	 */
	NativeLong strtoq(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned quadword integer.<br>
	 * Original signature : <code>long long strtouq(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:71</i><br>
	 * @deprecated use the safer methods {@link #strtouq(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtouq(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtouq(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned quadword integer.<br>
	 * Original signature : <code>long long strtouq(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:71</i>
	 */
	NativeLong strtouq(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to a quadword integer.<br>
	 * Original signature : <code>long long strtoll(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:76</i><br>
	 * @deprecated use the safer methods {@link #strtoll(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoll(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtoll(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to a quadword integer.<br>
	 * Original signature : <code>long long strtoll(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:76</i>
	 */
	NativeLong strtoll(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned quadword integer.<br>
	 * Original signature : <code>long long strtoull(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:81</i><br>
	 * @deprecated use the safer methods {@link #strtoull(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoull(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtoull(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert a string to an unsigned quadword integer.<br>
	 * Original signature : <code>long long strtoull(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:81</i>
	 */
	NativeLong strtoull(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Convert N to base 64 using the digits "./0-9A-Za-z", least-significant<br>
	 * digit first.  Returns a pointer to static storage overwritten by the<br>
	 * next call.<br>
	 * Original signature : <code>char* l64a(long)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:88</i>
	 */
	Pointer l64a(NativeLong __n);
	/**
	 * Read a number from a string S in base 64 as above.<br>
	 * Original signature : <code>long a64l(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:93</i><br>
	 * @deprecated use the safer methods {@link #a64l(java.lang.String)} and {@link #a64l(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	NativeLong a64l(Pointer __s);
	/**
	 * Read a number from a string S in base 64 as above.<br>
	 * Original signature : <code>long a64l(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:93</i>
	 */
	NativeLong a64l(String __s);
	/**
	 * Return a random long integer between 0 and RAND_MAX inclusive.<br>
	 * Original signature : <code>long random()</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:4</i>
	 */
	NativeLong random();
	/**
	 * Seed the random number generator with the given number.<br>
	 * Original signature : <code>void srandom(unsigned int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:9</i>
	 */
	void srandom(int __seed);
	/**
	 * Initialize the random number generator to use state buffer STATEBUF,<br>
	 * of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 16,<br>
	 * 32, 64, 128 and 256, the bigger the better; values less than 8 will<br>
	 * cause an error and values greater than 256 will be rounded down.<br>
	 * Original signature : <code>char* initstate(unsigned int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:17</i><br>
	 * @deprecated use the safer methods {@link #initstate(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #initstate(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	Pointer initstate(int __seed, Pointer __statebuf, NativeSizeT __statelen);
	/**
	 * Initialize the random number generator to use state buffer STATEBUF,<br>
	 * of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 16,<br>
	 * 32, 64, 128 and 256, the bigger the better; values less than 8 will<br>
	 * cause an error and values greater than 256 will be rounded down.<br>
	 * Original signature : <code>char* initstate(unsigned int, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:17</i>
	 */
	Pointer initstate(int __seed, ByteBuffer __statebuf, NativeSizeT __statelen);
	/**
	 * Switch the random number generator to state buffer STATEBUF,<br>
	 * which should have been previously initialized by `initstate'.<br>
	 * Original signature : <code>char* setstate(char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:23</i><br>
	 * @deprecated use the safer methods {@link #setstate(java.nio.ByteBuffer)} and {@link #setstate(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer setstate(Pointer __statebuf);
	/**
	 * Switch the random number generator to state buffer STATEBUF,<br>
	 * which should have been previously initialized by `initstate'.<br>
	 * Original signature : <code>char* setstate(char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:23</i>
	 */
	Pointer setstate(ByteBuffer __statebuf);
	/**
	 * Original signature : <code>int random_r(random_data*, int32_t*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:39</i><br>
	 * @deprecated use the safer methods {@link #random_r(org.terraswarm.gdp.random_data, java.nio.IntBuffer)} and {@link #random_r(org.terraswarm.gdp.random_data, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int random_r(random_data __buf, IntByReference __result);
	/**
	 * Original signature : <code>int random_r(random_data*, int32_t*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:39</i>
	 */
	int random_r(random_data __buf, IntBuffer __result);
	/**
	 * Original signature : <code>int srandom_r(unsigned int, random_data*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:41</i>
	 */
	int srandom_r(int __seed, random_data __buf);
	/**
	 * Original signature : <code>int initstate_r(unsigned int, char*, size_t, random_data*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:43</i><br>
	 * @deprecated use the safer methods {@link #initstate_r(int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.random_data)} and {@link #initstate_r(int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.random_data)} instead
	 */
	@Deprecated 
	int initstate_r(int __seed, Pointer __statebuf, NativeSizeT __statelen, random_data __buf);
	/**
	 * Original signature : <code>int initstate_r(unsigned int, char*, size_t, random_data*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:43</i>
	 */
	int initstate_r(int __seed, ByteBuffer __statebuf, NativeSizeT __statelen, random_data __buf);
	/**
	 * Original signature : <code>int setstate_r(char*, random_data*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:45</i><br>
	 * @deprecated use the safer methods {@link #setstate_r(java.nio.ByteBuffer, org.terraswarm.gdp.random_data)} and {@link #setstate_r(com.sun.jna.Pointer, org.terraswarm.gdp.random_data)} instead
	 */
	@Deprecated 
	int setstate_r(Pointer __statebuf, random_data __buf);
	/**
	 * Original signature : <code>int setstate_r(char*, random_data*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:45</i>
	 */
	int setstate_r(ByteBuffer __statebuf, random_data __buf);
	/**
	 * Return a random integer between 0 and RAND_MAX inclusive.<br>
	 * Original signature : <code>int rand()</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:50</i>
	 */
	int rand();
	/**
	 * Seed the random number generator with the given number.<br>
	 * Original signature : <code>void srand(unsigned int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:55</i>
	 */
	void srand(int __seed);
	/**
	 * Reentrant interface according to POSIX.1.<br>
	 * Original signature : <code>int rand_r(unsigned int*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:60</i><br>
	 * @deprecated use the safer methods {@link #rand_r(java.nio.IntBuffer)} and {@link #rand_r(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int rand_r(IntByReference __seed);
	/**
	 * Reentrant interface according to POSIX.1.<br>
	 * Original signature : <code>int rand_r(unsigned int*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:60</i>
	 */
	int rand_r(IntBuffer __seed);
	/**
	 * Return non-negative, double-precision floating-point value in [0.0,1.0).<br>
	 * Original signature : <code>double drand48()</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:65</i>
	 */
	double drand48();
	/**
	 * Original signature : <code>double erand48(unsigned short[3])</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:67</i><br>
	 * @deprecated use the safer methods {@link #erand48(java.nio.ShortBuffer)} and {@link #erand48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	double erand48(ShortByReference __xsubi);
	/**
	 * Original signature : <code>double erand48(unsigned short[3])</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:67</i>
	 */
	double erand48(ShortBuffer __xsubi);
	/**
	 * Return non-negative, long integer in [0,2^31).<br>
	 * Original signature : <code>long lrand48()</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:72</i>
	 */
	NativeLong lrand48();
	/**
	 * Original signature : <code>long nrand48(unsigned short[3])</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:74</i><br>
	 * @deprecated use the safer methods {@link #nrand48(java.nio.ShortBuffer)} and {@link #nrand48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	NativeLong nrand48(ShortByReference __xsubi);
	/**
	 * Original signature : <code>long nrand48(unsigned short[3])</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:74</i>
	 */
	NativeLong nrand48(ShortBuffer __xsubi);
	/**
	 * Return signed, long integers in [-2^31,2^31).<br>
	 * Original signature : <code>long mrand48()</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:79</i>
	 */
	NativeLong mrand48();
	/**
	 * Original signature : <code>long jrand48(unsigned short[3])</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:81</i><br>
	 * @deprecated use the safer methods {@link #jrand48(java.nio.ShortBuffer)} and {@link #jrand48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	NativeLong jrand48(ShortByReference __xsubi);
	/**
	 * Original signature : <code>long jrand48(unsigned short[3])</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:81</i>
	 */
	NativeLong jrand48(ShortBuffer __xsubi);
	/**
	 * Seed random number generator.<br>
	 * Original signature : <code>void srand48(long)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:86</i>
	 */
	void srand48(NativeLong __seedval);
	/**
	 * Original signature : <code>short* seed48(unsigned short[3])</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:88</i><br>
	 * @deprecated use the safer methods {@link #seed48(java.nio.ShortBuffer)} and {@link #seed48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	ShortByReference seed48(ShortByReference __seed16v);
	/**
	 * Original signature : <code>short* seed48(unsigned short[3])</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:88</i>
	 */
	ShortByReference seed48(ShortBuffer __seed16v);
	/**
	 * Original signature : <code>void lcong48(unsigned short[7])</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:90</i><br>
	 * @deprecated use the safer methods {@link #lcong48(java.nio.ShortBuffer)} and {@link #lcong48(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	void lcong48(ShortByReference __param);
	/**
	 * Original signature : <code>void lcong48(unsigned short[7])</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:90</i>
	 */
	void lcong48(ShortBuffer __param);
	/**
	 * Return non-negative, double-precision floating-point value in [0.0,1.0).<br>
	 * Original signature : <code>int drand48_r(drand48_data*, double*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:107</i><br>
	 * @deprecated use the safer methods {@link #drand48_r(org.terraswarm.gdp.drand48_data, java.nio.DoubleBuffer)} and {@link #drand48_r(org.terraswarm.gdp.drand48_data, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int drand48_r(drand48_data __buffer, DoubleByReference __result);
	/**
	 * Return non-negative, double-precision floating-point value in [0.0,1.0).<br>
	 * Original signature : <code>int drand48_r(drand48_data*, double*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:107</i>
	 */
	int drand48_r(drand48_data __buffer, DoubleBuffer __result);
	/**
	 * Original signature : <code>int erand48_r(unsigned short[3], drand48_data*, double*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:109</i><br>
	 * @deprecated use the safer methods {@link #erand48_r(java.nio.ShortBuffer, org.terraswarm.gdp.drand48_data, java.nio.DoubleBuffer)} and {@link #erand48_r(com.sun.jna.ptr.ShortByReference, org.terraswarm.gdp.drand48_data, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	int erand48_r(ShortByReference __xsubi, drand48_data __buffer, DoubleByReference __result);
	/**
	 * Original signature : <code>int erand48_r(unsigned short[3], drand48_data*, double*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:109</i>
	 */
	int erand48_r(ShortBuffer __xsubi, drand48_data __buffer, DoubleBuffer __result);
	/**
	 * Return non-negative, long integer in [0,2^31).<br>
	 * Original signature : <code>int lrand48_r(drand48_data*, long*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:114</i>
	 */
	int lrand48_r(drand48_data __buffer, NativeLongByReference __result);
	/**
	 * Original signature : <code>int nrand48_r(unsigned short[3], drand48_data*, long*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:116</i><br>
	 * @deprecated use the safer methods {@link #nrand48_r(java.nio.ShortBuffer, org.terraswarm.gdp.drand48_data, com.sun.jna.ptr.NativeLongByReference)} and {@link #nrand48_r(com.sun.jna.ptr.ShortByReference, org.terraswarm.gdp.drand48_data, com.sun.jna.ptr.NativeLongByReference)} instead
	 */
	@Deprecated 
	int nrand48_r(ShortByReference __xsubi, drand48_data __buffer, NativeLongByReference __result);
	/**
	 * Original signature : <code>int nrand48_r(unsigned short[3], drand48_data*, long*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:116</i>
	 */
	int nrand48_r(ShortBuffer __xsubi, drand48_data __buffer, NativeLongByReference __result);
	/**
	 * Return signed, long integers in [-2^31,2^31).<br>
	 * Original signature : <code>int mrand48_r(drand48_data*, long*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:121</i>
	 */
	int mrand48_r(drand48_data __buffer, NativeLongByReference __result);
	/**
	 * Original signature : <code>int jrand48_r(unsigned short[3], drand48_data*, long*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:123</i><br>
	 * @deprecated use the safer methods {@link #jrand48_r(java.nio.ShortBuffer, org.terraswarm.gdp.drand48_data, com.sun.jna.ptr.NativeLongByReference)} and {@link #jrand48_r(com.sun.jna.ptr.ShortByReference, org.terraswarm.gdp.drand48_data, com.sun.jna.ptr.NativeLongByReference)} instead
	 */
	@Deprecated 
	int jrand48_r(ShortByReference __xsubi, drand48_data __buffer, NativeLongByReference __result);
	/**
	 * Original signature : <code>int jrand48_r(unsigned short[3], drand48_data*, long*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:123</i>
	 */
	int jrand48_r(ShortBuffer __xsubi, drand48_data __buffer, NativeLongByReference __result);
	/**
	 * Seed random number generator.<br>
	 * Original signature : <code>int srand48_r(long, drand48_data*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:128</i>
	 */
	int srand48_r(NativeLong __seedval, drand48_data __buffer);
	/**
	 * Original signature : <code>int seed48_r(unsigned short[3], drand48_data*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:130</i><br>
	 * @deprecated use the safer methods {@link #seed48_r(java.nio.ShortBuffer, org.terraswarm.gdp.drand48_data)} and {@link #seed48_r(com.sun.jna.ptr.ShortByReference, org.terraswarm.gdp.drand48_data)} instead
	 */
	@Deprecated 
	int seed48_r(ShortByReference __seed16v, drand48_data __buffer);
	/**
	 * Original signature : <code>int seed48_r(unsigned short[3], drand48_data*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:130</i>
	 */
	int seed48_r(ShortBuffer __seed16v, drand48_data __buffer);
	/**
	 * Original signature : <code>int lcong48_r(unsigned short[7], drand48_data*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:132</i><br>
	 * @deprecated use the safer methods {@link #lcong48_r(java.nio.ShortBuffer, org.terraswarm.gdp.drand48_data)} and {@link #lcong48_r(com.sun.jna.ptr.ShortByReference, org.terraswarm.gdp.drand48_data)} instead
	 */
	@Deprecated 
	int lcong48_r(ShortByReference __param, drand48_data __buffer);
	/**
	 * Original signature : <code>int lcong48_r(unsigned short[7], drand48_data*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:132</i>
	 */
	int lcong48_r(ShortBuffer __param, drand48_data __buffer);
	/**
	 * Allocate SIZE bytes of memory.<br>
	 * Original signature : <code>void* malloc(size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:137</i>
	 */
	Pointer malloc(NativeSizeT __size);
	/**
	 * Allocate NMEMB elements of SIZE bytes each, all initialized to 0.<br>
	 * Original signature : <code>void* calloc(size_t, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:142</i>
	 */
	Pointer calloc(NativeSizeT __nmemb, NativeSizeT __size);
	/**
	 * __attribute_malloc__ is not used, because if realloc returns<br>
	 * the same pointer that was passed to it, aliasing needs to be allowed<br>
	 * between objects pointed by the old and new pointers.<br>
	 * Original signature : <code>void* realloc(void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:149</i>
	 */
	Pointer realloc(Pointer __ptr, NativeSizeT __size);
	/**
	 * Free a block allocated by `malloc', `realloc' or `calloc'.<br>
	 * Original signature : <code>void free(void*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:154</i>
	 */
	void free(Pointer __ptr);
	/**
	 * Free a block.  An alias for `free'.	(Sun Unices).<br>
	 * Original signature : <code>void cfree(void*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:159</i>
	 */
	void cfree(Pointer __ptr);
	/**
	 * Allocate a block that will be freed when the calling function exits.<br>
	 * Original signature : <code>void* alloca(size_t)</code><br>
	 * <i>native declaration : /usr/include/alloca.h:5</i>
	 */
	Pointer alloca(NativeSizeT __size);
	/**
	 * Allocate SIZE bytes on a page boundary.  The storage cannot be freed.<br>
	 * Original signature : <code>void* valloc(size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:4</i>
	 */
	Pointer valloc(NativeSizeT __size);
	/**
	 * Allocate memory of SIZE bytes with an alignment of ALIGNMENT.<br>
	 * Original signature : <code>int posix_memalign(void**, size_t, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:9</i>
	 */
	int posix_memalign(PointerByReference __memptr, NativeSizeT __alignment, NativeSizeT __size);
	/**
	 * Abort execution and generate a core-dump.<br>
	 * Original signature : <code>void abort()</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:14</i>
	 */
	void abort();
	/**
	 * Register a function to be called when `exit' is called.<br>
	 * Original signature : <code>int atexit(atexit___func_callback*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:19</i>
	 */
	int atexit(Gdp10Library.atexit___func_callback __func);
	/**
	 * Register a function to be called with the status<br>
	 * given to `exit' and the given argument.<br>
	 * Original signature : <code>int on_exit(on_exit___func_callback*, void*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:25</i>
	 */
	int on_exit(Gdp10Library.on_exit___func_callback __func, Pointer __arg);
	/**
	 * Call all functions registered with `atexit' and `on_exit',<br>
	 * in the reverse of the order in which they were registered,<br>
	 * perform stdio cleanup, and terminate program execution with STATUS.<br>
	 * Original signature : <code>void exit(int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:32</i>
	 */
	void exit(int __status);
	/**
	 * Terminate the program with STATUS without calling any of the<br>
	 * functions registered with `atexit' or `on_exit'.<br>
	 * Original signature : <code>void _Exit(int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:38</i>
	 */
	void _Exit(int __status);
	/**
	 * Return the value of envariable NAME, or NULL if it doesn't exist.<br>
	 * Original signature : <code>char* getenv(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:43</i><br>
	 * @deprecated use the safer methods {@link #getenv(java.lang.String)} and {@link #getenv(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer getenv(Pointer __name);
	/**
	 * Return the value of envariable NAME, or NULL if it doesn't exist.<br>
	 * Original signature : <code>char* getenv(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:43</i>
	 */
	Pointer getenv(String __name);
	/**
	 * This function is similar to the above but returns NULL if the<br>
	 * programs is running with SUID or SGID enabled.<br>
	 * Original signature : <code>char* __secure_getenv(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:49</i><br>
	 * @deprecated use the safer methods {@link #__secure_getenv(java.lang.String)} and {@link #__secure_getenv(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer __secure_getenv(Pointer __name);
	/**
	 * This function is similar to the above but returns NULL if the<br>
	 * programs is running with SUID or SGID enabled.<br>
	 * Original signature : <code>char* __secure_getenv(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:49</i>
	 */
	Pointer __secure_getenv(String __name);
	/**
	 * Put STRING, which is of the form "NAME=VALUE", in the environment.<br>
	 * If there is no `=', remove NAME from the environment.<br>
	 * Original signature : <code>int putenv(char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:55</i><br>
	 * @deprecated use the safer methods {@link #putenv(java.nio.ByteBuffer)} and {@link #putenv(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int putenv(Pointer __string);
	/**
	 * Put STRING, which is of the form "NAME=VALUE", in the environment.<br>
	 * If there is no `=', remove NAME from the environment.<br>
	 * Original signature : <code>int putenv(char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:55</i>
	 */
	int putenv(ByteBuffer __string);
	/**
	 * Set NAME to VALUE in the environment.<br>
	 * If REPLACE is nonzero, overwrite an existing value.<br>
	 * Original signature : <code>int setenv(__const char*, __const char*, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:61</i><br>
	 * @deprecated use the safer methods {@link #setenv(java.lang.String, java.lang.String, int)} and {@link #setenv(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int setenv(Pointer __name, Pointer __value, int __replace);
	/**
	 * Set NAME to VALUE in the environment.<br>
	 * If REPLACE is nonzero, overwrite an existing value.<br>
	 * Original signature : <code>int setenv(__const char*, __const char*, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:61</i>
	 */
	int setenv(String __name, String __value, int __replace);
	/**
	 * Remove the variable NAME from the environment.<br>
	 * Original signature : <code>int unsetenv(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:66</i><br>
	 * @deprecated use the safer methods {@link #unsetenv(java.lang.String)} and {@link #unsetenv(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int unsetenv(Pointer __name);
	/**
	 * Remove the variable NAME from the environment.<br>
	 * Original signature : <code>int unsetenv(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:66</i>
	 */
	int unsetenv(String __name);
	/**
	 * The `clearenv' was planned to be added to POSIX.1 but probably<br>
	 * never made it.  Nevertheless the POSIX.9 standard (POSIX bindings<br>
	 * for Fortran 77) requires this function.<br>
	 * Original signature : <code>int clearenv()</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:73</i>
	 */
	int clearenv();
	/**
	 * Generate a unique temporary file name from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the file name unique.<br>
	 * Returns TEMPLATE, or a null pointer if it cannot get a unique file name.<br>
	 * Original signature : <code>char* mktemp(char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:81</i><br>
	 * @deprecated use the safer methods {@link #mktemp(java.nio.ByteBuffer)} and {@link #mktemp(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer mktemp(Pointer __template);
	/**
	 * Generate a unique temporary file name from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the file name unique.<br>
	 * Returns TEMPLATE, or a null pointer if it cannot get a unique file name.<br>
	 * Original signature : <code>char* mktemp(char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:81</i>
	 */
	Pointer mktemp(ByteBuffer __template);
	/**
	 * Generate a unique temporary file name from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the filename unique.<br>
	 * Returns a file descriptor open on the file for reading and writing,<br>
	 * or -1 if it cannot create a uniquely-named file.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int mkstemp(char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:92</i><br>
	 * @deprecated use the safer methods {@link #mkstemp(java.nio.ByteBuffer)} and {@link #mkstemp(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int mkstemp(Pointer __template);
	/**
	 * Generate a unique temporary file name from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the filename unique.<br>
	 * Returns a file descriptor open on the file for reading and writing,<br>
	 * or -1 if it cannot create a uniquely-named file.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int mkstemp(char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:92</i>
	 */
	int mkstemp(ByteBuffer __template);
	/**
	 * Similar to mkstemp, but the template can have a suffix after the<br>
	 * XXXXXX.  The length of the suffix is specified in the second<br>
	 * parameter.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int mkstemps(char*, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:101</i><br>
	 * @deprecated use the safer methods {@link #mkstemps(java.nio.ByteBuffer, int)} and {@link #mkstemps(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int mkstemps(Pointer __template, int __suffixlen);
	/**
	 * Similar to mkstemp, but the template can have a suffix after the<br>
	 * XXXXXX.  The length of the suffix is specified in the second<br>
	 * parameter.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int mkstemps(char*, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:101</i>
	 */
	int mkstemps(ByteBuffer __template, int __suffixlen);
	/**
	 * Create a unique temporary directory from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the directory name unique.<br>
	 * Returns TEMPLATE, or a null pointer if it cannot get a unique name.<br>
	 * The directory is created mode 700.<br>
	 * Original signature : <code>char* mkdtemp(char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:110</i><br>
	 * @deprecated use the safer methods {@link #mkdtemp(java.nio.ByteBuffer)} and {@link #mkdtemp(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer mkdtemp(Pointer __template);
	/**
	 * Create a unique temporary directory from TEMPLATE.<br>
	 * The last six characters of TEMPLATE must be "XXXXXX";<br>
	 * they are replaced with a string that makes the directory name unique.<br>
	 * Returns TEMPLATE, or a null pointer if it cannot get a unique name.<br>
	 * The directory is created mode 700.<br>
	 * Original signature : <code>char* mkdtemp(char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:110</i>
	 */
	Pointer mkdtemp(ByteBuffer __template);
	/**
	 * Execute the given line as a shell command.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int system(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:117</i><br>
	 * @deprecated use the safer methods {@link #system(java.lang.String)} and {@link #system(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int system(Pointer __command);
	/**
	 * Execute the given line as a shell command.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int system(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:117</i>
	 */
	int system(String __command);
	/**
	 * Return the canonical absolute name of file NAME.  If RESOLVED is<br>
	 * null, the result is malloc'd; otherwise, if the canonical name is<br>
	 * PATH_MAX chars or more, returns null with `errno' set to<br>
	 * ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,<br>
	 * returns the name in RESOLVED.<br>
	 * Original signature : <code>char* realpath(__const char*, char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:126</i><br>
	 * @deprecated use the safer methods {@link #realpath(java.lang.String, java.nio.ByteBuffer)} and {@link #realpath(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer realpath(Pointer __name, Pointer __resolved);
	/**
	 * Return the canonical absolute name of file NAME.  If RESOLVED is<br>
	 * null, the result is malloc'd; otherwise, if the canonical name is<br>
	 * PATH_MAX chars or more, returns null with `errno' set to<br>
	 * ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,<br>
	 * returns the name in RESOLVED.<br>
	 * Original signature : <code>char* realpath(__const char*, char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:126</i>
	 */
	Pointer realpath(String __name, ByteBuffer __resolved);
	/**
	 * Do a binary search for KEY in BASE, which consists of NMEMB elements<br>
	 * of SIZE bytes each, using COMPAR to perform the comparisons.<br>
	 * Original signature : <code>void* bsearch(__const void*, __const void*, size_t, size_t, __compar_fn_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:134</i>
	 */
	Pointer bsearch(Pointer __key, Pointer __base, NativeSizeT __nmemb, NativeSizeT __size, Gdp10Library.__compar_fn_t __compar);
	/**
	 * Sort NMEMB elements of BASE, of SIZE bytes each,<br>
	 * using COMPAR to perform the comparisons.<br>
	 * Original signature : <code>void qsort(void*, size_t, size_t, __compar_fn_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:140</i>
	 */
	void qsort(Pointer __base, NativeSizeT __nmemb, NativeSizeT __size, Gdp10Library.__compar_fn_t __compar);
	/**
	 * Return the absolute value of X.<br>
	 * Original signature : <code>int abs(int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:145</i>
	 */
	int abs(int __x);
	/**
	 * Original signature : <code>long labs(long)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:147</i>
	 */
	NativeLong labs(NativeLong __x);
	/**
	 * Original signature : <code>long long llabs(long long)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:149</i>
	 */
	NativeLong llabs(NativeLong __x);
	/**
	 * GCC may have built-ins for these someday.<br>
	 * Original signature : <code>div_t div(int, int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:154</i>
	 */
	org.terraswarm.gdp.div_t.ByValue div(int __numer, int __denom);
	/**
	 * Original signature : <code>ldiv_t ldiv(long, long)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:156</i>
	 */
	org.terraswarm.gdp.ldiv_t.ByValue ldiv(NativeLong __numer, NativeLong __denom);
	/**
	 * Original signature : <code>lldiv_t lldiv(long long, long long)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:158</i>
	 */
	org.terraswarm.gdp.lldiv_t.ByValue lldiv(NativeLong __numer, NativeLong __denom);
	/**
	 * Convert VALUE to a string with NDIGIT digits and return a pointer to<br>
	 * this.  Set *DECPT with the position of the decimal character and *SIGN<br>
	 * with the sign of the number.<br>
	 * Original signature : <code>char* ecvt(double, int, int*, int*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:165</i><br>
	 * @deprecated use the safer methods {@link #ecvt(double, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #ecvt(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer ecvt(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign);
	/**
	 * Convert VALUE to a string with NDIGIT digits and return a pointer to<br>
	 * this.  Set *DECPT with the position of the decimal character and *SIGN<br>
	 * with the sign of the number.<br>
	 * Original signature : <code>char* ecvt(double, int, int*, int*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:165</i>
	 */
	Pointer ecvt(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign);
	/**
	 * Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DECPT<br>
	 * with the position of the decimal character and *SIGN with the sign of<br>
	 * the number.<br>
	 * Original signature : <code>char* fcvt(double, int, int*, int*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:172</i><br>
	 * @deprecated use the safer methods {@link #fcvt(double, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #fcvt(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer fcvt(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign);
	/**
	 * Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DECPT<br>
	 * with the position of the decimal character and *SIGN with the sign of<br>
	 * the number.<br>
	 * Original signature : <code>char* fcvt(double, int, int*, int*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:172</i>
	 */
	Pointer fcvt(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign);
	/**
	 * If possible convert VALUE to a string with NDIGIT significant digits.<br>
	 * Otherwise use exponential representation.  The resulting string will<br>
	 * be written to BUF.<br>
	 * Original signature : <code>char* gcvt(double, int, char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:179</i><br>
	 * @deprecated use the safer methods {@link #gcvt(double, int, java.nio.ByteBuffer)} and {@link #gcvt(double, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer gcvt(double __value, int __ndigit, Pointer __buf);
	/**
	 * If possible convert VALUE to a string with NDIGIT significant digits.<br>
	 * Otherwise use exponential representation.  The resulting string will<br>
	 * be written to BUF.<br>
	 * Original signature : <code>char* gcvt(double, int, char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:179</i>
	 */
	Pointer gcvt(double __value, int __ndigit, ByteBuffer __buf);
	/**
	 * Long double versions of above functions.<br>
	 * Original signature : <code>char* qecvt(long double, int, int*, int*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:184</i><br>
	 * @deprecated use the safer methods {@link #qecvt(double, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #qecvt(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer qecvt(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign);
	/**
	 * Long double versions of above functions.<br>
	 * Original signature : <code>char* qecvt(long double, int, int*, int*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:184</i>
	 */
	Pointer qecvt(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign);
	/**
	 * Original signature : <code>char* qfcvt(long double, int, int*, int*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:186</i><br>
	 * @deprecated use the safer methods {@link #qfcvt(double, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #qfcvt(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer qfcvt(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign);
	/**
	 * Original signature : <code>char* qfcvt(long double, int, int*, int*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:186</i>
	 */
	Pointer qfcvt(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign);
	/**
	 * Original signature : <code>char* qgcvt(long double, int, char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:188</i><br>
	 * @deprecated use the safer methods {@link #qgcvt(double, int, java.nio.ByteBuffer)} and {@link #qgcvt(double, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer qgcvt(double __value, int __ndigit, Pointer __buf);
	/**
	 * Original signature : <code>char* qgcvt(long double, int, char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:188</i>
	 */
	Pointer qgcvt(double __value, int __ndigit, ByteBuffer __buf);
	/**
	 * Reentrant version of the functions above which provide their own<br>
	 * buffers.<br>
	 * Original signature : <code>int ecvt_r(double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:194</i><br>
	 * @deprecated use the safer methods {@link #ecvt_r(double, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #ecvt_r(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int ecvt_r(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign, Pointer __buf, NativeSizeT __len);
	/**
	 * Reentrant version of the functions above which provide their own<br>
	 * buffers.<br>
	 * Original signature : <code>int ecvt_r(double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:194</i>
	 */
	int ecvt_r(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign, ByteBuffer __buf, NativeSizeT __len);
	/**
	 * Original signature : <code>int fcvt_r(double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:196</i><br>
	 * @deprecated use the safer methods {@link #fcvt_r(double, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #fcvt_r(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int fcvt_r(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign, Pointer __buf, NativeSizeT __len);
	/**
	 * Original signature : <code>int fcvt_r(double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:196</i>
	 */
	int fcvt_r(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign, ByteBuffer __buf, NativeSizeT __len);
	/**
	 * Original signature : <code>int qecvt_r(long double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:198</i><br>
	 * @deprecated use the safer methods {@link #qecvt_r(double, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #qecvt_r(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int qecvt_r(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign, Pointer __buf, NativeSizeT __len);
	/**
	 * Original signature : <code>int qecvt_r(long double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:198</i>
	 */
	int qecvt_r(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign, ByteBuffer __buf, NativeSizeT __len);
	/**
	 * Original signature : <code>int qfcvt_r(long double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:200</i><br>
	 * @deprecated use the safer methods {@link #qfcvt_r(double, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #qfcvt_r(double, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int qfcvt_r(double __value, int __ndigit, IntByReference __decpt, IntByReference __sign, Pointer __buf, NativeSizeT __len);
	/**
	 * Original signature : <code>int qfcvt_r(long double, int, int*, int*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:200</i>
	 */
	int qfcvt_r(double __value, int __ndigit, IntBuffer __decpt, IntBuffer __sign, ByteBuffer __buf, NativeSizeT __len);
	/**
	 * Return the length of the multibyte character<br>
	 * in S, which is no longer than N.<br>
	 * Original signature : <code>int mblen(__const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:206</i><br>
	 * @deprecated use the safer methods {@link #mblen(java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #mblen(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int mblen(Pointer __s, NativeSizeT __n);
	/**
	 * Return the length of the multibyte character<br>
	 * in S, which is no longer than N.<br>
	 * Original signature : <code>int mblen(__const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:206</i>
	 */
	int mblen(String __s, NativeSizeT __n);
	/**
	 * Return the length of the given multibyte character,<br>
	 * putting its `wchar_t' representation in *PWC.<br>
	 * Original signature : <code>int mbtowc(wchar_t*, __const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:212</i><br>
// 	 * @deprecated use the safer methods {@link #mbtowc(java.nio.CharBuffer, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #mbtowc(com.ochafik.lang.jnaerator.runtime.CharByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
// 	int mbtowc(CharByReference __pwc, Pointer __s, NativeSizeT __n);
	/**
	 * Return the length of the given multibyte character,<br>
	 * putting its `wchar_t' representation in *PWC.<br>
	 * Original signature : <code>int mbtowc(wchar_t*, __const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:212</i>
	 */
	int mbtowc(CharBuffer __pwc, String __s, NativeSizeT __n);
	/**
	 * Put the multibyte character represented<br>
	 * by WCHAR in S, returning its length.<br>
	 * Original signature : <code>int wctomb(char*, wchar_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:218</i><br>
	 * @deprecated use the safer methods {@link #wctomb(java.nio.ByteBuffer, char)} and {@link #wctomb(com.sun.jna.Pointer, char)} instead
	 */
	@Deprecated 
	int wctomb(Pointer __s, char __wchar);
	/**
	 * Put the multibyte character represented<br>
	 * by WCHAR in S, returning its length.<br>
	 * Original signature : <code>int wctomb(char*, wchar_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:218</i>
	 */
	int wctomb(ByteBuffer __s, char __wchar);
	/**
	 * Convert a multibyte string to a wide char string.<br>
	 * Original signature : <code>size_t mbstowcs(wchar_t*, __const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:223</i><br>
// 	 * @deprecated use the safer methods {@link #mbstowcs(java.nio.CharBuffer, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #mbstowcs(com.ochafik.lang.jnaerator.runtime.CharByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
// 	NativeSizeT mbstowcs(CharByReference __pwcs, Pointer __s, NativeSizeT __n);
	/**
	 * Convert a multibyte string to a wide char string.<br>
	 * Original signature : <code>size_t mbstowcs(wchar_t*, __const char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:223</i>
	 */
	NativeSizeT mbstowcs(CharBuffer __pwcs, String __s, NativeSizeT __n);
	/**
	 * Convert a wide char string to multibyte string.<br>
	 * Original signature : <code>size_t wcstombs(char*, __const wchar_t*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:228</i><br>
// 	 * @deprecated use the safer methods {@link #wcstombs(java.nio.ByteBuffer, com.sun.jna.WString, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #wcstombs(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.CharByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
// 	NativeSizeT wcstombs(Pointer __s, CharByReference __pwcs, NativeSizeT __n);
	/**
	 * Convert a wide char string to multibyte string.<br>
	 * Original signature : <code>size_t wcstombs(char*, __const wchar_t*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:228</i>
	 */
	NativeSizeT wcstombs(ByteBuffer __s, WString __pwcs, NativeSizeT __n);
	/**
	 * Determine whether the string value of RESPONSE matches the affirmation<br>
	 * or negative response expression as specified by the LC_MESSAGES category<br>
	 * in the program's current locale.  Returns 1 if affirmative, 0 if<br>
	 * negative, and -1 if not matching.<br>
	 * Original signature : <code>int rpmatch(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:236</i><br>
	 * @deprecated use the safer methods {@link #rpmatch(java.lang.String)} and {@link #rpmatch(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int rpmatch(Pointer __response);
	/**
	 * Determine whether the string value of RESPONSE matches the affirmation<br>
	 * or negative response expression as specified by the LC_MESSAGES category<br>
	 * in the program's current locale.  Returns 1 if affirmative, 0 if<br>
	 * negative, and -1 if not matching.<br>
	 * Original signature : <code>int rpmatch(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:236</i>
	 */
	int rpmatch(String __response);
	/**
	 * Parse comma separated suboption from *OPTIONP and match against<br>
	 * strings in TOKENS.  If found return index and set *VALUEP to<br>
	 * optional value introduced by an equal sign.  If the suboption is<br>
	 * not part of TOKENS return in *VALUEP beginning of unknown<br>
	 * suboption.  On exit *OPTIONP is set to the beginning of the next<br>
	 * token or at the terminating NUL character.<br>
	 * Original signature : <code>int getsubopt(char**, const char**, char**)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:246</i><br>
	 * @deprecated use the safer methods {@link #getsubopt(com.sun.jna.ptr.PointerByReference, java.lang.String[], com.sun.jna.ptr.PointerByReference)} and {@link #getsubopt(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int getsubopt(PointerByReference __optionp, PointerByReference __tokens, PointerByReference __valuep);
	/**
	 * Parse comma separated suboption from *OPTIONP and match against<br>
	 * strings in TOKENS.  If found return index and set *VALUEP to<br>
	 * optional value introduced by an equal sign.  If the suboption is<br>
	 * not part of TOKENS return in *VALUEP beginning of unknown<br>
	 * suboption.  On exit *OPTIONP is set to the beginning of the next<br>
	 * token or at the terminating NUL character.<br>
	 * Original signature : <code>int getsubopt(char**, const char**, char**)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:246</i>
	 */
	int getsubopt(PointerByReference __optionp, String __tokens[], PointerByReference __valuep);
	/**
	 * Put the 1 minute, 5 minute and 15 minute load averages into the first<br>
	 * NELEM elements of LOADAVG.  Return the number written (never more than<br>
	 * three, but may be less than NELEM), or -1 if an error occurred.<br>
	 * Original signature : <code>int getloadavg(double[], int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:253</i><br>
	 * @deprecated use the safer methods {@link #getloadavg(java.nio.DoubleBuffer, int)} and {@link #getloadavg(com.sun.jna.ptr.DoubleByReference, int)} instead
	 */
	@Deprecated 
	int getloadavg(DoubleByReference __loadavg, int __nelem);
	/**
	 * Put the 1 minute, 5 minute and 15 minute load averages into the first<br>
	 * NELEM elements of LOADAVG.  Return the number written (never more than<br>
	 * three, but may be less than NELEM), or -1 if an error occurred.<br>
	 * Original signature : <code>int getloadavg(double[], int)</code><br>
	 * <i>native declaration : /usr/include/stdlib.h:253</i>
	 */
	int getloadavg(DoubleBuffer __loadavg, int __nelem);
	/**
	 * Original signature : <code>int __underflow(_IO_FILE*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:80</i>
	 */
	int __underflow(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>int __uflow(_IO_FILE*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:82</i>
	 */
	int __uflow(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>int __overflow(_IO_FILE*, int)</code><br>
	 * <i>native declaration : /usr/include/libio.h:84</i>
	 */
	int __overflow(_IO_FILE _IO_FILEPtr1, int int1);
	/**
	 * Original signature : <code>int _IO_getc(_IO_FILE*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:86</i>
	 */
	int _IO_getc(_IO_FILE __fp);
	/**
	 * Original signature : <code>int _IO_putc(int, _IO_FILE*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:88</i>
	 */
	int _IO_putc(int __c, _IO_FILE __fp);
	/**
	 * Original signature : <code>int _IO_feof(_IO_FILE*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:90</i>
	 */
	int _IO_feof(_IO_FILE __fp);
	/**
	 * Original signature : <code>int _IO_ferror(_IO_FILE*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:92</i>
	 */
	int _IO_ferror(_IO_FILE __fp);
	/**
	 * Original signature : <code>int _IO_peekc_locked(_IO_FILE*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:94</i>
	 */
	int _IO_peekc_locked(_IO_FILE __fp);
	/**
	 * This one is for Emacs.<br>
	 * Original signature : <code>void _IO_flockfile(_IO_FILE*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:99</i>
	 */
	void _IO_flockfile(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>void _IO_funlockfile(_IO_FILE*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:101</i>
	 */
	void _IO_funlockfile(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>int _IO_ftrylockfile(_IO_FILE*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:103</i>
	 */
	int _IO_ftrylockfile(_IO_FILE _IO_FILEPtr1);
	/**
	 * Original signature : <code>int _IO_vfscanf(_IO_FILE*, const char*, __gnuc_va_list, int*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:105</i><br>
	 * @deprecated use the safer methods {@link #_IO_vfscanf(org.terraswarm.gdp._IO_FILE, java.lang.String, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #_IO_vfscanf(org.terraswarm.gdp._IO_FILE, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int _IO_vfscanf(_IO_FILE _IO_FILEPtr1, Pointer charPtr1, Pointer __gnuc_va_list1, IntByReference intPtr1);
	/**
	 * Original signature : <code>int _IO_vfscanf(_IO_FILE*, const char*, __gnuc_va_list, int*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:105</i>
	 */
	int _IO_vfscanf(_IO_FILE _IO_FILEPtr1, String charPtr1, Pointer __gnuc_va_list1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>int _IO_vfprintf(_IO_FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/libio.h:107</i><br>
	 * @deprecated use the safer methods {@link #_IO_vfprintf(org.terraswarm.gdp._IO_FILE, java.lang.String, java.lang.Object)} and {@link #_IO_vfprintf(org.terraswarm.gdp._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int _IO_vfprintf(_IO_FILE _IO_FILEPtr1, Pointer charPtr1, Object... __gnuc_va_list1);
	/**
	 * Original signature : <code>int _IO_vfprintf(_IO_FILE*, const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/libio.h:107</i>
	 */
	int _IO_vfprintf(_IO_FILE _IO_FILEPtr1, String charPtr1, Object... __gnuc_va_list1);
	/**
	 * Original signature : <code>__ssize_t _IO_padn(_IO_FILE*, int, __ssize_t)</code><br>
	 * <i>native declaration : /usr/include/libio.h:109</i>
	 */
	NativeLong _IO_padn(_IO_FILE _IO_FILEPtr1, int int1, NativeLong __ssize_t1);
	/**
	 * Original signature : <code>size_t _IO_sgetn(_IO_FILE*, void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libio.h:111</i>
	 */
	NativeSizeT _IO_sgetn(_IO_FILE _IO_FILEPtr1, Pointer voidPtr1, NativeSizeT size_t1);
	/**
	 * Original signature : <code>__off64_t _IO_seekoff(_IO_FILE*, __off64_t, int, int)</code><br>
	 * <i>native declaration : /usr/include/libio.h:113</i>
	 */
	NativeLong _IO_seekoff(_IO_FILE _IO_FILEPtr1, NativeLong __off64_t1, int int1, int int2);
	/**
	 * Original signature : <code>__off64_t _IO_seekpos(_IO_FILE*, __off64_t, int)</code><br>
	 * <i>native declaration : /usr/include/libio.h:115</i>
	 */
	NativeLong _IO_seekpos(_IO_FILE _IO_FILEPtr1, NativeLong __off64_t1, int int1);
	/**
	 * Original signature : <code>void _IO_free_backup_area(_IO_FILE*)</code><br>
	 * <i>native declaration : /usr/include/libio.h:117</i>
	 */
	void _IO_free_backup_area(_IO_FILE _IO_FILEPtr1);
	/**
	 * Remove file FILENAME.<br>
	 * Original signature : <code>int remove(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:8</i><br>
	 * @deprecated use the safer methods {@link #remove(java.lang.String)} and {@link #remove(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int remove(Pointer __filename);
	/**
	 * Remove file FILENAME.<br>
	 * Original signature : <code>int remove(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:8</i>
	 */
	int remove(String __filename);
	/**
	 * Rename file OLD to NEW.<br>
	 * Original signature : <code>int rename(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:13</i><br>
	 * @deprecated use the safer methods {@link #rename(java.lang.String, java.lang.String)} and {@link #rename(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int rename(Pointer __old, Pointer __new);
	/**
	 * Rename file OLD to NEW.<br>
	 * Original signature : <code>int rename(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:13</i>
	 */
	int rename(String __old, String __new);
	/**
	 * Rename file OLD relative to OLDFD to NEW relative to NEWFD.<br>
	 * Original signature : <code>int renameat(int, __const char*, int, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:18</i><br>
	 * @deprecated use the safer methods {@link #renameat(int, java.lang.String, int, java.lang.String)} and {@link #renameat(int, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int renameat(int __oldfd, Pointer __old, int __newfd, Pointer __new);
	/**
	 * Rename file OLD relative to OLDFD to NEW relative to NEWFD.<br>
	 * Original signature : <code>int renameat(int, __const char*, int, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:18</i>
	 */
	int renameat(int __oldfd, String __old, int __newfd, String __new);
	/**
	 * Create a temporary file and open it read/write.<br>
	 * This function is a possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* tmpfile()</code><br>
	 * <i>native declaration : /usr/include/stdio.h:25</i>
	 */
	_IO_FILE tmpfile();
	/**
	 * Generate a temporary filename.<br>
	 * Original signature : <code>char* tmpnam(char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:30</i><br>
	 * @deprecated use the safer methods {@link #tmpnam(java.nio.ByteBuffer)} and {@link #tmpnam(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer tmpnam(Pointer __s);
	/**
	 * Generate a temporary filename.<br>
	 * Original signature : <code>char* tmpnam(char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:30</i>
	 */
	Pointer tmpnam(ByteBuffer __s);
	/**
	 * This is the reentrant variant of `tmpnam'.  The only difference is<br>
	 * that it does not allow S to be NULL.<br>
	 * Original signature : <code>char* tmpnam_r(char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:36</i><br>
	 * @deprecated use the safer methods {@link #tmpnam_r(java.nio.ByteBuffer)} and {@link #tmpnam_r(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer tmpnam_r(Pointer __s);
	/**
	 * This is the reentrant variant of `tmpnam'.  The only difference is<br>
	 * that it does not allow S to be NULL.<br>
	 * Original signature : <code>char* tmpnam_r(char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:36</i>
	 */
	Pointer tmpnam_r(ByteBuffer __s);
	/**
	 * Generate a unique temporary filename using up to five characters of PFX<br>
	 * if it is not NULL.  The directory to put this file in is searched for<br>
	 * as follows: First the environment variable "TMPDIR" is checked.<br>
	 * If it contains the name of a writable directory, that directory is used.<br>
	 * If not and if DIR is not NULL, that value is checked.  If that fails,<br>
	 * P_tmpdir is tried and finally "/tmp".  The storage for the filename<br>
	 * is allocated by `malloc'.<br>
	 * Original signature : <code>char* tempnam(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:47</i><br>
	 * @deprecated use the safer methods {@link #tempnam(java.lang.String, java.lang.String)} and {@link #tempnam(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer tempnam(Pointer __dir, Pointer __pfx);
	/**
	 * Generate a unique temporary filename using up to five characters of PFX<br>
	 * if it is not NULL.  The directory to put this file in is searched for<br>
	 * as follows: First the environment variable "TMPDIR" is checked.<br>
	 * If it contains the name of a writable directory, that directory is used.<br>
	 * If not and if DIR is not NULL, that value is checked.  If that fails,<br>
	 * P_tmpdir is tried and finally "/tmp".  The storage for the filename<br>
	 * is allocated by `malloc'.<br>
	 * Original signature : <code>char* tempnam(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:47</i>
	 */
	Pointer tempnam(String __dir, String __pfx);
	/**
	 * Close STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fclose(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:54</i>
	 */
	int fclose(_IO_FILE __stream);
	/**
	 * Flush STREAM, or all streams if STREAM is NULL.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fflush(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:61</i>
	 */
	int fflush(_IO_FILE __stream);
	/**
	 * Faster versions when locking is not required.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int fflush_unlocked(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:70</i>
	 */
	int fflush_unlocked(_IO_FILE __stream);
	/**
	 * Open a file and create a new stream for it.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* fopen(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:77</i><br>
	 * @deprecated use the safer methods {@link #fopen(java.lang.String, java.lang.String)} and {@link #fopen(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE fopen(Pointer __filename, Pointer __modes);
	/**
	 * Open a file and create a new stream for it.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* fopen(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:77</i>
	 */
	_IO_FILE fopen(String __filename, String __modes);
	/**
	 * Open a file, replacing an existing stream with it.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* freopen(__const char*, __const char*, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:84</i><br>
	 * @deprecated use the safer methods {@link #freopen(java.lang.String, java.lang.String, org.terraswarm.gdp._IO_FILE)} and {@link #freopen(com.sun.jna.Pointer, com.sun.jna.Pointer, org.terraswarm.gdp._IO_FILE)} instead
	 */
	@Deprecated 
	_IO_FILE freopen(Pointer __filename, Pointer __modes, _IO_FILE __stream);
	/**
	 * Open a file, replacing an existing stream with it.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* freopen(__const char*, __const char*, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:84</i>
	 */
	_IO_FILE freopen(String __filename, String __modes, _IO_FILE __stream);
	/**
	 * Create a new stream that refers to an existing system file descriptor.<br>
	 * Original signature : <code>FILE* fdopen(int, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:89</i><br>
	 * @deprecated use the safer methods {@link #fdopen(int, java.lang.String)} and {@link #fdopen(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE fdopen(int __fd, Pointer __modes);
	/**
	 * Create a new stream that refers to an existing system file descriptor.<br>
	 * Original signature : <code>FILE* fdopen(int, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:89</i>
	 */
	_IO_FILE fdopen(int __fd, String __modes);
	/**
	 * Create a new stream that refers to a memory buffer.<br>
	 * Original signature : <code>FILE* fmemopen(void*, size_t, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:94</i><br>
	 * @deprecated use the safer methods {@link #fmemopen(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, java.lang.String)} and {@link #fmemopen(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE fmemopen(Pointer __s, NativeSizeT __len, Pointer __modes);
	/**
	 * Create a new stream that refers to a memory buffer.<br>
	 * Original signature : <code>FILE* fmemopen(void*, size_t, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:94</i>
	 */
	_IO_FILE fmemopen(Pointer __s, NativeSizeT __len, String __modes);
	/**
	 * Open a stream that writes into a malloc'd buffer that is expanded as<br>
	 * necessary.  *BUFLOC and *SIZELOC are updated with the buffer's location<br>
	 * and the number of characters written on fflush or fclose.<br>
	 * Original signature : <code>FILE* open_memstream(char**, size_t*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:101</i>
	 */
// 	_IO_FILE open_memstream(PointerByReference __bufloc, NativeSizeTByReference __sizeloc); // Commented out by makefile because NativeSizeTByReference is not in jna.
	/**
	 * If BUF is NULL, make STREAM unbuffered.<br>
	 * Else make it use buffer BUF, of size BUFSIZ.<br>
	 * Original signature : <code>void setbuf(FILE*, char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:107</i><br>
	 * @deprecated use the safer methods {@link #setbuf(org.terraswarm.gdp._IO_FILE, java.nio.ByteBuffer)} and {@link #setbuf(org.terraswarm.gdp._IO_FILE, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void setbuf(_IO_FILE __stream, Pointer __buf);
	/**
	 * If BUF is NULL, make STREAM unbuffered.<br>
	 * Else make it use buffer BUF, of size BUFSIZ.<br>
	 * Original signature : <code>void setbuf(FILE*, char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:107</i>
	 */
	void setbuf(_IO_FILE __stream, ByteBuffer __buf);
	/**
	 * Make STREAM use buffering mode MODE.<br>
	 * If BUF is not NULL, use N bytes of it for buffering;<br>
	 * else allocate an internal buffer N bytes long.<br>
	 * Original signature : <code>int setvbuf(FILE*, char*, int, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:114</i><br>
	 * @deprecated use the safer methods {@link #setvbuf(org.terraswarm.gdp._IO_FILE, java.nio.ByteBuffer, int, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #setvbuf(org.terraswarm.gdp._IO_FILE, com.sun.jna.Pointer, int, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int setvbuf(_IO_FILE __stream, Pointer __buf, int __modes, NativeSizeT __n);
	/**
	 * Make STREAM use buffering mode MODE.<br>
	 * If BUF is not NULL, use N bytes of it for buffering;<br>
	 * else allocate an internal buffer N bytes long.<br>
	 * Original signature : <code>int setvbuf(FILE*, char*, int, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:114</i>
	 */
	int setvbuf(_IO_FILE __stream, ByteBuffer __buf, int __modes, NativeSizeT __n);
	/**
	 * If BUF is NULL, make STREAM unbuffered.<br>
	 * Else make it use SIZE bytes of BUF for buffering.<br>
	 * Original signature : <code>void setbuffer(FILE*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:120</i><br>
	 * @deprecated use the safer methods {@link #setbuffer(org.terraswarm.gdp._IO_FILE, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #setbuffer(org.terraswarm.gdp._IO_FILE, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	void setbuffer(_IO_FILE __stream, Pointer __buf, NativeSizeT __size);
	/**
	 * If BUF is NULL, make STREAM unbuffered.<br>
	 * Else make it use SIZE bytes of BUF for buffering.<br>
	 * Original signature : <code>void setbuffer(FILE*, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:120</i>
	 */
	void setbuffer(_IO_FILE __stream, ByteBuffer __buf, NativeSizeT __size);
	/**
	 * Make STREAM line-buffered.<br>
	 * Original signature : <code>void setlinebuf(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:125</i>
	 */
	void setlinebuf(_IO_FILE __stream);
	/**
	 * Write formatted output to STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fprintf(FILE*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:132</i><br>
	 * @deprecated use the safer methods {@link #fprintf(org.terraswarm.gdp._IO_FILE, java.lang.String, java.lang.Object)} and {@link #fprintf(org.terraswarm.gdp._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int fprintf(_IO_FILE __stream, Pointer __format, Object... varArgs1);
	/**
	 * Write formatted output to STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fprintf(FILE*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:132</i>
	 */
	int fprintf(_IO_FILE __stream, String __format, Object... varArgs1);
	/**
	 * Write formatted output to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int printf(__const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:139</i><br>
	 * @deprecated use the safer methods {@link #printf(java.lang.String, java.lang.Object)} and {@link #printf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int printf(Pointer __format, Object... varArgs1);
	/**
	 * Write formatted output to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int printf(__const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:139</i>
	 */
	int printf(String __format, Object... varArgs1);
	/**
	 * Write formatted output to S.<br>
	 * Original signature : <code>int sprintf(char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:144</i><br>
	 * @deprecated use the safer methods {@link #sprintf(java.nio.ByteBuffer, java.lang.String, java.lang.Object)} and {@link #sprintf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int sprintf(Pointer __s, Pointer __format, Object... varArgs1);
	/**
	 * Write formatted output to S.<br>
	 * Original signature : <code>int sprintf(char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:144</i>
	 */
	int sprintf(ByteBuffer __s, String __format, Object... varArgs1);
	/**
	 * Write formatted output to S from argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vfprintf(FILE*, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:151</i><br>
	 * @deprecated use the safer methods {@link #vfprintf(org.terraswarm.gdp._IO_FILE, java.lang.String, java.lang.Object)} and {@link #vfprintf(org.terraswarm.gdp._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vfprintf(_IO_FILE __s, Pointer __format, Object... __arg);
	/**
	 * Write formatted output to S from argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vfprintf(FILE*, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:151</i>
	 */
	int vfprintf(_IO_FILE __s, String __format, Object... __arg);
	/**
	 * Write formatted output to stdout from argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vprintf(__const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:158</i><br>
	 * @deprecated use the safer methods {@link #vprintf(java.lang.String, java.lang.Object)} and {@link #vprintf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vprintf(Pointer __format, Object... __arg);
	/**
	 * Write formatted output to stdout from argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vprintf(__const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:158</i>
	 */
	int vprintf(String __format, Object... __arg);
	/**
	 * Write formatted output to S from argument list ARG.<br>
	 * Original signature : <code>int vsprintf(char*, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:163</i><br>
	 * @deprecated use the safer methods {@link #vsprintf(java.nio.ByteBuffer, java.lang.String, java.lang.Object)} and {@link #vsprintf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vsprintf(Pointer __s, Pointer __format, Object... __arg);
	/**
	 * Write formatted output to S from argument list ARG.<br>
	 * Original signature : <code>int vsprintf(char*, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:163</i>
	 */
	int vsprintf(ByteBuffer __s, String __format, Object... __arg);
	/**
	 * Maximum chars of output to write in MAXLEN.<br>
	 * Original signature : <code>int snprintf(char*, size_t, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:168</i><br>
	 * @deprecated use the safer methods {@link #snprintf(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, java.lang.String, java.lang.Object)} and {@link #snprintf(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int snprintf(Pointer __s, NativeSizeT __maxlen, Pointer __format, Object... varArgs1);
	/**
	 * Maximum chars of output to write in MAXLEN.<br>
	 * Original signature : <code>int snprintf(char*, size_t, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:168</i>
	 */
	int snprintf(ByteBuffer __s, NativeSizeT __maxlen, String __format, Object... varArgs1);
	/**
	 * Original signature : <code>int vsnprintf(char*, size_t, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:170</i><br>
	 * @deprecated use the safer methods {@link #vsnprintf(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, java.lang.String, java.lang.Object)} and {@link #vsnprintf(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vsnprintf(Pointer __s, NativeSizeT __maxlen, Pointer __format, Object... __arg);
	/**
	 * Original signature : <code>int vsnprintf(char*, size_t, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:170</i>
	 */
	int vsnprintf(ByteBuffer __s, NativeSizeT __maxlen, String __format, Object... __arg);
	/**
	 * Write formatted output to a file descriptor.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int vdprintf(int, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:179</i><br>
	 * @deprecated use the safer methods {@link #vdprintf(int, java.lang.String, java.lang.Object)} and {@link #vdprintf(int, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vdprintf(int __fd, Pointer __fmt, Object... __arg);
	/**
	 * Write formatted output to a file descriptor.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int vdprintf(int, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:179</i>
	 */
	int vdprintf(int __fd, String __fmt, Object... __arg);
	/**
	 * Original signature : <code>int dprintf(int, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:181</i><br>
	 * @deprecated use the safer methods {@link #dprintf(int, java.lang.String, java.lang.Object)} and {@link #dprintf(int, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int dprintf(int __fd, Pointer __fmt, Object... varArgs1);
	/**
	 * Original signature : <code>int dprintf(int, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:181</i>
	 */
	int dprintf(int __fd, String __fmt, Object... varArgs1);
	/**
	 * Read formatted input from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fscanf(FILE*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:188</i><br>
	 * @deprecated use the safer methods {@link #fscanf(org.terraswarm.gdp._IO_FILE, java.lang.String, java.lang.Object)} and {@link #fscanf(org.terraswarm.gdp._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int fscanf(_IO_FILE __stream, Pointer __format, Object... varArgs1);
	/**
	 * Read formatted input from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fscanf(FILE*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:188</i>
	 */
	int fscanf(_IO_FILE __stream, String __format, Object... varArgs1);
	/**
	 * Read formatted input from stdin.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int scanf(__const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:195</i><br>
	 * @deprecated use the safer methods {@link #scanf(java.lang.String, java.lang.Object)} and {@link #scanf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int scanf(Pointer __format, Object... varArgs1);
	/**
	 * Read formatted input from stdin.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int scanf(__const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:195</i>
	 */
	int scanf(String __format, Object... varArgs1);
	/**
	 * Read formatted input from S.<br>
	 * Original signature : <code>int sscanf(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:200</i><br>
	 * @deprecated use the safer methods {@link #sscanf(java.lang.String, java.lang.String, java.lang.Object)} and {@link #sscanf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int sscanf(Pointer __s, Pointer __format, Object... varArgs1);
	/**
	 * Read formatted input from S.<br>
	 * Original signature : <code>int sscanf(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:200</i>
	 */
	int sscanf(String __s, String __format, Object... varArgs1);
	/**
	 * Original signature : <code>int __isoc99_fscanf(FILE*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:202</i><br>
	 * @deprecated use the safer methods {@link #__isoc99_fscanf(org.terraswarm.gdp._IO_FILE, java.lang.String, java.lang.Object)} and {@link #__isoc99_fscanf(org.terraswarm.gdp._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int __isoc99_fscanf(_IO_FILE __stream, Pointer __format, Object... varArgs1);
	/**
	 * Original signature : <code>int __isoc99_fscanf(FILE*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:202</i>
	 */
	int __isoc99_fscanf(_IO_FILE __stream, String __format, Object... varArgs1);
	/**
	 * Original signature : <code>int __isoc99_scanf(__const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:204</i><br>
	 * @deprecated use the safer methods {@link #__isoc99_scanf(java.lang.String, java.lang.Object)} and {@link #__isoc99_scanf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int __isoc99_scanf(Pointer __format, Object... varArgs1);
	/**
	 * Original signature : <code>int __isoc99_scanf(__const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:204</i>
	 */
	int __isoc99_scanf(String __format, Object... varArgs1);
	/**
	 * Original signature : <code>int __isoc99_sscanf(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:206</i><br>
	 * @deprecated use the safer methods {@link #__isoc99_sscanf(java.lang.String, java.lang.String, java.lang.Object)} and {@link #__isoc99_sscanf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int __isoc99_sscanf(Pointer __s, Pointer __format, Object... varArgs1);
	/**
	 * Original signature : <code>int __isoc99_sscanf(__const char*, __const char*, null)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:206</i>
	 */
	int __isoc99_sscanf(String __s, String __format, Object... varArgs1);
	/**
	 * Read formatted input from S into argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vfscanf(FILE*, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:213</i><br>
	 * @deprecated use the safer methods {@link #vfscanf(org.terraswarm.gdp._IO_FILE, java.lang.String, java.lang.Object)} and {@link #vfscanf(org.terraswarm.gdp._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vfscanf(_IO_FILE __s, Pointer __format, Object... __arg);
	/**
	 * Read formatted input from S into argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vfscanf(FILE*, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:213</i>
	 */
	int vfscanf(_IO_FILE __s, String __format, Object... __arg);
	/**
	 * Read formatted input from stdin into argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vscanf(__const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:220</i><br>
	 * @deprecated use the safer methods {@link #vscanf(java.lang.String, java.lang.Object)} and {@link #vscanf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vscanf(Pointer __format, Object... __arg);
	/**
	 * Read formatted input from stdin into argument list ARG.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int vscanf(__const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:220</i>
	 */
	int vscanf(String __format, Object... __arg);
	/**
	 * Read formatted input from S into argument list ARG.<br>
	 * Original signature : <code>int vsscanf(__const char*, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:225</i><br>
	 * @deprecated use the safer methods {@link #vsscanf(java.lang.String, java.lang.String, java.lang.Object)} and {@link #vsscanf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int vsscanf(Pointer __s, Pointer __format, Object... __arg);
	/**
	 * Read formatted input from S into argument list ARG.<br>
	 * Original signature : <code>int vsscanf(__const char*, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:225</i>
	 */
	int vsscanf(String __s, String __format, Object... __arg);
	/**
	 * Original signature : <code>int __isoc99_vfscanf(FILE*, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:227</i><br>
	 * @deprecated use the safer methods {@link #__isoc99_vfscanf(org.terraswarm.gdp._IO_FILE, java.lang.String, java.lang.Object)} and {@link #__isoc99_vfscanf(org.terraswarm.gdp._IO_FILE, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int __isoc99_vfscanf(_IO_FILE __s, Pointer __format, Object... __arg);
	/**
	 * Original signature : <code>int __isoc99_vfscanf(FILE*, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:227</i>
	 */
	int __isoc99_vfscanf(_IO_FILE __s, String __format, Object... __arg);
	/**
	 * Original signature : <code>int __isoc99_vscanf(__const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:229</i><br>
	 * @deprecated use the safer methods {@link #__isoc99_vscanf(java.lang.String, java.lang.Object)} and {@link #__isoc99_vscanf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int __isoc99_vscanf(Pointer __format, Object... __arg);
	/**
	 * Original signature : <code>int __isoc99_vscanf(__const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:229</i>
	 */
	int __isoc99_vscanf(String __format, Object... __arg);
	/**
	 * Original signature : <code>int __isoc99_vsscanf(__const char*, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:231</i><br>
	 * @deprecated use the safer methods {@link #__isoc99_vsscanf(java.lang.String, java.lang.String, java.lang.Object)} and {@link #__isoc99_vsscanf(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int __isoc99_vsscanf(Pointer __s, Pointer __format, Object... __arg);
	/**
	 * Original signature : <code>int __isoc99_vsscanf(__const char*, __const char*, __gnuc_va_list)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:231</i>
	 */
	int __isoc99_vsscanf(String __s, String __format, Object... __arg);
	/**
	 * Read a character from STREAM.<br>
	 * These functions are possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fgetc(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:238</i>
	 */
	int fgetc(_IO_FILE __stream);
	/**
	 * Original signature : <code>int getc(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:240</i>
	 */
	int getc(_IO_FILE __stream);
	/**
	 * Read a character from stdin.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getchar()</code><br>
	 * <i>native declaration : /usr/include/stdio.h:247</i>
	 */
	int getchar();
	/**
	 * These are defined in POSIX.1:1996.<br>
	 * These functions are possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getc_unlocked(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:254</i>
	 */
	int getc_unlocked(_IO_FILE __stream);
	/**
	 * Original signature : <code>int getchar_unlocked()</code><br>
	 * <i>native declaration : /usr/include/stdio.h:256</i>
	 */
	int getchar_unlocked();
	/**
	 * Faster version when locking is not necessary.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int fgetc_unlocked(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:265</i>
	 */
	int fgetc_unlocked(_IO_FILE __stream);
	/**
	 * Write a character to STREAM.<br>
	 * These functions are possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * These functions is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fputc(int, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:274</i>
	 */
	int fputc(int __c, _IO_FILE __stream);
	/**
	 * Original signature : <code>int putc(int, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:276</i>
	 */
	int putc(int __c, _IO_FILE __stream);
	/**
	 * Write a character to stdout.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int putchar(int)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:283</i>
	 */
	int putchar(int __c);
	/**
	 * Faster version when locking is not necessary.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int fputc_unlocked(int, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:292</i>
	 */
	int fputc_unlocked(int __c, _IO_FILE __stream);
	/**
	 * These are defined in POSIX.1:1996.<br>
	 * These functions are possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int putc_unlocked(int, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:299</i>
	 */
	int putc_unlocked(int __c, _IO_FILE __stream);
	/**
	 * Original signature : <code>int putchar_unlocked(int)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:301</i>
	 */
	int putchar_unlocked(int __c);
	/**
	 * Get a word (int) from STREAM.<br>
	 * Original signature : <code>int getw(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:306</i>
	 */
	int getw(_IO_FILE __stream);
	/**
	 * Write a word (int) to STREAM.<br>
	 * Original signature : <code>int putw(int, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:311</i>
	 */
	int putw(int __w, _IO_FILE __stream);
	/**
	 * Get a newline-terminated string of finite length from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* fgets(char*, int, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:318</i><br>
	 * @deprecated use the safer methods {@link #fgets(java.nio.ByteBuffer, int, org.terraswarm.gdp._IO_FILE)} and {@link #fgets(com.sun.jna.Pointer, int, org.terraswarm.gdp._IO_FILE)} instead
	 */
	@Deprecated 
	Pointer fgets(Pointer __s, int __n, _IO_FILE __stream);
	/**
	 * Get a newline-terminated string of finite length from STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* fgets(char*, int, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:318</i>
	 */
	Pointer fgets(ByteBuffer __s, int __n, _IO_FILE __stream);
	/**
	 * Get a newline-terminated string from stdin, removing the newline.<br>
	 * DO NOT USE THIS FUNCTION!!  There is no limit on how much it will read.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* gets(char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:326</i><br>
	 * @deprecated use the safer methods {@link #gets(java.nio.ByteBuffer)} and {@link #gets(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer gets(Pointer __s);
	/**
	 * Get a newline-terminated string from stdin, removing the newline.<br>
	 * DO NOT USE THIS FUNCTION!!  There is no limit on how much it will read.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>char* gets(char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:326</i>
	 */
	Pointer gets(ByteBuffer __s);
	/**
	 * Read up to (and including) a DELIMITER from STREAM into *LINEPTR<br>
	 * (and null-terminate it). *LINEPTR is a pointer returned from malloc (or<br>
	 * NULL), pointing to *N characters of space.  It is realloc'd as<br>
	 * necessary.  Returns the number of characters read (not including the<br>
	 * null terminator), or -1 on error or EOF.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>__ssize_t __getdelim(char**, size_t*, int, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:339</i>
	 */
// 	NativeLong __getdelim(PointerByReference __lineptr, NativeSizeTByReference __n, int __delimiter, _IO_FILE __stream); // Commented out by makefile because NativeSizeTByReference is not in jna.
	/**
	 * Original signature : <code>__ssize_t getdelim(char**, size_t*, int, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:341</i>
	 */
// 	NativeLong getdelim(PointerByReference __lineptr, NativeSizeTByReference __n, int __delimiter, _IO_FILE __stream); // Commented out by makefile because NativeSizeTByReference is not in jna.
	/**
	 * Like `getdelim', but reads up to a newline.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>__ssize_t getline(char**, size_t*, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:350</i>
	 */
// 	NativeLong getline(PointerByReference __lineptr, NativeSizeTByReference __n, _IO_FILE __stream); // Commented out by makefile because NativeSizeTByReference is not in jna.
	/**
	 * Write a string to STREAM.<br>
	 * This function is a possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fputs(__const char*, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:357</i><br>
	 * @deprecated use the safer methods {@link #fputs(java.lang.String, org.terraswarm.gdp._IO_FILE)} and {@link #fputs(com.sun.jna.Pointer, org.terraswarm.gdp._IO_FILE)} instead
	 */
	@Deprecated 
	int fputs(Pointer __s, _IO_FILE __stream);
	/**
	 * Write a string to STREAM.<br>
	 * This function is a possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fputs(__const char*, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:357</i>
	 */
	int fputs(String __s, _IO_FILE __stream);
	/**
	 * Write a string, followed by a newline, to stdout.<br>
	 * This function is a possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int puts(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:364</i><br>
	 * @deprecated use the safer methods {@link #puts(java.lang.String)} and {@link #puts(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int puts(Pointer __s);
	/**
	 * Write a string, followed by a newline, to stdout.<br>
	 * This function is a possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int puts(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:364</i>
	 */
	int puts(String __s);
	/**
	 * Push a character back onto the input buffer of STREAM.<br>
	 * This function is a possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int ungetc(int, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:371</i>
	 */
	int ungetc(int __c, _IO_FILE __stream);
	/**
	 * Read chunks of generic data from STREAM.<br>
	 * This function is a possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>size_t fread(void*, size_t, size_t, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:378</i>
	 */
	NativeSizeT fread(Pointer __ptr, NativeSizeT __size, NativeSizeT __n, _IO_FILE __stream);
	/**
	 * Write chunks of generic data to STREAM.<br>
	 * This function is a possible cancellation points and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>size_t fwrite(__const void*, size_t, size_t, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:385</i>
	 */
	NativeSizeT fwrite(Pointer __ptr, NativeSizeT __size, NativeSizeT __n, _IO_FILE __s);
	/**
	 * Faster versions when locking is not necessary.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>size_t fread_unlocked(void*, size_t, size_t, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:394</i>
	 */
	NativeSizeT fread_unlocked(Pointer __ptr, NativeSizeT __size, NativeSizeT __n, _IO_FILE __stream);
	/**
	 * Original signature : <code>size_t fwrite_unlocked(__const void*, size_t, size_t, FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:396</i>
	 */
	NativeSizeT fwrite_unlocked(Pointer __ptr, NativeSizeT __size, NativeSizeT __n, _IO_FILE __stream);
	/**
	 * Seek to a certain position on STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fseek(FILE*, long, int)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:403</i>
	 */
	int fseek(_IO_FILE __stream, NativeLong __off, int __whence);
	/**
	 * Return the current position of STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>long ftell(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:410</i>
	 */
	NativeLong ftell(_IO_FILE __stream);
	/**
	 * Rewind to the beginning of STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void rewind(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:417</i>
	 */
	void rewind(_IO_FILE __stream);
	/**
	 * Seek to a certain position on STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fseeko(FILE*, __off_t, int)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:424</i>
	 */
	int fseeko(_IO_FILE __stream, NativeLong __off, int __whence);
	/**
	 * Return the current position of STREAM.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>__off_t ftello(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:431</i>
	 */
	NativeLong ftello(_IO_FILE __stream);
	/**
	 * Get STREAM's position.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fgetpos(FILE*, fpos_t*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:438</i>
	 */
	int fgetpos(_IO_FILE __stream, _G_fpos_t __pos);
	/**
	 * Set STREAM's position.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int fsetpos(FILE*, __const fpos_t*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:445</i>
	 */
	int fsetpos(_IO_FILE __stream, _G_fpos_t __pos);
	/**
	 * Clear the error and EOF indicators for STREAM.<br>
	 * Original signature : <code>void clearerr(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:450</i>
	 */
	void clearerr(_IO_FILE __stream);
	/**
	 * Return the EOF indicator for STREAM.<br>
	 * Original signature : <code>int feof(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:455</i>
	 */
	int feof(_IO_FILE __stream);
	/**
	 * Return the error indicator for STREAM.<br>
	 * Original signature : <code>int ferror(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:460</i>
	 */
	int ferror(_IO_FILE __stream);
	/**
	 * Faster versions when locking is not required.<br>
	 * Original signature : <code>void clearerr_unlocked(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:465</i>
	 */
	void clearerr_unlocked(_IO_FILE __stream);
	/**
	 * Original signature : <code>int feof_unlocked(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:467</i>
	 */
	int feof_unlocked(_IO_FILE __stream);
	/**
	 * Original signature : <code>int ferror_unlocked(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:469</i>
	 */
	int ferror_unlocked(_IO_FILE __stream);
	/**
	 * Print a message describing the meaning of the value of errno.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void perror(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:476</i><br>
	 * @deprecated use the safer methods {@link #perror(java.lang.String)} and {@link #perror(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void perror(Pointer __s);
	/**
	 * Print a message describing the meaning of the value of errno.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void perror(__const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:476</i>
	 */
	void perror(String __s);
	/**
	 * Return the system file descriptor for STREAM.<br>
	 * Original signature : <code>int fileno(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:4</i>
	 */
	int fileno(_IO_FILE __stream);
	/**
	 * Faster version when locking is not required.<br>
	 * Original signature : <code>int fileno_unlocked(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:9</i>
	 */
	int fileno_unlocked(_IO_FILE __stream);
	/**
	 * Create a new stream connected to a pipe running the given command.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* popen(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:16</i><br>
	 * @deprecated use the safer methods {@link #popen(java.lang.String, java.lang.String)} and {@link #popen(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE popen(Pointer __command, Pointer __modes);
	/**
	 * Create a new stream connected to a pipe running the given command.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>FILE* popen(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:16</i>
	 */
	_IO_FILE popen(String __command, String __modes);
	/**
	 * Close a stream opened by popen and return the status of its child.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int pclose(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:23</i>
	 */
	int pclose(_IO_FILE __stream);
	/**
	 * Acquire ownership of STREAM.<br>
	 * Original signature : <code>void flockfile(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:33</i>
	 */
	void flockfile(_IO_FILE __stream);
	/**
	 * Try to acquire ownership of STREAM but do not block if it is not<br>
	 * possible.<br>
	 * Original signature : <code>int ftrylockfile(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:39</i>
	 */
	int ftrylockfile(_IO_FILE __stream);
	/**
	 * Relinquish the ownership granted for STREAM.<br>
	 * Original signature : <code>void funlockfile(FILE*)</code><br>
	 * <i>native declaration : /usr/include/stdio.h:44</i>
	 */
	void funlockfile(_IO_FILE __stream);
	/**
	 * called if the assertion failed<br>
	 * Original signature : <code>void ep_assert_failure(const char*, const char*, const char*, int)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_assert.h:4</i><br>
	 * @deprecated use the safer methods {@link #ep_assert_failure(java.lang.String, java.lang.String, java.lang.String, int)} and {@link #ep_assert_failure(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void ep_assert_failure(Pointer expr, Pointer type, Pointer file, int line);
	/**
	 * called if the assertion failed<br>
	 * Original signature : <code>void ep_assert_failure(const char*, const char*, const char*, int)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_assert.h:4</i>
	 */
	void ep_assert_failure(String expr, String type, String file, int line);
	/**
	 * called if ep_assert_failure was rude enough to return<br>
	 * Original signature : <code>void ep_assert_abort(const char*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_assert.h:9</i><br>
	 * @deprecated use the safer methods {@link #ep_assert_abort(java.lang.String)} and {@link #ep_assert_abort(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ep_assert_abort(Pointer msg);
	/**
	 * called if ep_assert_failure was rude enough to return<br>
	 * Original signature : <code>void ep_assert_abort(const char*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_assert.h:9</i>
	 */
	void ep_assert_abort(String msg);
	/**
	 * functions<br>
	 * Original signature : <code>EP_STAT ep_stat_from_errno(int)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:4</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue ep_stat_from_errno(int uerrno);
	/**
	 * register stat code to string mappings<br>
	 * Original signature : <code>void ep_stat_reg_strings(ep_stat_to_string*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:14</i>
	 */
	void ep_stat_reg_strings(ep_stat_to_string ep_stat_to_stringPtr1);
	/**
	 * return string representation of status<br>
	 * Original signature : <code>char* ep_stat_tostr(EP_STAT, char*, size_t)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:19</i><br>
	 * @deprecated use the safer methods {@link #ep_stat_tostr(org.terraswarm.gdp.EP_STAT.ByValue, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #ep_stat_tostr(org.terraswarm.gdp.EP_STAT.ByValue, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	Pointer ep_stat_tostr(org.terraswarm.gdp.EP_STAT.ByValue estat, Pointer buf, NativeSizeT bsize);
	/**
	 * return string representation of status<br>
	 * Original signature : <code>char* ep_stat_tostr(EP_STAT, char*, size_t)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:19</i>
	 */
	Pointer ep_stat_tostr(org.terraswarm.gdp.EP_STAT.ByValue estat, ByteBuffer buf, NativeSizeT bsize);
	/**
	 * return string representation of severity (in natural language)<br>
	 * Original signature : <code>char* ep_stat_sev_tostr(int)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:24</i>
	 */
	String ep_stat_sev_tostr(int sev);
	/**
	 * register/deregister a status handler<br>
	 * Original signature : <code>EP_STAT_HANDLE* ep_stat_register(EP_STAT, EP_STAT, EP_STAT_HANDLER_FUNCP)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:29</i>
	 */
	PointerByReference ep_stat_register(org.terraswarm.gdp.EP_STAT.ByValue estat, org.terraswarm.gdp.EP_STAT.ByValue mask, Gdp10Library.EP_STAT_HANDLER_FUNCP f);
	/**
	 * Original signature : <code>EP_STAT ep_stat_unregister(EP_STAT_HANDLE*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:31</i><br>
	 * @deprecated use the safer method {@link #ep_stat_unregister(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue ep_stat_unregister(Pointer h);
	/**
	 * Original signature : <code>EP_STAT ep_stat_unregister(EP_STAT_HANDLE*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:31</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue ep_stat_unregister(PointerByReference h);
	/**
	 * post a status<br>
	 * Original signature : <code>EP_STAT ep_stat_post(EP_STAT, const char*, null)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:36</i><br>
	 * @deprecated use the safer methods {@link #ep_stat_post(org.terraswarm.gdp.EP_STAT.ByValue, java.lang.String, java.lang.Object)} and {@link #ep_stat_post(org.terraswarm.gdp.EP_STAT.ByValue, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue ep_stat_post(org.terraswarm.gdp.EP_STAT.ByValue c, Pointer defmsg, Object... varArgs1);
	/**
	 * post a status<br>
	 * Original signature : <code>EP_STAT ep_stat_post(EP_STAT, const char*, null)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:36</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue ep_stat_post(org.terraswarm.gdp.EP_STAT.ByValue c, String defmsg, Object... varArgs1);
	/**
	 * Original signature : <code>EP_STAT ep_stat_vpost(EP_STAT, const char*, va_list)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:38</i><br>
	 * @deprecated use the safer methods {@link #ep_stat_vpost(org.terraswarm.gdp.EP_STAT.ByValue, java.lang.String, java.lang.Object)} and {@link #ep_stat_vpost(org.terraswarm.gdp.EP_STAT.ByValue, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue ep_stat_vpost(org.terraswarm.gdp.EP_STAT.ByValue c, Pointer defmsg, Object... av);
	/**
	 * Original signature : <code>EP_STAT ep_stat_vpost(EP_STAT, const char*, va_list)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:38</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue ep_stat_vpost(org.terraswarm.gdp.EP_STAT.ByValue c, String defmsg, Object... av);
	/**
	 * print a status<br>
	 * Original signature : <code>void ep_stat_print(EP_STAT, const char*, FILE*, null)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:43</i><br>
	 * @deprecated use the safer methods {@link #ep_stat_print(org.terraswarm.gdp.EP_STAT.ByValue, java.lang.String, org.terraswarm.gdp._IO_FILE, java.lang.Object)} and {@link #ep_stat_print(org.terraswarm.gdp.EP_STAT.ByValue, com.sun.jna.Pointer, org.terraswarm.gdp._IO_FILE, java.lang.Object)} instead
	 */
	@Deprecated 
	void ep_stat_print(org.terraswarm.gdp.EP_STAT.ByValue c, Pointer defmsg, _IO_FILE fp, Object... varArgs1);
	/**
	 * print a status<br>
	 * Original signature : <code>void ep_stat_print(EP_STAT, const char*, FILE*, null)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:43</i>
	 */
	void ep_stat_print(org.terraswarm.gdp.EP_STAT.ByValue c, String defmsg, _IO_FILE fp, Object... varArgs1);
	/**
	 * Original signature : <code>void ep_stat_vprint(EP_STAT, const char*, FILE*, va_list)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:45</i><br>
	 * @deprecated use the safer methods {@link #ep_stat_vprint(org.terraswarm.gdp.EP_STAT.ByValue, java.lang.String, org.terraswarm.gdp._IO_FILE, java.lang.Object)} and {@link #ep_stat_vprint(org.terraswarm.gdp.EP_STAT.ByValue, com.sun.jna.Pointer, org.terraswarm.gdp._IO_FILE, java.lang.Object)} instead
	 */
	@Deprecated 
	void ep_stat_vprint(org.terraswarm.gdp.EP_STAT.ByValue c, Pointer defmsg, _IO_FILE fp, Object... av);
	/**
	 * Original signature : <code>void ep_stat_vprint(EP_STAT, const char*, FILE*, va_list)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:45</i>
	 */
	void ep_stat_vprint(org.terraswarm.gdp.EP_STAT.ByValue c, String defmsg, _IO_FILE fp, Object... av);
	/**
	 * print and abort (never returns)<br>
	 * Original signature : <code>void ep_stat_abort(EP_STAT)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_stat.h:50</i>
	 */
	void ep_stat_abort(org.terraswarm.gdp.EP_STAT.ByValue c);
	/**
	 * *  Initialization<br>
	 * Original signature : <code>EP_STAT ep_lib_init(uint32_t)</code><br>
	 * <i>native declaration : src/gdp/ep/ep.h:4</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue ep_lib_init(int flags);
	/**
	 * the versions from ep_mem.h give you a bit more<br>
	 * Original signature : <code>void* ep_mem_malloc(size_t)</code><br>
	 * <i>native declaration : src/gdp/ep/ep.h:9</i>
	 */
	Pointer ep_mem_malloc(NativeSizeT size_t1);
	/**
	 * Original signature : <code>void* ep_mem_zalloc(size_t)</code><br>
	 * <i>native declaration : src/gdp/ep/ep.h:11</i>
	 */
	Pointer ep_mem_zalloc(NativeSizeT size_t1);
	/**
	 * Original signature : <code>char* ep_mem_strdup(const char*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep.h:13</i><br>
	 * @deprecated use the safer methods {@link #ep_mem_strdup(java.lang.String)} and {@link #ep_mem_strdup(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer ep_mem_strdup(Pointer charPtr1);
	/**
	 * Original signature : <code>char* ep_mem_strdup(const char*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep.h:13</i>
	 */
	Pointer ep_mem_strdup(String charPtr1);
	/**
	 * Original signature : <code>void ep_mem_free(void*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep.h:15</i>
	 */
	void ep_mem_free(Pointer voidPtr1);
	/**
	 * ideally this would check valid pointers for this architecture<br>
	 * get integer param value<br>
	 * Original signature : <code>int ep_adm_getintparam(const char*, int)</code><br>
	 * @param name name of param<br>
	 * <i>native declaration : src/gdp/ep/ep.h:22</i><br>
	 * @deprecated use the safer methods {@link #ep_adm_getintparam(java.lang.String, int)} and {@link #ep_adm_getintparam(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ep_adm_getintparam(Pointer name, int def);
	/**
	 * ideally this would check valid pointers for this architecture<br>
	 * get integer param value<br>
	 * Original signature : <code>int ep_adm_getintparam(const char*, int)</code><br>
	 * @param name name of param<br>
	 * <i>native declaration : src/gdp/ep/ep.h:22</i>
	 */
	int ep_adm_getintparam(String name, int def);
	/**
	 * get long param value<br>
	 * Original signature : <code>long ep_adm_getlongparam(const char*, long)</code><br>
	 * @param name name of param<br>
	 * <i>native declaration : src/gdp/ep/ep.h:28</i><br>
	 * @deprecated use the safer methods {@link #ep_adm_getlongparam(java.lang.String, com.sun.jna.NativeLong)} and {@link #ep_adm_getlongparam(com.sun.jna.Pointer, com.sun.jna.NativeLong)} instead
	 */
	@Deprecated 
	NativeLong ep_adm_getlongparam(Pointer name, NativeLong def);
	/**
	 * get long param value<br>
	 * Original signature : <code>long ep_adm_getlongparam(const char*, long)</code><br>
	 * @param name name of param<br>
	 * <i>native declaration : src/gdp/ep/ep.h:28</i>
	 */
	NativeLong ep_adm_getlongparam(String name, NativeLong def);
	/**
	 * get boolean param value<br>
	 * Original signature : <code>bool ep_adm_getboolparam(const char*, bool)</code><br>
	 * @param name name of param<br>
	 * <i>native declaration : src/gdp/ep/ep.h:34</i><br>
	 * @deprecated use the safer methods {@link #ep_adm_getboolparam(java.lang.String, byte)} and {@link #ep_adm_getboolparam(com.sun.jna.Pointer, byte)} instead
	 */
	@Deprecated 
	byte ep_adm_getboolparam(Pointer name, byte def);
	/**
	 * get boolean param value<br>
	 * Original signature : <code>bool ep_adm_getboolparam(const char*, bool)</code><br>
	 * @param name name of param<br>
	 * <i>native declaration : src/gdp/ep/ep.h:34</i>
	 */
	byte ep_adm_getboolparam(String name, byte def);
	/**
	 * get string param value<br>
	 * Original signature : <code>char* ep_adm_getstrparam(const char*, const char*)</code><br>
	 * @param name name of param<br>
	 * <i>native declaration : src/gdp/ep/ep.h:40</i><br>
	 * @deprecated use the safer methods {@link #ep_adm_getstrparam(java.lang.String, java.lang.String)} and {@link #ep_adm_getstrparam(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer ep_adm_getstrparam(Pointer name, Pointer def);
	/**
	 * get string param value<br>
	 * Original signature : <code>char* ep_adm_getstrparam(const char*, const char*)</code><br>
	 * @param name name of param<br>
	 * <i>native declaration : src/gdp/ep/ep.h:40</i>
	 */
	Pointer ep_adm_getstrparam(String name, String def);
	/**
	 * open a static memory buffer<br>
	 * Original signature : <code>FILE* ep_fopensmem(void*, size_t, const char*)</code><br>
	 * @param buf buffer<br>
	 * @param bufsz size of buffer<br>
	 * <i>native declaration : src/gdp/ep/ep.h:47</i><br>
	 * @deprecated use the safer methods {@link #ep_fopensmem(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, java.lang.String)} and {@link #ep_fopensmem(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	_IO_FILE ep_fopensmem(Pointer buf, NativeSizeT bufsz, Pointer mode);
	/**
	 * open a static memory buffer<br>
	 * Original signature : <code>FILE* ep_fopensmem(void*, size_t, const char*)</code><br>
	 * @param buf buffer<br>
	 * @param bufsz size of buffer<br>
	 * <i>native declaration : src/gdp/ep/ep.h:47</i>
	 */
	_IO_FILE ep_fopensmem(Pointer buf, NativeSizeT bufsz, String mode);
	/**
	 * unlocked version of fread<br>
	 * Original signature : <code>size_t ep_fread_unlocked(void*, size_t, size_t, FILE*)</code><br>
	 * @param buf buffer area<br>
	 * @param sz size of one item<br>
	 * @param n number of items<br>
	 * <i>native declaration : src/gdp/ep/ep.h:55</i>
	 */
	NativeSizeT ep_fread_unlocked(Pointer buf, NativeSizeT sz, NativeSizeT n, _IO_FILE fp);
	/**
	 * unlocked version of fwrite<br>
	 * Original signature : <code>size_t ep_fwrite_unlocked(void*, size_t, size_t, FILE*)</code><br>
	 * @param buf buffer area<br>
	 * @param sz size of one item<br>
	 * @param n number of items<br>
	 * <i>native declaration : src/gdp/ep/ep.h:63</i>
	 */
	NativeSizeT ep_fwrite_unlocked(Pointer buf, NativeSizeT sz, NativeSizeT n, _IO_FILE fp);
	/**
	 * return current time<br>
	 * Original signature : <code>EP_STAT ep_time_now(EP_TIME_SPEC*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_time.h:12</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue ep_time_now(EP_TIME_SPEC tv);
	/**
	 * return putative clock accuracy<br>
	 * Original signature : <code>float ep_time_accuracy()</code><br>
	 * <i>native declaration : src/gdp/ep/ep_time.h:17</i>
	 */
	float ep_time_accuracy();
	/**
	 * set the clock accuracy (may not be available)<br>
	 * Original signature : <code>void ep_time_setaccuracy(float)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_time.h:22</i>
	 */
	void ep_time_setaccuracy(float acc);
	/**
	 * format a time string into a buffer<br>
	 * Original signature : <code>void ep_time_format(const EP_TIME_SPEC*, char*, size_t, bool)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_time.h:27</i><br>
	 * @deprecated use the safer methods {@link #ep_time_format(org.terraswarm.gdp.EP_TIME_SPEC, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, byte)} and {@link #ep_time_format(org.terraswarm.gdp.EP_TIME_SPEC, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, byte)} instead
	 */
	@Deprecated 
	void ep_time_format(EP_TIME_SPEC tv, Pointer buf, NativeSizeT bz, byte human);
	/**
	 * format a time string into a buffer<br>
	 * Original signature : <code>void ep_time_format(const EP_TIME_SPEC*, char*, size_t, bool)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_time.h:27</i>
	 */
	void ep_time_format(EP_TIME_SPEC tv, ByteBuffer buf, NativeSizeT bz, byte human);
	/**
	 * format a time string to a file<br>
	 * Original signature : <code>void ep_time_print(const EP_TIME_SPEC*, FILE*, bool)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_time.h:32</i>
	 */
	void ep_time_print(EP_TIME_SPEC tv, _IO_FILE fp, byte human);
	/**
	 * parse a time string<br>
	 * Original signature : <code>EP_STAT ep_time_parse(const char*, EP_TIME_SPEC*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_time.h:37</i><br>
	 * @deprecated use the safer methods {@link #ep_time_parse(java.lang.String, org.terraswarm.gdp.EP_TIME_SPEC)} and {@link #ep_time_parse(com.sun.jna.Pointer, org.terraswarm.gdp.EP_TIME_SPEC)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue ep_time_parse(Pointer timestr, EP_TIME_SPEC tv);
	/**
	 * parse a time string<br>
	 * Original signature : <code>EP_STAT ep_time_parse(const char*, EP_TIME_SPEC*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_time.h:37</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue ep_time_parse(String timestr, EP_TIME_SPEC tv);
	/**
	 * sleep for the indicated number of nanoseconds<br>
	 * Original signature : <code>EP_STAT ep_time_nanosleep(int64_t)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_time.h:42</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue ep_time_nanosleep(long int64_t1);
	/**
	 * Compute absolute value of N.<br>
	 * Original signature : <code>intmax_t imaxabs(intmax_t)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:10</i>
	 */
	NativeLong imaxabs(NativeLong __n);
	/**
	 * Return the `imaxdiv_t' representation of the value of NUMER over DENOM.<br>
	 * Original signature : <code>imaxdiv_t imaxdiv(intmax_t, intmax_t)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:15</i>
	 */
	org.terraswarm.gdp.imaxdiv_t.ByValue imaxdiv(NativeLong __numer, NativeLong __denom);
	/**
	 * Like `strtol' but convert to `intmax_t'.<br>
	 * Original signature : <code>intmax_t strtoimax(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:20</i><br>
	 * @deprecated use the safer methods {@link #strtoimax(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoimax(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtoimax(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Like `strtol' but convert to `intmax_t'.<br>
	 * Original signature : <code>intmax_t strtoimax(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:20</i>
	 */
	NativeLong strtoimax(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Like `strtoul' but convert to `uintmax_t'.<br>
	 * Original signature : <code>uintmax_t strtoumax(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:25</i><br>
	 * @deprecated use the safer methods {@link #strtoumax(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoumax(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	NativeLong strtoumax(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Like `strtoul' but convert to `uintmax_t'.<br>
	 * Original signature : <code>uintmax_t strtoumax(__const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:25</i>
	 */
	NativeLong strtoumax(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Like `wcstol' but convert to `intmax_t'.<br>
	 * Original signature : <code>intmax_t wcstoimax(__const wchar_t*, wchar_t**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:30</i><br>
// 	 * @deprecated use the safer methods {@link #wcstoimax(com.sun.jna.WString, com.sun.jna.ptr.PointerByReference, int)} and {@link #wcstoimax(com.ochafik.lang.jnaerator.runtime.CharByReference, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
// 	NativeLong wcstoimax(CharByReference __nptr, PointerByReference __endptr, int __base);
	/**
	 * Like `wcstol' but convert to `intmax_t'.<br>
	 * Original signature : <code>intmax_t wcstoimax(__const wchar_t*, wchar_t**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:30</i>
	 */
	NativeLong wcstoimax(WString __nptr, PointerByReference __endptr, int __base);
	/**
	 * Like `wcstoul' but convert to `uintmax_t'.<br>
	 * Original signature : <code>uintmax_t wcstoumax(__const wchar_t*, wchar_t**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:35</i><br>
// 	 * @deprecated use the safer methods {@link #wcstoumax(com.sun.jna.WString, com.sun.jna.ptr.PointerByReference, int)} and {@link #wcstoumax(com.ochafik.lang.jnaerator.runtime.CharByReference, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
// 	NativeLong wcstoumax(CharByReference __nptr, PointerByReference __endptr, int __base);
	/**
	 * Like `wcstoul' but convert to `uintmax_t'.<br>
	 * Original signature : <code>uintmax_t wcstoumax(__const wchar_t*, wchar_t**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:35</i>
	 */
	NativeLong wcstoumax(WString __nptr, PointerByReference __endptr, int __base);
	/**
	 * Ancillary data object manipulation macros.<br>
	 * Original signature : <code>cmsghdr* __cmsg_nxthdr(msghdr*, cmsghdr*)</code><br>
	 * <i>native declaration : /usr/include/bits/socket.h:67</i>
	 */
	cmsghdr __cmsg_nxthdr(msghdr __mhdr, cmsghdr __cmsg);
	/**
	 * Receive a message as described by MESSAGE from socket FD.<br>
	 * Returns the number of bytes read or -1 for errors.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int recvmmsg(int, mmsghdr*, unsigned int, int, timespec*)</code><br>
	 * <i>native declaration : /usr/include/bits/socket.h:13</i>
	 */
	int recvmmsg(int __fd, Gdp10Library.mmsghdr __vmessages, int __vlen, int __flags, Gdp10Library.timespec __tmo);
	/**
	 * Function to get address of global `h_errno' variable.<br>
	 * Original signature : <code>int* __h_errno_location()</code><br>
	 * <i>native declaration : /usr/include/netdb.h:5</i>
	 */
	IntByReference __h_errno_location();
	/**
	 * Print error indicated by `h_errno' variable on standard error.  STR<br>
	 * if non-null is printed before the error string.<br>
	 * Original signature : <code>void herror(__const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:11</i><br>
	 * @deprecated use the safer methods {@link #herror(java.lang.String)} and {@link #herror(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void herror(Pointer __str);
	/**
	 * Print error indicated by `h_errno' variable on standard error.  STR<br>
	 * if non-null is printed before the error string.<br>
	 * Original signature : <code>void herror(__const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:11</i>
	 */
	void herror(String __str);
	/**
	 * Return string associated with error ERR_NUM.<br>
	 * Original signature : <code>char* hstrerror(int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:16</i>
	 */
	Pointer hstrerror(int __err_num);
	/**
	 * Open host data base files and mark them as staying open even after<br>
	 * a later search if STAY_OPEN is non-zero.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void sethostent(int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:32</i>
	 */
	void sethostent(int __stay_open);
	/**
	 * Close host data base files and clear `stay open' flag.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void endhostent()</code><br>
	 * <i>native declaration : /usr/include/netdb.h:39</i>
	 */
	void endhostent();
	/**
	 * Get next entry from host data base file.  Open data base if<br>
	 * necessary.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>hostent* gethostent()</code><br>
	 * <i>native declaration : /usr/include/netdb.h:47</i>
	 */
	hostent gethostent();
	/**
	 * Return entry from host data base which address match ADDR with<br>
	 * length LEN and type TYPE.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>hostent* gethostbyaddr(__const void*, __socklen_t, int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:55</i>
	 */
	hostent gethostbyaddr(Pointer __addr, int __len, int __type);
	/**
	 * Return entry from host data base for host with NAME.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>hostent* gethostbyname(__const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:62</i><br>
	 * @deprecated use the safer methods {@link #gethostbyname(java.lang.String)} and {@link #gethostbyname(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	hostent gethostbyname(Pointer __name);
	/**
	 * Return entry from host data base for host with NAME.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>hostent* gethostbyname(__const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:62</i>
	 */
	hostent gethostbyname(String __name);
	/**
	 * Return entry from host data base for host with NAME.  AF must be<br>
	 * set to the address type which is `AF_INET' for IPv4 or `AF_INET6'<br>
	 * for IPv6.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>hostent* gethostbyname2(__const char*, int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:73</i><br>
	 * @deprecated use the safer methods {@link #gethostbyname2(java.lang.String, int)} and {@link #gethostbyname2(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	hostent gethostbyname2(Pointer __name, int __af);
	/**
	 * Return entry from host data base for host with NAME.  AF must be<br>
	 * set to the address type which is `AF_INET' for IPv4 or `AF_INET6'<br>
	 * for IPv6.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>hostent* gethostbyname2(__const char*, int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:73</i>
	 */
	hostent gethostbyname2(String __name, int __af);
	/**
	 * Reentrant versions of the functions above.  The additional<br>
	 * arguments specify a buffer of BUFLEN starting at BUF.  The last<br>
	 * argument is a pointer to a variable which gets the value which<br>
	 * would be stored in the global variable `herrno' by the<br>
	 * non-reentrant functions.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int gethostent_r(hostent*, char*, size_t, hostent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:86</i><br>
	 * @deprecated use the safer methods {@link #gethostent_r(org.terraswarm.gdp.hostent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.hostent.ByReference[], java.nio.IntBuffer)} and {@link #gethostent_r(org.terraswarm.gdp.hostent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.hostent.ByReference[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int gethostent_r(hostent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result, IntByReference __h_errnop);
	/**
	 * Reentrant versions of the functions above.  The additional<br>
	 * arguments specify a buffer of BUFLEN starting at BUF.  The last<br>
	 * argument is a pointer to a variable which gets the value which<br>
	 * would be stored in the global variable `herrno' by the<br>
	 * non-reentrant functions.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int gethostent_r(hostent*, char*, size_t, hostent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:86</i>
	 */
	int gethostent_r(hostent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, hostent.ByReference __result[], IntBuffer __h_errnop);
	/**
	 * Reentrant versions of the functions above.  The additional<br>
	 * arguments specify a buffer of BUFLEN starting at BUF.  The last<br>
	 * argument is a pointer to a variable which gets the value which<br>
	 * would be stored in the global variable `herrno' by the<br>
	 * non-reentrant functions.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int gethostent_r(hostent*, char*, size_t, hostent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:86</i>
	 */
	int gethostent_r(hostent __result_buf, Pointer __buf, NativeSizeT __buflen, hostent.ByReference __result[], IntByReference __h_errnop);
	/**
	 * Original signature : <code>int gethostbyaddr_r(__const void*, __socklen_t, int, hostent*, char*, size_t, hostent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:88</i><br>
	 * @deprecated use the safer methods {@link #gethostbyaddr_r(com.sun.jna.Pointer, int, int, org.terraswarm.gdp.hostent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.hostent.ByReference[], java.nio.IntBuffer)} and {@link #gethostbyaddr_r(com.sun.jna.Pointer, int, int, org.terraswarm.gdp.hostent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.hostent.ByReference[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int gethostbyaddr_r(Pointer __addr, int __len, int __type, hostent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result, IntByReference __h_errnop);
	/**
	 * Original signature : <code>int gethostbyaddr_r(__const void*, __socklen_t, int, hostent*, char*, size_t, hostent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:88</i>
	 */
	int gethostbyaddr_r(Pointer __addr, int __len, int __type, hostent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, hostent.ByReference __result[], IntBuffer __h_errnop);
	/**
	 * Original signature : <code>int gethostbyaddr_r(__const void*, __socklen_t, int, hostent*, char*, size_t, hostent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:88</i>
	 */
	int gethostbyaddr_r(Pointer __addr, int __len, int __type, hostent __result_buf, Pointer __buf, NativeSizeT __buflen, hostent.ByReference __result[], IntByReference __h_errnop);
	/**
	 * Original signature : <code>int gethostbyname_r(__const char*, hostent*, char*, size_t, hostent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:90</i><br>
	 * @deprecated use the safer methods {@link #gethostbyname_r(java.lang.String, org.terraswarm.gdp.hostent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.hostent.ByReference[], java.nio.IntBuffer)} and {@link #gethostbyname_r(com.sun.jna.Pointer, org.terraswarm.gdp.hostent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.hostent.ByReference[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int gethostbyname_r(Pointer __name, hostent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result, IntByReference __h_errnop);
	/**
	 * Original signature : <code>int gethostbyname_r(__const char*, hostent*, char*, size_t, hostent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:90</i>
	 */
	int gethostbyname_r(String __name, hostent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, hostent.ByReference __result[], IntBuffer __h_errnop);
	/**
	 * Original signature : <code>int gethostbyname_r(__const char*, hostent*, char*, size_t, hostent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:90</i>
	 */
	int gethostbyname_r(Pointer __name, hostent __result_buf, Pointer __buf, NativeSizeT __buflen, hostent.ByReference __result[], IntByReference __h_errnop);
	/**
	 * Original signature : <code>int gethostbyname2_r(__const char*, int, hostent*, char*, size_t, hostent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:92</i><br>
	 * @deprecated use the safer methods {@link #gethostbyname2_r(java.lang.String, int, org.terraswarm.gdp.hostent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.hostent.ByReference[], java.nio.IntBuffer)} and {@link #gethostbyname2_r(com.sun.jna.Pointer, int, org.terraswarm.gdp.hostent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.hostent.ByReference[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int gethostbyname2_r(Pointer __name, int __af, hostent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result, IntByReference __h_errnop);
	/**
	 * Original signature : <code>int gethostbyname2_r(__const char*, int, hostent*, char*, size_t, hostent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:92</i>
	 */
	int gethostbyname2_r(String __name, int __af, hostent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, hostent.ByReference __result[], IntBuffer __h_errnop);
	/**
	 * Original signature : <code>int gethostbyname2_r(__const char*, int, hostent*, char*, size_t, hostent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:92</i>
	 */
	int gethostbyname2_r(Pointer __name, int __af, hostent __result_buf, Pointer __buf, NativeSizeT __buflen, hostent.ByReference __result[], IntByReference __h_errnop);
	/**
	 * Open network data base files and mark them as staying open even<br>
	 * after a later search if STAY_OPEN is non-zero.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void setnetent(int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:100</i>
	 */
	void setnetent(int __stay_open);
	/**
	 * Close network data base files and clear `stay open' flag.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void endnetent()</code><br>
	 * <i>native declaration : /usr/include/netdb.h:107</i>
	 */
	void endnetent();
	/**
	 * Get next entry from network data base file.  Open data base if<br>
	 * necessary.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>netent* getnetent()</code><br>
	 * <i>native declaration : /usr/include/netdb.h:115</i>
	 */
	netent getnetent();
	/**
	 * Return entry from network data base which address match NET and<br>
	 * type TYPE.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>netent* getnetbyaddr(uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:123</i>
	 */
	netent getnetbyaddr(int __net, int __type);
	/**
	 * Return entry from network data base for network with NAME.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>netent* getnetbyname(__const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:130</i><br>
	 * @deprecated use the safer methods {@link #getnetbyname(java.lang.String)} and {@link #getnetbyname(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	netent getnetbyname(Pointer __name);
	/**
	 * Return entry from network data base for network with NAME.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>netent* getnetbyname(__const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:130</i>
	 */
	netent getnetbyname(String __name);
	/**
	 * Reentrant versions of the functions above.  The additional<br>
	 * arguments specify a buffer of BUFLEN starting at BUF.  The last<br>
	 * argument is a pointer to a variable which gets the value which<br>
	 * would be stored in the global variable `herrno' by the<br>
	 * non-reentrant functions.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int getnetent_r(netent*, char*, size_t, netent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:143</i><br>
	 * @deprecated use the safer methods {@link #getnetent_r(org.terraswarm.gdp.netent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.netent.ByReference[], java.nio.IntBuffer)} and {@link #getnetent_r(org.terraswarm.gdp.netent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.netent.ByReference[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getnetent_r(netent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result, IntByReference __h_errnop);
	/**
	 * Reentrant versions of the functions above.  The additional<br>
	 * arguments specify a buffer of BUFLEN starting at BUF.  The last<br>
	 * argument is a pointer to a variable which gets the value which<br>
	 * would be stored in the global variable `herrno' by the<br>
	 * non-reentrant functions.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int getnetent_r(netent*, char*, size_t, netent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:143</i>
	 */
	int getnetent_r(netent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, netent.ByReference __result[], IntBuffer __h_errnop);
	/**
	 * Reentrant versions of the functions above.  The additional<br>
	 * arguments specify a buffer of BUFLEN starting at BUF.  The last<br>
	 * argument is a pointer to a variable which gets the value which<br>
	 * would be stored in the global variable `herrno' by the<br>
	 * non-reentrant functions.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int getnetent_r(netent*, char*, size_t, netent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:143</i>
	 */
	int getnetent_r(netent __result_buf, Pointer __buf, NativeSizeT __buflen, netent.ByReference __result[], IntByReference __h_errnop);
	/**
	 * Original signature : <code>int getnetbyaddr_r(uint32_t, int, netent*, char*, size_t, netent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:145</i><br>
	 * @deprecated use the safer methods {@link #getnetbyaddr_r(int, int, org.terraswarm.gdp.netent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.netent.ByReference[], java.nio.IntBuffer)} and {@link #getnetbyaddr_r(int, int, org.terraswarm.gdp.netent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.netent.ByReference[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getnetbyaddr_r(int __net, int __type, netent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result, IntByReference __h_errnop);
	/**
	 * Original signature : <code>int getnetbyaddr_r(uint32_t, int, netent*, char*, size_t, netent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:145</i>
	 */
	int getnetbyaddr_r(int __net, int __type, netent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, netent.ByReference __result[], IntBuffer __h_errnop);
	/**
	 * Original signature : <code>int getnetbyaddr_r(uint32_t, int, netent*, char*, size_t, netent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:145</i>
	 */
	int getnetbyaddr_r(int __net, int __type, netent __result_buf, Pointer __buf, NativeSizeT __buflen, netent.ByReference __result[], IntByReference __h_errnop);
	/**
	 * Original signature : <code>int getnetbyname_r(__const char*, netent*, char*, size_t, netent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:147</i><br>
	 * @deprecated use the safer methods {@link #getnetbyname_r(java.lang.String, org.terraswarm.gdp.netent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.netent.ByReference[], java.nio.IntBuffer)} and {@link #getnetbyname_r(com.sun.jna.Pointer, org.terraswarm.gdp.netent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.netent.ByReference[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int getnetbyname_r(Pointer __name, netent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result, IntByReference __h_errnop);
	/**
	 * Original signature : <code>int getnetbyname_r(__const char*, netent*, char*, size_t, netent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:147</i>
	 */
	int getnetbyname_r(String __name, netent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, netent.ByReference __result[], IntBuffer __h_errnop);
	/**
	 * Original signature : <code>int getnetbyname_r(__const char*, netent*, char*, size_t, netent**, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:147</i>
	 */
	int getnetbyname_r(Pointer __name, netent __result_buf, Pointer __buf, NativeSizeT __buflen, netent.ByReference __result[], IntByReference __h_errnop);
	/**
	 * Open service data base files and mark them as staying open even<br>
	 * after a later search if STAY_OPEN is non-zero.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void setservent(int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:162</i>
	 */
	void setservent(int __stay_open);
	/**
	 * Close service data base files and clear `stay open' flag.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void endservent()</code><br>
	 * <i>native declaration : /usr/include/netdb.h:169</i>
	 */
	void endservent();
	/**
	 * Get next entry from service data base file.  Open data base if<br>
	 * necessary.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>servent* getservent()</code><br>
	 * <i>native declaration : /usr/include/netdb.h:177</i>
	 */
	servent getservent();
	/**
	 * Return entry from network data base for network with NAME and<br>
	 * protocol PROTO.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>servent* getservbyname(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:185</i><br>
	 * @deprecated use the safer methods {@link #getservbyname(java.lang.String, java.lang.String)} and {@link #getservbyname(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	servent getservbyname(Pointer __name, Pointer __proto);
	/**
	 * Return entry from network data base for network with NAME and<br>
	 * protocol PROTO.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>servent* getservbyname(__const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:185</i>
	 */
	servent getservbyname(String __name, String __proto);
	/**
	 * Return entry from service data base which matches port PORT and<br>
	 * protocol PROTO.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>servent* getservbyport(int, __const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:193</i><br>
	 * @deprecated use the safer methods {@link #getservbyport(int, java.lang.String)} and {@link #getservbyport(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	servent getservbyport(int __port, Pointer __proto);
	/**
	 * Return entry from service data base which matches port PORT and<br>
	 * protocol PROTO.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>servent* getservbyport(int, __const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:193</i>
	 */
	servent getservbyport(int __port, String __proto);
	/**
	 * Reentrant versions of the functions above.  The additional<br>
	 * arguments specify a buffer of BUFLEN starting at BUF.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int getservent_r(servent*, char*, size_t, servent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:203</i><br>
	 * @deprecated use the safer methods {@link #getservent_r(org.terraswarm.gdp.servent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.servent.ByReference[])} and {@link #getservent_r(org.terraswarm.gdp.servent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.servent.ByReference[])} instead
	 */
	@Deprecated 
	int getservent_r(servent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result);
	/**
	 * Reentrant versions of the functions above.  The additional<br>
	 * arguments specify a buffer of BUFLEN starting at BUF.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int getservent_r(servent*, char*, size_t, servent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:203</i>
	 */
	int getservent_r(servent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, servent.ByReference __result[]);
	/**
	 * Reentrant versions of the functions above.  The additional<br>
	 * arguments specify a buffer of BUFLEN starting at BUF.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int getservent_r(servent*, char*, size_t, servent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:203</i>
	 */
	int getservent_r(servent __result_buf, Pointer __buf, NativeSizeT __buflen, servent.ByReference __result[]);
	/**
	 * Original signature : <code>int getservbyname_r(__const char*, __const char*, servent*, char*, size_t, servent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:205</i><br>
	 * @deprecated use the safer methods {@link #getservbyname_r(java.lang.String, java.lang.String, org.terraswarm.gdp.servent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.servent.ByReference[])} and {@link #getservbyname_r(com.sun.jna.Pointer, com.sun.jna.Pointer, org.terraswarm.gdp.servent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.servent.ByReference[])} instead
	 */
	@Deprecated 
	int getservbyname_r(Pointer __name, Pointer __proto, servent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result);
	/**
	 * Original signature : <code>int getservbyname_r(__const char*, __const char*, servent*, char*, size_t, servent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:205</i>
	 */
	int getservbyname_r(String __name, String __proto, servent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, servent.ByReference __result[]);
	/**
	 * Original signature : <code>int getservbyname_r(__const char*, __const char*, servent*, char*, size_t, servent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:205</i>
	 */
	int getservbyname_r(Pointer __name, Pointer __proto, servent __result_buf, Pointer __buf, NativeSizeT __buflen, servent.ByReference __result[]);
	/**
	 * Original signature : <code>int getservbyport_r(int, __const char*, servent*, char*, size_t, servent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:207</i><br>
	 * @deprecated use the safer methods {@link #getservbyport_r(int, java.lang.String, org.terraswarm.gdp.servent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.servent.ByReference[])} and {@link #getservbyport_r(int, com.sun.jna.Pointer, org.terraswarm.gdp.servent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.servent.ByReference[])} instead
	 */
	@Deprecated 
	int getservbyport_r(int __port, Pointer __proto, servent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result);
	/**
	 * Original signature : <code>int getservbyport_r(int, __const char*, servent*, char*, size_t, servent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:207</i>
	 */
	int getservbyport_r(int __port, String __proto, servent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, servent.ByReference __result[]);
	/**
	 * Original signature : <code>int getservbyport_r(int, __const char*, servent*, char*, size_t, servent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:207</i>
	 */
	int getservbyport_r(int __port, Pointer __proto, servent __result_buf, Pointer __buf, NativeSizeT __buflen, servent.ByReference __result[]);
	/**
	 * Open protocol data base files and mark them as staying open even<br>
	 * after a later search if STAY_OPEN is non-zero.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void setprotoent(int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:221</i>
	 */
	void setprotoent(int __stay_open);
	/**
	 * Close protocol data base files and clear `stay open' flag.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>void endprotoent()</code><br>
	 * <i>native declaration : /usr/include/netdb.h:228</i>
	 */
	void endprotoent();
	/**
	 * Get next entry from protocol data base file.  Open data base if<br>
	 * necessary.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>protoent* getprotoent()</code><br>
	 * <i>native declaration : /usr/include/netdb.h:236</i>
	 */
	protoent getprotoent();
	/**
	 * Return entry from protocol data base for network with NAME.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>protoent* getprotobyname(__const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:243</i><br>
	 * @deprecated use the safer methods {@link #getprotobyname(java.lang.String)} and {@link #getprotobyname(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	protoent getprotobyname(Pointer __name);
	/**
	 * Return entry from protocol data base for network with NAME.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>protoent* getprotobyname(__const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:243</i>
	 */
	protoent getprotobyname(String __name);
	/**
	 * Return entry from protocol data base which number is PROTO.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>protoent* getprotobynumber(int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:250</i>
	 */
	protoent getprotobynumber(int __proto);
	/**
	 * Reentrant versions of the functions above.  The additional<br>
	 * arguments specify a buffer of BUFLEN starting at BUF.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int getprotoent_r(protoent*, char*, size_t, protoent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:260</i><br>
	 * @deprecated use the safer methods {@link #getprotoent_r(org.terraswarm.gdp.protoent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.protoent.ByReference[])} and {@link #getprotoent_r(org.terraswarm.gdp.protoent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.protoent.ByReference[])} instead
	 */
	@Deprecated 
	int getprotoent_r(protoent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result);
	/**
	 * Reentrant versions of the functions above.  The additional<br>
	 * arguments specify a buffer of BUFLEN starting at BUF.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int getprotoent_r(protoent*, char*, size_t, protoent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:260</i>
	 */
	int getprotoent_r(protoent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, protoent.ByReference __result[]);
	/**
	 * Reentrant versions of the functions above.  The additional<br>
	 * arguments specify a buffer of BUFLEN starting at BUF.<br>
	 * These functions are not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation they are cancellation points and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int getprotoent_r(protoent*, char*, size_t, protoent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:260</i>
	 */
	int getprotoent_r(protoent __result_buf, Pointer __buf, NativeSizeT __buflen, protoent.ByReference __result[]);
	/**
	 * Original signature : <code>int getprotobyname_r(__const char*, protoent*, char*, size_t, protoent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:262</i><br>
	 * @deprecated use the safer methods {@link #getprotobyname_r(java.lang.String, org.terraswarm.gdp.protoent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.protoent.ByReference[])} and {@link #getprotobyname_r(com.sun.jna.Pointer, org.terraswarm.gdp.protoent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.protoent.ByReference[])} instead
	 */
	@Deprecated 
	int getprotobyname_r(Pointer __name, protoent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result);
	/**
	 * Original signature : <code>int getprotobyname_r(__const char*, protoent*, char*, size_t, protoent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:262</i>
	 */
	int getprotobyname_r(String __name, protoent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, protoent.ByReference __result[]);
	/**
	 * Original signature : <code>int getprotobyname_r(__const char*, protoent*, char*, size_t, protoent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:262</i>
	 */
	int getprotobyname_r(Pointer __name, protoent __result_buf, Pointer __buf, NativeSizeT __buflen, protoent.ByReference __result[]);
	/**
	 * Original signature : <code>int getprotobynumber_r(int, protoent*, char*, size_t, protoent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:264</i><br>
	 * @deprecated use the safer methods {@link #getprotobynumber_r(int, org.terraswarm.gdp.protoent, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.protoent.ByReference[])} and {@link #getprotobynumber_r(int, org.terraswarm.gdp.protoent, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT, org.terraswarm.gdp.protoent.ByReference[])} instead
	 */
	@Deprecated 
	int getprotobynumber_r(int __proto, protoent __result_buf, Pointer __buf, NativeSizeT __buflen, PointerByReference __result);
	/**
	 * Original signature : <code>int getprotobynumber_r(int, protoent*, char*, size_t, protoent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:264</i>
	 */
	int getprotobynumber_r(int __proto, protoent __result_buf, ByteBuffer __buf, NativeSizeT __buflen, protoent.ByReference __result[]);
	/**
	 * Original signature : <code>int getprotobynumber_r(int, protoent*, char*, size_t, protoent**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:264</i>
	 */
	int getprotobynumber_r(int __proto, protoent __result_buf, Pointer __buf, NativeSizeT __buflen, protoent.ByReference __result[]);
	/**
	 * Establish network group NETGROUP for enumeration.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int setnetgrent(__const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:273</i><br>
	 * @deprecated use the safer methods {@link #setnetgrent(java.lang.String)} and {@link #setnetgrent(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int setnetgrent(Pointer __netgroup);
	/**
	 * Establish network group NETGROUP for enumeration.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int setnetgrent(__const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:273</i>
	 */
	int setnetgrent(String __netgroup);
	/**
	 * Free all space allocated by previous `setnetgrent' call.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>void endnetgrent()</code><br>
	 * <i>native declaration : /usr/include/netdb.h:282</i>
	 */
	void endnetgrent();
	/**
	 * Get next member of netgroup established by last `setnetgrent' call<br>
	 * and return pointers to elements in HOSTP, USERP, and DOMAINP.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int getnetgrent(char**, char**, char**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:292</i>
	 */
	int getnetgrent(PointerByReference __hostp, PointerByReference __userp, PointerByReference __domainp);
	/**
	 * Test whether NETGROUP contains the triple (HOST,USER,DOMAIN).<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int innetgr(__const char*, __const char*, __const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:301</i><br>
	 * @deprecated use the safer methods {@link #innetgr(java.lang.String, java.lang.String, java.lang.String, java.lang.String)} and {@link #innetgr(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int innetgr(Pointer __netgroup, Pointer __host, Pointer __user, Pointer __domain);
	/**
	 * Test whether NETGROUP contains the triple (HOST,USER,DOMAIN).<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int innetgr(__const char*, __const char*, __const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:301</i>
	 */
	int innetgr(String __netgroup, String __host, String __user, String __domain);
	/**
	 * Reentrant version of `getnetgrent' where result is placed in BUFFER.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int getnetgrent_r(char**, char**, char**, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:310</i><br>
	 * @deprecated use the safer methods {@link #getnetgrent_r(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} and {@link #getnetgrent_r(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int getnetgrent_r(PointerByReference __hostp, PointerByReference __userp, PointerByReference __domainp, Pointer __buffer, NativeSizeT __buflen);
	/**
	 * Reentrant version of `getnetgrent' where result is placed in BUFFER.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int getnetgrent_r(char**, char**, char**, char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:310</i>
	 */
	int getnetgrent_r(PointerByReference __hostp, PointerByReference __userp, PointerByReference __domainp, ByteBuffer __buffer, NativeSizeT __buflen);
	/**
	 * Call `rshd' at port RPORT on remote machine *AHOST to execute CMD.<br>
	 * The local user is LOCUSER, on the remote machine the command is<br>
	 * executed as REMUSER.  In *FD2P the descriptor to the socket for the<br>
	 * connection is returned.  The caller must have the right to use a<br>
	 * reserved port.  When the function returns *AHOST contains the<br>
	 * official host name.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int rcmd(char**, unsigned short, __const char*, __const char*, __const char*, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:324</i><br>
	 * @deprecated use the safer methods {@link #rcmd(com.sun.jna.ptr.PointerByReference, short, java.lang.String, java.lang.String, java.lang.String, java.nio.IntBuffer)} and {@link #rcmd(com.sun.jna.ptr.PointerByReference, short, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int rcmd(PointerByReference __ahost, short __rport, Pointer __locuser, Pointer __remuser, Pointer __cmd, IntByReference __fd2p);
	/**
	 * Call `rshd' at port RPORT on remote machine *AHOST to execute CMD.<br>
	 * The local user is LOCUSER, on the remote machine the command is<br>
	 * executed as REMUSER.  In *FD2P the descriptor to the socket for the<br>
	 * connection is returned.  The caller must have the right to use a<br>
	 * reserved port.  When the function returns *AHOST contains the<br>
	 * official host name.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int rcmd(char**, unsigned short, __const char*, __const char*, __const char*, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:324</i>
	 */
	int rcmd(PointerByReference __ahost, short __rport, String __locuser, String __remuser, String __cmd, IntBuffer __fd2p);
	/**
	 * This is the equivalent function where the protocol can be selected<br>
	 * and which therefore can be used for IPv6.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int rcmd_af(char**, unsigned short, __const char*, __const char*, __const char*, int*, sa_family_t)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:334</i><br>
	 * @deprecated use the safer methods {@link #rcmd_af(com.sun.jna.ptr.PointerByReference, short, java.lang.String, java.lang.String, java.lang.String, java.nio.IntBuffer, short)} and {@link #rcmd_af(com.sun.jna.ptr.PointerByReference, short, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, short)} instead
	 */
	@Deprecated 
	int rcmd_af(PointerByReference __ahost, short __rport, Pointer __locuser, Pointer __remuser, Pointer __cmd, IntByReference __fd2p, short __af);
	/**
	 * This is the equivalent function where the protocol can be selected<br>
	 * and which therefore can be used for IPv6.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int rcmd_af(char**, unsigned short, __const char*, __const char*, __const char*, int*, sa_family_t)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:334</i>
	 */
	int rcmd_af(PointerByReference __ahost, short __rport, String __locuser, String __remuser, String __cmd, IntBuffer __fd2p, short __af);
	/**
	 * Call `rexecd' at port RPORT on remote machine *AHOST to execute<br>
	 * CMD.  The process runs at the remote machine using the ID of user<br>
	 * NAME whose cleartext password is PASSWD.  In *FD2P the descriptor<br>
	 * to the socket for the connection is returned.  When the function<br>
	 * returns *AHOST contains the official host name.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int rexec(char**, int, __const char*, __const char*, __const char*, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:347</i><br>
	 * @deprecated use the safer methods {@link #rexec(com.sun.jna.ptr.PointerByReference, int, java.lang.String, java.lang.String, java.lang.String, java.nio.IntBuffer)} and {@link #rexec(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int rexec(PointerByReference __ahost, int __rport, Pointer __name, Pointer __pass, Pointer __cmd, IntByReference __fd2p);
	/**
	 * Call `rexecd' at port RPORT on remote machine *AHOST to execute<br>
	 * CMD.  The process runs at the remote machine using the ID of user<br>
	 * NAME whose cleartext password is PASSWD.  In *FD2P the descriptor<br>
	 * to the socket for the connection is returned.  When the function<br>
	 * returns *AHOST contains the official host name.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int rexec(char**, int, __const char*, __const char*, __const char*, int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:347</i>
	 */
	int rexec(PointerByReference __ahost, int __rport, String __name, String __pass, String __cmd, IntBuffer __fd2p);
	/**
	 * This is the equivalent function where the protocol can be selected<br>
	 * and which therefore can be used for IPv6.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int rexec_af(char**, int, __const char*, __const char*, __const char*, int*, sa_family_t)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:357</i><br>
	 * @deprecated use the safer methods {@link #rexec_af(com.sun.jna.ptr.PointerByReference, int, java.lang.String, java.lang.String, java.lang.String, java.nio.IntBuffer, short)} and {@link #rexec_af(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, short)} instead
	 */
	@Deprecated 
	int rexec_af(PointerByReference __ahost, int __rport, Pointer __name, Pointer __pass, Pointer __cmd, IntByReference __fd2p, short __af);
	/**
	 * This is the equivalent function where the protocol can be selected<br>
	 * and which therefore can be used for IPv6.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int rexec_af(char**, int, __const char*, __const char*, __const char*, int*, sa_family_t)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:357</i>
	 */
	int rexec_af(PointerByReference __ahost, int __rport, String __name, String __pass, String __cmd, IntBuffer __fd2p, short __af);
	/**
	 * Check whether user REMUSER on system RHOST is allowed to login as LOCUSER.<br>
	 * If SUSER is not zero the user tries to become superuser.  Return 0 if<br>
	 * it is possible.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int ruserok(__const char*, int, __const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:368</i><br>
	 * @deprecated use the safer methods {@link #ruserok(java.lang.String, int, java.lang.String, java.lang.String)} and {@link #ruserok(com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ruserok(Pointer __rhost, int __suser, Pointer __remuser, Pointer __locuser);
	/**
	 * Check whether user REMUSER on system RHOST is allowed to login as LOCUSER.<br>
	 * If SUSER is not zero the user tries to become superuser.  Return 0 if<br>
	 * it is possible.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int ruserok(__const char*, int, __const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:368</i>
	 */
	int ruserok(String __rhost, int __suser, String __remuser, String __locuser);
	/**
	 * This is the equivalent function where the protocol can be selected<br>
	 * and which therefore can be used for IPv6.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int ruserok_af(__const char*, int, __const char*, __const char*, sa_family_t)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:378</i><br>
	 * @deprecated use the safer methods {@link #ruserok_af(java.lang.String, int, java.lang.String, java.lang.String, short)} and {@link #ruserok_af(com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer, short)} instead
	 */
	@Deprecated 
	int ruserok_af(Pointer __rhost, int __suser, Pointer __remuser, Pointer __locuser, short __af);
	/**
	 * This is the equivalent function where the protocol can be selected<br>
	 * and which therefore can be used for IPv6.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int ruserok_af(__const char*, int, __const char*, __const char*, sa_family_t)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:378</i>
	 */
	int ruserok_af(String __rhost, int __suser, String __remuser, String __locuser, short __af);
	/**
	 * Check whether user REMUSER on system indicated by IPv4 address<br>
	 * RADDR is allowed to login as LOCUSER.  Non-IPv4 (e.g., IPv6) are<br>
	 * not supported.  If SUSER is not zero the user tries to become<br>
	 * superuser.  Return 0 if it is possible.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int iruserok(uint32_t, int, __const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:390</i><br>
	 * @deprecated use the safer methods {@link #iruserok(int, int, java.lang.String, java.lang.String)} and {@link #iruserok(int, int, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iruserok(int __raddr, int __suser, Pointer __remuser, Pointer __locuser);
	/**
	 * Check whether user REMUSER on system indicated by IPv4 address<br>
	 * RADDR is allowed to login as LOCUSER.  Non-IPv4 (e.g., IPv6) are<br>
	 * not supported.  If SUSER is not zero the user tries to become<br>
	 * superuser.  Return 0 if it is possible.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int iruserok(uint32_t, int, __const char*, __const char*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:390</i>
	 */
	int iruserok(int __raddr, int __suser, String __remuser, String __locuser);
	/**
	 * This is the equivalent function where the pfamiliy if the address<br>
	 * pointed to by RADDR is determined by the value of AF.  It therefore<br>
	 * can be used for IPv6<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int iruserok_af(__const void*, int, __const char*, __const char*, sa_family_t)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:401</i><br>
	 * @deprecated use the safer methods {@link #iruserok_af(com.sun.jna.Pointer, int, java.lang.String, java.lang.String, short)} and {@link #iruserok_af(com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer, short)} instead
	 */
	@Deprecated 
	int iruserok_af(Pointer __raddr, int __suser, Pointer __remuser, Pointer __locuser, short __af);
	/**
	 * This is the equivalent function where the pfamiliy if the address<br>
	 * pointed to by RADDR is determined by the value of AF.  It therefore<br>
	 * can be used for IPv6<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int iruserok_af(__const void*, int, __const char*, __const char*, sa_family_t)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:401</i>
	 */
	int iruserok_af(Pointer __raddr, int __suser, String __remuser, String __locuser, short __af);
	/**
	 * Try to allocate reserved port, returning a descriptor for a socket opened<br>
	 * at this port or -1 if unsuccessful.  The search for an available port<br>
	 * will start at ALPORT and continues with lower numbers.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int rresvport(int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:412</i><br>
	 * @deprecated use the safer methods {@link #rresvport(java.nio.IntBuffer)} and {@link #rresvport(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int rresvport(IntByReference __alport);
	/**
	 * Try to allocate reserved port, returning a descriptor for a socket opened<br>
	 * at this port or -1 if unsuccessful.  The search for an available port<br>
	 * will start at ALPORT and continues with lower numbers.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int rresvport(int*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:412</i>
	 */
	int rresvport(IntBuffer __alport);
	/**
	 * This is the equivalent function where the protocol can be selected<br>
	 * and which therefore can be used for IPv6.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int rresvport_af(int*, sa_family_t)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:422</i><br>
	 * @deprecated use the safer methods {@link #rresvport_af(java.nio.IntBuffer, short)} and {@link #rresvport_af(com.sun.jna.ptr.IntByReference, short)} instead
	 */
	@Deprecated 
	int rresvport_af(IntByReference __alport, short __af);
	/**
	 * This is the equivalent function where the protocol can be selected<br>
	 * and which therefore can be used for IPv6.<br>
	 * This function is not part of POSIX and therefore no official<br>
	 * cancellation point.  But due to similarity with an POSIX interface<br>
	 * or due to the implementation it is a cancellation point and<br>
	 * therefore not marked with __THROW.<br>
	 * Original signature : <code>int rresvport_af(int*, sa_family_t)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:422</i>
	 */
	int rresvport_af(IntBuffer __alport, short __af);
	/**
	 * Translate name of a service location and/or a service name to set of<br>
	 * socket addresses.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getaddrinfo(__const char*, __const char*, addrinfo*, addrinfo**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:441</i><br>
	 * @deprecated use the safer methods {@link #getaddrinfo(java.lang.String, java.lang.String, org.terraswarm.gdp.addrinfo, org.terraswarm.gdp.addrinfo.ByReference[])} and {@link #getaddrinfo(com.sun.jna.Pointer, com.sun.jna.Pointer, org.terraswarm.gdp.addrinfo, org.terraswarm.gdp.addrinfo.ByReference[])} instead
	 */
	@Deprecated 
	int getaddrinfo(Pointer __name, Pointer __service, addrinfo __req, PointerByReference __pai);
	/**
	 * Translate name of a service location and/or a service name to set of<br>
	 * socket addresses.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getaddrinfo(__const char*, __const char*, addrinfo*, addrinfo**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:441</i>
	 */
	int getaddrinfo(String __name, String __service, addrinfo __req, addrinfo.ByReference __pai[]);
	/**
	 * Translate name of a service location and/or a service name to set of<br>
	 * socket addresses.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getaddrinfo(__const char*, __const char*, addrinfo*, addrinfo**)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:441</i>
	 */
	int getaddrinfo(Pointer __name, Pointer __service, addrinfo __req, addrinfo.ByReference __pai[]);
	/**
	 * Free `addrinfo' structure AI including associated storage.<br>
	 * Original signature : <code>void freeaddrinfo(addrinfo*)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:446</i>
	 */
	void freeaddrinfo(addrinfo __ai);
	/**
	 * Convert error return from getaddrinfo() to a string.<br>
	 * Original signature : <code>char* gai_strerror(int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:451</i>
	 */
	Pointer gai_strerror(int __ecode);
	/**
	 * Translate a socket address to a location and service name.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getnameinfo(sockaddr*, socklen_t, char*, socklen_t, char*, socklen_t, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:458</i><br>
	 * @deprecated use the safer methods {@link #getnameinfo(org.terraswarm.gdp.sockaddr, int, java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, int)} and {@link #getnameinfo(org.terraswarm.gdp.sockaddr, int, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int getnameinfo(sockaddr __sa, int __salen, Pointer __host, int __hostlen, Pointer __serv, int __servlen, int __flags);
	/**
	 * Translate a socket address to a location and service name.<br>
	 * This function is a possible cancellation point and therefore not<br>
	 * marked with __THROW.<br>
	 * Original signature : <code>int getnameinfo(sockaddr*, socklen_t, char*, socklen_t, char*, socklen_t, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/netdb.h:458</i>
	 */
	int getnameinfo(sockaddr __sa, int __salen, ByteBuffer __host, int __hostlen, ByteBuffer __serv, int __servlen, int __flags);
	/**
	 * Clone current process.<br>
	 * Original signature : <code>int clone(clone___fn_callback*, void*, int, void*, null)</code><br>
	 * <i>native declaration : /usr/include/bits/sched.h:9</i>
	 */
	int clone$(Gdp10Library.clone___fn_callback __fn, Pointer __child_stack, int __flags, Pointer __arg, Object... varArgs1);
	/**
	 * Unshare the specified resources.<br>
	 * Original signature : <code>int unshare(int)</code><br>
	 * <i>native declaration : /usr/include/bits/sched.h:14</i>
	 */
	int unshare(int __flags);
	/**
	 * Get index of currently used CPU.<br>
	 * Original signature : <code>int sched_getcpu()</code><br>
	 * <i>native declaration : /usr/include/bits/sched.h:19</i>
	 */
	int sched_getcpu();
	/**
	 * Original signature : <code>int __sched_cpucount(size_t, const cpu_set_t*)</code><br>
	 * <i>native declaration : /usr/include/bits/sched.h:34</i>
	 */
	int __sched_cpucount(NativeSizeT __setsize, cpu_set_t __setp);
	/**
	 * Original signature : <code>cpu_set_t* __sched_cpualloc(size_t)</code><br>
	 * <i>native declaration : /usr/include/bits/sched.h:36</i>
	 */
	cpu_set_t __sched_cpualloc(NativeSizeT __count);
	/**
	 * Original signature : <code>void __sched_cpufree(cpu_set_t*)</code><br>
	 * <i>native declaration : /usr/include/bits/sched.h:38</i>
	 */
	void __sched_cpufree(cpu_set_t __set);
	/**
	 * Set scheduling parameters for a process.<br>
	 * Original signature : <code>int sched_setparam(__pid_t, sched_param*)</code><br>
	 * <i>native declaration : /usr/include/sched.h:5</i>
	 */
	int sched_setparam(int __pid, sched_param __param);
	/**
	 * Retrieve scheduling parameters for a particular process.<br>
	 * Original signature : <code>int sched_getparam(__pid_t, sched_param*)</code><br>
	 * <i>native declaration : /usr/include/sched.h:10</i>
	 */
	int sched_getparam(int __pid, sched_param __param);
	/**
	 * Set scheduling algorithm and/or parameters for a process.<br>
	 * Original signature : <code>int sched_setscheduler(__pid_t, int, sched_param*)</code><br>
	 * <i>native declaration : /usr/include/sched.h:15</i>
	 */
	int sched_setscheduler(int __pid, int __policy, sched_param __param);
	/**
	 * Retrieve scheduling algorithm for a particular purpose.<br>
	 * Original signature : <code>int sched_getscheduler(__pid_t)</code><br>
	 * <i>native declaration : /usr/include/sched.h:20</i>
	 */
	int sched_getscheduler(int __pid);
	/**
	 * Yield the processor.<br>
	 * Original signature : <code>int sched_yield()</code><br>
	 * <i>native declaration : /usr/include/sched.h:25</i>
	 */
	int sched_yield();
	/**
	 * Get maximum priority value for a scheduler.<br>
	 * Original signature : <code>int sched_get_priority_max(int)</code><br>
	 * <i>native declaration : /usr/include/sched.h:30</i>
	 */
	int sched_get_priority_max(int __algorithm);
	/**
	 * Get minimum priority value for a scheduler.<br>
	 * Original signature : <code>int sched_get_priority_min(int)</code><br>
	 * <i>native declaration : /usr/include/sched.h:35</i>
	 */
	int sched_get_priority_min(int __algorithm);
	/**
	 * Get the SCHED_RR interval for the named process.<br>
	 * Original signature : <code>int sched_rr_get_interval(__pid_t, timespec*)</code><br>
	 * <i>native declaration : /usr/include/sched.h:40</i>
	 */
	int sched_rr_get_interval(int __pid, Gdp10Library.timespec __t);
	/**
	 * Create a new thread, starting with execution of START-ROUTINE<br>
	 * getting passed ARG.  Creation attributed come from ATTR.  The new<br>
	 * handle is stored in *NEWTHREAD.<br>
	 * Original signature : <code>int pthread_create(pthread_t*, __const pthread_attr_t*, pthread_create___start_routine_callback*, void*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:69</i>
	 */
	int pthread_create(NativeLongByReference __newthread, pthread_attr_t __attr, Gdp10Library.pthread_create___start_routine_callback __start_routine, Pointer __arg);
	/**
	 * Terminate calling thread.<br>
	 * The registered cleanup handlers are called via exception handling<br>
	 * so we cannot mark this function with __THROW.<br>
	 * Original signature : <code>void pthread_exit(void*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:76</i>
	 */
	void pthread_exit(Pointer __retval);
	/**
	 * Make calling thread wait for termination of the thread TH.  The<br>
	 * exit status of the thread is stored in *THREAD_RETURN, if THREAD_RETURN<br>
	 * is not NULL.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int pthread_join(pthread_t, void**)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:85</i>
	 */
	int pthread_join(NativeLong __th, PointerByReference __thread_return);
	/**
	 * Indicate that the thread TH is never to be joined with PTHREAD_JOIN.<br>
	 * The resources of TH will therefore be freed immediately when it<br>
	 * terminates, instead of waiting for another thread to perform PTHREAD_JOIN<br>
	 * on it.<br>
	 * Original signature : <code>int pthread_detach(pthread_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:93</i>
	 */
	int pthread_detach(NativeLong __th);
	/**
	 * Obtain the identifier of the current thread.<br>
	 * Original signature : <code>pthread_t pthread_self()</code><br>
	 * <i>native declaration : /usr/include/pthread.h:98</i>
	 */
	NativeLong pthread_self();
	/**
	 * Compare two thread identifiers.<br>
	 * Original signature : <code>int pthread_equal(pthread_t, pthread_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:103</i>
	 */
	int pthread_equal(NativeLong __thread1, NativeLong __thread2);
	/**
	 * Initialize thread attribute *ATTR with default attributes<br>
	 * (detachstate is PTHREAD_JOINABLE, scheduling policy is SCHED_OTHER,<br>
	 * no user-provided stack).<br>
	 * Original signature : <code>int pthread_attr_init(pthread_attr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:110</i>
	 */
	int pthread_attr_init(pthread_attr_t __attr);
	/**
	 * Destroy thread attribute *ATTR.<br>
	 * Original signature : <code>int pthread_attr_destroy(pthread_attr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:115</i>
	 */
	int pthread_attr_destroy(pthread_attr_t __attr);
	/**
	 * Get detach state attribute.<br>
	 * Original signature : <code>int pthread_attr_getdetachstate(__const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:120</i><br>
	 * @deprecated use the safer methods {@link #pthread_attr_getdetachstate(org.terraswarm.gdp.pthread_attr_t, java.nio.IntBuffer)} and {@link #pthread_attr_getdetachstate(org.terraswarm.gdp.pthread_attr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_getdetachstate(pthread_attr_t __attr, IntByReference __detachstate);
	/**
	 * Get detach state attribute.<br>
	 * Original signature : <code>int pthread_attr_getdetachstate(__const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:120</i>
	 */
	int pthread_attr_getdetachstate(pthread_attr_t __attr, IntBuffer __detachstate);
	/**
	 * Set detach state attribute.<br>
	 * Original signature : <code>int pthread_attr_setdetachstate(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:125</i>
	 */
	int pthread_attr_setdetachstate(pthread_attr_t __attr, int __detachstate);
	/**
	 * Get the size of the guard area created for stack overflow protection.<br>
	 * Original signature : <code>int pthread_attr_getguardsize(__const pthread_attr_t*, size_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:130</i>
	 */
// 	int pthread_attr_getguardsize(pthread_attr_t __attr, NativeSizeTByReference __guardsize); // Commented out by makefile because NativeSizeTByReference is not in jna.
	/**
	 * Set the size of the guard area created for stack overflow protection.<br>
	 * Original signature : <code>int pthread_attr_setguardsize(pthread_attr_t*, size_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:135</i>
	 */
	int pthread_attr_setguardsize(pthread_attr_t __attr, NativeSizeT __guardsize);
	/**
	 * Return in *PARAM the scheduling parameters of *ATTR.<br>
	 * Original signature : <code>int pthread_attr_getschedparam(__const pthread_attr_t*, sched_param*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:140</i>
	 */
	int pthread_attr_getschedparam(pthread_attr_t __attr, sched_param __param);
	/**
	 * Set scheduling parameters (priority, etc) in *ATTR according to PARAM.<br>
	 * Original signature : <code>int pthread_attr_setschedparam(pthread_attr_t*, sched_param*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:145</i>
	 */
	int pthread_attr_setschedparam(pthread_attr_t __attr, sched_param __param);
	/**
	 * Return in *POLICY the scheduling policy of *ATTR.<br>
	 * Original signature : <code>int pthread_attr_getschedpolicy(__const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:150</i><br>
	 * @deprecated use the safer methods {@link #pthread_attr_getschedpolicy(org.terraswarm.gdp.pthread_attr_t, java.nio.IntBuffer)} and {@link #pthread_attr_getschedpolicy(org.terraswarm.gdp.pthread_attr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_getschedpolicy(pthread_attr_t __attr, IntByReference __policy);
	/**
	 * Return in *POLICY the scheduling policy of *ATTR.<br>
	 * Original signature : <code>int pthread_attr_getschedpolicy(__const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:150</i>
	 */
	int pthread_attr_getschedpolicy(pthread_attr_t __attr, IntBuffer __policy);
	/**
	 * Set scheduling policy in *ATTR according to POLICY.<br>
	 * Original signature : <code>int pthread_attr_setschedpolicy(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:155</i>
	 */
	int pthread_attr_setschedpolicy(pthread_attr_t __attr, int __policy);
	/**
	 * Return in *INHERIT the scheduling inheritance mode of *ATTR.<br>
	 * Original signature : <code>int pthread_attr_getinheritsched(__const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:160</i><br>
	 * @deprecated use the safer methods {@link #pthread_attr_getinheritsched(org.terraswarm.gdp.pthread_attr_t, java.nio.IntBuffer)} and {@link #pthread_attr_getinheritsched(org.terraswarm.gdp.pthread_attr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_getinheritsched(pthread_attr_t __attr, IntByReference __inherit);
	/**
	 * Return in *INHERIT the scheduling inheritance mode of *ATTR.<br>
	 * Original signature : <code>int pthread_attr_getinheritsched(__const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:160</i>
	 */
	int pthread_attr_getinheritsched(pthread_attr_t __attr, IntBuffer __inherit);
	/**
	 * Set scheduling inheritance mode in *ATTR according to INHERIT.<br>
	 * Original signature : <code>int pthread_attr_setinheritsched(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:165</i>
	 */
	int pthread_attr_setinheritsched(pthread_attr_t __attr, int __inherit);
	/**
	 * Return in *SCOPE the scheduling contention scope of *ATTR.<br>
	 * Original signature : <code>int pthread_attr_getscope(__const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:170</i><br>
	 * @deprecated use the safer methods {@link #pthread_attr_getscope(org.terraswarm.gdp.pthread_attr_t, java.nio.IntBuffer)} and {@link #pthread_attr_getscope(org.terraswarm.gdp.pthread_attr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_attr_getscope(pthread_attr_t __attr, IntByReference __scope);
	/**
	 * Return in *SCOPE the scheduling contention scope of *ATTR.<br>
	 * Original signature : <code>int pthread_attr_getscope(__const pthread_attr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:170</i>
	 */
	int pthread_attr_getscope(pthread_attr_t __attr, IntBuffer __scope);
	/**
	 * Set scheduling contention scope in *ATTR according to SCOPE.<br>
	 * Original signature : <code>int pthread_attr_setscope(pthread_attr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:175</i>
	 */
	int pthread_attr_setscope(pthread_attr_t __attr, int __scope);
	/**
	 * Return the previously set address for the stack.<br>
	 * Original signature : <code>int pthread_attr_getstackaddr(__const pthread_attr_t*, void**)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:180</i>
	 */
	int pthread_attr_getstackaddr(pthread_attr_t __attr, PointerByReference __stackaddr);
	/**
	 * Set the starting address of the stack of the thread to be created.<br>
	 * Depending on whether the stack grows up or down the value must either<br>
	 * be higher or lower than all the address in the memory block.  The<br>
	 * minimal size of the block must be PTHREAD_STACK_MIN.<br>
	 * Original signature : <code>int pthread_attr_setstackaddr(pthread_attr_t*, void*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:188</i>
	 */
	int pthread_attr_setstackaddr(pthread_attr_t __attr, Pointer __stackaddr);
	/**
	 * Return the currently used minimal stack size.<br>
	 * Original signature : <code>int pthread_attr_getstacksize(__const pthread_attr_t*, size_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:193</i>
	 */
// 	int pthread_attr_getstacksize(pthread_attr_t __attr, NativeSizeTByReference __stacksize); // Commented out by makefile because NativeSizeTByReference is not in jna.
	/**
	 * Add information about the minimum stack size needed for the thread<br>
	 * to be started.  This size must never be less than PTHREAD_STACK_MIN<br>
	 * and must also not exceed the system limits.<br>
	 * Original signature : <code>int pthread_attr_setstacksize(pthread_attr_t*, size_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:200</i>
	 */
	int pthread_attr_setstacksize(pthread_attr_t __attr, NativeSizeT __stacksize);
	/**
	 * Return the previously set address for the stack.<br>
	 * Original signature : <code>int pthread_attr_getstack(__const pthread_attr_t*, void**, size_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:205</i>
	 */
// 	int pthread_attr_getstack(pthread_attr_t __attr, PointerByReference __stackaddr, NativeSizeTByReference __stacksize); // Commented out by makefile because NativeSizeTByReference is not in jna.
	/**
	 * The following two interfaces are intended to replace the last two.  They<br>
	 * require setting the address as well as the size since only setting the<br>
	 * address will make the implementation on some architectures impossible.<br>
	 * Original signature : <code>int pthread_attr_setstack(pthread_attr_t*, void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:212</i>
	 */
	int pthread_attr_setstack(pthread_attr_t __attr, Pointer __stackaddr, NativeSizeT __stacksize);
	/**
	 * Set the scheduling parameters for TARGET_THREAD according to POLICY<br>
	 * and *PARAM.<br>
	 * Original signature : <code>int pthread_setschedparam(pthread_t, int, sched_param*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:218</i>
	 */
	int pthread_setschedparam(NativeLong __target_thread, int __policy, sched_param __param);
	/**
	 * Return in *POLICY and *PARAM the scheduling parameters for TARGET_THREAD.<br>
	 * Original signature : <code>int pthread_getschedparam(pthread_t, int*, sched_param*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:223</i><br>
	 * @deprecated use the safer methods {@link #pthread_getschedparam(com.sun.jna.NativeLong, java.nio.IntBuffer, org.terraswarm.gdp.sched_param)} and {@link #pthread_getschedparam(com.sun.jna.NativeLong, com.sun.jna.ptr.IntByReference, org.terraswarm.gdp.sched_param)} instead
	 */
	@Deprecated 
	int pthread_getschedparam(NativeLong __target_thread, IntByReference __policy, sched_param __param);
	/**
	 * Return in *POLICY and *PARAM the scheduling parameters for TARGET_THREAD.<br>
	 * Original signature : <code>int pthread_getschedparam(pthread_t, int*, sched_param*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:223</i>
	 */
	int pthread_getschedparam(NativeLong __target_thread, IntBuffer __policy, sched_param __param);
	/**
	 * Set the scheduling priority for TARGET_THREAD.<br>
	 * Original signature : <code>int pthread_setschedprio(pthread_t, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:228</i>
	 */
	int pthread_setschedprio(NativeLong __target_thread, int __prio);
	/**
	 * Guarantee that the initialization function INIT_ROUTINE will be called<br>
	 * only once, even if pthread_once is executed several times with the<br>
	 * same ONCE_CONTROL argument. ONCE_CONTROL must point to a static or<br>
	 * extern variable initialized to PTHREAD_ONCE_INIT.<br>
	 * The initialization functions might throw exception which is why<br>
	 * this function is not marked with __THROW.<br>
	 * Original signature : <code>int pthread_once(pthread_once_t*, pthread_once___init_routine_callback*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:238</i><br>
	 * @deprecated use the safer methods {@link #pthread_once(java.nio.IntBuffer, org.terraswarm.gdp.Gdp10Library.pthread_once___init_routine_callback)} and {@link #pthread_once(com.sun.jna.ptr.IntByReference, org.terraswarm.gdp.Gdp10Library.pthread_once___init_routine_callback)} instead
	 */
	@Deprecated 
	int pthread_once(IntByReference __once_control, Gdp10Library.pthread_once___init_routine_callback __init_routine);
	/**
	 * Guarantee that the initialization function INIT_ROUTINE will be called<br>
	 * only once, even if pthread_once is executed several times with the<br>
	 * same ONCE_CONTROL argument. ONCE_CONTROL must point to a static or<br>
	 * extern variable initialized to PTHREAD_ONCE_INIT.<br>
	 * The initialization functions might throw exception which is why<br>
	 * this function is not marked with __THROW.<br>
	 * Original signature : <code>int pthread_once(pthread_once_t*, pthread_once___init_routine_callback*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:238</i>
	 */
	int pthread_once(IntBuffer __once_control, Gdp10Library.pthread_once___init_routine_callback __init_routine);
	/**
	 * Set cancelability state of current thread to STATE, returning old<br>
	 * state in *OLDSTATE if OLDSTATE is not NULL.<br>
	 * Original signature : <code>int pthread_setcancelstate(int, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:244</i><br>
	 * @deprecated use the safer methods {@link #pthread_setcancelstate(int, java.nio.IntBuffer)} and {@link #pthread_setcancelstate(int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_setcancelstate(int __state, IntByReference __oldstate);
	/**
	 * Set cancelability state of current thread to STATE, returning old<br>
	 * state in *OLDSTATE if OLDSTATE is not NULL.<br>
	 * Original signature : <code>int pthread_setcancelstate(int, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:244</i>
	 */
	int pthread_setcancelstate(int __state, IntBuffer __oldstate);
	/**
	 * Set cancellation state of current thread to TYPE, returning the old<br>
	 * type in *OLDTYPE if OLDTYPE is not NULL.<br>
	 * Original signature : <code>int pthread_setcanceltype(int, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:250</i><br>
	 * @deprecated use the safer methods {@link #pthread_setcanceltype(int, java.nio.IntBuffer)} and {@link #pthread_setcanceltype(int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_setcanceltype(int __type, IntByReference __oldtype);
	/**
	 * Set cancellation state of current thread to TYPE, returning the old<br>
	 * type in *OLDTYPE if OLDTYPE is not NULL.<br>
	 * Original signature : <code>int pthread_setcanceltype(int, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:250</i>
	 */
	int pthread_setcanceltype(int __type, IntBuffer __oldtype);
	/**
	 * Cancel THREAD immediately or at the next possibility.<br>
	 * Original signature : <code>int pthread_cancel(pthread_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:255</i>
	 */
	int pthread_cancel(NativeLong __th);
	/**
	 * Test for pending cancellation for the current thread and terminate<br>
	 * the thread as per pthread_exit(PTHREAD_CANCELED) if it has been<br>
	 * cancelled.<br>
	 * Original signature : <code>void pthread_testcancel()</code><br>
	 * <i>native declaration : /usr/include/pthread.h:262</i>
	 */
	void pthread_testcancel();
	/**
	 * Install a cleanup handler: ROUTINE will be called with arguments ARG<br>
	 * when the thread is canceled or calls pthread_exit.  ROUTINE will also<br>
	 * be called with arguments ARG when the matching pthread_cleanup_pop<br>
	 * is executed with non-zero EXECUTE argument.<br>
	 * pthread_cleanup_push and pthread_cleanup_pop are macros and must always<br>
	 * be used in matching pairs at the same nesting level of braces.<br>
	 * Original signature : <code>void __pthread_register_cancel(__pthread_unwind_buf_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:289</i>
	 */
	void __pthread_register_cancel(__pthread_unwind_buf_t __buf);
	/**
	 * Remove a cleanup handler installed by the matching pthread_cleanup_push.<br>
	 * If EXECUTE is non-zero, the handler function is called.<br>
	 * Original signature : <code>void __pthread_unregister_cancel(__pthread_unwind_buf_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:295</i>
	 */
	void __pthread_unregister_cancel(__pthread_unwind_buf_t __buf);
	/**
	 * Internal interface to initiate cleanup.<br>
	 * Original signature : <code>void __pthread_unwind_next(__pthread_unwind_buf_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:300</i>
	 */
	void __pthread_unwind_next(__pthread_unwind_buf_t __buf);
	/**
	 * Original signature : <code>int __sigsetjmp(__jmp_buf_tag*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:304</i>
	 */
	int __sigsetjmp(Gdp10Library.__jmp_buf_tag __env, int __savemask);
	/**
	 * Initialize a mutex.<br>
	 * Original signature : <code>int pthread_mutex_init(pthread_mutex_t*, __const pthread_mutexattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:309</i>
	 */
	int pthread_mutex_init(pthread_mutex_t __mutex, pthread_mutexattr_t __mutexattr);
	/**
	 * Destroy a mutex.<br>
	 * Original signature : <code>int pthread_mutex_destroy(pthread_mutex_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:314</i>
	 */
	int pthread_mutex_destroy(pthread_mutex_t __mutex);
	/**
	 * Try locking a mutex.<br>
	 * Original signature : <code>int pthread_mutex_trylock(pthread_mutex_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:319</i>
	 */
	int pthread_mutex_trylock(pthread_mutex_t __mutex);
	/**
	 * Lock a mutex.<br>
	 * Original signature : <code>int pthread_mutex_lock(pthread_mutex_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:324</i>
	 */
	int pthread_mutex_lock(pthread_mutex_t __mutex);
	/**
	 * Wait until lock becomes available, or specified time passes.<br>
	 * Original signature : <code>int pthread_mutex_timedlock(pthread_mutex_t*, timespec*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:329</i>
	 */
	int pthread_mutex_timedlock(pthread_mutex_t __mutex, Gdp10Library.timespec __abstime);
	/**
	 * Unlock a mutex.<br>
	 * Original signature : <code>int pthread_mutex_unlock(pthread_mutex_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:334</i>
	 */
	int pthread_mutex_unlock(pthread_mutex_t __mutex);
	/**
	 * Get the priority ceiling of MUTEX.<br>
	 * Original signature : <code>int pthread_mutex_getprioceiling(__const pthread_mutex_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:339</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutex_getprioceiling(org.terraswarm.gdp.pthread_mutex_t, java.nio.IntBuffer)} and {@link #pthread_mutex_getprioceiling(org.terraswarm.gdp.pthread_mutex_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutex_getprioceiling(pthread_mutex_t __mutex, IntByReference __prioceiling);
	/**
	 * Get the priority ceiling of MUTEX.<br>
	 * Original signature : <code>int pthread_mutex_getprioceiling(__const pthread_mutex_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:339</i>
	 */
	int pthread_mutex_getprioceiling(pthread_mutex_t __mutex, IntBuffer __prioceiling);
	/**
	 * Set the priority ceiling of MUTEX to PRIOCEILING, return old<br>
	 * priority ceiling value in *OLD_CEILING.<br>
	 * Original signature : <code>int pthread_mutex_setprioceiling(pthread_mutex_t*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:345</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutex_setprioceiling(org.terraswarm.gdp.pthread_mutex_t, int, java.nio.IntBuffer)} and {@link #pthread_mutex_setprioceiling(org.terraswarm.gdp.pthread_mutex_t, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutex_setprioceiling(pthread_mutex_t __mutex, int __prioceiling, IntByReference __old_ceiling);
	/**
	 * Set the priority ceiling of MUTEX to PRIOCEILING, return old<br>
	 * priority ceiling value in *OLD_CEILING.<br>
	 * Original signature : <code>int pthread_mutex_setprioceiling(pthread_mutex_t*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:345</i>
	 */
	int pthread_mutex_setprioceiling(pthread_mutex_t __mutex, int __prioceiling, IntBuffer __old_ceiling);
	/**
	 * Declare the state protected by MUTEX as consistent.<br>
	 * Original signature : <code>int pthread_mutex_consistent(pthread_mutex_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:350</i>
	 */
	int pthread_mutex_consistent(pthread_mutex_t __mutex);
	/**
	 * Initialize mutex attribute object ATTR with default attributes<br>
	 * (kind is PTHREAD_MUTEX_TIMED_NP).<br>
	 * Original signature : <code>int pthread_mutexattr_init(pthread_mutexattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:356</i>
	 */
	int pthread_mutexattr_init(pthread_mutexattr_t __attr);
	/**
	 * Destroy mutex attribute object ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_destroy(pthread_mutexattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:361</i>
	 */
	int pthread_mutexattr_destroy(pthread_mutexattr_t __attr);
	/**
	 * Get the process-shared flag of the mutex attribute ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_getpshared(__const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:366</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutexattr_getpshared(org.terraswarm.gdp.pthread_mutexattr_t, java.nio.IntBuffer)} and {@link #pthread_mutexattr_getpshared(org.terraswarm.gdp.pthread_mutexattr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_getpshared(pthread_mutexattr_t __attr, IntByReference __pshared);
	/**
	 * Get the process-shared flag of the mutex attribute ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_getpshared(__const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:366</i>
	 */
	int pthread_mutexattr_getpshared(pthread_mutexattr_t __attr, IntBuffer __pshared);
	/**
	 * Set the process-shared flag of the mutex attribute ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:371</i>
	 */
	int pthread_mutexattr_setpshared(pthread_mutexattr_t __attr, int __pshared);
	/**
	 * Return in *KIND the mutex kind attribute in *ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_gettype(__const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:376</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutexattr_gettype(org.terraswarm.gdp.pthread_mutexattr_t, java.nio.IntBuffer)} and {@link #pthread_mutexattr_gettype(org.terraswarm.gdp.pthread_mutexattr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_gettype(pthread_mutexattr_t __attr, IntByReference __kind);
	/**
	 * Return in *KIND the mutex kind attribute in *ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_gettype(__const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:376</i>
	 */
	int pthread_mutexattr_gettype(pthread_mutexattr_t __attr, IntBuffer __kind);
	/**
	 * Set the mutex kind attribute in *ATTR to KIND (either PTHREAD_MUTEX_NORMAL,<br>
	 * PTHREAD_MUTEX_RECURSIVE, PTHREAD_MUTEX_ERRORCHECK, or<br>
	 * PTHREAD_MUTEX_DEFAULT).<br>
	 * Original signature : <code>int pthread_mutexattr_settype(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:383</i>
	 */
	int pthread_mutexattr_settype(pthread_mutexattr_t __attr, int __kind);
	/**
	 * Return in *PROTOCOL the mutex protocol attribute in *ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_getprotocol(__const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:388</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutexattr_getprotocol(org.terraswarm.gdp.pthread_mutexattr_t, java.nio.IntBuffer)} and {@link #pthread_mutexattr_getprotocol(org.terraswarm.gdp.pthread_mutexattr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_getprotocol(pthread_mutexattr_t __attr, IntByReference __protocol);
	/**
	 * Return in *PROTOCOL the mutex protocol attribute in *ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_getprotocol(__const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:388</i>
	 */
	int pthread_mutexattr_getprotocol(pthread_mutexattr_t __attr, IntBuffer __protocol);
	/**
	 * Set the mutex protocol attribute in *ATTR to PROTOCOL (either<br>
	 * PTHREAD_PRIO_NONE, PTHREAD_PRIO_INHERIT, or PTHREAD_PRIO_PROTECT).<br>
	 * Original signature : <code>int pthread_mutexattr_setprotocol(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:394</i>
	 */
	int pthread_mutexattr_setprotocol(pthread_mutexattr_t __attr, int __protocol);
	/**
	 * Return in *PRIOCEILING the mutex prioceiling attribute in *ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_getprioceiling(__const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:399</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutexattr_getprioceiling(org.terraswarm.gdp.pthread_mutexattr_t, java.nio.IntBuffer)} and {@link #pthread_mutexattr_getprioceiling(org.terraswarm.gdp.pthread_mutexattr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_getprioceiling(pthread_mutexattr_t __attr, IntByReference __prioceiling);
	/**
	 * Return in *PRIOCEILING the mutex prioceiling attribute in *ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_getprioceiling(__const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:399</i>
	 */
	int pthread_mutexattr_getprioceiling(pthread_mutexattr_t __attr, IntBuffer __prioceiling);
	/**
	 * Set the mutex prioceiling attribute in *ATTR to PRIOCEILING.<br>
	 * Original signature : <code>int pthread_mutexattr_setprioceiling(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:404</i>
	 */
	int pthread_mutexattr_setprioceiling(pthread_mutexattr_t __attr, int __prioceiling);
	/**
	 * Get the robustness flag of the mutex attribute ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_getrobust(__const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:409</i><br>
	 * @deprecated use the safer methods {@link #pthread_mutexattr_getrobust(org.terraswarm.gdp.pthread_mutexattr_t, java.nio.IntBuffer)} and {@link #pthread_mutexattr_getrobust(org.terraswarm.gdp.pthread_mutexattr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_mutexattr_getrobust(pthread_mutexattr_t __attr, IntByReference __robustness);
	/**
	 * Get the robustness flag of the mutex attribute ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_getrobust(__const pthread_mutexattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:409</i>
	 */
	int pthread_mutexattr_getrobust(pthread_mutexattr_t __attr, IntBuffer __robustness);
	/**
	 * Set the robustness flag of the mutex attribute ATTR.<br>
	 * Original signature : <code>int pthread_mutexattr_setrobust(pthread_mutexattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:414</i>
	 */
	int pthread_mutexattr_setrobust(pthread_mutexattr_t __attr, int __robustness);
	/**
	 * Initialize read-write lock RWLOCK using attributes ATTR, or use<br>
	 * the default values if later is NULL.<br>
	 * Original signature : <code>int pthread_rwlock_init(pthread_rwlock_t*, __const pthread_rwlockattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:420</i>
	 */
	int pthread_rwlock_init(pthread_rwlock_t __rwlock, pthread_rwlockattr_t __attr);
	/**
	 * Destroy read-write lock RWLOCK.<br>
	 * Original signature : <code>int pthread_rwlock_destroy(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:425</i>
	 */
	int pthread_rwlock_destroy(pthread_rwlock_t __rwlock);
	/**
	 * Acquire read lock for RWLOCK.<br>
	 * Original signature : <code>int pthread_rwlock_rdlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:430</i>
	 */
	int pthread_rwlock_rdlock(pthread_rwlock_t __rwlock);
	/**
	 * Try to acquire read lock for RWLOCK.<br>
	 * Original signature : <code>int pthread_rwlock_tryrdlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:435</i>
	 */
	int pthread_rwlock_tryrdlock(pthread_rwlock_t __rwlock);
	/**
	 * Try to acquire read lock for RWLOCK or return after specfied time.<br>
	 * Original signature : <code>int pthread_rwlock_timedrdlock(pthread_rwlock_t*, timespec*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:440</i>
	 */
	int pthread_rwlock_timedrdlock(pthread_rwlock_t __rwlock, Gdp10Library.timespec __abstime);
	/**
	 * Acquire write lock for RWLOCK.<br>
	 * Original signature : <code>int pthread_rwlock_wrlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:445</i>
	 */
	int pthread_rwlock_wrlock(pthread_rwlock_t __rwlock);
	/**
	 * Try to acquire write lock for RWLOCK.<br>
	 * Original signature : <code>int pthread_rwlock_trywrlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:450</i>
	 */
	int pthread_rwlock_trywrlock(pthread_rwlock_t __rwlock);
	/**
	 * Try to acquire write lock for RWLOCK or return after specfied time.<br>
	 * Original signature : <code>int pthread_rwlock_timedwrlock(pthread_rwlock_t*, timespec*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:455</i>
	 */
	int pthread_rwlock_timedwrlock(pthread_rwlock_t __rwlock, Gdp10Library.timespec __abstime);
	/**
	 * Unlock RWLOCK.<br>
	 * Original signature : <code>int pthread_rwlock_unlock(pthread_rwlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:460</i>
	 */
	int pthread_rwlock_unlock(pthread_rwlock_t __rwlock);
	/**
	 * Initialize attribute object ATTR with default values.<br>
	 * Original signature : <code>int pthread_rwlockattr_init(pthread_rwlockattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:465</i>
	 */
	int pthread_rwlockattr_init(pthread_rwlockattr_t __attr);
	/**
	 * Destroy attribute object ATTR.<br>
	 * Original signature : <code>int pthread_rwlockattr_destroy(pthread_rwlockattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:470</i>
	 */
	int pthread_rwlockattr_destroy(pthread_rwlockattr_t __attr);
	/**
	 * Return current setting of process-shared attribute of ATTR in PSHARED.<br>
	 * Original signature : <code>int pthread_rwlockattr_getpshared(__const pthread_rwlockattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:475</i><br>
	 * @deprecated use the safer methods {@link #pthread_rwlockattr_getpshared(org.terraswarm.gdp.pthread_rwlockattr_t, java.nio.IntBuffer)} and {@link #pthread_rwlockattr_getpshared(org.terraswarm.gdp.pthread_rwlockattr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_rwlockattr_getpshared(pthread_rwlockattr_t __attr, IntByReference __pshared);
	/**
	 * Return current setting of process-shared attribute of ATTR in PSHARED.<br>
	 * Original signature : <code>int pthread_rwlockattr_getpshared(__const pthread_rwlockattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:475</i>
	 */
	int pthread_rwlockattr_getpshared(pthread_rwlockattr_t __attr, IntBuffer __pshared);
	/**
	 * Set process-shared attribute of ATTR to PSHARED.<br>
	 * Original signature : <code>int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:480</i>
	 */
	int pthread_rwlockattr_setpshared(pthread_rwlockattr_t __attr, int __pshared);
	/**
	 * Return current setting of reader/writer preference.<br>
	 * Original signature : <code>int pthread_rwlockattr_getkind_np(__const pthread_rwlockattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:485</i><br>
	 * @deprecated use the safer methods {@link #pthread_rwlockattr_getkind_np(org.terraswarm.gdp.pthread_rwlockattr_t, java.nio.IntBuffer)} and {@link #pthread_rwlockattr_getkind_np(org.terraswarm.gdp.pthread_rwlockattr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_rwlockattr_getkind_np(pthread_rwlockattr_t __attr, IntByReference __pref);
	/**
	 * Return current setting of reader/writer preference.<br>
	 * Original signature : <code>int pthread_rwlockattr_getkind_np(__const pthread_rwlockattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:485</i>
	 */
	int pthread_rwlockattr_getkind_np(pthread_rwlockattr_t __attr, IntBuffer __pref);
	/**
	 * Set reader/write preference.<br>
	 * Original signature : <code>int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:490</i>
	 */
	int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t __attr, int __pref);
	/**
	 * Initialize condition variable COND using attributes ATTR, or use<br>
	 * the default values if later is NULL.<br>
	 * Original signature : <code>int pthread_cond_init(pthread_cond_t*, __const pthread_condattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:496</i>
	 */
	int pthread_cond_init(pthread_cond_t __cond, pthread_condattr_t __cond_attr);
	/**
	 * Destroy condition variable COND.<br>
	 * Original signature : <code>int pthread_cond_destroy(pthread_cond_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:501</i>
	 */
	int pthread_cond_destroy(pthread_cond_t __cond);
	/**
	 * Wake up one thread waiting for condition variable COND.<br>
	 * Original signature : <code>int pthread_cond_signal(pthread_cond_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:506</i>
	 */
	int pthread_cond_signal(pthread_cond_t __cond);
	/**
	 * Wake up all threads waiting for condition variables COND.<br>
	 * Original signature : <code>int pthread_cond_broadcast(pthread_cond_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:511</i>
	 */
	int pthread_cond_broadcast(pthread_cond_t __cond);
	/**
	 * Wait for condition variable COND to be signaled or broadcast.<br>
	 * MUTEX is assumed to be locked before.<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int pthread_cond_wait(pthread_cond_t*, pthread_mutex_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:519</i>
	 */
	int pthread_cond_wait(pthread_cond_t __cond, pthread_mutex_t __mutex);
	/**
	 * Wait for condition variable COND to be signaled or broadcast until<br>
	 * ABSTIME.  MUTEX is assumed to be locked before.  ABSTIME is an<br>
	 * absolute time specification; zero is the beginning of the epoch<br>
	 * (00:00:00 GMT, January 1, 1970).<br>
	 * This function is a cancellation point and therefore not marked with<br>
	 * __THROW.<br>
	 * Original signature : <code>int pthread_cond_timedwait(pthread_cond_t*, pthread_mutex_t*, timespec*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:529</i>
	 */
	int pthread_cond_timedwait(pthread_cond_t __cond, pthread_mutex_t __mutex, Gdp10Library.timespec __abstime);
	/**
	 * Initialize condition variable attribute ATTR.<br>
	 * Original signature : <code>int pthread_condattr_init(pthread_condattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:534</i>
	 */
	int pthread_condattr_init(pthread_condattr_t __attr);
	/**
	 * Destroy condition variable attribute ATTR.<br>
	 * Original signature : <code>int pthread_condattr_destroy(pthread_condattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:539</i>
	 */
	int pthread_condattr_destroy(pthread_condattr_t __attr);
	/**
	 * Get the process-shared flag of the condition variable attribute ATTR.<br>
	 * Original signature : <code>int pthread_condattr_getpshared(__const pthread_condattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:544</i><br>
	 * @deprecated use the safer methods {@link #pthread_condattr_getpshared(org.terraswarm.gdp.pthread_condattr_t, java.nio.IntBuffer)} and {@link #pthread_condattr_getpshared(org.terraswarm.gdp.pthread_condattr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_condattr_getpshared(pthread_condattr_t __attr, IntByReference __pshared);
	/**
	 * Get the process-shared flag of the condition variable attribute ATTR.<br>
	 * Original signature : <code>int pthread_condattr_getpshared(__const pthread_condattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:544</i>
	 */
	int pthread_condattr_getpshared(pthread_condattr_t __attr, IntBuffer __pshared);
	/**
	 * Set the process-shared flag of the condition variable attribute ATTR.<br>
	 * Original signature : <code>int pthread_condattr_setpshared(pthread_condattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:549</i>
	 */
	int pthread_condattr_setpshared(pthread_condattr_t __attr, int __pshared);
	/**
	 * Get the clock selected for the conditon variable attribute ATTR.<br>
	 * Original signature : <code>int pthread_condattr_getclock(__const pthread_condattr_t*, __clockid_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:554</i><br>
	 * @deprecated use the safer methods {@link #pthread_condattr_getclock(org.terraswarm.gdp.pthread_condattr_t, java.nio.IntBuffer)} and {@link #pthread_condattr_getclock(org.terraswarm.gdp.pthread_condattr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_condattr_getclock(pthread_condattr_t __attr, IntByReference __clock_id);
	/**
	 * Get the clock selected for the conditon variable attribute ATTR.<br>
	 * Original signature : <code>int pthread_condattr_getclock(__const pthread_condattr_t*, __clockid_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:554</i>
	 */
	int pthread_condattr_getclock(pthread_condattr_t __attr, IntBuffer __clock_id);
	/**
	 * Set the clock selected for the conditon variable attribute ATTR.<br>
	 * Original signature : <code>int pthread_condattr_setclock(pthread_condattr_t*, __clockid_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:559</i>
	 */
	int pthread_condattr_setclock(pthread_condattr_t __attr, int __clock_id);
	/**
	 * Initialize the spinlock LOCK.  If PSHARED is nonzero the spinlock can<br>
	 * be shared between different processes.<br>
	 * Original signature : <code>int pthread_spin_init(pthread_spinlock_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:565</i><br>
	 * @deprecated use the safer methods {@link #pthread_spin_init(java.nio.IntBuffer, int)} and {@link #pthread_spin_init(com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	int pthread_spin_init(IntByReference __lock, int __pshared);
	/**
	 * Initialize the spinlock LOCK.  If PSHARED is nonzero the spinlock can<br>
	 * be shared between different processes.<br>
	 * Original signature : <code>int pthread_spin_init(pthread_spinlock_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:565</i>
	 */
	int pthread_spin_init(IntBuffer __lock, int __pshared);
	/**
	 * Destroy the spinlock LOCK.<br>
	 * Original signature : <code>int pthread_spin_destroy(pthread_spinlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:570</i><br>
	 * @deprecated use the safer methods {@link #pthread_spin_destroy(java.nio.IntBuffer)} and {@link #pthread_spin_destroy(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_spin_destroy(IntByReference __lock);
	/**
	 * Destroy the spinlock LOCK.<br>
	 * Original signature : <code>int pthread_spin_destroy(pthread_spinlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:570</i>
	 */
	int pthread_spin_destroy(IntBuffer __lock);
	/**
	 * Wait until spinlock LOCK is retrieved.<br>
	 * Original signature : <code>int pthread_spin_lock(pthread_spinlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:575</i><br>
	 * @deprecated use the safer methods {@link #pthread_spin_lock(java.nio.IntBuffer)} and {@link #pthread_spin_lock(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_spin_lock(IntByReference __lock);
	/**
	 * Wait until spinlock LOCK is retrieved.<br>
	 * Original signature : <code>int pthread_spin_lock(pthread_spinlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:575</i>
	 */
	int pthread_spin_lock(IntBuffer __lock);
	/**
	 * Try to lock spinlock LOCK.<br>
	 * Original signature : <code>int pthread_spin_trylock(pthread_spinlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:580</i><br>
	 * @deprecated use the safer methods {@link #pthread_spin_trylock(java.nio.IntBuffer)} and {@link #pthread_spin_trylock(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_spin_trylock(IntByReference __lock);
	/**
	 * Try to lock spinlock LOCK.<br>
	 * Original signature : <code>int pthread_spin_trylock(pthread_spinlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:580</i>
	 */
	int pthread_spin_trylock(IntBuffer __lock);
	/**
	 * Release spinlock LOCK.<br>
	 * Original signature : <code>int pthread_spin_unlock(pthread_spinlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:585</i><br>
	 * @deprecated use the safer methods {@link #pthread_spin_unlock(java.nio.IntBuffer)} and {@link #pthread_spin_unlock(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_spin_unlock(IntByReference __lock);
	/**
	 * Release spinlock LOCK.<br>
	 * Original signature : <code>int pthread_spin_unlock(pthread_spinlock_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:585</i>
	 */
	int pthread_spin_unlock(IntBuffer __lock);
	/**
	 * Initialize BARRIER with the attributes in ATTR.  The barrier is<br>
	 * opened when COUNT waiters arrived.<br>
	 * Original signature : <code>int pthread_barrier_init(pthread_barrier_t*, __const pthread_barrierattr_t*, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:591</i>
	 */
	int pthread_barrier_init(pthread_barrier_t __barrier, pthread_barrierattr_t __attr, int __count);
	/**
	 * Destroy a previously dynamically initialized barrier BARRIER.<br>
	 * Original signature : <code>int pthread_barrier_destroy(pthread_barrier_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:596</i>
	 */
	int pthread_barrier_destroy(pthread_barrier_t __barrier);
	/**
	 * Wait on barrier BARRIER.<br>
	 * Original signature : <code>int pthread_barrier_wait(pthread_barrier_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:601</i>
	 */
	int pthread_barrier_wait(pthread_barrier_t __barrier);
	/**
	 * Initialize barrier attribute ATTR.<br>
	 * Original signature : <code>int pthread_barrierattr_init(pthread_barrierattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:606</i>
	 */
	int pthread_barrierattr_init(pthread_barrierattr_t __attr);
	/**
	 * Destroy previously dynamically initialized barrier attribute ATTR.<br>
	 * Original signature : <code>int pthread_barrierattr_destroy(pthread_barrierattr_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:611</i>
	 */
	int pthread_barrierattr_destroy(pthread_barrierattr_t __attr);
	/**
	 * Get the process-shared flag of the barrier attribute ATTR.<br>
	 * Original signature : <code>int pthread_barrierattr_getpshared(__const pthread_barrierattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:616</i><br>
	 * @deprecated use the safer methods {@link #pthread_barrierattr_getpshared(org.terraswarm.gdp.pthread_barrierattr_t, java.nio.IntBuffer)} and {@link #pthread_barrierattr_getpshared(org.terraswarm.gdp.pthread_barrierattr_t, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_barrierattr_getpshared(pthread_barrierattr_t __attr, IntByReference __pshared);
	/**
	 * Get the process-shared flag of the barrier attribute ATTR.<br>
	 * Original signature : <code>int pthread_barrierattr_getpshared(__const pthread_barrierattr_t*, int*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:616</i>
	 */
	int pthread_barrierattr_getpshared(pthread_barrierattr_t __attr, IntBuffer __pshared);
	/**
	 * Set the process-shared flag of the barrier attribute ATTR.<br>
	 * Original signature : <code>int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:621</i>
	 */
	int pthread_barrierattr_setpshared(pthread_barrierattr_t __attr, int __pshared);
	/**
	 * Create a key value identifying a location in the thread-specific<br>
	 * data area.  Each thread maintains a distinct thread-specific data<br>
	 * area.  DESTR_FUNCTION, if non-NULL, is called with the value<br>
	 * associated to that key when the key is destroyed.<br>
	 * DESTR_FUNCTION is not called if the value associated is NULL when<br>
	 * the key is destroyed.<br>
	 * Original signature : <code>int pthread_key_create(pthread_key_t*, pthread_key_create___destr_function_callback*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:631</i><br>
	 * @deprecated use the safer methods {@link #pthread_key_create(java.nio.IntBuffer, org.terraswarm.gdp.Gdp10Library.pthread_key_create___destr_function_callback)} and {@link #pthread_key_create(com.sun.jna.ptr.IntByReference, org.terraswarm.gdp.Gdp10Library.pthread_key_create___destr_function_callback)} instead
	 */
	@Deprecated 
	int pthread_key_create(IntByReference __key, Gdp10Library.pthread_key_create___destr_function_callback __destr_function);
	/**
	 * Create a key value identifying a location in the thread-specific<br>
	 * data area.  Each thread maintains a distinct thread-specific data<br>
	 * area.  DESTR_FUNCTION, if non-NULL, is called with the value<br>
	 * associated to that key when the key is destroyed.<br>
	 * DESTR_FUNCTION is not called if the value associated is NULL when<br>
	 * the key is destroyed.<br>
	 * Original signature : <code>int pthread_key_create(pthread_key_t*, pthread_key_create___destr_function_callback*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:631</i>
	 */
	int pthread_key_create(IntBuffer __key, Gdp10Library.pthread_key_create___destr_function_callback __destr_function);
	/**
	 * Destroy KEY.<br>
	 * Original signature : <code>int pthread_key_delete(pthread_key_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:636</i>
	 */
	int pthread_key_delete(int __key);
	/**
	 * Return current value of the thread-specific data slot identified by KEY.<br>
	 * Original signature : <code>void* pthread_getspecific(pthread_key_t)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:641</i>
	 */
	Pointer pthread_getspecific(int __key);
	/**
	 * Store POINTER in the thread-specific data slot identified by KEY.<br>
	 * Original signature : <code>int pthread_setspecific(pthread_key_t, __const void*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:646</i>
	 */
	int pthread_setspecific(int __key, Pointer __pointer);
	/**
	 * Get ID of CPU-time clock for thread THREAD_ID.<br>
	 * Original signature : <code>int pthread_getcpuclockid(pthread_t, __clockid_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:651</i><br>
	 * @deprecated use the safer methods {@link #pthread_getcpuclockid(com.sun.jna.NativeLong, java.nio.IntBuffer)} and {@link #pthread_getcpuclockid(com.sun.jna.NativeLong, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int pthread_getcpuclockid(NativeLong __thread_id, IntByReference __clock_id);
	/**
	 * Get ID of CPU-time clock for thread THREAD_ID.<br>
	 * Original signature : <code>int pthread_getcpuclockid(pthread_t, __clockid_t*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:651</i>
	 */
	int pthread_getcpuclockid(NativeLong __thread_id, IntBuffer __clock_id);
	/**
	 * Install handlers to be called when a new process is created with FORK.<br>
	 * The PREPARE handler is called in the parent process just before performing<br>
	 * FORK. The PARENT handler is called in the parent process just after FORK.<br>
	 * The CHILD handler is called in the child process.  Each of the three<br>
	 * handlers can be NULL, meaning that no handler needs to be called at that<br>
	 * point.<br>
	 * PTHREAD_ATFORK can be called several times, in which case the PREPARE<br>
	 * handlers are called in LIFO order (last added with PTHREAD_ATFORK,<br>
	 * first called before FORK), and the PARENT and CHILD handlers are called<br>
	 * in FIFO (first added, first called).<br>
	 * Original signature : <code>int pthread_atfork(pthread_atfork___prepare_callback*, pthread_atfork___parent_callback*, pthread_atfork___child_callback*)</code><br>
	 * <i>native declaration : /usr/include/pthread.h:665</i>
	 */
	int pthread_atfork(Gdp10Library.pthread_atfork___prepare_callback __prepare, Gdp10Library.pthread_atfork___parent_callback __parent, Gdp10Library.pthread_atfork___child_callback __child);
	/**
	 * Original signature : <code>int ep_thr_mutex_init(EP_THR_MUTEX*, int)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:41</i>
	 */
	int ep_thr_mutex_init(pthread_mutex_t mtx, int type);
	/**
	 * Original signature : <code>int ep_thr_mutex_destroy(EP_THR_MUTEX*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:43</i>
	 */
	int ep_thr_mutex_destroy(pthread_mutex_t mtx);
	/**
	 * Original signature : <code>int ep_thr_mutex_lock(EP_THR_MUTEX*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:45</i>
	 */
	int ep_thr_mutex_lock(pthread_mutex_t mtx);
	/**
	 * Original signature : <code>int ep_thr_mutex_trylock(EP_THR_MUTEX*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:47</i>
	 */
	int ep_thr_mutex_trylock(pthread_mutex_t mtx);
	/**
	 * Original signature : <code>int ep_thr_mutex_unlock(EP_THR_MUTEX*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:49</i>
	 */
	int ep_thr_mutex_unlock(pthread_mutex_t mtx);
	/**
	 * Original signature : <code>int ep_thr_cond_init(EP_THR_COND*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:52</i>
	 */
	int ep_thr_cond_init(pthread_cond_t cv);
	/**
	 * Original signature : <code>int ep_thr_cond_destroy(EP_THR_COND*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:54</i>
	 */
	int ep_thr_cond_destroy(pthread_cond_t cv);
	/**
	 * Original signature : <code>int ep_thr_cond_signal(EP_THR_COND*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:56</i>
	 */
	int ep_thr_cond_signal(pthread_cond_t cv);
	/**
	 * Original signature : <code>int ep_thr_cond_wait(EP_THR_COND*, EP_THR_MUTEX*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:58</i>
	 */
	int ep_thr_cond_wait(pthread_cond_t cv, pthread_mutex_t mtx);
	/**
	 * Original signature : <code>int ep_thr_cond_broadcast(EP_THR_COND*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:60</i>
	 */
	int ep_thr_cond_broadcast(pthread_cond_t cv);
	/**
	 * Original signature : <code>int ep_thr_rwlock_init(EP_THR_RWLOCK*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:63</i>
	 */
	int ep_thr_rwlock_init(pthread_rwlock_t rwl);
	/**
	 * Original signature : <code>int ep_thr_rwlock_destroy(EP_THR_RWLOCK*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:65</i>
	 */
	int ep_thr_rwlock_destroy(pthread_rwlock_t rwl);
	/**
	 * Original signature : <code>int ep_thr_rwlock_rdlock(EP_THR_RWLOCK*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:67</i>
	 */
	int ep_thr_rwlock_rdlock(pthread_rwlock_t rwl);
	/**
	 * Original signature : <code>int ep_thr_rwlock_tryrdlock(EP_THR_RWLOCK*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:69</i>
	 */
	int ep_thr_rwlock_tryrdlock(pthread_rwlock_t rwl);
	/**
	 * Original signature : <code>int ep_thr_rwlock_wrlock(EP_THR_RWLOCK*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:71</i>
	 */
	int ep_thr_rwlock_wrlock(pthread_rwlock_t rwl);
	/**
	 * Original signature : <code>int ep_thr_rwlock_trywrlock(EP_THR_RWLOCK*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:73</i>
	 */
	int ep_thr_rwlock_trywrlock(pthread_rwlock_t rwl);
	/**
	 * Original signature : <code>int ep_thr_rwlock_unlock(EP_THR_RWLOCK*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_thr.h:75</i>
	 */
	int ep_thr_rwlock_unlock(pthread_rwlock_t rwl);
	/**
	 * Original signature : <code>gdp_buf_t* gdp_buf_new()</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:2</i>
	 */
	PointerByReference gdp_buf_new();
	/**
	 * Original signature : <code>int gdp_buf_reset(gdp_buf_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:4</i><br>
	 * @deprecated use the safer method {@link #gdp_buf_reset(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int gdp_buf_reset(Pointer b);
	/**
	 * Original signature : <code>int gdp_buf_reset(gdp_buf_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:4</i>
	 */
	int gdp_buf_reset(PointerByReference b);
	/**
	 * Original signature : <code>void gdp_buf_free(gdp_buf_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:6</i><br>
	 * @deprecated use the safer method {@link #gdp_buf_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void gdp_buf_free(Pointer b);
	/**
	 * Original signature : <code>void gdp_buf_free(gdp_buf_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:6</i>
	 */
	void gdp_buf_free(PointerByReference b);
	/**
	 * Original signature : <code>void gdp_buf_setlock(gdp_buf_t*, EP_THR_MUTEX*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:8</i><br>
	 * @deprecated use the safer method {@link #gdp_buf_setlock(com.sun.jna.ptr.PointerByReference, org.terraswarm.gdp.pthread_mutex_t)} instead
	 */
	@Deprecated 
	void gdp_buf_setlock(Pointer buf, pthread_mutex_t m);
	/**
	 * Original signature : <code>void gdp_buf_setlock(gdp_buf_t*, EP_THR_MUTEX*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:8</i>
	 */
	void gdp_buf_setlock(PointerByReference buf, pthread_mutex_t m);
	/**
	 * Original signature : <code>size_t gdp_buf_getlength(gdp_buf_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:10</i><br>
	 * @deprecated use the safer method {@link #gdp_buf_getlength(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	NativeSizeT gdp_buf_getlength(Pointer buf);
	/**
	 * Original signature : <code>size_t gdp_buf_getlength(gdp_buf_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:10</i>
	 */
	NativeSizeT gdp_buf_getlength(PointerByReference buf);
	/**
	 * Original signature : <code>size_t gdp_buf_read(gdp_buf_t*, void*, size_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:12</i><br>
	 * @deprecated use the safer method {@link #gdp_buf_read(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	NativeSizeT gdp_buf_read(Pointer buf, Pointer out, NativeSizeT sz);
	/**
	 * Original signature : <code>size_t gdp_buf_read(gdp_buf_t*, void*, size_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:12</i>
	 */
	NativeSizeT gdp_buf_read(PointerByReference buf, Pointer out, NativeSizeT sz);
	/**
	 * Original signature : <code>size_t gdp_buf_peek(gdp_buf_t*, void*, size_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:14</i><br>
	 * @deprecated use the safer method {@link #gdp_buf_peek(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	NativeSizeT gdp_buf_peek(Pointer buf, Pointer out, NativeSizeT sz);
	/**
	 * Original signature : <code>size_t gdp_buf_peek(gdp_buf_t*, void*, size_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:14</i>
	 */
	NativeSizeT gdp_buf_peek(PointerByReference buf, Pointer out, NativeSizeT sz);
	/**
	 * Original signature : <code>int gdp_buf_drain(gdp_buf_t*, size_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:16</i><br>
	 * @deprecated use the safer method {@link #gdp_buf_drain(com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int gdp_buf_drain(Pointer buf, NativeSizeT sz);
	/**
	 * Original signature : <code>int gdp_buf_drain(gdp_buf_t*, size_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:16</i>
	 */
	int gdp_buf_drain(PointerByReference buf, NativeSizeT sz);
	/**
	 * Original signature : <code>char* gdp_buf_getptr(gdp_buf_t*, size_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:18</i><br>
	 * @deprecated use the safer method {@link #gdp_buf_getptr(com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	Pointer gdp_buf_getptr(Pointer buf, NativeSizeT sz);
	/**
	 * Original signature : <code>char* gdp_buf_getptr(gdp_buf_t*, size_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:18</i>
	 */
	Pointer gdp_buf_getptr(PointerByReference buf, NativeSizeT sz);
	/**
	 * Original signature : <code>int gdp_buf_write(gdp_buf_t*, void*, size_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:20</i><br>
	 * @deprecated use the safer method {@link #gdp_buf_write(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSizeT)} instead
	 */
	@Deprecated 
	int gdp_buf_write(Pointer buf, Pointer in, NativeSizeT sz);
	/**
	 * Original signature : <code>int gdp_buf_write(gdp_buf_t*, void*, size_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:20</i>
	 */
	int gdp_buf_write(PointerByReference buf, Pointer in, NativeSizeT sz);
	/**
	 * Original signature : <code>int gdp_buf_copy(gdp_buf_t*, gdp_buf_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:22</i><br>
	 * @deprecated use the safer method {@link #gdp_buf_copy(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int gdp_buf_copy(Pointer ibuf, Pointer obuf);
	/**
	 * Original signature : <code>int gdp_buf_copy(gdp_buf_t*, gdp_buf_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:22</i>
	 */
	int gdp_buf_copy(PointerByReference ibuf, PointerByReference obuf);
	/**
	 * Original signature : <code>int gdp_buf_printf(gdp_buf_t*, const char*, null)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:24</i><br>
	 * @deprecated use the safer methods {@link #gdp_buf_printf(com.sun.jna.ptr.PointerByReference, java.lang.String, java.lang.Object)} and {@link #gdp_buf_printf(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int gdp_buf_printf(Pointer buf, Pointer fmt, Object... varArgs1);
	/**
	 * Original signature : <code>int gdp_buf_printf(gdp_buf_t*, const char*, null)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:24</i>
	 */
	int gdp_buf_printf(PointerByReference buf, String fmt, Object... varArgs1);
	/**
	 * Original signature : <code>int gdp_buf_printf(gdp_buf_t*, const char*, null)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:24</i>
	 */
	int gdp_buf_printf(PointerByReference buf, Pointer fmt, Object... varArgs1);
	/**
	 * Original signature : <code>void gdp_buf_dump(gdp_buf_t*, FILE*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:26</i><br>
	 * @deprecated use the safer method {@link #gdp_buf_dump(com.sun.jna.ptr.PointerByReference, org.terraswarm.gdp._IO_FILE)} instead
	 */
	@Deprecated 
	void gdp_buf_dump(Pointer buf, _IO_FILE fp);
	/**
	 * Original signature : <code>void gdp_buf_dump(gdp_buf_t*, FILE*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:26</i>
	 */
	void gdp_buf_dump(PointerByReference buf, _IO_FILE fp);
	/**
	 * Original signature : <code>void _gdp_stat_init()</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:1</i>
	 */
	void _gdp_stat_init();
	/**
	 * get next event (fills in gev structure)<br>
	 * Original signature : <code>gdp_event_t* gdp_event_next(bool)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:63</i>
	 */
	PointerByReference gdp_event_next(byte wait$);
	/**
	 * free an event (required after gdp_event_next)<br>
	 * Original signature : <code>EP_STAT gdp_event_free(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:68</i><br>
	 * @deprecated use the safer method {@link #gdp_event_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue gdp_event_free(Pointer gev);
	/**
	 * free an event (required after gdp_event_next)<br>
	 * Original signature : <code>EP_STAT gdp_event_free(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:68</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue gdp_event_free(PointerByReference gev);
	/**
	 * get the type of an event<br>
	 * Original signature : <code>int gdp_event_gettype(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:73</i><br>
	 * @deprecated use the safer method {@link #gdp_event_gettype(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int gdp_event_gettype(Pointer gev);
	/**
	 * get the type of an event<br>
	 * Original signature : <code>int gdp_event_gettype(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:73</i>
	 */
	int gdp_event_gettype(PointerByReference gev);
	/**
	 * get the GCL handle<br>
	 * Original signature : <code>gdp_gcl_t* gdp_event_getgcl(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:78</i><br>
	 * @deprecated use the safer method {@link #gdp_event_getgcl(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	PointerByReference gdp_event_getgcl(Pointer gev);
	/**
	 * get the GCL handle<br>
	 * Original signature : <code>gdp_gcl_t* gdp_event_getgcl(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:78</i>
	 */
	PointerByReference gdp_event_getgcl(PointerByReference gev);
	/**
	 * get the datum<br>
	 * Original signature : <code>gdp_datum_t* gdp_event_getdatum(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:83</i><br>
	 * @deprecated use the safer method {@link #gdp_event_getdatum(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	gdp_datum gdp_event_getdatum(Pointer gev);
	/**
	 * get the datum<br>
	 * Original signature : <code>gdp_datum_t* gdp_event_getdatum(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:83</i>
	 */
	gdp_datum gdp_event_getdatum(PointerByReference gev);
	/**
	 * initialize the library<br>
	 * Original signature : <code>EP_STAT gdp_init()</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:91</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue gdp_init();
	/**
	 * run event loop (normally run from gdp_init; never returns)<br>
	 * Original signature : <code>void* gdp_run_accept_event_loop(void*)</code><br>
	 * @param voidPtr1 unused<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:97</i>
	 */
	Pointer gdp_run_accept_event_loop(Pointer voidPtr1);
	/**
	 * create a new GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_create(gcl_name_t, gdp_gcl_t**)</code><br>
	 * @param gdp_gcl_tPtrPtr1 pointer to result GCL handle<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:103</i><br>
	 * @deprecated use the safer methods {@link #gdp_gcl_create(java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #gdp_gcl_create(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_create(Pointer gcl_name_t1, PointerByReference gdp_gcl_tPtrPtr1);
	/**
	 * create a new GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_create(gcl_name_t, gdp_gcl_t**)</code><br>
	 * @param gdp_gcl_tPtrPtr1 pointer to result GCL handle<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:103</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_create(ByteBuffer gcl_name_t1, PointerByReference gdp_gcl_tPtrPtr1);
	/**
	 * open an existing GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_open(gcl_name_t, gdp_iomode_t, gdp_gcl_t**)</code><br>
	 * @param name GCL name to open<br>
	 * @param rw read/write (append)<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:110</i><br>
	 * @deprecated use the safer methods {@link #gdp_gcl_open(java.nio.ByteBuffer, int, com.sun.jna.ptr.PointerByReference)} and {@link #gdp_gcl_open(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_open(Pointer name, int rw, PointerByReference gclh);
	/**
	 * open an existing GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_open(gcl_name_t, gdp_iomode_t, gdp_gcl_t**)</code><br>
	 * @param name GCL name to open<br>
	 * @param rw read/write (append)<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:110</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_open(ByteBuffer name, int rw, PointerByReference gclh);
	/**
	 * close an open GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_close(gdp_gcl_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:115</i><br>
	 * @deprecated use the safer method {@link #gdp_gcl_close(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_close(Pointer gclh);
	/**
	 * close an open GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_close(gdp_gcl_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:115</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_close(PointerByReference gclh);
	/**
	 * append to a writable GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_publish(gdp_gcl_t*, gdp_datum_t*)</code><br>
	 * @param gclh writable GCL handle<br>
	 * @param gdp_datum_tPtr1 message to write<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:122</i><br>
	 * @deprecated use the safer method {@link #gdp_gcl_publish(com.sun.jna.ptr.PointerByReference, org.terraswarm.gdp.gdp_datum)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_publish(Pointer gclh, gdp_datum gdp_datum_tPtr1);
	/**
	 * append to a writable GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_publish(gdp_gcl_t*, gdp_datum_t*)</code><br>
	 * @param gclh writable GCL handle<br>
	 * @param gdp_datum_tPtr1 message to write<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:122</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_publish(PointerByReference gclh, gdp_datum gdp_datum_tPtr1);
	/**
	 * read from a readable GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_read(gdp_gcl_t*, gdp_recno_t, gdp_datum_t*)</code><br>
	 * @param gclh readable GCL handle<br>
	 * @param recno GCL record number<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:129</i><br>
	 * @deprecated use the safer method {@link #gdp_gcl_read(com.sun.jna.ptr.PointerByReference, long, org.terraswarm.gdp.gdp_datum)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_read(Pointer gclh, long recno, gdp_datum datum);
	/**
	 * read from a readable GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_read(gdp_gcl_t*, gdp_recno_t, gdp_datum_t*)</code><br>
	 * @param gclh readable GCL handle<br>
	 * @param recno GCL record number<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:129</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_read(PointerByReference gclh, long recno, gdp_datum datum);
	/**
	 * Original signature : <code>EP_STAT gdp_gcl_subscribe(gdp_gcl_t*, gdp_recno_t, gdp_recno_t, gdp_gcl_sub_cbfunc_t, void*)</code><br>
	 * @param gclh readable GCL handle<br>
	 * @param start first record to retrieve<br>
	 * @param stop last record to retrieve<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:138</i><br>
	 * @deprecated use the safer method {@link #gdp_gcl_subscribe(com.sun.jna.ptr.PointerByReference, long, long, org.terraswarm.gdp.Gdp10Library.gdp_gcl_sub_cbfunc_t, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_subscribe(Pointer gclh, long start, long stop, Gdp10Library.gdp_gcl_sub_cbfunc_t cbfunc, Pointer cbarg);
	/**
	 * Original signature : <code>EP_STAT gdp_gcl_subscribe(gdp_gcl_t*, gdp_recno_t, gdp_recno_t, gdp_gcl_sub_cbfunc_t, void*)</code><br>
	 * @param gclh readable GCL handle<br>
	 * @param start first record to retrieve<br>
	 * @param stop last record to retrieve<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:138</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_subscribe(PointerByReference gclh, long start, long stop, Gdp10Library.gdp_gcl_sub_cbfunc_t cbfunc, Pointer cbarg);
	/**
	 * XXX: should this be in a more generic "getstat" function?<br>
	 * Original signature : <code>gcl_name_t* gdp_gcl_getname(const gdp_gcl_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:143</i><br>
	 * @deprecated use the safer method {@link #gdp_gcl_getname(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	Pointer gdp_gcl_getname(Pointer gclh);
	/**
	 * XXX: should this be in a more generic "getstat" function?<br>
	 * Original signature : <code>gcl_name_t* gdp_gcl_getname(const gdp_gcl_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:143</i>
	 */
	Pointer gdp_gcl_getname(PointerByReference gclh);
	/**
	 * check to see if a GCL name is valid<br>
	 * Original signature : <code>bool gdp_gcl_name_is_zero(const gcl_name_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:148</i><br>
	 * @deprecated use the safer methods {@link #gdp_gcl_name_is_zero(java.nio.ByteBuffer)} and {@link #gdp_gcl_name_is_zero(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	byte gdp_gcl_name_is_zero(Pointer gcl_name_t1);
	/**
	 * check to see if a GCL name is valid<br>
	 * Original signature : <code>bool gdp_gcl_name_is_zero(const gcl_name_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:148</i>
	 */
	byte gdp_gcl_name_is_zero(ByteBuffer gcl_name_t1);
	/**
	 * print a GCL (for debugging)<br>
	 * Original signature : <code>void gdp_gcl_print(const gdp_gcl_t*, FILE*, int, int)</code><br>
	 * @param gclh GCL handle to print<br>
	 * @param fp file to print it to<br>
	 * @param detail not used at this time<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:156</i><br>
	 * @deprecated use the safer method {@link #gdp_gcl_print(com.sun.jna.ptr.PointerByReference, org.terraswarm.gdp._IO_FILE, int, int)} instead
	 */
	@Deprecated 
	void gdp_gcl_print(Pointer gclh, _IO_FILE fp, int detail, int indent);
	/**
	 * print a GCL (for debugging)<br>
	 * Original signature : <code>void gdp_gcl_print(const gdp_gcl_t*, FILE*, int, int)</code><br>
	 * @param gclh GCL handle to print<br>
	 * @param fp file to print it to<br>
	 * @param detail not used at this time<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:156</i>
	 */
	void gdp_gcl_print(PointerByReference gclh, _IO_FILE fp, int detail, int indent);
	/**
	 * make a printable GCL name from a binary version<br>
	 * Original signature : <code>char* gdp_gcl_printable_name(const gcl_name_t, gcl_pname_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:161</i><br>
	 * @deprecated use the safer methods {@link #gdp_gcl_printable_name(java.nio.ByteBuffer, java.nio.ByteBuffer)} and {@link #gdp_gcl_printable_name(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer gdp_gcl_printable_name(Pointer internal, Pointer external);
	/**
	 * make a printable GCL name from a binary version<br>
	 * Original signature : <code>char* gdp_gcl_printable_name(const gcl_name_t, gcl_pname_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:161</i>
	 */
	Pointer gdp_gcl_printable_name(ByteBuffer internal, ByteBuffer external);
	/**
	 * make a binary GCL name from a printable version<br>
	 * Original signature : <code>EP_STAT gdp_gcl_internal_name(const gcl_pname_t, gcl_name_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:166</i><br>
	 * @deprecated use the safer methods {@link #gdp_gcl_internal_name(java.nio.ByteBuffer, java.nio.ByteBuffer)} and {@link #gdp_gcl_internal_name(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_internal_name(Pointer external, Pointer internal);
	/**
	 * make a binary GCL name from a printable version<br>
	 * Original signature : <code>EP_STAT gdp_gcl_internal_name(const gcl_pname_t, gcl_name_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:166</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_internal_name(ByteBuffer external, ByteBuffer internal);
	/**
	 * parse a (possibly human-friendly) GCL name<br>
	 * Original signature : <code>EP_STAT gdp_gcl_parse_name(const char*, gcl_name_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:171</i><br>
	 * @deprecated use the safer methods {@link #gdp_gcl_parse_name(java.lang.String, java.nio.ByteBuffer)} and {@link #gdp_gcl_parse_name(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_parse_name(Pointer ext, Pointer internal);
	/**
	 * parse a (possibly human-friendly) GCL name<br>
	 * Original signature : <code>EP_STAT gdp_gcl_parse_name(const char*, gcl_name_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:171</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue gdp_gcl_parse_name(String ext, ByteBuffer internal);
	/**
	 * allocate a new message<br>
	 * Original signature : <code>gdp_datum_t* gdp_datum_new()</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:176</i>
	 */
	gdp_datum gdp_datum_new();
	/**
	 * free a message<br>
	 * Original signature : <code>void gdp_datum_free(gdp_datum_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:181</i>
	 */
	void gdp_datum_free(gdp_datum gdp_datum_tPtr1);
	/**
	 * print a message (for debugging)<br>
	 * Original signature : <code>void gdp_datum_print(const gdp_datum_t*, FILE*)</code><br>
	 * @param datum message to print<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:187</i>
	 */
	void gdp_datum_print(gdp_datum datum, _IO_FILE fp);
	/**
	 * get the record number from a datum<br>
	 * Original signature : <code>gdp_recno_t gdp_datum_getrecno(const gdp_datum_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:192</i>
	 */
	long gdp_datum_getrecno(gdp_datum datum);
	/**
	 * set a record number in a datum<br>
	 * Original signature : <code>void gdp_datum_setrecno(gdp_datum_t*, gdp_recno_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:197</i>
	 */
	void gdp_datum_setrecno(gdp_datum datum, long recno);
	/**
	 * get the timestamp from a datum<br>
	 * Original signature : <code>void gdp_datum_getts(const gdp_datum_t*, EP_TIME_SPEC*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:202</i>
	 */
	void gdp_datum_getts(gdp_datum datum, EP_TIME_SPEC ts);
	/**
	 * set the timestamp in a datum<br>
	 * Original signature : <code>void gdp_datum_setts(gdp_datum_t*, EP_TIME_SPEC*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:207</i>
	 */
	void gdp_datum_setts(gdp_datum datum, EP_TIME_SPEC ts);
	/**
	 * get the data length from a datum<br>
	 * Original signature : <code>size_t gdp_datum_getdlen(const gdp_datum_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:212</i>
	 */
	NativeSizeT gdp_datum_getdlen(gdp_datum datum);
	/**
	 * get the data buffer from a datum<br>
	 * Original signature : <code>gdp_buf_t* gdp_datum_getdbuf(const gdp_datum_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:217</i>
	 */
	PointerByReference gdp_datum_getdbuf(gdp_datum datum);
	/**
	 * support functions<br>
	 * Original signature : <code>int ep_dbg_flaglevel(EP_DBG*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_dbg.h:20</i>
	 */
	int ep_dbg_flaglevel(EP_DBG f);
	/**
	 * initialization<br>
	 * Original signature : <code>void ep_dbg_init()</code><br>
	 * <i>native declaration : src/gdp/ep/ep_dbg.h:25</i>
	 */
	void ep_dbg_init();
	/**
	 * setting/fetching debug output file<br>
	 * Original signature : <code>void ep_dbg_setfile(FILE*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_dbg.h:30</i>
	 */
	void ep_dbg_setfile(_IO_FILE fp);
	/**
	 * Original signature : <code>FILE* ep_dbg_getfile()</code><br>
	 * <i>native declaration : src/gdp/ep/ep_dbg.h:32</i>
	 */
	_IO_FILE ep_dbg_getfile();
	/**
	 * setting debug flags<br>
	 * Original signature : <code>void ep_dbg_set(const char*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_dbg.h:37</i><br>
	 * @deprecated use the safer methods {@link #ep_dbg_set(java.lang.String)} and {@link #ep_dbg_set(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ep_dbg_set(Pointer s);
	/**
	 * setting debug flags<br>
	 * Original signature : <code>void ep_dbg_set(const char*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_dbg.h:37</i>
	 */
	void ep_dbg_set(String s);
	/**
	 * Original signature : <code>void ep_dbg_setto(const char*, int)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_dbg.h:39</i><br>
	 * @deprecated use the safer methods {@link #ep_dbg_setto(java.lang.String, int)} and {@link #ep_dbg_setto(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void ep_dbg_setto(Pointer pat, int lev);
	/**
	 * Original signature : <code>void ep_dbg_setto(const char*, int)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_dbg.h:39</i>
	 */
	void ep_dbg_setto(String pat, int lev);
	/**
	 * Original signature : <code>int ep_dbg_printf(const char*, null)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_dbg.h:41</i><br>
	 * @deprecated use the safer methods {@link #ep_dbg_printf(java.lang.String, java.lang.Object)} and {@link #ep_dbg_printf(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int ep_dbg_printf(Pointer fmt, Object... varArgs1);
	/**
	 * Original signature : <code>int ep_dbg_printf(const char*, null)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_dbg.h:41</i>
	 */
	int ep_dbg_printf(String fmt, Object... varArgs1);
	/**
	 * crackarg parsing<br>
	 * Original signature : <code>EP_STAT epCavDebug(const char*, void*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_dbg.h:46</i><br>
	 * @deprecated use the safer methods {@link #epCavDebug(java.lang.String, com.sun.jna.Pointer)} and {@link #epCavDebug(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	org.terraswarm.gdp.EP_STAT.ByValue epCavDebug(Pointer vp, Pointer rp);
	/**
	 * crackarg parsing<br>
	 * Original signature : <code>EP_STAT epCavDebug(const char*, void*)</code><br>
	 * <i>native declaration : src/gdp/ep/ep_dbg.h:46</i>
	 */
	org.terraswarm.gdp.EP_STAT.ByValue epCavDebug(String vp, Pointer rp);
	/**
	 * For communication from `getopt' to the caller.<br>
	 * When `getopt' finds an option that takes an argument,<br>
	 * the argument value is returned here.<br>
	 * Also, when `ordering' is RETURN_IN_ORDER,<br>
	 * each non-option ARGV-element is returned here.
	 */
	// public static final GlobalPointerType<ByteByReference > optarg = new GlobalPointerType<ByteByReference >(Gdp10Library.JNA_NATIVE_LIB, ByteByReference.class, "optarg");
	/**
	 * Index in ARGV of the next element to be scanned.<br>
	 * This is used for communication to and from the caller<br>
	 * and for communication between successive calls to `getopt'.<br>
	 * On entry to `getopt', zero means this is the first call; initialize.<br>
	 * When `getopt' returns -1, this is the index of the first of the<br>
	 * non-option elements that the caller should itself scan.<br>
	 * Otherwise, `optind' communicates from one call to the next<br>
	 * how much of ARGV has been scanned so far.
	 */
	// public static final GlobalInt optind = new GlobalInt(Gdp10Library.JNA_NATIVE_LIB, "optind");
	/**
	 * Callers store zero here to inhibit the error message `getopt' prints<br>
	 * for unrecognized options.
	 */
	// public static final GlobalInt opterr = new GlobalInt(Gdp10Library.JNA_NATIVE_LIB, "opterr");
	/** Set to an option character which was unrecognized. */
	// public static final GlobalInt optopt = new GlobalInt(Gdp10Library.JNA_NATIVE_LIB, "optopt");
	/**
	 * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/libio.h:50</i><br>
	 * _IO_2_1_stdin_
	 */
	/**
	 * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/libio.h:51</i><br>
	 * _IO_2_1_stdout_
	 */
	/**
	 * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/libio.h:52</i><br>
	 * _IO_2_1_stderr_
	 */
	/**
	 * Standard streams.<br>
	 * Standard input stream.
	 */
	// public static final GlobalStruct<_IO_FILE > stdin = new GlobalStruct<_IO_FILE >(Gdp10Library.JNA_NATIVE_LIB, _IO_FILE.class, "stdin");
	/** Standard output stream. */
	// public static final GlobalStruct<_IO_FILE > stdout = new GlobalStruct<_IO_FILE >(Gdp10Library.JNA_NATIVE_LIB, _IO_FILE.class, "stdout");
	/** Standard error output stream. */
	// public static final GlobalStruct<_IO_FILE > stderr = new GlobalStruct<_IO_FILE >(Gdp10Library.JNA_NATIVE_LIB, _IO_FILE.class, "stderr");
	/** sys_errlist and sys_nerr are deprecated.  Use strerror instead. */
	// public static final GlobalInt sys_nerr = new GlobalInt(Gdp10Library.JNA_NATIVE_LIB, "sys_nerr");
	/** current generation */
	// public static final GlobalInt __EpDbgCurGen = new GlobalInt(Gdp10Library.JNA_NATIVE_LIB, "__EpDbgCurGen");
	public static class EP_STAT_HANDLER_FUNCP extends PointerType {
		public EP_STAT_HANDLER_FUNCP(Pointer address) {
			super(address);
		}
		public EP_STAT_HANDLER_FUNCP() {
			super();
		}
	};
	public static class gdp_gcl_t extends PointerType {
		public gdp_gcl_t(Pointer address) {
			super(address);
		}
		public gdp_gcl_t() {
			super();
		}
	};
	public static class mmsghdr extends PointerType {
		public mmsghdr(Pointer address) {
			super(address);
		}
		public mmsghdr() {
			super();
		}
	};
	public static class gdp_buf_t extends PointerType {
		public gdp_buf_t(Pointer address) {
			super(address);
		}
		public gdp_buf_t() {
			super();
		}
	};
	public static class __jmp_buf_tag extends PointerType {
		public __jmp_buf_tag(Pointer address) {
			super(address);
		}
		public __jmp_buf_tag() {
			super();
		}
	};
	public static class gdp_event_t extends PointerType {
		public gdp_event_t(Pointer address) {
			super(address);
		}
		public gdp_event_t() {
			super();
		}
	};
	public static class _IO_FILE_plus extends PointerType {
		public _IO_FILE_plus(Pointer address) {
			super(address);
		}
		public _IO_FILE_plus() {
			super();
		}
	};
	public static class EP_STAT_HANDLE extends PointerType {
		public EP_STAT_HANDLE(Pointer address) {
			super(address);
		}
		public EP_STAT_HANDLE() {
			super();
		}
	};
	public static class _IO_lock_t extends PointerType {
		public _IO_lock_t(Pointer address) {
			super(address);
		}
		public _IO_lock_t() {
			super();
		}
	};
	public static class timespec extends PointerType {
		public timespec(Pointer address) {
			super(address);
		}
		public timespec() {
			super();
		}
	};
	public static class in_addr extends PointerType {
		public in_addr(Pointer address) {
			super(address);
		}
		public in_addr() {
			super();
		}
	};
}
