diff --git a/apps/writer-test.c b/apps/writer-test.c
index fe7b8e5..3866c2f 100644
--- a/apps/writer-test.c
+++ b/apps/writer-test.c
@@ -89,6 +89,8 @@ main(int argc, char **argv)
 		fprintf(stdout, "Got input %s%s%s\n", EpChar->lquote, buf,
 				EpChar->rquote);
 		gdp_buf_write(gdp_datum_getbuf(datum), buf, strlen(buf));
+                printf("About to call gdp_gcl_publish()");
+		gdp_datum_print(datum, stdout);
 		estat = gdp_gcl_publish(gclh, datum);
 		EP_STAT_CHECK(estat, goto fail1);
 		gdp_datum_print(datum, stdout);
diff --git a/gdp/Makefile b/gdp/Makefile
index 10e3643..27ece05 100644
--- a/gdp/Makefile
+++ b/gdp/Makefile
@@ -53,6 +53,8 @@ libgdp.a: ${OBJS}
 libgdp.so.${GDPLIBVER}: ${OBJS}
 	${CC} ${SHARED} -o $@ ${OBJS} ${LDFLAGS}
 	${MV} $@ ${LIBDIR}
+	cp ${LIBDIR}/$@ ${LIBDIR}/libgdp.${GDPLIBVER}.dylib
+	cp ${LIBDIR}/$@ ${LIBDIR}/libgdp.${GDPLIBVER}.so
 
 ${OBJS}: ${HFILES}
 
diff --git a/gdp/gdp_api.c b/gdp/gdp_api.c
index 8a29304..786299e 100644
--- a/gdp/gdp_api.c
+++ b/gdp/gdp_api.c
@@ -218,6 +218,110 @@ gdp_init(void)
 }
 
 
+void
+ep_pprint(FILE *fp,
+	const char *fmt,
+	int argc,
+	const char *const *argv)
+{
+	const char *ap;
+	char c;
+	int i;
+
+	while ((c = *fmt++) != '\0')
+	{
+		// if it's not a percent, just copy through
+		if (c != '%')
+		{
+			putc(c, fp);
+			continue;
+		}
+
+		// if it is, look at the next byte
+		if ((c = *fmt++) == '\0')
+		{
+			// hack for percent at end of string
+			putc('%', fp);
+			break;
+		}
+
+		if (!isdigit(c))
+		{
+			// bogus character, unless %%
+			putc('%', fp);
+			if (c != '%')
+				putc(c, fp);
+			continue;
+		}
+
+		// interpolate Nth argument
+		i = c - '0';
+		if (i <= 0 || i > argc)
+			ap = "(unknown)";
+		else if (argv[i - 1] == NULL)
+			ap = "(null)";
+		else
+			ap = argv[i - 1];
+
+		while ((c = *ap++) != '\0')
+			putc(c, fp);
+	}
+}
+
+#define MAXARGS		10
+
+void
+ep_stat_print(EP_STAT stat,
+	const char *defmsg,
+	FILE *fp,
+	...)
+{
+	va_list av;
+
+	va_start(av, fp);
+	ep_stat_vprint(stat, defmsg, fp, av);
+	va_end(av);
+}
+
+void
+ep_stat_vprint(EP_STAT stat,
+	const char *defmsg,
+	FILE *fp,
+	va_list av)
+{
+	int i;
+	const char *ap;
+	const char *arglist[MAXARGS];
+	char sbuf[100];
+
+	i = 0;
+	while (i < MAXARGS && (ap = va_arg(av, const char *)) != NULL)
+	{
+		arglist[i++] = ap;
+	}
+
+	fprintf(fp, "Status %s: ",
+			ep_stat_tostr(stat, sbuf, sizeof sbuf));
+
+	if (defmsg != NULL)
+		ep_pprint(fp, defmsg, i, arglist);
+	else if (EP_STAT_IS_SAME(stat, EP_STAT_OK))
+	{
+		fprintf(fp, "EP_ST_OK");
+	}
+	else
+	{
+		int j;
+
+		fprintf(fp, "Unknown stat message, args = ");
+		if (i <= 0)
+			fprintf(fp, " <none>");
+		for (j = 0; j < i; j++)
+			fprintf(fp, " %s", arglist[j]);
+	}
+	putc('\n', fp);
+}
+
 /*
 **	GDP_GCL_CREATE --- create a new GCL
 **
@@ -234,21 +338,32 @@ gdp_gcl_create(gcl_name_t gcl_name,
 
 	// allocate the memory to hold the gcl_handle
 	//		Note that ep_mem_* always returns, hence no test here
+        ep_dbg_cprintf(Dbg, 10, "gdp_gcl_create() start\n");
+        ep_dbg_cprintf(Dbg, 10, "gdp_gcl_create(): about to call gdp_gcl_newhandle()\n");
 	estat = _gdp_gcl_newhandle(gcl_name, &gclh);
 	EP_STAT_CHECK(estat, goto fail0);
+        ep_stat_print(estat, "gdp_gcl_create() estat is", stdout);
 
-	if (gcl_name == NULL || gdp_gcl_name_is_zero(gcl_name))
+	if (gcl_name == NULL || gdp_gcl_name_is_zero(gcl_name)) {
+                ep_dbg_cprintf(Dbg, 10, "gdp_gcl_create(): about to call gdp_gcl_newname()\n");
 		_gdp_gcl_newname(gclh->gcl_name);
-
+                ep_stat_print(estat, "gdp_gcl_create() estat is", stdout);
+        }
+        ep_dbg_cprintf(Dbg, 10, "gdp_gcl_create(): about to call gdp_gcl_reqnew()\n");
 	estat = _gdp_req_new(GDP_CMD_CREATE, gclh, _GdpChannel, 0, &req);
+        ep_stat_print(estat, "gdp_gcl_create() estat is", stdout);
 	EP_STAT_CHECK(estat, goto fail1);
 
+        ep_dbg_cprintf(Dbg, 10, "gdp_gcl_create(): about to call gdp_gcl_invoke()\n");
 	estat = _gdp_invoke(req);
+        ep_stat_print(estat, "gdp_gcl_create() estat is", stdout);
 	EP_STAT_CHECK(estat, goto fail1);
 
 	// success
+        ep_dbg_cprintf(Dbg, 10, "gdp_gcl_create(): success!\n");
 	_gdp_req_free(req);
 	*pgclh = gclh;
+        ep_stat_print(estat, "gdp_gcl_create() estat is", stdout);
 	return estat;
 
 fail1:
@@ -266,6 +381,7 @@ fail0:
 				ep_stat_tostr(estat, ebuf, sizeof ebuf));
 	}
 	*pgclh = NULL;
+        ep_stat_print(estat, "gdp_gcl_create() estat is", stdout);
 	return estat;
 }
 
