<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="Accessor2" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.0,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="When we have a capability to update an accessor, that should be done here.&#10;The point of this test is to test importing the accessor, and currently that&#10;test can only be performed by manually re-importing it and reconnecting it.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{-5.0, 50.0}">
        </property>
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="2">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{55.0, 15.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={2, 22, 1424, 734}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1190, 624]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.2299465240641712">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{478.695652173913, 236.78598845108698}">
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Import the accessor from: /ptII/org/terraswarm/kernel/test/auto/accessors">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{130.0, -15.0}">
        </property>
    </property>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 155.0]">
        </property>
    </entity>
    <entity name="Const2" class="ptolemy.actor.lib.Const">
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[175.0, 155.0]">
        </property>
    </entity>
    <entity name="Test" class="ptolemy.actor.lib.Test">
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{}">
        </property>
        <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[500.0, 155.0]">
        </property>
    </entity>
    <entity name="Test2" class="ptolemy.actor.lib.Test">
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{}">
        </property>
        <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[485.0, 225.0]">
        </property>
    </entity>
    <entity name="Accessor" class="org.terraswarm.accessor.jjs.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="&#10;    // &#10;	function fire() {&#10;	  var value = get(typelessInput);&#10;	  send(value, typelessOutput);&#10;	  value = get(quasiTypelessInput);&#10;	  send(value, quasiTypelessOutput);&#10;	}&#10;	// &#10;  ">
        </property>
        <property name="accessorSource" class="ptolemy.kernel.util.StringAttribute" value="/ptII/org/terraswarm/kernel/test/auto/accessors/Accessor2.xml">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&#10;    &#10;This is a test accessor used to test Import--&gt;Accessor.&#10;It checks that inputs and outputs without types are handled correctly.&#10;	&#10;  ">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="0.1">
            </property>
            <property name="error (port)" class="ptolemy.kernel.util.StringAttribute" value="The error message if an error occurs. If this port is not connected and an error occurs, then an exception is thrown instead.">
            </property>
            <property name="typelessInput (port)" class="ptolemy.kernel.util.StringAttribute" value="Input with neither a type nor a value.">
            </property>
            <property name="quasiTypelessInput (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="Input without a type, but with a value.">
            </property>
            <property name="typelessOutput (port)" class="ptolemy.kernel.util.StringAttribute" value="Output without a type.">
            </property>
            <property name="quasiTypelessOutput (port)" class="ptolemy.kernel.util.StringAttribute" value="Output for quasiTypelessInput.">
            </property>
        </property>
        <property name="quasiTypelessInput" class="ptolemy.actor.parameters.PortParameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[310.0, 165.0]">
        </property>
        <port name="typelessInput" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="">
            </property>
        </port>
        <port name="quasiTypelessInput" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="typelessOutput" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="">
            </property>
        </port>
        <port name="quasiTypelessOutput" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="">
            </property>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.basic.layout.kieler.LayoutHint" value="{ { head={id=&quot;DiscreteClock.output&quot;,x=55.0,y=285.0}, tail={id=&quot;Const2.trigger&quot;,x=175.0,y=285.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{245.0, 160.0}">
        </vertex>
    </relation>
    <link port="DiscreteClock.output" relation="relation"/>
    <link port="Const2.output" relation="relation5"/>
    <link port="Const2.trigger" relation="relation"/>
    <link port="Test.input" relation="relation2"/>
    <link port="Test2.input" relation="relation4"/>
    <link port="Accessor.typelessInput" relation="relation5"/>
    <link port="Accessor.quasiTypelessInput" relation="relation5"/>
    <link port="Accessor.typelessOutput" relation="relation2"/>
    <link port="Accessor.quasiTypelessOutput" relation="relation4"/>
</entity>
