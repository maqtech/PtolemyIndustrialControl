<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="WebSocketClient" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="3.0">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[85.0, 55.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="A simple demo for WebSocketClient accesor. The WebSocketClient can be imported from &#10;http://www.terraswarm.org/accessors/.&#10;&#10;NOTE: This client assumes that there is a web socket server running on the local host.&#10;There are two alternative implementations of the server.  A Ptolemy II server is provided&#10;as a model called WebSocketServer in this same directory by clicking on the link below:">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-20.0, 225.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Hokeun Kim">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[20.0, 525.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={282, 137, 1089, 603}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[875, 514]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{298.81644492574264, 200.79610148514848}">
    </property>
    <property name="Sender" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="WebSocketServer Model">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-5.0, 345.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/terraswarm/accessor/demo/WebSocketClient/WebSocketServer.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_blank">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{340, 390}">
            </property>
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Alternatively, there is also a Node.js server, which you can start with:&#10;     &gt; node NodeServer.js&#10;before running this demo. NodeServer.js is in the same demo directory.  You may need&#10;to install the 'ws' module using something like:&#10;     &gt; sudo npm install ws&#10;&#10;The reply messages from the server appear in the display MessageFromServer, while the&#10;current status of the connection appears in the console.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-35.0, 380.0]">
        </property>
    </property>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="1.0">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[80.0, 130.0]">
        </property>
    </entity>
    <entity name="MessageFromServer" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={185, 32, 535, 391}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[535, 342]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[610.0, 140.0]">
        </property>
    </entity>
    <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
        <doc>Create a sequence of tokens with increasing value</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[185.0, 140.0]">
        </property>
    </entity>
    <entity name="RecordAssembler" class="ptolemy.actor.lib.RecordAssembler">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[285.0, 120.0]">
        </property>
        <port name="messageID" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="WebSocketClient" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor sends and/or receives messages from a web socket at&#10; *  the specified host and port. In `initialize()`, it&#10; *  begins connecting to the web socket server.&#10; *  Once the connection is established, a `true` boolean is sent to&#10; *  the `connected` output.&#10; *  `'ready'` is set to `true`. If a connection&#10; *  was not established during `initiazlize()`, this&#10; *  accessor will not try to connect again.&#10; *&#10; *  Whenever an input is received on the `'toSend'`&#10; *  input, the message is sent to the socket.&#10; *&#10; *  Whenever a message is received from the socket, that message is&#10; *  produced on the `'received'` output.&#10; *&#10; *  When `wrapup()` is invoked, this accessor closes the&#10; *  connection.&#10; *&#10; *  The data can be any type that has a JSON representation.&#10; *  For incomming messages, this accessor assumes that the message is&#10; *  a string in UTF-8 that encodes a JSON object.&lt;br/&gt;&#10; *  A copy of this accessor is also in the modules directory, which other accessors can use as &#10; *  a generic implementation of a web socket. This accessor-module exports a sendToWebSocket(data) function &#10; *  which other accessors can use, for example:&#10; *  &lt;pre&gt;var wsClient = require('webSocketClient');&#10; *       wsClient.sendToWebSocket(JSONDataToSend);&#10; *  &lt;/pre&gt; &#10; *&#10; *  This accessor-module also exports its inputHandler function on&#10; *  'toSend' which other accessors can override, for example:n&#10; *  &lt;pre&gt; var wsClient = require('webSocketClient');&#10; *       wsClient.toSendInputHandler = function() {...}&#10; *  &lt;/pre&gt;&#10; *  See `RosPublisher.js` for an example.&#10; *  This accessor requires the 'webSocket' module.&#10; *&#10; *  @accessor WebSocketClient&#10; *  @parameter {string} server The IP address or domain name of server. Defaults to 'localhost'.&#10; *  @parameter {int} port The port that the web socket listens to. Defaults to 8080.&#10; *  @parameter {int} numberOfRetries The number of times to retry if a connection fails. Defaults to 5.&#10; *  @parameter {int} timeBetweenRetries The time between retries in milliseconds. Defaults to 100.&#10; *  @parameter {boolean} reconnectOnClose The option of whether or not to reconnect when disconnected. &#10; *  @input {JSON} toSend The data to be sent over the socket.&#10; *  @output {boolean} connected Output `true` on connected and `false` on disconnected.&#10; *  @output {JSON} received The data received from the web socket server.&#10; *  @author Hokeun Kim, Marcus Pan, Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;var WebSocket = require('webSocket');&#10;var client = null;&#10;var inputHandle = null;&#10;&#10;/** Set up the accessor by defining the parameters, inputs, and outputs. */&#10;exports.setup = function() {&#10;  accessor.parameter('server', {&#10;    type: 'string',&#10;    value: 'localhost',&#10;  });&#10;  accessor.parameter('port', {&#10;    type: 'int',&#10;    value: 8080,&#10;  });&#10;  accessor.parameter('numberOfRetries', {&#10;    type: 'int',&#10;    value: 5,&#10;  });&#10;  accessor.parameter('timeBetweenRetries', {&#10;    type: 'int',&#10;    value: 100,&#10;  });&#10;  accessor.parameter('reconnectOnClose', {&#10;    type: 'boolean',&#10;    value: true,&#10;  });&#10;  accessor.input('toSend', {&#10;    type: 'JSON', &#10;    description: 'The data to be send to the web socket server, in JSON format.'&#10;  });&#10;  accessor.output('connected', {&#10;    type: 'boolean',&#10;  });&#10;  accessor.output('received');&#10;}&#10;&#10;/** Initializes accessor by attaching functions to inputs. */&#10;exports.initialize = function() {&#10;  client = new WebSocket.Client({&#10;    'host':getParameter('server'),&#10;    'port':getParameter('port'),&#10;    'numberOfRetries':getParameter('numberOfRetries'),&#10;    'timeBetweenRetries':getParameter('timeBetweenRetries')&#10;  });&#10;  client.on('open', onOpen);&#10;  client.on('message', onMessage);&#10;  client.on('close', onClose);&#10;  client.on('error', function(message) {&#10;    error(message)&#10;  });&#10;  //only execute once, and not when trying to reconnect. &#10;  if (inputHandle == null) { &#10;    inputHandle = addInputHandler('toSend', exports.toSendInputHandler);&#10;  }&#10;} &#10;&#10;/** Handles input on 'toSend'. */&#10;exports.toSendInputHandler = function() {&#10;  exports.sendToWebSocket(get('toSend'));&#10;}&#10;&#10;/** Sends JSON data to the web socket. */&#10;exports.sendToWebSocket = function(data) {&#10;  client.send(data);&#10;  console.log(&quot;Sending to web socket: &quot; + JSON.stringify(data));&#10;}&#10;&#10;/** Executes once  web socket establishes a connection.&#10; *   Sets 'connected' output to true.&#10; */&#10;function onOpen() {&#10;  console.log('Status: Connection established');&#10;  send('connected', true);&#10;}&#10;  &#10;/** Executes once web socket closes.&lt;br&gt;&#10; *  Sets 'connected' output to false.&lt;br&gt;&#10; *  Sets reconect interval.&lt;br&gt;&#10; */&#10;function onClose(message) {&#10;  console.log('Status: Connection closed: ' + message);&#10;  if (getParameter('reconnectOnClose')) {&#10;    exports.initialize();&#10;  }&#10;}&#10;  &#10;/** Outputs message received from web socket. */&#10;function onMessage(message) {&#10;  send('received', message);&#10;}&#10;  &#10;/** Closes web socket connection. */&#10;exports.wrapup = function() {&#10;  if (inputHandle != null) {&#10;    removeInputHandler(inputHandle, 'toSend');&#10;  }&#10;  if (client) {&#10;    client.removeAllListeners('open');&#10;    client.removeAllListeners('message');&#10;    client.removeAllListeners('close');&#10;    client.close();&#10;  }&#10;}&#10;&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/WebSocketClient.js">
        </property>
        <property name="server" class="ptolemy.data.expr.StringParameter" value="localhost">
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="8080">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="100">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[430.0, 140.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="toSend" class="ptolemy.kernel.util.StringAttribute" value="The data to be send to the web socket server, in JSON format.">
            </property>
        </property>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
    </entity>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="DiscreteClock.output" relation="relation2"/>
    <link port="MessageFromServer.input" relation="relation4"/>
    <link port="Ramp.output" relation="relation3"/>
    <link port="Ramp.trigger" relation="relation2"/>
    <link port="RecordAssembler.output" relation="relation"/>
    <link port="RecordAssembler.messageID" relation="relation3"/>
    <link port="WebSocketClient.toSend" relation="relation"/>
    <link port="WebSocketClient.received" relation="relation4"/>
</entity>
