<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="REST" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 22, 934, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{340.0, 252.0}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 30.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Access a normal web page, and upon receiving&#10;the response, stop execution of the model.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[130.0, 5.0]">
        </property>
    </property>
    <entity name="REST" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Accessor for RESTful interfaces.&#10; *  Upon receipt of any input, this accessor will issue an HTTP request&#10; *  specified by the inputs.&#10; *  The ```url``` input is either a URL (a string) or a JSON object with&#10; *  the following optional fields:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; headers: An object containing request headers. By default this is an empty object.&#10; *       Items may have a value that is an array of values, for headers with more than one value.&#10; *  &lt;li&gt; host: A string giving the domain name or IP address of the server to issue the request to.&#10; *       This defaults to 'localhost'.&lt;/li&gt;&#10; *  &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around in a pool&#10; *       to be used by other requests in the future. This defaults to false.&#10; *  &lt;li&gt; method: A string specifying the HTTP request method. This defaults to 'GET', but can&#10; *       also be 'PUT', 'POST', 'DELETE', etc.&#10; *  &lt;li&gt; path: Request path as a string (see command below). This defaults to '/'.&#10; *  &lt;li&gt; port: Port of remote server. Defaults to 80.&#10; *  &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10; *  &lt;li&gt; query: A query string to be appended to the path, such as '?page=12'. See arguments below.&#10; *  &lt;/ul&gt;&#10; *  The path may optionally be specified by the separate input ```command```, which accepts&#10; *  any string, and the query may optionally be given by the ```arguments``` input, which&#10; *  accepts any JSON object.  The fields in that object will be encoded into a query string&#10; *  to be sent along with the request.&#10; *&#10; *  The output response will be a string if the MIME type of the accessed page&#10; *  begins with &quot;text&quot;. If the MIME type begins with anything else, then the&#10; *  binary data will be produced. It is up to the host implementation to ensure&#10; *  that the data is given in some form that is usable by downstream accessors&#10; *  or actors.&#10; *&#10; *  If the same command is to be executed repeatedly, then a trigger input&#10; *  may be provided to trigger invocation of the command&#10; * &#10; *  @accessor REST&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input {JSON} url The url for the command or an object specifying options.&#10; *  @input {string} command The command.&#10; *  @input {JSON} arguments Arguments to the command.&#10; *  @input trigger An input to trigger the command.&#10; *  @output {string} response The server's response.&#10; *  @output {int} status The status code of the response.&#10; *  @output {JSON} headers The headers sent with the response.&#10; */&#10;&#10;var httpClient = require('httpClient');&#10;var querystring = require('querystring');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;    input('url', {'value':''});&#10;    input('command', {'type':'string', 'value':''});&#10;    input('arguments', {'value':''});&#10;    input('trigger');&#10;    output('response');&#10;    output('status', {'type':'int'});&#10;    output('headers');&#10;};&#10;&#10;/** Build the path from the command and arguments.&#10; *  This default implementation returns 'command?args', where&#10; *  args is an encoding of the arguments input for embedding in a URL.&#10; *  For example, if the arguments input is the object&#10; *     ```{ foo: 'bar', baz: ['qux', 'quux'], corge: '' }```&#10; *  then the returned string will be&#10; *     ```command?foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=```&#10; *  Derived accessors may override this function to customize&#10; *  the interaction.&#10; */&#10;exports.encodePath = function() {&#10;    var command = get('command');&#10;    var encodedArgs = querystring.stringify(get('arguments'));&#10;    return command + '?' + encodedArgs;&#10;}&#10;&#10;/** Issue the command based on the current value of the inputs.&#10; *  This constructs a path using encodePath and combines it with the&#10; *  url input to construct the full command.&#10; *  @param callback The callback function that will be called with the&#10; *   response as an argument (an instance of IncomingMessage, defined in&#10; *   the httpClient module).&#10; */&#10;exports.issueCommand = function(callback) {&#10;    var encodedPath = this.encodePath();&#10;    var url = get('url');&#10;    var command = url;&#10;    if (typeof url === 'string') {&#10;        command = url + '/' + encodedPath;&#10;    } else {&#10;        command.path = encodedPath;&#10;    }&#10;    var request = httpClient.request(command, callback);&#10;    request.on('error', function(message) {&#10;        if (!message) {&#10;            message = 'Request failed. No further information.';&#10;        }&#10;        error(message);&#10;    });&#10;    request.end();&#10;}&#10;&#10;/** Handle the response from the RESTful service. The argument&#10; *  is expected to be be an instance of IncomingMessage, defined&#10; *  in the httpClient module. This base class extracts the body&#10; *  field of the message, if there is one, and produces that on&#10; *  the 'response' output, and otherwise just produces the message&#10; *  on the output. If the argument is null or undefined, then do&#10; *  nothing.&#10; *  @param message An incoming message.&#10; */&#10;exports.handleResponse = function(message) {&#10;    if (message !== null &amp;&amp; message !== undefined) {&#10;        if (message.body) {&#10;            send('response', message.body);&#10;        } else {&#10;            send('response', message);&#10;        }&#10;        if (message.status) {&#10;            send('status', message.status);&#10;        }&#10;        if (message.headers) {&#10;            send('headers', message.headers);&#10;        }&#10;    }&#10;}&#10;&#10;var handle;&#10;// FIXME: Need a timeout.&#10;&#10;/** Register the input handler.  */&#10;exports.initialize = function () {&#10;    // Upon receiving _any_ input, issue a command.&#10;	handle = addInputHandler(null, this.issueCommand, this.handleResponse);&#10;}&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    removeInputHandler(handle);&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/net/REST.js">
        </property>
        <property name="url" class="ptolemy.actor.parameters.PortParameter" value="&quot;http://ptolemy.eecs.berkeley.edu&quot;">
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="&quot;/publications/&quot;">
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="&quot;&quot;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{150.0, 140.0}">
        </property>
        <port name="url" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{35.0, 160.0}">
        </property>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={470, 346, 872, 453}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[872, 409]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{275.0, 85.0}">
        </property>
    </entity>
    <entity name="Stop" class="ptolemy.actor.lib.Stop">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[480.0, 130.0]">
        </property>
    </entity>
    <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{355.0, 130.0}">
        </property>
    </entity>
    <entity name="Const" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{295.0, 130.0}">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.basic.layout.kieler.LayoutHint" value="{ { head={id=&quot;REST.trigger&quot;,x=150.0,y=140.0}, tail={id=&quot;SingleEvent.output&quot;,x=35.0,y=160.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{235.0, 130.0}">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.basic.layout.kieler.LayoutHint" value="{ { head={id=&quot;REST.response&quot;,x=150.0,y=140.0}, tail={id=&quot;relation4.vertex1&quot;,x=235.0,y=130.0}, points={} },{ head={id=&quot;Display.input&quot;,x=275.0,y=85.0}, tail={id=&quot;relation4.vertex1&quot;,x=235.0,y=130.0}, points={235.0,85.0} },{ head={id=&quot;relation4.vertex1&quot;,x=235.0,y=130.0}, tail={id=&quot;Const.trigger&quot;,x=295.0,y=130.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.basic.layout.kieler.LayoutHint" value="{ { head={id=&quot;Const.output&quot;,x=295.0,y=130.0}, tail={id=&quot;MicrostepDelay.input&quot;,x=355.0,y=130.0}, points={} } }">
        </property>
    </relation>
    <link port="REST.response" relation="relation4"/>
    <link port="REST.trigger" relation="relation"/>
    <link port="SingleEvent.output" relation="relation"/>
    <link port="Display.input" relation="relation4"/>
    <link port="Stop.input" relation="relation3"/>
    <link port="MicrostepDelay.input" relation="relation2"/>
    <link port="MicrostepDelay.output" relation="relation3"/>
    <link port="Const.output" relation="relation2"/>
    <link port="Const.trigger" relation="relation4"/>
</entity>
