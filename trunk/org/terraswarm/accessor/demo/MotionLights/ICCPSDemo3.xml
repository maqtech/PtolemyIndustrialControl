<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="ICCPSDemo2" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{-45.0, -10.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 23, 1440, 817}, maximized=true}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1206, 707]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.8989943991853361">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{354.1767441860465, 195.12117550872114}">
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="true">
    </property>
    <entity name="Camera" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** An accessor for a camera on the local host. This can be a built-in camera or&#10; *  a USB-connected camera. This accessor has two modes of operation, &quot;triggered&quot;&#10; *  and &quot;open loop.&quot; In triggered mode, it captures an image whenever a trigger&#10; *  input is received and produces that image on its output. In open-loop mode,&#10; *  it captures every image produced by the camera, at the speed of the camera,&#10; *  and produces on the output a stream of such images.&#10; * &#10; *  @accessor cameras/Camera&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input trigger A trigger input for triggered mode.&#10; *   The value is ignored and can be anything.&#10; *  @output {Object} image A stream of captured images.&#10; *  @parameter {boolean} triggered If true, use triggered mode.&#10; *   Otherwise, use open-loop mode. This is a boolean that defaults to true.&#10; *  @parameter {string} camera The name of the camera to use.&#10; *   A list of available cameras is presented as options.&#10; *   This is a string that defaults to &quot;default camera&quot;,&#10; *   which uses the system default, if there is one.&#10; *  @parameter {{width: number, height: number}} viewSize The view size&#10; *   to use for capture, in pixels. A list of available view sizes for&#10; *   the selected camara is presented as options. This is a JSON specification&#10; *   with a &quot;width&quot; and &quot;height&quot; field, as in for example {&quot;width&quot;:640, &quot;height&quot;:480}.&#10; *  @version $$Id: ImageAnnotate.xml 74438 2016-02-06 17:28:03Z cxh $$ &#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global addInputHandler, exports, getParameter, input, output, parameter, removeInputHandler, require, send */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var cameras = require(&quot;cameras&quot;);&#10;var camera;&#10;var handle = null;&#10;&#10;/** Create the inputs, outputs, and parameters, and update the parameters for the selected camera. */&#10;exports.setup = function () {&#10;    this.input('trigger');&#10;    this.output('image');&#10;    this.parameter('triggered', {&#10;        'type' : 'boolean',&#10;        'value' : true&#10;    });&#10;    // NOTE: The following assumes that setup() is reinvoked whenever a parameter&#10;    // value changes, since the camera will change and so will the available options.&#10;    this.parameter('camera', {&#10;        'type' : 'string',&#10;        'value' : 'default camera',&#10;    });&#10;    this.parameter('viewSize', {&#10;        'type' : 'JSON',&#10;    });&#10;    // This is in a try-catch so that this accessor can be instantiated even if the&#10;    // host does not provide a cameras module.&#10;    try {&#10;        this.parameter('camera', {&#10;            'options' : cameras.cameras()&#10;        });&#10;        camera = new cameras.Camera(this.getParameter('camera'));&#10;        this.parameter('viewSize', {&#10;            'value' : camera.getViewSize(),&#10;            'options' : camera.viewSizes()&#10;        });&#10;    } catch(err) {&#10;        error(err);&#10;    }&#10;};&#10;&#10;/** Set the view size of the camera, open it, and depending on the triggered mode, either&#10; *  set up an input handler for the trigger input or set up a handler for the 'image'&#10; *  event notification from the camera.&#10; */&#10;exports.initialize = function () {&#10;    camera.setViewSize(this.getParameter('viewSize'));&#10;    camera.open();&#10;    var self = this;&#10;    if (this.getParameter('triggered')) {&#10;        handle = this.addInputHandler('trigger', function () {&#10;            self.send('image', camera.snapshot());&#10;        });&#10;    } else {&#10;        camera.on('image', function (image) {&#10;            self.send('image', image);&#10;        });&#10;    }&#10;};&#10;&#10;/** Remove handlers and close the camera. */&#10;exports.wrapup = function () {&#10;    camera.removeAllListeners('image');&#10;    if (handle !== null) {&#10;        this.removeInputHandler(handle);&#10;    }&#10;    camera.close();&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/cameras/Camera.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;An accessor for a camera on the local host. This can be a built-in camera or&#10; a USB-connected camera. This accessor has two modes of operation, &amp;quot;triggered&amp;quot;&#10; and &amp;quot;open loop.&amp;quot; In triggered mode, it captures an image whenever a trigger&#10; input is received and produces that image on its output. In open-loop mode,&#10; it captures every image produced by the camera, at the speed of the camera,&#10; and produces on the output a stream of such images.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: ImageAnnotate.xml 74438 2016-02-06 17:28:03Z cxh $$">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="A trigger input for triggered mode.&#10;  The value is ignored and can be anything.">
            </property>
            <property name="image (port)" class="ptolemy.kernel.util.StringAttribute" value="A stream of captured images.">
            </property>
            <property name="triggered (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true, use triggered mode.&#10;  Otherwise, use open-loop mode. This is a boolean that defaults to true.">
            </property>
            <property name="camera (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The name of the camera to use.&#10;  A list of available cameras is presented as options.&#10;  This is a string that defaults to &quot;default camera&quot;,&#10;  which uses the system default, if there is one.">
            </property>
            <property name="viewSize (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The view size&#10;  to use for capture, in pixels. A list of available view sizes for&#10;  the selected camara is presented as options. This is a JSON specification&#10;  with a &quot;width&quot; and &quot;height&quot; field, as in for example {&quot;width&quot;:640, &quot;height&quot;:480}.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="triggered" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="camera" class="ptolemy.data.expr.Parameter" value="default camera">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="viewSize" class="ptolemy.data.expr.Parameter" value="{&quot;width&quot;:640, &quot;height&quot;:480}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{120.0, 130.0}">
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="image" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={833, 147, 607, 486}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[607, 442]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{620.0, 55.0}">
        </property>
    </entity>
    <entity name="GoogleVisionMoodDetector" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Retrieve a location given an address.&#10; *  The location is given as an object with two numeric fields,&#10; *  &quot;latitude&quot; and &quot;longitude&quot;. For example,&#10; *  `{&quot;latitude&quot;: 37.85, &quot;longitude&quot;: -122.26}` is&#10; *  the location of Berkeley, California.&#10; *&#10; *  This accessor requires a &quot;key&quot; for the Google Geocoding API, which you can&#10; *  obtain for free at https://developers.google.com/maps/documentation/geocoding/intro .&#10; *&#10; *  This accessor does not block waiting for the response, but if any additional&#10; *  *address* input is received before a pending request has received a response&#10; *  or timed out, then the new request will be queued and sent out only after&#10; *  the pending request has completed. This strategy ensures that outputs are&#10; *  produced in the same order as the input requests.&#10; *&#10; *  @accessor services/GeoCoder&#10; *  @input {string} address The address, for example &quot;Berkeley, CA&quot;.&#10; *  @output location The location, as an object with a 'latitude' and 'longitude'&#10; *   property.&#10; *  @parameter {string} key The key for the Google geocoding API.&#10; *  @output response An object containing the location information.&#10; *  @author Edward A. Lee&#10; *  @version $$Id: GeoCoder.js 546 2016-02-03 02:07:57Z cxh $$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, get, getParameter, error, exports, extend, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function() {&#10;    this.extend('net/REST');&#10;    this.input('image');&#10;    this.output('annotation');&#10;    this.output('emotion');&#10;    this.output('hueCmd',{'type':'JSON'});&#10;    this.parameter('key', {'type':'string', 'value':'Enter Key Here'}); // FIXME: key is now hard coded&#10;    &#10;    // Change default values of the base class inputs.&#10;    // Also, hide base class inputs, except trigger.&#10;    // Note the need for quotation marks on the options parameter.&#10;    this.input('options', {'visibility':'expert', 'value':{&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/json&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;https://vision.googleapis.com&quot;}});&#10;    this.input('command', {'visibility':'expert', 'value':'/v1/images:annotate/'});&#10;    // NOTE: The value can be given as a JSON string or a JavaScript object.&#10;    this.input('arguments', {'visibility':'expert', 'value':{&quot;alt&quot; : &quot;json&quot;, &quot;key&quot;:&quot;AIzaSyBzqcd7Fclg93rUeAG3kbOXsnpihqxbALo&quot;}});&#10;    this.input('body', {'visibility':'expert'});&#10;    this.input('trigger', {'visibility':'expert'});&#10;    this.output('headers', {'visibility':'expert'});&#10;    this.output('status', {'visibility':'expert'});&#10;    this.parameter('outputCompleteResponsesOnly', {'visibility':'expert'});&#10;};&#10;&#10;exports.initialize = function() {&#10;    // Be sure to call the superclass so that the trigger input handler gets registered.&#10;    exports.ssuper.initialize.call(this);&#10;    &#10;    //var key = this.getParameter('key');&#10;    //if (key == &quot;Enter Key Here&quot;) {&#10;    //    throw &quot;GeoCoder:  You need a key, which you can obtain at https://developers.google.com/maps/documentation/geocoding/intro.&quot;;&#10;    //}&#10;    var self = this;&#10;    &#10;    // Handle location information.&#10;    this.addInputHandler('image', function() {&#10;        var image = this.get('image');&#10;        if (image) {&#10;            var body = {&#10;                'requests' : [  { &quot;image&quot; : {&quot;content&quot; : &quot;&quot;}, &#10;                                  &quot;features&quot; : [  { &quot;type&quot; : &quot;FACE_DETECTION&quot;, &#10;                                                    &quot;maxResults&quot; : 1&#10;                                                  }&#10;                                               ]&#10;                                }&#10;                             ]&#10;            };&#10;            body.requests[0].image.content = image;&#10;            //console.log(JSON.stringify(body));&#10;            self.send('body', JSON.stringify(body));&#10;            self.send('trigger', true);&#10;        } else {&#10;            throw 'GoogleVision: No image.';&#10;        }&#10;    });&#10;};&#10;&#10;/** Filter the response, extracting the latitude and longitude and&#10; *  formatting.&#10; */&#10;exports.filterResponse = function(response) {&#10;    if (response) {&#10;        // Note that for some hosts, the response is a string, needing to parsed,&#10;        // and for some, its already been parsed.&#10;        var parsed = response;&#10;        &#10;        if (typeof parsed === 'string') {&#10;            try {&#10;                parsed = JSON.parse(response);&#10;            } catch (err) {&#10;                error('GeoCoder: Unable to parse response: ' + err.message +&#10;                        '\nResponse was: ' + response);&#10;                // So that downstream actors don't just a previous location, send null.&#10;                //this.send('location', null);&#10;            }&#10;        }&#10;        &#10;        if (parsed &amp;&amp; parsed.responses) { &#10;           &#10;           //console.log(parsed.responses[0]);&#10;           &#10;            if (parsed.responses[0].faceAnnotations) {&#10;            	&#10;            	&#10;                var result = parsed.responses[0].faceAnnotations[0];&#10;                 &#10;                //console.log(result);&#10;                var emotionNames = ['joy','sorrow','anger','surprise','unknown'];&#10;                var emotions = [result.joyLikelihood, result.sorrowLikelihood,&#10;                result.angerLikelihood, result.surpriseLikelihood];&#10;                &#10;                var emotionLikelihood = [0,0,0,0];&#10;                var emotionColorMap = [25500, 46920, 65280, 12750, 0];&#10;                var maxSoFar = -2;&#10;                var currentEmotion = 'unknown';&#10;                var currentEmotionIndex = 4;&#10;                for (var i=0; i &lt; emotions.length; i++) {&#10;                    switch(emotions[i]) {&#10;                        case 'UNKNOWN': emotionLikelihood[i]= -10; break;&#10;                        case 'VERY_UNLIKELY': emotionLikelihood[i] = -2; break;&#10;                        case 'UNLIKELY': emotionLikelihood[i] = -1; break;&#10;                        case 'POSSIBLE': emotionLikelihood[i] = 1; break;&#10;                        case 'LIKELY': emotionLikelihood[i] = 2; break;&#10;                        case 'VERY_LIKELY': emotionLikelihood[i] = 3; break;&#10;                        default: emotionLikelihood[i] = -10; break;&#10;                    }&#10;                    &#10;                    if (emotionLikelihood[i] &gt; maxSoFar) {&#10;                        currentEmotion = emotionNames[i];&#10;                        currentEmotionIndex = i;&#10;                    }&#10;                }&#10;                console.log(emotionLikelihood);&#10;                this.send('emotion', currentEmotion);&#10;                var hueCommand =[{'id':7,'on':false},{'id':8,'on':false},{'id':9,'on':false}]; &#10;                var hue = 0;&#10;                if ( !currentEmotion.equals('unknown')) { &#10;                	hue = emotionColorMap[currentEmotionIndex];&#10;                	hueCommand = [{'id':7,'on':true,'hue':hue},&#10;                	{'id':8,'on':true,'hue':hue},{'id':9,'on':true,'hue':hue}];&#10;                }&#10;               &#10;                 &#10;                &#10;                this.send('hueCmd', hueCommand);&#10;            }&#10;            &#10;        }&#10;    }&#10;    return response;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/services/GoogleVision.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Retrieve a location given an address.&#10; The location is given as an object with two numeric fields,&#10; &amp;quot;latitude&amp;quot; and &amp;quot;longitude&amp;quot;. For example,&#10; &lt;code&gt;{&amp;quot;latitude&amp;quot;: 37.85, &amp;quot;longitude&amp;quot;: -122.26}&lt;/code&gt; is&#10; the location of Berkeley, California.&lt;/p&gt;&#10;&lt;p&gt; This accessor requires a &amp;quot;key&amp;quot; for the Google Geocoding API, which you can&#10; obtain for free at https://developers.google.com/maps/documentation/geocoding/intro .&lt;/p&gt;&#10;&lt;p&gt; This accessor does not block waiting for the response, but if any additional&#10; &lt;em&gt;address&lt;/em&gt; input is received before a pending request has received a response&#10; or timed out, then the new request will be queued and sent out only after&#10; the pending request has completed. This strategy ensures that outputs are&#10; produced in the same order as the input requests.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: GeoCoder.js 546 2016-02-03 02:07:57Z cxh $$">
            </property>
            <property name="address (port)" class="ptolemy.kernel.util.StringAttribute" value="The address, for example &quot;Berkeley, CA&quot;.">
            </property>
            <property name="location (port)" class="ptolemy.kernel.util.StringAttribute" value="The location, as an object with a 'latitude' and 'longitude'&#10;  property.">
            </property>
            <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="An object containing the location information.">
            </property>
            <property name="key (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The key for the Google geocoding API.">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{400.0, 130.0}">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="{&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/json&quot;},&quot;method&quot;:&quot;POST&quot;,&quot;url&quot;:&quot;https://vision.googleapis.com&quot;}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="/v1/images:annotate/">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="{&quot;alt&quot;:&quot;json&quot;,&quot;key&quot;:&quot;AIzaSyAzP2bzs3PG0SXB2TdpA563hARZWfGU-1A&quot;}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="key" class="ptolemy.data.expr.Parameter" value="Enter Key Here">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="outputCompleteResponsesOnly" class="ptolemy.data.expr.Parameter">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="image" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="annotation" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="emotion" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="hueCmd" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
    </entity>
    <entity name="ImageToString2" class="ptolemy.actor.lib.conversions.ImageToString">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{235.0, 130.0}">
        </property>
    </entity>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="2.0">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{-30.0, 130.0}">
        </property>
    </entity>
    <entity name="ErrorLog" class="ptolemy.actor.lib.gui.MonitorValue">
        <doc>Monitor and display values</doc>
        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.UpdatedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{810.0, 245.0}">
        </property>
    </entity>
    <entity name="Hue" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.  // All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;//  FIXME: Revise this documentation!&#10;/** This accessor controls a Philips Hue lightbulb.&#10; *  &#10; *  It sets the parameters of the specified light according to the input values.&#10; *&#10; *  IP Address input:  Hue checks the value of the &quot;bridgeIP&quot; input in &#10; *  initialize().  If a default value is present, Hue initiates a connection to &#10; *  the bridge.  Otherwise, Hue waits for an IP address input to arrive.  &#10; *  Note that no commands can be sent until after an IP address has been given.  &#10; *  The &quot;trigger&quot; input is not enabled until after the Hue has connected to the&#10; *  bridge and verified that the user is authorized.&#10; *  &#10; *  Logging on: This script attempts to access the bridge as a user with&#10; *  name given by &lt;i&gt;userName&lt;/i&gt;, which defaults to &quot;ptolemyuser&quot;. &#10; *  If there is no such user on the bridge, the script registers such a user and&#10; *  requests (via an alert dialog) that the link button on the bridge be pushed &#10; *  to authorize registration of this user.&#10; *  The user is given 20s to do this before an exception is thrown&#10; *  If it fails to reach the bridge, it will try again a few times before giving up.&#10; *  &#10; *  Verifying the light: The final initialization step is to get a list of accessible lights.&#10; *  If the input light is not accessible, this accessor warns but does not error.&#10; *  Sometimes Hue lights are transient (get unplugged, become temporarily disconnected)&#10; *  and may be valid in the future. Rather than terminating the model, we hope&#10; *  that the lights come back.&#10; *  &#10; *  Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; *  The bridge acquires its address via DHCP, so the address will typically change&#10; *  each time the bridge is rebooted. Moreover, the address will likely not be&#10; *  accessible except on the local network.  The bridge responds to UPnP packets&#10; *  (universal plug-and-play), so it is possible to use software such as&#10; *  &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; *  Ideally, UPnP discover would be provided via an accessor. In this case, a&#10; *  swarmlet could be created that runs periodically on a local network and publishes&#10; *  the URL of any discovered bridges to a key-value store. Then the KeyValueStore&#10; *  accessor could be used to provide the &lt;i&gt;bridgeIPAdress&lt;/i&gt; input to this accessor.&#10; *  &#10; *  @accessor devices/Hue&#10; *  @input {string} bridgeIP The bridge IP address (and port, if needed).&#10; *  @parameter {string} userName The user name for logging on to the Hue Bridge.&#10; *   This must be at least 11 characters, or the Hue regards it as invalid.&#10; *  @input {int} lightID The light identifier (an integer beginning with 1).&#10; *  @input {number} brightness The brightness (an integer between 0 and 255).&#10; *  @input {number} hue The hue (an integer between 0 and 62580).&#10; *  @input {number} saturation The saturation (an integer between 0 and 255).&#10; *  @output {boolean} on Whether the light is on (true) or off (false).&#10; *  @input {int} transitionTime The transition time, in multiples of 100ms.&#10; *  @input {int} trigger Triggers a PUT request with all the light settings. Can be any type.&#10; *  @author Edward A. Lee, Marcus Pan, Elizabeth Osyk, Marten Lohstroh&#10; *  @version $$Id: Hue.js 681 2016-04-11 22:55:46Z marten $$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;&#10;/** Define a Hue function using a variant of the Module pattern.  The function&#10; *  returns a hue object which offers a public connect() function.  &#10; *  The intiialize() function should call Hue() and save the returned hue object.&#10; *  This will create an object with its own local state, allowing multiple &#10; *  Hue accessors to run concurrently without interfering with each other on&#10; *  hosts with a shared Javascript engine (such as the browser host).&#10; *  &#10; *  An instance of the returned hue object implements the following public functions:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; connect(): Contact the bridge and register the user, if needed.  Add an&#10; *        input handler to the trigger input to submit commands to the bridge.&#10; *  &lt;/ul&gt;&#10; * &#10; */&#10;&#10;function Hue() {&#10;	var hue = {};&#10;	&#10;	// Public variables. &#10;	hue.changedLights = [];&#10;	hue.lights = {};&#10;&#10;	// Private variables.&#10;	var handleRegisterUser;&#10;	var ipAddress = &quot;&quot;;&#10;	var maxRetries = 5;&#10;	var registerInterval = 2000;&#10;	var registerTimeout = 20000;&#10;	var registerAttempts = 0;&#10;	var retryCount = 0;&#10;	var retryTimeout = 1000;&#10;	var timeout = 3000;&#10;	var url = &quot;&quot;;&#10;	var userName = &quot;&quot;;&#10;	var authenticated = false;&#10;	&#10;	// Use self in contained functions so the caller does not have to bind &quot;this&quot;&#10;	// on each function call.&#10;	var self = this;&#10;	&#10;	// Public functions. &#10;	// Available to be used for e.g. inputHandlers.&#10;	&#10;	/** Contact the bridge and register the user, if needed.  Add an input &#10;	 * handler to the trigger input to submit commands to the bridge.&#10;	 */&#10;	hue.connect = function() {&#10;        ipAddress = self.getParameter('bridgeIP');&#10;        userName = self.getParameter('userName');&#10;		&#10;        if (userName.length &lt; 11) {&#10;            throw &quot;Username too short. Hue only accepts usernames that contain at least 11 characters.&quot;;&#10;        }&#10;&#10;        if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;            throw &quot;No IP Address is given for the Hue Bridge.&quot;;&#10;        }&#10;&#10;        url = &quot;http://&quot; + ipAddress + &quot;/api&quot;;&#10;        &#10;        contactBridge();&#10;	};&#10;	&#10;	/** Get light settings from input and issue a command to the bridge. */	&#10;	hue.issueCommand = function() {&#10;    	var commands = self.get('commands');&#10;		console.log(&quot;Issuing command.&quot;);&#10;&#10;		// (Re)connect with the bridge&#10;    	if (ipAddress !== self.getParameter('bridgeIP') || userName !== self.getParameter('userName')) {&#10;    		console.log(&quot;New bridge parameters detected.&quot;);&#10;    		hue.connect();&#10;    	}&#10;&#10;    	// No connection to the bridge, ignore request.&#10;    	if (!authenticated) {&#10;   			console.log(&quot;Not authenticated, ignoring command.&quot;);&#10;    		return;&#10;    	}&#10;    	&#10;    	// FIXME: Type check input&#10;		console.log(JSON.stringify(commands));&#10;&#10;		// FIXME: If only one record, also accept input!!!&#10;&#10;    	// Iterate over commands (assuming input is an array of commands)&#10;		for (var i = 0; i &lt; commands.length; i++) {&#10;    		var command = {};&#10;    		var lightID = commands[i].id;&#10;    		&#10;console.log(&quot;In loop.&quot;);&#10;&#10;    		// Check whether input is valid&#10;    		if (typeof lightID === 'undefined') {&#10;    			self.error(&quot;Invalid command (&quot; + i + &quot;): please specify light id.&quot;);&#10;    		} else {&#10;&#10;	    		// Keep track of changed lights to turn off during wrap up.&#10;	    		if (hue.changedLights.indexOf(lightID) == -1) {&#10;	        		hue.changedLights.push(lightID);&#10;	    		}&#10;	    &#10;	    		// Pack properties into object&#10;	    		if (typeof commands[i].on !== 'undefined') {&#10;	    			command.on = commands[i].on;&#10;	    		}&#10;	    		if (typeof commands[i].bri !== 'undefined') {&#10;	    			command.bri = limit(commands[i].bri, 0, 255);&#10;	    		}&#10;	    		if (typeof commands[i].hue !== 'undefined') {&#10;	    			command.hue = limit(commands[i].hue, 0, 65280);&#10;	    		}&#10;	    		if (typeof commands[i].sat !== 'undefined') {&#10;	    			command.sat = limit(commands[i].sat, 0, 255);&#10;	    		}&#10;	    		if (typeof commands[i].transitiontime !== 'undefined') {&#10;	    			command.transitiontime = commands[i].transitiontime;&#10;	    		}&#10;    		}&#10;&#10;    		if (Object.keys(command).length &lt; 1) { &#10;    			self.error(&quot;Invalid command (&quot; + i + &quot;): please specify at least one property.&quot;);&#10;    		}&#10;    		else {&#10;    			console.log(&quot;Command: &quot; + JSON.stringify(command));&#10;    			var options = {&#10;	    			body : JSON.stringify(command),&#10;	    			timeout : 10000,&#10;	    			url : url + &quot;/&quot; + userName + &quot;/lights/&quot; + lightID + &quot;/state/&quot;&#10;	    		}; &#10;	    		http.put(options, function(response) {&#10;	    			 &#10;	        		if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;	            		self.error(&quot;Server responds with error: &quot; + &#10;	            		response[0].error.description);&#10;	        		}&#10;	    		});&#10;    		}&#10;    	}&#10;    }&#10;&#10;	// Private functions.&#10;	&#10;	/** Handle an error. This will report it on the console and then retry a &#10;	 * fixed number of times before giving up.  A retry is a re-invocation of &#10;	 * registerUser().&#10;	 */&#10;	function bridgeRequestErrorHandler(err) {&#10;		&#10;	    // FIXME: We should do a UPnP discovery here and find a bridge.&#10;	    // Could not connect to the bridge&#10;	    console.log('Error connecting to Hue basestation.');&#10;	    console.error(err);&#10;	    if (retryCount &lt; maxRetries) {&#10;	        console.log('Will retry');&#10;	        retryCount++;&#10;	        setTimeout(function() {&#10;	            contactBridge;&#10;	        }, retryTimeout);&#10;	    } else {&#10;	        self.error('Could not reach the Hue basestation at ' + url +&#10;	                ' after ' + retryCount + ' attempts.');&#10;	    }&#10;	}&#10;	&#10;	/** Contact the bridge to ensure it is operating.  Register the user, if&#10;	 * needed.&#10;	 */&#10;	function contactBridge() {&#10;		authenticated = false;&#10;		console.log(&quot;Attempting to connecting to: &quot; + url + &quot;/&quot; + userName + &quot;/lights/&quot;);&#10;        var bridgeRequest = http.get(url + &quot;/&quot; + userName + &quot;/lights/&quot;, function (response) {&#10;        	if (response !== null) {&#10;        	    if (response.statusCode != 200) {&#10;        	    	// Response is other than OK.&#10;    	            bridgeRequestErrorHandler(response.statusMessage);&#10;    	        } else {&#10;    	            console.log(&quot;Got a response from the bridge...&quot;);&#10;    	            &#10;    		        var lights = JSON.parse(response.body);&#10;    				console.log(&quot;Reponse: &quot; + response.body);&#10;&#10;    		        if (isNonEmptyArray(lights) &amp;&amp; lights[0].error) {&#10;    		            var description = lights[0].error.description;&#10;    		&#10;    		            if (description.match(&quot;unauthorized user&quot;)) {&#10;    		            	// Add this user.&#10;    		            	alert(userName + &quot; is not a registered user.\n&quot; +&#10;    		            	&quot;Push the link button on the Hue bridge to register.&quot;);&#10;    		            	//self.error(userName + &quot; is not a registered user.\n&quot; +&#10;    		            	//&quot; Push the link button on the Hue bridge to register.&quot;);&#10;    		                console.log(&quot;Printing my shizzle&quot;);           &#10;    		            	handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;    		            } else {&#10;    		            	console.error('Error occurred when trying to get Hue light status.');&#10;    		                self.error(description);&#10;    		            }&#10;    		        } else if (lights) {&#10;    		        	console.log(&quot;Authenticated!&quot;);&#10;    		        	authenticated = true;&#10;    		            hue.lights = lights;&#10;    		        }&#10;    		    }&#10;    		} else {&#10;    			self.error(&quot;Unable to connect to bridge.&quot;);&#10;    		}&#10;    	}).on('error', bridgeRequestErrorHandler);&#10;        bridgeRequest.on('error', bridgeRequestErrorHandler);&#10;	}&#10;	&#10;	/** Utility function to check that an object is a nonempty array.&#10;	 *  @param obj The object.&#10;	 */&#10;	function isNonEmptyArray(obj) {&#10;	    return (obj instanceof Array &amp;&amp; obj.length &gt; 0);&#10;	}&#10;&#10;	/** Utility function to limit the range of a number&#10;	 *  and to force it to be an integer. If the value argument&#10;	 *  is a string, then it will be converted to a Number.&#10;	 *  @param value The value to limit.&#10;	 *  @param low The low value.&#10;	 *  @param high The high value.&#10;	 */&#10;	function limit(value, low, high) {&#10;	    var parsed = parseInt(value);&#10;	    if (!parsed) {&#10;	        self.error(&quot;Expected a number between &quot; + low + &quot; and &quot; + high + &quot;, but got &quot; + value);&#10;	        return 0;&#10;	    }&#10;	    if (parsed &lt; low) {&#10;	        return low;&#10;	    } else if (parsed &gt; high) {&#10;	        return high;&#10;	    } else {&#10;	        return parsed;&#10;	    }&#10;	}&#10;	&#10;	/** Register a new user.&#10;	 *  This function repeats at registerInterval until registration is&#10;	 *  successful, or until registerTimeout.&#10;	 *  It does so because it needs to wait until the user clicks&#10;	 *  the button on the Hue bridge.&#10;	 */&#10;	function registerUser() {&#10;&#10;		var registerData = {&#10;			devicetype : userName,&#10;			username : userName&#10;		};&#10;	    var options = {&#10;	    		body : JSON.stringify(registerData),&#10;	    		timeout: 10000,&#10;	    		url : url&#10;	    };&#10;	    &#10;	    http.post(options, function(response) {&#10;	        var rsp = JSON.parse(response.body);&#10;	        //console.log(&quot;Response &quot; + JSON.stringify(response));&#10;	        if (isNonEmptyArray(rsp) &amp;&amp; rsp[0].error) {&#10;	            &#10;	            var description = rsp[0].error.description;&#10;&#10;	            if (description.match(&quot;link button not pressed&quot;)) {&#10;	                //repeat registration attempt unless registerTimeout has been reached.&#10;	                console.log(&quot;Please push the link button on the Hue bridge.&quot;);&#10;	                registerAttempts++;&#10;	                if ((registerAttempts * registerInterval) &gt; registerTimeout) {&#10;	                    throw &quot;Failed to create user after &quot; + registerTimeout/1000 +&#10;	                        &quot;s.&quot;;&#10;	                }&#10;	                handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;	                return;&#10;	            } else {&#10;	                throw description;&#10;	            }&#10;	        } else if ((isNonEmptyArray(rsp) &amp;&amp; rsp[0].success)) {&#10;	            if (handleRegisterUser !== null) {&#10;	                clearTimeout(handleRegisterUser);&#10;	            }&#10;				// contact the bridge and find the available lights&#10;				contactBridge();&#10;	        } else {&#10;	        	console.log(&quot;Response &quot; + JSON.stringify(response));&#10;	        	console.log(JSON.stringify(JSON.parse(response.body)[0].success));&#10;	            throw &quot;Unknown error registering new user&quot;;&#10;	        }&#10;	    });&#10;	}&#10;	&#10;	return hue;&#10;};&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;    &#10;    this.input('commands', {&#10;    	type: &quot;JSON&quot;,&#10;    	value: &quot;{}&quot;&#10;    });&#10;    this.parameter('bridgeIP', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('userName', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;ptolemyuser&quot;&#10;    });&#10;    this.parameter('onWrapup', {&#10;            'value' : &quot;turn off&quot;,&#10;            'options' : [&quot;turn off&quot;, &quot;restore&quot;]&#10;    });&#10;    &#10;    // Call the Hue function binding &quot;this&quot;, to create local state variables &#10;    // while providing access to accessor functions.  &#10;    // Setting &quot;this.hue&quot; makes hue available in other accessor functions, e.g.&#10;    // initialize().&#10;    // TODO:  Test with two accessors to make sure each has separate state.&#10;    this.hue = Hue.call(this);&#10;};&#10;&#10;/** Upon receipt of a bridge IP address, contact the bridge to check if it is&#10; *  present.  Next, register the user if not already registered.  &#10; */&#10;&#10;exports.initialize = function() {&#10;	this.addInputHandler('commands', this.hue.issueCommand);&#10;}&#10;&#10;/** Turn off changed lights on wrapup. */&#10;exports.wrapup = function() {&#10;    var errorLights = [];&#10;    var cmd = JSON.stringify({on:false});&#10;    var options = { };&#10;    &#10;    for (var i = 0; i &lt; this.hue.changedLights.length; i++) {&#10;        options = {&#10;            body : cmd,&#10;            timeout : 10000, &#10;            url : &quot;http://&quot; + this.get(&quot;bridgeIP&quot;) + &quot;/api/&quot; + &#10;            	this.getParameter(&quot;userName&quot;) + &quot;/lights/&quot; + this.hue.changedLights[i] + &#10;            	&quot;/state/&quot;&#10;        };&#10;        &#10;        var self = this;&#10;        &#10;        http.put(options, function(response) {&#10;        	console.log(JSON.stringify(response));&#10;            if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;                var lightID = self.get('lightID').toString();&#10;                errorLights.push(lightID);&#10;            }&#10;        });&#10;    }&#10;&#10;    if (errorLights.length !== 0) {&#10;        error(&quot;Error turning off lights &quot; + errorLights.toString());&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/devices/Hue.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor controls a Philips Hue lightbulb.&lt;/p&gt;&#10;&lt;p&gt; It sets the parameters of the specified light according to the input values.&lt;/p&gt;&#10;&lt;p&gt; IP Address input:  Hue checks the value of the &amp;quot;bridgeIP&amp;quot; input in &#10; initialize().  If a default value is present, Hue initiates a connection to &#10; the bridge.  Otherwise, Hue waits for an IP address input to arrive.&lt;br&gt; Note that no commands can be sent until after an IP address has been given.&lt;br&gt; The &amp;quot;trigger&amp;quot; input is not enabled until after the Hue has connected to the&#10; bridge and verified that the user is authorized.&lt;/p&gt;&#10;&lt;p&gt; Logging on: This script attempts to access the bridge as a user with&#10; name given by &lt;i&gt;userName&lt;/i&gt;, which defaults to &amp;quot;ptolemyuser&amp;quot;. &#10; If there is no such user on the bridge, the script registers such a user and&#10; requests (via an alert dialog) that the link button on the bridge be pushed &#10; to authorize registration of this user.&#10; The user is given 20s to do this before an exception is thrown&#10; If it fails to reach the bridge, it will try again a few times before giving up.&lt;/p&gt;&#10;&lt;p&gt; Verifying the light: The final initialization step is to get a list of accessible lights.&#10; If the input light is not accessible, this accessor warns but does not error.&#10; Sometimes Hue lights are transient (get unplugged, become temporarily disconnected)&#10; and may be valid in the future. Rather than terminating the model, we hope&#10; that the lights come back.&lt;/p&gt;&#10;&lt;p&gt; Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; The bridge acquires its address via DHCP, so the address will typically change&#10; each time the bridge is rebooted. Moreover, the address will likely not be&#10; accessible except on the local network.  The bridge responds to UPnP packets&#10; (universal plug-and-play), so it is possible to use software such as&#10; &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; Ideally, UPnP discover would be provided via an accessor. In this case, a&#10; swarmlet could be created that runs periodically on a local network and publishes&#10; the URL of any discovered bridges to a key-value store. Then the KeyValueStore&#10; accessor could be used to provide the &lt;i&gt;bridgeIPAdress&lt;/i&gt; input to this accessor.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee, Marcus Pan, Elizabeth Osyk, Marten Lohstroh">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: Hue.js 681 2016-04-11 22:55:46Z marten $$">
            </property>
            <property name="bridgeIP (port)" class="ptolemy.kernel.util.StringAttribute" value="The bridge IP address (and port, if needed).">
            </property>
            <property name="lightID (port)" class="ptolemy.kernel.util.StringAttribute" value="The light identifier (an integer beginning with 1).">
            </property>
            <property name="brightness (port)" class="ptolemy.kernel.util.StringAttribute" value="The brightness (an integer between 0 and 255).">
            </property>
            <property name="hue (port)" class="ptolemy.kernel.util.StringAttribute" value="The hue (an integer between 0 and 62580).">
            </property>
            <property name="saturation (port)" class="ptolemy.kernel.util.StringAttribute" value="The saturation (an integer between 0 and 255).">
            </property>
            <property name="transitionTime (port)" class="ptolemy.kernel.util.StringAttribute" value="The transition time, in multiples of 100ms.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Triggers a PUT request with all the light settings. Can be any type.">
            </property>
            <property name="on (port)" class="ptolemy.kernel.util.StringAttribute" value="Whether the light is on (true) or off (false).">
            </property>
            <property name="userName (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The user name for logging on to the Hue Bridge.&#10;  This must be at least 11 characters, or the Hue regards it as invalid.">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{675.0, 150.0}">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="commands" class="ptolemy.actor.parameters.PortParameter" value="{}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="bridgeIP" class="ptolemy.data.expr.Parameter" value="192.168.2.2">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="userName" class="ptolemy.data.expr.Parameter" value="ptolemyuser">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="commands" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
    </entity>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Camera.image&quot;,x=120.0,y=130.0}, tail={id=&quot;ImageToString2.input&quot;,x=235.0,y=130.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;GoogleVisionMoodDetector.image&quot;,x=400.0,y=130.0}, tail={id=&quot;ImageToString2.output&quot;,x=235.0,y=130.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Camera.trigger&quot;,x=120.0,y=130.0}, tail={id=&quot;DiscreteClock.output&quot;,x=-30.0,y=130.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;GoogleVisionMoodDetector.error&quot;,x=400.0,y=130.0}, tail={id=&quot;ErrorLog.input&quot;,x=810.0,y=245.0,index=2}, points={400.0,190.0,570.0,190.0,570.0,80.0,715.0,80.0,715.0,240.0} } }">
        </property>
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;ErrorLog.input&quot;,x=810.0,y=245.0,index=2}, tail={id=&quot;Hue.error&quot;,x=675.0,y=150.0}, points={675.0,245.0} } }">
        </property>
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Camera.trigger" relation="relation"/>
    <link port="Camera.image" relation="relation2"/>
    <link port="Display.input" relation="relation4"/>
    <link port="GoogleVisionMoodDetector.error" relation="relation5"/>
    <link port="GoogleVisionMoodDetector.image" relation="relation3"/>
    <link port="GoogleVisionMoodDetector.emotion" relation="relation4"/>
    <link port="GoogleVisionMoodDetector.hueCmd" relation="relation8"/>
    <link port="ImageToString2.input" relation="relation2"/>
    <link port="ImageToString2.output" relation="relation3"/>
    <link port="DiscreteClock.output" relation="relation"/>
    <link port="ErrorLog.input" relation="relation5"/>
    <link port="ErrorLog.input" relation="relation7"/>
    <link port="Hue.error" relation="relation7"/>
    <link port="Hue.commands" relation="relation8"/>
</entity>
