<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="SwarmAcousticService" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[225.0, -155.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 22, 1440, 874}, maximized=true}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1206, 764]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.6942058066637191">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{1028.416015625, 342.06661854619557}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Swarm acoustic service (sas) demo using accessors. The service &#10;receives sensor data from an Android app that can be downloaded at &#10;https://play.google.com/store/apps/details?id=com.longle1.spectrogram.&#10;&#10;Author: Long Le&#10;University of Illinois at Urbana-Champaign">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[295.0, -205.0]">
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="true">
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Use the database service to get the raw audio data.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1540.0, 245.0]">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Use the query service to search for audio events &#10;and rank them.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[530.0, 125.0]">
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Use a speech recognition service to automatically &#10;find the transcription of the 1st audio event.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1505.0, -40.0]">
        </property>
    </property>
    <property name="Annotation5" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model will hang unless the Android app is present.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[865.0, -180.0]">
        </property>
    </property>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[200.0, -20.0]">
        </property>
    </entity>
    <entity name="sasQuery" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="//The MIT License&#10;//&#10;//Copyright 2015.&#10;//&#10;//Permission is hereby granted, free of charge, to any person obtaining a copy&#10;//of this software and associated documentation files (the &quot;Software&quot;), to deal&#10;//in the Software without restriction, including without limitation the rights&#10;//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#10;//copies of the Software, and to permit persons to whom the Software is&#10;//furnished to do so, subject to the following conditions:&#10;//&#10;//The above copyright notice and this permission notice shall be included in&#10;//all copies or substantial portions of the Software.&#10;//&#10;//THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#10;//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#10;//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#10;//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#10;//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#10;//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN&#10;//THE SOFTWARE.&#10;&#10;/** Search an online acoustic database, which is continuously populated by our Android sensor app, &#10; * downloadable from https://play.google.com/store/apps/details?id=com.longle1.spectrogram,&#10; * for acoustic events that satisfy given criteria and rank them.&#10; * &#10; * @accessor SwarmAcousticServiceQuery&#10; * @module SwarmAcousticService&#10; * @author Long N.T. Le (longle1@illinois.edu)&#10; * @version 0.1&#10; * @input {record} search criteria (see the accompanied demo for details).&#10; * @output {array} an array of ranked acoustic events.&#10; */&#10;&#10;var remoteAddr = 'acoustic.ifp.illinois.edu:8956';&#10;var handle = null;&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function() {&#10;    accessor.input('input');&#10;		accessor.output('events', {&#10;				'type': 'string'&#10;    });&#10;};&#10;&#10;/** Initialize the accessor by attaching an input handler to the input. */&#10;exports.initialize = function() {&#10;    // Invoke the getPrice function each time a 'symbol' input arrives.&#10;    handle = addInputHandler('input', sasQuery);&#10;};&#10;&#10;/** Remove the input handler. */&#10;exports.wrapup = function() {&#10;    // Failing to do this will likely trigger an exception when the model stops running,&#10;    // because the getPrice() function will attempt to send an output after the model&#10;    // has stopped.&#10;    removeInputHandler(handle, 'input');&#10;};&#10;&#10;/** Make http request */&#10;var sasQuery = function (){&#10;	var mInput = get('input');&#10;	var db=mInput.db, col=mInput.col, user=mInput.user, pwd=mInput.pwd, q=mInput.query, classname=mInput.classname;&#10;	&#10;	// Construct the query data to send&#10;	var timeDat, freqDat, durDat, lpDat, locDat, kwDat;    &#10;	if (q.hasOwnProperty('t1') &amp;&amp; q.hasOwnProperty('t2')){&#10;			timeDat = '{&quot;recordDate&quot;:{&quot;$$gte&quot;:{&quot;$$date&quot;:&quot;'+ q.t1+'&quot;}, &quot;$$lte&quot;:{&quot;$$date&quot;:&quot;'+q.t2+'&quot;}}}';&#10;	}&#10;	else if (q.hasOwnProperty('t1')){&#10;			timeDat = '{&quot;recordDate&quot;:{&quot;$$gte&quot;:{&quot;$$date&quot;:&quot;'+ q.t1+'&quot;}}}';&#10;	}&#10;	else if (q.hasOwnProperty('t2')){&#10;			timeDat = '{&quot;recordDate&quot;:{&quot;$$lte&quot;:{&quot;$$date&quot;:&quot;'+ q.t2+'&quot;}}}';&#10;	}&#10;	&#10;	if (q.hasOwnProperty('f1') &amp;&amp; q.hasOwnProperty('f2')){&#10;			freqDat = ',{&quot;minFreq&quot;:{&quot;$$gte&quot;:'+q.f1+'}},{&quot;maxFreq&quot;:{&quot;$$lte&quot;:'+q.f2+'}}';&#10;	}&#10;	else if (q.hasOwnProperty('f1')){&#10;			freqDat = ',{&quot;minFreq&quot;:{&quot;$$gte&quot;:'+q.f1+'}}';&#10;	}else if (q.hasOwnProperty('f2')){&#10;			freqDat = ',{&quot;maxFreq&quot;:{&quot;$$lte&quot;:'+q.f2+'}}';&#10;	}else{&#10;			freqDat = '';&#10;	}&#10;	&#10;	if (q.hasOwnProperty('dur1') &amp;&amp; q.hasOwnProperty('dur2')){&#10;			durDat = ',{&quot;duration&quot;:{&quot;$$gte&quot;:'+q.dur1+', &quot;$$lte&quot;:'+q.dur2+'}}';&#10;	}&#10;	else if (q.hasOwnProperty('dur1')){&#10;			durDat = ',{&quot;duration&quot;:{&quot;$$gte&quot;:'+q.dur1+'}}';&#10;	}&#10;	else if (q.hasOwnProperty('dur2')){&#10;			durDat = ',{&quot;duration&quot;:{&quot;$$lte&quot;:'+q.dur2+'}}';&#10;	}&#10;	else{&#10;			durDat = '';&#10;	}&#10;	&#10;	if (q.hasOwnProperty('lat') &amp;&amp; q.hasOwnProperty('lng') &amp;&amp; q.hasOwnProperty('rad')){&#10;			locDat = ',{&quot;location&quot;:{&quot;$$geoWithin&quot;:{&quot;$$centerSphere&quot;:[['+q.lng+','+q.lat+'], '+q.rad/3959+']}}}'; // earth radius = 3959 miles&#10;	}else{&#10;			locDat = '';&#10;	}&#10;	&#10;	if (q.hasOwnProperty('kw')){&#10;			kwDat = ',{&quot;$$text&quot;: {&quot;$$search&quot;:&quot;'+q.kw+'&quot;}}';&#10;	}else{&#10;			kwDat = '';&#10;	}&#10;	var postDat = '{&quot;$$and&quot;:['+timeDat+freqDat+durDat+locDat+kwDat+']}';&#10;&#10;	// Construct the query string&#10;	var queryString = 'dbname='+db+'&amp;colname='+col+'&amp;user='+user+'&amp;passwd='+pwd+'&amp;classname='+classname;&#10;	&#10;	/*&#10;	var options = {&#10;		host: remoteAddr,&#10;		port:8957,&#10;		method: 'POST',&#10;		path: '/infer',&#10;		query: '?'+queryString,&#10;	};&#10;	http.request(options, function(data){&#10;		var events = JSON.parse(data);&#10;		send('events', events);&#10;	}).write(postDat, 'UTF-8').end();&#10;	*/&#10;	var events = httpRequest('http://'+remoteAddr+'/query?'+queryString, 'POST', &#10;									{'keepAlive': 'true', 'trustAll': 'true'}, postDat, 10000);&#10;	send('events', events);&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                <property name="height" class="ptolemy.data.expr.Parameter" value="16">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="80">
                </property>
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[725.0, 70.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="This accessor, when fired, makes a query to the SAS service.">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Long Le">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="key-value input">
            </property>
            <property name="events (port)" class="ptolemy.kernel.util.StringAttribute" value="acoustic events.">
            </property>
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="events" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
            </property>
        </port>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={271, 586, 366, 292}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[348, 219]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1020.0, 185.0]">
        </property>
    </entity>
    <entity name="sasInfer" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="//The MIT License&#10;//&#10;//Copyright 2015.&#10;//&#10;//Permission is hereby granted, free of charge, to any person obtaining a copy&#10;//of this software and associated documentation files (the &quot;Software&quot;), to deal&#10;//in the Software without restriction, including without limitation the rights&#10;//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#10;//copies of the Software, and to permit persons to whom the Software is&#10;//furnished to do so, subject to the following conditions:&#10;//&#10;//The above copyright notice and this permission notice shall be included in&#10;//all copies or substantial portions of the Software.&#10;//&#10;//THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#10;//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#10;//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#10;//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#10;//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#10;//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN&#10;//THE SOFTWARE.&#10;&#10;/** Perform speech recognition on a array of acoustic events.&#10; * &#10; * @accessor SwarmAcousticServiceInfer&#10; * @module SwarmAcousticService&#10; * @author Long N.T. Le (longle1@illinois.edu)&#10; * @version 0.1&#10; * @input {array} an array of acoustic events with only name and (ranking) score.&#10; * @output {array} an array of acoustic events augmented by transcription.&#10; */&#10;&#10;var remoteAddr = 'acoustic.ifp.illinois.edu:8956';&#10;var handle = null;&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function() {&#10;    accessor.input('input');&#10;		accessor.output('events', {&#10;				'type': 'string'&#10;    });&#10;};&#10;&#10;/** Initialize the accessor by attaching an input handler to the input. */&#10;exports.initialize = function() {&#10;    // Invoke the getPrice function each time a 'symbol' input arrives.&#10;    handle = addInputHandler('input', sasInfer);&#10;};&#10;&#10;/** Remove the input handler. */&#10;exports.wrapup = function() {&#10;    // Failing to do this will likely trigger an exception when the model stops running,&#10;    // because the getPrice() function will attempt to send an output after the model&#10;    // has stopped.&#10;    removeInputHandler(handle, 'input');&#10;};&#10;&#10;/** Make http request */&#10;var sasInfer = function (){&#10;	var mInput = get('input');&#10;	var db=mInput.db, col=mInput.col, user=mInput.user, pwd=mInput.pwd, smallEvents=mInput.smallEvents, classname=mInput.classname; // only score and filename fields are needed&#10;&#10;	// Construct the query string&#10;	var queryString = 'dbname='+db+'&amp;colname='+col+'&amp;user='+user+'&amp;passwd='+pwd+'&amp;classname='+classname;&#10;&#10;	var new_events = httpRequest('http://'+remoteAddr+'/infer?'+queryString, 'POST', &#10;									{'keepAlive': 'true', 'trustAll': 'true'}, JSON.stringify(smallEvents), 10001);&#10;	send('events', new_events);&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                <property name="height" class="ptolemy.data.expr.Parameter" value="16">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="80">
                </property>
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1695.0, 65.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="This accessor, when fired, ask for the inference service.">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Long Le">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="key-value input">
            </property>
            <property name="events (port)" class="ptolemy.kernel.util.StringAttribute" value="acoustic events.">
            </property>
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="events" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
            </property>
        </port>
    </entity>
    <entity name="sasGetdat" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="//The MIT License&#10;//&#10;//Copyright 2015.&#10;//&#10;//Permission is hereby granted, free of charge, to any person obtaining a copy&#10;//of this software and associated documentation files (the &quot;Software&quot;), to deal&#10;//in the Software without restriction, including without limitation the rights&#10;//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#10;//copies of the Software, and to permit persons to whom the Software is&#10;//furnished to do so, subject to the following conditions:&#10;//&#10;//The above copyright notice and this permission notice shall be included in&#10;//all copies or substantial portions of the Software.&#10;//&#10;//THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#10;//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#10;//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#10;//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#10;//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#10;//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN&#10;//THE SOFTWARE.&#10;&#10;/** Return the raw audio data in .wav format for a given input acoustic event.&#10; * &#10; * @accessor SwarmAcousticServiceGetdat&#10; * @module SwarmAcousticService&#10; * @author Long N.T. Le (longle1@illinois.edu)&#10; * @version 0.1&#10; * @input {record} search criteria including the name of an acoustic event (see the accompanied demo for details).&#10; * @output {general} the raw data associated with the input acoustic event, for playback.&#10; */&#10;&#10;var remoteAddr = 'acoustic.ifp.illinois.edu:8956';&#10;var handle = null;&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function() {&#10;    accessor.input('input');&#10;		accessor.output('data', {&#10;        'type':'string'&#10;    });&#10;};&#10;&#10;/** Initialize the accessor by attaching an input handler to the input. */&#10;exports.initialize = function() {&#10;    // Invoke the getPrice function each time a 'symbol' input arrives.&#10;    handle = addInputHandler('input', sasGetdat);&#10;};&#10;&#10;/** Remove the input handler. */&#10;exports.wrapup = function() {&#10;    // Failing to do this will likely trigger an exception when the model stops running,&#10;    // because the getPrice() function will attempt to send an output after the model&#10;    // has stopped.&#10;    removeInputHandler(handle, 'input');&#10;};&#10;&#10;/** Make http request */&#10;var sasGetdat = function(){&#10;	var mInput = get('input');&#10;	var db=mInput.db, col=mInput.col, user=mInput.user, pwd=mInput.pwd, filename=mInput.filename;&#10;&#10;	// Construct the query string&#10;	var queryString = 'user='+user+'&amp;passwd='+pwd+'&amp;filename='+filename;&#10;&#10;	var data = httpRequest('http://'+remoteAddr+'/gridfs/'+db+'/'+col+'?'+queryString, 'GET', &#10;									{'keepAlive': 'true', 'trustAll': 'true'}, null, 10000);&#10;	send('data', data);&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                <property name="height" class="ptolemy.data.expr.Parameter" value="16">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="80">
                </property>
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1680.0, 310.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="This accessor, when fired, download from the SAS service.">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Long Le">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="key-value input">
            </property>
            <property name="data (port)" class="ptolemy.kernel.util.StringAttribute" value="acoustic data.">
            </property>
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="data" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Display3" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={1109, 610, 365, 259}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[347, 186]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1740.0, 155.0]">
        </property>
    </entity>
    <entity name="RecordAssembler5" class="ptolemy.actor.lib.RecordAssembler">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1205.0, 45.0]">
        </property>
        <port name="score" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="filename" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="JSONToToken" class="ptolemy.actor.lib.conversions.json.JSONToToken">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[800.0, 70.0]">
        </property>
    </entity>
    <entity name="ArrayElement" class="ptolemy.actor.lib.ArrayElement">
        <property name="index" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[925.0, 80.0]">
        </property>
    </entity>
    <entity name="JSONToToken2" class="ptolemy.actor.lib.conversions.json.JSONToToken">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1760.0, 65.0]">
        </property>
    </entity>
    <entity name="ArrayElement2" class="ptolemy.actor.lib.ArrayElement">
        <property name="index" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1400.0, 155.0]">
        </property>
    </entity>
    <entity name="ArrayLength" class="ptolemy.actor.lib.ArrayLength">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[765.0, 185.0]">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="arrayType({filename=string, score=double})">
            </property>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="int">
            </property>
        </port>
    </entity>
    <entity name="Expression" class="ptolemy.actor.lib.Expression">
        <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="'# audio events '+x.toString()">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[895.0, 185.0]">
        </property>
        <port name="x" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Expression2" class="ptolemy.actor.lib.Expression">
        <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="'transcript of the 1st audio event \n'+x.tag">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1570.0, 155.0]">
        </property>
        <port name="x" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="{tag=string}">
            </property>
        </port>
    </entity>
    <entity name="ElementsToArray" class="ptolemy.actor.lib.ElementsToArray">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1260.0, 65.0]">
        </property>
    </entity>
    <entity name="Const8" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="{t1=&quot;2015-05-30T05:15:17.428Z&quot;,t2=&quot;2015-05-30T21:15:17.428Z&quot;,f1=0,f2=8000,dur1=0.0,dur2=10.0,lat=40.10979,lng=-88.22726,rad=1}">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[460.0, -20.0]">
        </property>
    </entity>
    <entity name="Expression3" class="ptolemy.actor.lib.Expression">
        <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="{db=&quot;publicDb&quot;,col=&quot;event&quot;,usr=&quot;publicUser&quot;,pwd=&quot;publicPwd&quot;,classname=&quot;speech&quot;,query=x}">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[465.0, 70.0]">
        </property>
        <port name="x" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Expression4" class="ptolemy.actor.lib.Expression">
        <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="{db=&quot;publicDb&quot;,col=&quot;event&quot;,usr=&quot;publicUser&quot;,pwd=&quot;publicPwd&quot;,classname=&quot;speech&quot;,smallEvents=x}">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1470.0, 65.0]">
        </property>
        <port name="x" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Expression5" class="ptolemy.actor.lib.Expression">
        <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="{db=&quot;publicDb&quot;,col=&quot;data&quot;,usr=&quot;publicUser&quot;,pwd=&quot;publicPwd&quot;,filename=x}">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1445.0, 310.0]">
        </property>
        <port name="x" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Display2" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={683, 616, 365, 259}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[347, 186]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1555.0, 400.0]">
        </property>
    </entity>
    <entity name="Expression6" class="ptolemy.actor.lib.Expression">
        <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="x.filename">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1055.0, 110.0]">
        </property>
        <port name="x" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="{filename=string}">
            </property>
        </port>
    </entity>
    <entity name="Expression7" class="ptolemy.actor.lib.Expression">
        <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="x.score">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1050.0, 55.0]">
        </property>
        <port name="x" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="{score=double}">
            </property>
        </port>
    </entity>
    <entity name="Expression8" class="ptolemy.actor.lib.Expression">
        <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="x.subarray(44,x.length-44)">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1385.0, 400.0]">
        </property>
        <port name="x" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="StringToUnsignedByteArray" class="ptolemy.actor.lib.conversions.StringToUnsignedByteArray">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1230.0, 400.0]">
        </property>
    </entity>
    <relation name="relation26" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[1195.0, 110.0]">
        </vertex>
    </relation>
    <relation name="relation17" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation29" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[995.0, 80.0]">
        </vertex>
    </relation>
    <relation name="relation24" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation31" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation30" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[835.0, 70.0]">
        </vertex>
    </relation>
    <relation name="relation28" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation12" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation34" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation35" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation11" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation10" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="SingleEvent.output" relation="relation7"/>
    <link port="sasQuery.input" relation="relation"/>
    <link port="sasQuery.events" relation="relation17"/>
    <link port="Display.input" relation="relation12"/>
    <link port="sasInfer.input" relation="relation2"/>
    <link port="sasInfer.events" relation="relation31"/>
    <link port="sasGetdat.input" relation="relation6"/>
    <link port="sasGetdat.data" relation="relation10"/>
    <link port="Display3.input" relation="relation34"/>
    <link port="RecordAssembler5.output" relation="relation35"/>
    <link port="RecordAssembler5.score" relation="relation4"/>
    <link port="RecordAssembler5.filename" relation="relation26"/>
    <link port="JSONToToken.input" relation="relation17"/>
    <link port="JSONToToken.output" relation="relation30"/>
    <link port="ArrayElement.input" relation="relation30"/>
    <link port="ArrayElement.output" relation="relation29"/>
    <link port="JSONToToken2.input" relation="relation31"/>
    <link port="JSONToToken2.output" relation="relation24"/>
    <link port="ArrayElement2.input" relation="relation24"/>
    <link port="ArrayElement2.output" relation="relation9"/>
    <link port="ArrayLength.input" relation="relation30"/>
    <link port="ArrayLength.output" relation="relation28"/>
    <link port="Expression.output" relation="relation12"/>
    <link port="Expression.x" relation="relation28"/>
    <link port="Expression2.output" relation="relation34"/>
    <link port="Expression2.x" relation="relation9"/>
    <link port="ElementsToArray.input" relation="relation35"/>
    <link port="ElementsToArray.output" relation="relation5"/>
    <link port="Const8.output" relation="relation3"/>
    <link port="Const8.trigger" relation="relation7"/>
    <link port="Expression3.output" relation="relation"/>
    <link port="Expression3.x" relation="relation3"/>
    <link port="Expression4.output" relation="relation2"/>
    <link port="Expression4.x" relation="relation5"/>
    <link port="Expression5.output" relation="relation6"/>
    <link port="Expression5.x" relation="relation26"/>
    <link port="Display2.input" relation="relation11"/>
    <link port="Expression6.output" relation="relation26"/>
    <link port="Expression6.x" relation="relation29"/>
    <link port="Expression7.output" relation="relation4"/>
    <link port="Expression7.x" relation="relation29"/>
    <link port="Expression8.output" relation="relation11"/>
    <link port="Expression8.x" relation="relation8"/>
    <link port="StringToUnsignedByteArray.input" relation="relation10"/>
    <link port="StringToUnsignedByteArray.output" relation="relation8"/>
</entity>
