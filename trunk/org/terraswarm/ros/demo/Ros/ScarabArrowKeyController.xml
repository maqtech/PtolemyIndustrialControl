<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="ScarabArrowKeyController" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="14">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="A simple demo for the ScarabArrowKeyController accessor.&#10;&#10;To use this with the Scarab simulation, you must have a Scarab or Scarab simulator&#10;publishing (current position) to the /pose topic, &#10;and subscibing to the /goal topic (for waypoints).&#10;The Scarab/simulator must also be running rosbridge to expose its topics to&#10;non-ROS programs. &#10;&#10;Follow instructions to setup simulation at &#10;https://www.terraswarm.org/accessors/wiki/Main/InstallingTheScarabsROSPackages#Run&#10; &#10;This accessor needs a RosSubscriber, subscribed to the /pose topic to give it pose input. &#10;It computes the next waypoint, based on arrow key input and outputs it to ScarabGoalPublisher,&#10;which will publish it to the goal topic. &#10;'U' moves robot forward, 'L' rotates left, 'R' rotates right, 'D' returns to origin.&#10;&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.RelativeLocation" value="[-160.0, 375.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={250, 24, 1013, 876}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[799, 759]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.8000000000000158">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{144.43434405940644, 253.62956373762387}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="Infinity">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[330.0, 60.0]">
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <entity name="ArrowKeySensor" class="ptolemy.actor.lib.gui.ArrowKeySensor">
        <doc>Create a JFrame for sensing up, left, right, and down arrow key presses and releases</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-65.0, 140.0]">
        </property>
    </entity>
    <entity name="ScarabGoalPublisher" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.  // All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor publishes pose information to Scarab topic /goal.&lt;br&gt;&#10; *  This accessor requires the module 'webSocketClient'. &#10; *  It inherits the input and output ports from webSocketClient, and takes in&#10; *  pose information at 'toSend'.&lt;br&gt;&#10; *  The data published must be of the ROS datatype geometry_msgs/PoseStamped.&#10; *  This is formatted as the following:&lt;pre&gt;&#10; *  {&#10; *    &quot;position&quot;: //cartesian coordinates&#10; *      {&quot;x&quot;:.., &quot;y&quot;:.. &quot;z&quot;:..},&#10; *    &quot;orientation&quot;: //quaternion orientation (final orientation of robot)&#10; *      {&quot;w&quot;:.., &quot;x&quot;:.., &quot;y&quot;:.., &quot;z&quot;:..}&#10; *  } &lt;/pre&gt;&#10; *  The header information is added by rosbridge. &lt;br&gt;&#10; *&#10; *  @accessor ScarabGoalPublisher&#10; *  @module ScarabGoalPublisher&#10; *  @input {string} server The IP address or domain name of the rosbridge server.&#10; *  @input {number} port The port of the rosbridge server.&#10; *  @input {JSON} toSend The pose data to be sent to the rosbridge server.&#10; *  @output {boolean} connected The status of the web socket connection.&#10; *  @output {JSON} received The data received from the web socket server.&#10; *  @author Marcus Pan &#10; *  @version $$Id$$ &#10; *&#10;*/&#10;&#10;var wsClient = require('webSocketClient');&#10;&#10;/** Sets up by accessor by inheriting inputs from setup() in webSocketClient.*/&#10;exports.setup = wsClient.setup;&#10;&#10;/** Overrides inputHandler on 'toSend' from webSocketClient.&lt;br&gt; &#10;  * New inputHandler takes in pose data and formats it according to the &#10;  * geometry_msgs/PoseStamped datatype in ROS. &lt;br&gt;&#10;  * Inherits initialize from webSocketClient.*/ &#10;exports.initialize = function() {&#10;  //must override first&#10;  wsClient.toSendInputHandler = function() {&#10;    var pose = get('toSend');&#10;    var msg = {&#10;      &quot;header&quot;: {&#10;        &quot;seq&quot;: 0,&#10;        &quot;stamp&quot;: {&#10;          &quot;secs&quot;: 0,&#10;          &quot;nsecs&quot;: 0  &#10;        },&#10;        &quot;frame_id&quot;: &quot;map_hokuyo&quot;    &#10;      },&#10;      &quot;pose&quot;: pose&#10;    }&#10;    var data = {&#10;      &quot;op&quot;: &quot;publish&quot;,&#10;      &quot;topic&quot;: &quot;/goal&quot;,&#10;      &quot;msg&quot;: msg &#10;    }&#10;    wsClient.sendToWebSocket(data);&#10;  }&#10;  wsClient.initialize();&#10;}&#10;&#10;/** inherits wrapup function from webSocketClient */&#10;exports.wrapup = wsClient.wrapup;&#10;&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/ScarabGoalPublisher.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="This accessor publishes pose information to Scarab topic /goal.&lt;br&gt;&#10; This accessor requires the module 'webSocketClient'. &#10; It inherits the input and output ports from webSocketClient, and takes in&#10; pose information at 'toSend'.&lt;br&gt;&#10; The data published must be of the ROS datatype geometry_msgs/PoseStamped.&#10; This is formatted as the following:&lt;pre&gt;&#10; {&#10;   &quot;position&quot;: //cartesian coordinates&#10;     {&quot;x&quot;:.., &quot;y&quot;:.. &quot;z&quot;:..},&#10;   &quot;orientation&quot;: //quaternion orientation (final orientation of robot)&#10;     {&quot;w&quot;:.., &quot;x&quot;:.., &quot;y&quot;:.., &quot;z&quot;:..}&#10; } &lt;/pre&gt;&#10; The header information is added by rosbridge. &lt;br&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$Id$">
            </property>
            <property name="server (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="The IP address or domain name of the server.">
            </property>
            <property name="port (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="The port that the web socket server listens to.">
            </property>
            <property name="toSend (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;JSON&quot;]}) The pose data to be sent to the rosbridge server.">
            </property>
            <property name="connected (port)" class="ptolemy.kernel.util.StringAttribute" value="outputs 'true' once connection is established">
            </property>
            <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" value="The data received from the web socket server, in JSON format.">
            </property>
            <property name="toSend (port)" class="ptolemy.kernel.util.StringAttribute" value="The data to be send to the web socket server, in JSON format.">
            </property>
            <property name="server" class="ptolemy.kernel.util.StringAttribute" value="The IP address or domain name of the server.">
            </property>
            <property name="port" class="ptolemy.kernel.util.StringAttribute" value="The port that the web socket server listens to.">
            </property>
            <property name="toSend" class="ptolemy.kernel.util.StringAttribute" value="The data to be send to the web socket server, in JSON format.">
            </property>
            <property name="connected" class="ptolemy.kernel.util.StringAttribute" value="outputs 'true' once connection is established">
            </property>
            <property name="received" class="ptolemy.kernel.util.StringAttribute" value="The data received from the web socket server, in JSON format.">
            </property>
        </property>
        <property name="server" class="ptolemy.actor.parameters.PortParameter" value="&quot;localhost&quot;">
        </property>
        <property name="port" class="ptolemy.actor.parameters.PortParameter" value="9090">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[431.0, 162.0]">
        </property>
        <port name="server" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="port" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="RosSubscriber" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.  // All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor subscribes to a ROS topic.&lt;br&gt;&#10; *  It requires the module 'webSocketClient'. &#10; *  It inherits the input and output from webSocketClient, but adds&#10; *  its own 'topic' input.&#10; *  This input is usually prefixed with a '/' eg: '/noise'.&lt;br&gt; &#10; *&#10; *  @accessor RosSubscriber&#10; *  @module RosSubscriber&#10; *  @input {string} server The IP address or domain name of server.&#10; *  @input {number} port The port that the web socket listens to.&#10; *  @input {string} topic The ROS topic to subscribe to.&#10; *  @output {boolean} connected The status of the web socket connection.&#10; *  @output {JSON} received The data received from the web socket server.&#10; *  @author Marcus Pan &#10; *  @version $$Id$$ &#10; *&#10;*/&#10;&#10;var wsClient = require('webSocketClient');&#10;&#10;/** Sets up by accessor by inheriting inputs and outputs from setup() in webSocketClient.&lt;br&gt;&#10; *  Adds a 'topic' input which is the ROS topic to subscribe to. */&#10;exports.setup = function() {&#10;  wsClient.setup();&#10;  accessor.input('topic', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;&quot;,&#10;    description: &quot;the ROS topic to subscribe to.&quot;&#10;  });&#10;}&#10;&#10;/** Inherits initialize from webSocketClient.&lt;br&gt;&#10;    Overrides the toSendInputHandler to throw an error if called. A subscriber should not be publishing inputs. &lt;br&gt;&#10;    Sends a message to rosbridge to start subscribing to the topic on input 'topic'.*/ &#10;&#10;exports.initialize = function() {&#10;  wsClient.toSendInputHandler = function(){&#10;    console.error('This accessor is a subscriber and does not take input to publish.');&#10;  }&#10;  wsClient.initialize();&#10;  wsClient.sendToWebSocket({&#10;      &quot;op&quot;: &quot;subscribe&quot;,&#10;      &quot;topic&quot;: get('topic')&#10;  });&#10;}&#10;&#10;/** Inherits wrapup function from webSocketClient. */&#10;exports.wrapup = wsClient.wrapup;&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/RosSubscriber.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="This accessor subscribes to a ROS topic.&lt;br&gt;&#10; It requires the module 'webSocketClient'. &#10; It inherits the input and output from webSocketClient, but adds&#10; its own 'topic' input.&#10; This input is usually prefixed with a '/' eg: '/noise'.&lt;br&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$Id$">
            </property>
            <property name="server (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="The IP address or domain name of the server.">
            </property>
            <property name="port (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="The port that the web socket server listens to.">
            </property>
            <property name="topic (port-parameter)" class="ptolemy.kernel.util.StringAttribute" value="the ROS topic to subscribe to.">
            </property>
            <property name="connected (port)" class="ptolemy.kernel.util.StringAttribute" value="outputs 'true' once connection is established">
            </property>
            <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" value="The data received from the web socket server, in JSON format.">
            </property>
            <property name="toSend (port)" class="ptolemy.kernel.util.StringAttribute" value="The data to be send to the web socket server, in JSON format.">
            </property>
            <property name="server" class="ptolemy.kernel.util.StringAttribute" value="The IP address or domain name of the server.">
            </property>
            <property name="port" class="ptolemy.kernel.util.StringAttribute" value="The port that the web socket server listens to.">
            </property>
            <property name="toSend" class="ptolemy.kernel.util.StringAttribute" value="The data to be send to the web socket server, in JSON format.">
            </property>
            <property name="connected" class="ptolemy.kernel.util.StringAttribute" value="outputs 'true' once connection is established">
            </property>
            <property name="received" class="ptolemy.kernel.util.StringAttribute" value="The data received from the web socket server, in JSON format.">
            </property>
            <property name="topic" class="ptolemy.kernel.util.StringAttribute" value="the ROS topic to subscribe to.">
            </property>
        </property>
        <property name="server" class="ptolemy.actor.parameters.PortParameter" value="&quot;localhost&quot;">
        </property>
        <property name="port" class="ptolemy.actor.parameters.PortParameter" value="9090">
        </property>
        <property name="topic" class="ptolemy.actor.parameters.PortParameter" value="&quot;/pose&quot;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[20.0, 220.0]">
        </property>
        <port name="server" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="port" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="topic" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="NewGoal" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={65, 416, 1375, 436}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[1375, 387]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[380.0, 255.0]">
        </property>
    </entity>
    <entity name="CurrentPose" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={114, 689, 1242, 193}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[1242, 144]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[135.0, 320.0]">
        </property>
    </entity>
    <entity name="ScarabArrowKeyController" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;/** &#10; * This accessor controls the Scarab movements based on arrow keypresses.&#10; * It takes in keypress inputs and the current position of the Scarab robot.&#10; * 'U' moves the robot forward, 'L' rotates left, 'R' rotates right, and&#10; * 'D' returns to origin.&#10; * It then computes and outputs the next waypoint to the Scarab.  &#10; * This accessor does not do any publishing or subscribing. It should take in inputs  &#10; * from a RosSubscriber accessor, subscribed to the topic /pose. &#10; * It should output the next waypoint to a ScarabGoalPublisher accessor. &#10; *&#10; *  @accessor ScarabArrowKeyController&#10; *  @input {integer} U input the number (1) when Up arrow is pressed.&#10; *  @input {integer} L input the number (1) when Up arrow is pressed.&#10; *  @input {integer} D input the number (1) when Up arrow is pressed.&#10; *  @input {integer} R input the number (1) when Up arrow is pressed.&#10; *  @input {JSON} pose Current pose of the Scarab formatted as the ROS datatype geometry_msgs/Pose   &#10; *  @output {JSON} newGoal waypoint formatted according to the ROS datatype geometry_msgs/Pose.&#10; *  @author Marcus Pan &#10; *  @version $$Id$$ &#10; */&#10;&#10;&#10;//change in radius and angle for each step&#10;var deltaRadius = 0.5;&#10;var deltaTheta = 0.5;&#10;&#10;//current cartesian position (w is angle) &#10;var px, py, pz, pw; &#10;//current quaternion orientation&#10;var qx, qy, qz, qw;&#10;&#10;var handleU, handleR, handleL, handleD;&#10;&#10;/** Define inputs and outputs */&#10;exports.setup = function() {&#10;  accessor.input('U', {&#10;    type: &quot;int&quot;,&#10;    value: 0,&#10;    description: &quot;input (1) when Up arrow has been pressed.&quot;&#10;  });&#10;  accessor.input('L', {&#10;    type: &quot;int&quot;,&#10;    value: 0,&#10;    description: &quot;input (1) when Left arrow has been pressed.&quot;&#10;  });&#10;  accessor.input('R', {&#10;    type: &quot;int&quot;,&#10;    value: 0,&#10;    description: &quot;input (1) when Right arrow has been pressed.&quot;&#10;  });&#10;  accessor.input('D', {&#10;    type: &quot;int&quot;,&#10;    value: 0,&#10;    description: &quot;input (1) when Down arrow has been pressed.&quot;&#10;  });&#10;  accessor.input('pose', {&#10;    type: &quot;JSON&quot;,&#10;    value: {},&#10;    description: &quot;Current pose of the Scarab from the /pose topic.&quot;&#10;  });&#10;  accessor.output('newGoal', {&#10;    type: &quot;JSON&quot;,&#10;    description: &quot;new waypoint formatted according to the ROS datatype geometry_msg/Pose&quot; });&#10;}&#10;&#10;&#10;/** Attach function hanlders to key inputs. */&#10;exports.initialize = function() {&#10;  handleU = addInputHandler('U', uHandler);&#10;  handleR = addInputHandler('R', rHandler);&#10;  handleL = addInputHandler('L', lHandler);&#10;  //D returns to origin&#10;  handleD = addInputHandler('D', function() {&#10;      sendNewGoal(0, 0, 0, 1, 0, 0, 0);&#10;  });&#10;}&#10;&#10;/** Format waypoint according to ROS datatype getometry_msgs/Pose */&#10;function sendNewGoal(px, py, pz, qw, qx, qy, qz) {&#10;    var newGoal = {&#10;      &quot;position&quot;: {&#10;        &quot;x&quot;: px,&#10;        &quot;y&quot;: py,&#10;        &quot;z&quot;: pz &#10;      },&#10;      &quot;orientation&quot;: {&#10;        &quot;w&quot;: qw, &#10;        &quot;x&quot;: qx, &#10;        &quot;y&quot;: qy,&#10;        &quot;z&quot;: qz&#10;      }&#10;    };&#10;    send('newGoal', newGoal);&#10;}&#10;&#10;/** Load global vars with current pose information. */&#10;function getCurrentPose() {&#10;  var currentPose = get('pose');&#10;  if (currentPose == null) {&#10;    console.log('null pose');&#10;  } else {&#10;    qw = currentPose.msg.pose.orientation.w;&#10;    qx = currentPose.msg.pose.orientation.x;&#10;    qy = currentPose.msg.pose.orientation.y;&#10;    qz = currentPose.msg.pose.orientation.z;&#10;    px = currentPose.msg.pose.position.x;&#10;    py = currentPose.msg.pose.position.y;&#10;    pz = currentPose.msg.pose.position.z;&#10;    //Scarab is a ground robot, so only rotation about z-axis is understood&#10;    if (qx != 0 || qy != 0) {&#10;      console.err('Rotation must be about z-axis.');&#10;    }&#10;    //get euclidean angle (0 deg faces x-axis), theta,  of current robot orientation, &#10;    //based on the following formulas:&#10;    //qw = cos(0.5*theta), qz = sin(0.5*theta)&#10;    var theta = 2*Math.acos(qw);&#10;    if (qw &gt; 0) {&#10;      if (qz &gt; 0) pw = theta;&#10;      else pw = -theta;&#10;    } else {&#10;      if (qz &gt; 0) pw = theta;&#10;      else pw = -theta;&#10;    }&#10;  }&#10;}&#10;/** Move forward by deltaRadius. */ &#10;function uHandler() { &#10;  if (get('U') == 1) { &#10;    getCurrentPose();&#10;    sendNewGoal(px + deltaRadius*Math.cos(pw), py + deltaRadius*Math.sin(pw), 0.0, &#10;      qw, 0.0, 0.0, qz); &#10;  }&#10;}&#10;&#10;/** Rotate left by detlaTheta. */&#10;function lHandler() {&#10;  if (get('L') == 1) {&#10;    getCurrentPose();&#10;    var phi = 0.5*(pw + deltaTheta);&#10;    sendNewGoal(px, py, 0.0, &#10;      Math.cos(phi), 0.0, 0.0, Math.sin(phi)); &#10;  }&#10;}&#10;&#10;/** Rotate right by detlaTheta. */&#10;function rHandler() {&#10;  if (get('R') == 1) {&#10;    getCurrentPose();&#10;    var phi = 0.5*(pw - deltaTheta);&#10;    sendNewGoal(px, py, 0.0,&#10;      Math.cos(phi),0.0, 0.0, Math.sin(phi)); &#10;  }&#10;}&#10;&#10;/** Remove input handlers. */&#10;function wrapup() {&#10;  removeInputHandler(handleU, 'U');&#10;  removeInputHandler(handleR, 'R');&#10;  removeInputHandler(handleL, 'L');&#10;  removeInputHandler(handleD, 'D');&#10;}&#10;&#10;&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/ScarabArrowKeyController.js">
        </property>
        <property name="U" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <property name="L" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <property name="R" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <property name="D" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <property name="pose" class="ptolemy.actor.parameters.PortParameter" value="{msg = {header = {frame_id = &quot;map_hokuyo&quot;, seq = 45821, stamp = {nsecs = 199268102, secs = 1434400103}}, pose = {orientation = {w = 0.9993266200477, x = 0, y = 0, z = -0.0366920490582}, position = {x = 0.1080420787898, y = 0.0286089163351, z = 0}}}, op = &quot;publish&quot;, topic = &quot;/pose&quot;}">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[190.0, 140.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="U" class="ptolemy.kernel.util.StringAttribute" value="input (1) when Up arrow has been pressed.">
            </property>
            <property name="L" class="ptolemy.kernel.util.StringAttribute" value="input (1) when Left arrow has been pressed.">
            </property>
            <property name="R" class="ptolemy.kernel.util.StringAttribute" value="input (1) when Right arrow has been pressed.">
            </property>
            <property name="D" class="ptolemy.kernel.util.StringAttribute" value="input (1) when Down arrow has been pressed.">
            </property>
            <property name="pose" class="ptolemy.kernel.util.StringAttribute" value="Current pose of the Scarab from the /pose topic.">
            </property>
            <property name="newGoal" class="ptolemy.kernel.util.StringAttribute" value="new waypoint formatted according to the ROS datatype geometry_msg/Pose">
            </property>
        </property>
        <port name="U" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="L" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="R" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="D" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="pose" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="newGoal" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[310.0, 150.0]">
        </vertex>
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[135.0, 180.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="ArrowKeySensor.upArrow" relation="relation"/>
    <link port="ArrowKeySensor.leftArrow" relation="relation2"/>
    <link port="ArrowKeySensor.rightArrow" relation="relation3"/>
    <link port="ArrowKeySensor.downArrow" relation="relation4"/>
    <link port="ScarabGoalPublisher.toSend" relation="relation6"/>
    <link port="RosSubscriber.received" relation="relation7"/>
    <link port="NewGoal.input" relation="relation6"/>
    <link port="CurrentPose.input" relation="relation7"/>
    <link port="ScarabArrowKeyController.U" relation="relation"/>
    <link port="ScarabArrowKeyController.L" relation="relation2"/>
    <link port="ScarabArrowKeyController.R" relation="relation3"/>
    <link port="ScarabArrowKeyController.D" relation="relation4"/>
    <link port="ScarabArrowKeyController.pose" relation="relation7"/>
    <link port="ScarabArrowKeyController.newGoal" relation="relation6"/>
</entity>
