<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="ScarabHueController" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={75, 52, 1277, 686}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1063, 569]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0000000000000044">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{301.06219059405913, 81.35017017326732}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="Infinity">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[145.0, 45.0]">
        </property>
    </property>
    <property name="lightMap" class="ptolemy.data.expr.Parameter" value="{&quot;lights&quot;={{&quot;id&quot;=1, &quot;position&quot;={0, 0, 0}},{&quot;id&quot;=2, &quot;position&quot;={2, 0, 0}},{&quot;id&quot;=3, &quot;position&quot;={4, 0, 0}},{&quot;id&quot;=4, &quot;position&quot;={6, 0, 0}},{&quot;id&quot;=5, &quot;position&quot;={8, 0, 0}}}}">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-155.0, 5.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="The ScarabHueController accessor takes in Scarab's pose and a lightMap in JSON form.&#10;It sends light data to a Hue accessor to manipulate a set of Hue lights. &#10;&#10;At a set interval, it gets the nearest bulb to the Scarab. If this bulb is closer than a set threshold, the &#10;light is sent the set light conditions. The light conditions, interval and threshold are all&#10;parameters. &#10;&#10;Another accessor could be developed to create the lightMap when the Scarab is in mapping mode. ">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-150.0, -165.0]">
        </property>
    </property>
    <entity name="Hue" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.  // All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor controls a Philips Hue lightbulb.&#10; *  &lt;p&gt;&#10; *  It sets the parameters of the specified&#10; *  light according to the input values.&#10; *  &lt;/p&gt;&lt;p&gt;&#10; *  Logging on: This script attempts to access the bridge as a user with&#10; *  name given by &lt;i&gt;userName&lt;/i&gt;, which defaults to &quot;ptolemyuser&quot;.&#10; *  If there is no such user on the bridge, the script registers such a user and requests&#10; *  (via an alert dialog) that the&#10; *  link button on the bridge be pushed to authorize registration of this user.&#10; *  The user is given 20s to do this before an exception is thrown&#10; *  &lt;/p&gt;&lt;p&gt;&#10; *  Verifying the light: The final initialization step is to get a list of accessible lights. &#10; *  If the input light is not accessible, this accessor throws&#10; *  an exception, where the error message provides a list of available lights.&#10; *  &lt;/p&gt;&lt;p&gt;&#10; *  Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; *  The bridge acquires its address via DHCP, so the address will typically change&#10; *  each time the bridge is rebooted. Moreover, the address will likely not be&#10; *  accessible except on the local network.  The bridge responds to UPnP packets&#10; *  (universal plug-and-play), so it is possible to use software such as&#10; *  &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; *  Ideally, UPnP discover would be provided via an accessor. In this case, a&#10; *  swarmlet could be created that runs periodically on a local network and publishes&#10; *  the URL of any discovered bridges to a key-value store. Then the KeyValueStore&#10; *  accessor could be used to provide the &lt;i&gt;bridgeIPAdress&lt;/i&gt; input to this accessor.&#10; *  &lt;/p&gt;&#10; *  @accessor Hue&#10; *  @input {string} bridgeIPAddress The bridge IP address (and port, if needed).&#10; *  @parameter {string} userName The user name for logging on to the Hue Bridge. This must be at least 11 characters, or the Hue regards it as invalid.&#10; *  @input {int} lightID The light identifier (an integer beginning with 1).&#10; *  @input {number} brightness The brightness (an integer between 0 and 255).&#10; *  @input {number} hue The hue (an integer between 0 and 62580).&#10; *  @input {number} saturation The saturation (an integer between 0 and 255).&#10; *  @output {boolean} on Whether the light is on (true) or off (false).&#10; *  @input {int} transitionTime The transition time, in multiples of 100ms.&#10; *  @author Edward A. Lee, Marcus Pan &#10; *  @version $$Id$$ &#10; *&#10;*/&#10;&#10;&#10;// State variables.&#10;var timeout = 3000;&#10;var url = &quot;&quot;;&#10;var userName = &quot;&quot;;&#10;var reachableLights = [];&#10;var changedLights = [];&#10;var strReachableLights = &quot;&quot;;&#10;var handleRegisterUser;&#10;var registerInterval = 2000;&#10;var registerTimeout = 20000;&#10;var registerAttempts = 0;&#10;var handlers = [];&#10;&#10;// Uncomment the following to see the URL being used for the bridge.&#10;// alert(&quot;Connecting to: &quot; + bridge);&#10;&#10;/** Define inputs and outputs. */&#10;function setup() {&#10;  input('bridgeIPAddress', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;&quot;&#10;  });&#10;  parameter('userName', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;ptolemyuser&quot;&#10;  });&#10;  input('lightID', {&#10;    type: &quot;int&quot;,&#10;    value: 1&#10;  });&#10;  input('brightness', {&#10;    type: &quot;number&quot;,&#10;    value: 255&#10;  });&#10;  input('hue', {&#10;    type: &quot;number&quot;,&#10;    value: 65280&#10;  });&#10;  input('saturation', {&#10;    type: &quot;number&quot;,&#10;    value: 255 &#10;  });&#10;  input('on', {&#10;    type: &quot;boolean&quot;,&#10;    value: false&#10;  });&#10;  input('transitionTime', {&#10;    type: &quot;int&quot;,&#10;    value: 4&#10;  });&#10;}&#10;/** Initialize connection. &#10; *  Register user if not registered &#10; *  Input handlers are not added here in case we need to wait for user to regiter */&#10;function initialize() {&#10;   var ipAddress = get('bridgeIPAddress');&#10;   userName = getParameter('userName');&#10;&#10;   if (userName.length &lt; 11) {&#10;      throw &quot;Username too short. Hue only accepts usernames that contain at least 11 characters.&quot;;&#10;   }&#10;&#10;   if (ipAddress == null || ipAddress.trim() == &quot;&quot;) {&#10;      throw &quot;No IP Address is given for the Hue Bridge.&quot;;&#10;   }&#10;&#10;   url = &quot;http://&quot; + ipAddress + &quot;/&quot;;&#10;&#10;   // First make sure the bridge is actually there and responding.&#10;   try {&#10;      httpRequest(url, &quot;GET&quot;, null, &quot;&quot;, timeout);&#10;   } catch ( ex) {&#10;      // FIXME: We should do a UPnP discovery here and find a bridge.&#10;      throw &quot;No Hue bridge responding at &quot; + url + &quot;\n&quot; + ex;&#10;   }&#10;   url = url + &quot;api/&quot;;&#10;&#10;   // Next, make sure that input username is an authorized user. If not, register the user.&#10;   var lights = JSON.parse(httpRequest(url + userName + &quot;/&quot;, &quot;GET&quot;, null, &quot;&quot;, timeout));&#10;&#10;   if (isNonEmptyArray(lights) &amp;&amp; lights[0].error) {&#10;      var description = lights[0].error.description;&#10;&#10;      if (description.match(&quot;unauthorized user&quot;)) {&#10;         // Add this user.&#10;         alert(userName + &quot; is not a registered user.\n&quot; + &#10;            &quot; Push the link button on the Hue bridge to register.&quot;); &#10;         registerUser();&#10;      }&#10;&#10;      else {&#10;         throw description;&#10;      }&#10;      &#10;   } else if (lights.lights) {&#10;      //proceed to next stage of initialization&#10;      getReachableLights();&#10;&#10;   } else {&#10;      throw &quot;Unknown error. Could not authorize user.&quot;;&#10;   }&#10;}&#10;&#10;/** Register a new user. &#10;  * This function repeats at registerInterval until registration is successful, or until registerTimeout. &#10;  * It does so because it needs to wait until the user clicks&#10;  * the button on the Hue bridge. */&#10;function registerUser() {&#10;   var registerData = '{&quot;devicetype&quot;:&quot;' + userName + '&quot;, &quot;username&quot;:&quot;' + userName + '&quot;}';&#10;   var response = JSON.parse(httpRequest(url, &quot;POST&quot;, null, registerData, timeout));&#10;   console.log(response);&#10;   if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;      var description = response[0].error.description;&#10;&#10;      if (description.match(&quot;link button not pressed&quot;)) {&#10;         //repeat registration attempt unless registerTimeout has been reached&#10;         console.log('link button');&#10;         registerAttempts++;&#10;         if ((registerAttempts * registerInterval) &gt; registerTimeout) {&#10;            throw &quot;Failed to create user after &quot; + registerTimeout/1000 + &#10;               &quot;s.&quot;;&#10;         }&#10;         handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;         return;&#10;      }&#10;&#10;      else {&#10;         throw description;&#10;      }&#10;&#10;   } else if (isNonEmptyArray(response) &amp;&amp; response[0].success) {&#10;      //registration is successful - proceed to next stage of initialization&#10;      if (handleRegisterUser != null) {&#10;         clearTimeout(handleRegisterUser);&#10;      }&#10;      getReachableLights();&#10;&#10;   } else {&#10;      throw &quot;Error registering new user&quot;;&#10;   }&#10;}&#10;&#10;/** This function is only called after user has been registered. &#10;  * Get reachable lights. &#10;  * Add input handlers */&#10;function getReachableLights() {&#10;   url = url + userName + &quot;/&quot; + &quot;lights/&quot;;&#10;   var lights = JSON.parse(httpRequest(url, &quot;GET&quot;, null, &quot;&quot;, timeout));&#10;&#10;   try {&#10;      for (var id in lights) {&#10;         if (lights[id].state.reachable) {&#10;            reachableLights.push(id);&#10;           //record string of reachable lights &#10;            if (strReachableLights.length == 0) {&#10;               strReachableLights += id;&#10;            }&#10;            else {&#10;               strReachableLights += &quot;, &quot; + id;&#10;            }&#10;         }&#10;      }&#10;   } catch (e) {&#10;      throw &quot;Failed to access the state of light &quot;&#10;         &quot; at URL &quot; + url + &quot;\n&quot; + e;&#10;   }&#10;   if (strReachableLights.length == 0) {&#10;      strReachableLights = &quot;No lights are reachable&quot;;&#10;   }&#10;   strReachableLights += &quot;.&quot;;&#10;   console.log('reachable lights: ' + strReachableLights);&#10;&#10;   handlers.push(addInputHandler('brightness', inputHandler));&#10;   handlers.push(addInputHandler('hue', inputHandler));&#10;   handlers.push(addInputHandler('saturation', inputHandler));&#10;   handlers.push(addInputHandler('on', inputHandler));&#10;   handlers.push(addInputHandler('transitionTime', inputHandler));&#10;   handlers.push(addInputHandler('lightID', inputHandler));&#10;}&#10;&#10;/** Get light settings from inputs and PUT */&#10;function inputHandler() {&#10;   //check if light is reachable&#10;   var lightID = get('lightID').toString();&#10;   if (reachableLights.indexOf(lightID) == -1) {&#10;      throw &quot;Light &quot; + lightID + &quot; is not reachable at &quot; + &#10;         url + &quot;.\n Reachable lights are &quot; + strReachableLights;&#10;   }&#10;   //keep track of changed lights to turn off during wrap up&#10;   if (changedLights.indexOf(lightID) == -1) {&#10;      changedLights.push(lightID);&#10;   }&#10;&#10;   //get inputs and send command to light&#10;   var command = '{&quot;on&quot;:false,';&#10;   if (get('on') == true) {&#10;      command = '{&quot;on&quot;:true,';&#10;   }&#10;   command = command &#10;         + '&quot;bri&quot;:' + limit(get('brightness'), 0, 255) + ','&#10;         + '&quot;hue&quot;:' + limit(get('hue'), 0, 65280) + ','&#10;         + '&quot;sat&quot;:' + limit(get('saturation'), 0, 255) + ','&#10;         + '&quot;transitiontime&quot;:' + limit(get('transitionTime'), 0, 65535)&#10;         + '}';&#10;   try {&#10;      var response = httpRequest(url + lightID + &quot;/state/&quot;, &quot;PUT&quot;, &#10;            null, command, timeout);&#10;      console.log(response);&#10;      if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;         throw &quot;Server responds with error: &quot; + response[0].error.description;&#10;      }&#10;   } catch(e) {&#10;      throw &quot;Error accessing network: &quot; + e;&#10;   }&#10;}&#10;&#10;/** Turn off changed lights on wrapup. */&#10;function wrapup() {&#10;   for (var i = 0; i &lt; handlers.length; i++) {&#10;      removeInputHandler(handlers[i]);&#10;   }&#10;&#10;   var errorLights = [];&#10;   for (var i = 0; i &lt; changedLights.length; i++) {&#10;      var response = httpRequest(url + changedLights[i] + &quot;/state/&quot;, &quot;PUT&quot;, &#10;            null, '{&quot;on&quot;:false}', timeout);&#10;      console.log(response);&#10;      if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;         errorLights.push(lightID); &#10;      }&#10;   }&#10;&#10;   if (errorLights.length != 0) {&#10;      throw &quot;Error turning of lights &quot; + errorLights.toString();&#10;   }&#10;}&#10;&#10;/** utility function to check that an object is a nonempty array */&#10;function isNonEmptyArray(obj) {&#10;   return (obj instanceof Array &amp;&amp; obj.length &gt; 0);&#10;}&#10;&#10;/** Utility function to limit the range of a number&#10; * and to force it to be an integer. If the value argument&#10; * is a string, then it will be converted to a Number. */&#10;function limit(value, low, high) {&#10;   var parsed = parseInt(value);&#10;   if (!parsed) {&#10;      throw &quot;Expected a number between &quot; + low + &quot; and &quot; + high + &quot;, but got &quot; + value;&#10;   }&#10;   if (parsed &lt; low) {&#10;      return low;&#10;   } else if (parsed &gt; high) {&#10;      return high;&#10;   } else {&#10;      return parsed;&#10;   }&#10;}&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/Hue.js">
        </property>
        <property name="bridgeIPAddress" class="ptolemy.actor.parameters.PortParameter" value="&quot;192.168.1.50&quot;">
        </property>
        <property name="userName" class="ptolemy.data.expr.StringParameter" value="ptolemyuser565565">
        </property>
        <property name="lightID" class="ptolemy.actor.parameters.PortParameter" value="1">
        </property>
        <property name="brightness" class="ptolemy.actor.parameters.PortParameter" value="100.0">
        </property>
        <property name="hue" class="ptolemy.actor.parameters.PortParameter" value="1.0">
        </property>
        <property name="saturation" class="ptolemy.actor.parameters.PortParameter" value="254.0">
        </property>
        <property name="on" class="ptolemy.actor.parameters.PortParameter" value="true">
        </property>
        <property name="transitionTime" class="ptolemy.actor.parameters.PortParameter" value="1">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[330.0, 185.0]">
        </property>
        <port name="bridgeIPAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="lightID" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="brightness" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="hue" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="saturation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="on" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="transitionTime" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
    </entity>
    <entity name="RosSubscriber" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor subscribes to a ROS topic.&lt;br&gt;&#10; *  It communicates to ROS through the rosbridge web socket, and extends the &#10; *  WebSocketClient accessor to do so. &#10; *  It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt; &#10; *&#10; *  @accessor RosSubscriber&#10; *  @parameter {string} server The IP address or domain name of server.&#10; *  @parameter {number} port The port that the web socket listens to.&#10; *  @parameter {string} topic The ROS topic to subscribe to.&#10; *  @output {boolean} connected The status of the web socket connection.&#10; *  @output {JSON} received The data received from the web socket server.&#10; *  @author Marcus Pan &#10; *  @version $$Id$$ &#10; *&#10; */&#10;&#10;&#10;/** Sets up by accessor by inheriting inputs, outputs and parameters from setup() in WebSocketClient.&lt;br&gt;&#10; *  Adds a 'topic' input which is the ROS topic to subscribe to. */&#10;exports.setup = function() {&#10;&#10;   extend('WebSocketClient');&#10;&#10;   parameter('topic', {&#10;      type: &quot;string&quot;,&#10;      value: &quot;&quot;&#10;   });&#10;   &#10;}&#10;&#10;/** Overrides the toSendInputHandler to throw an error if called. A subscriber should not be publishing inputs. */&#10;exports.toSendInputHandler = function() {&#10;   console.error('This is a subscriber and does not take input to publish.');&#10;}&#10;&#10;/** Inherits initialize from webSocketClient.&lt;br&gt;&#10;    Sends a message to rosbridge to start subscribing to the topic on input 'topic'.*/ &#10;exports.initialize = function() {&#10;  Object.getPrototypeOf(exports).initialize.apply(this);&#10;&#10;  exports.sendToWebSocket({&#10;      &quot;op&quot;: &quot;subscribe&quot;,&#10;      &quot;topic&quot;: getParameter('topic')&#10;  });&#10;}&#10;&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/RosSubscriber.js">
        </property>
        <property name="server" class="ptolemy.data.expr.StringParameter" value="localhost">
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="9090">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="1000">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="topic" class="ptolemy.data.expr.StringParameter" value="/pose">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-55.0, 145.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="toSend" class="ptolemy.kernel.util.StringAttribute" value="The data to be send to the web socket server, in JSON format.">
            </property>
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={1172, 293, 170, 193}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[170, 172]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[350.0, 80.0]">
        </property>
    </entity>
    <entity name="ScarabHueController2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/**&#10; *  &lt;p&gt;This accessor takes in the current pose of the Scarab, and a lightMap which gives the lightID's &#10; *  and positions of available Hue lights in JSON form.&lt;/p&gt;&#10; *  &lt;pre&gt;&#10; *  lightMap = { &#10; *    &quot;lights&quot;: [&#10; *                {&quot;id&quot;: 1, &quot;position&quot;: {x, y, z}}, &#10; *                {&quot;id&quot;: 2, &quot;position&quot;: {x, y, z}}&#10; *              ]&#10; *  } &lt;/pre&gt;&#10; *  &lt;p&gt;At a given interval, it gets the closest light to the Scarab's current&#10; *  position. If this light is closer than a set threshold, it turns on this light to the given setting.  *  This interval, threshold and the light settings are parameters.&#10; *  parameters.&lt;/p&gt; &#10; *&#10; *  @accessor ScarabHueController&#10; *  @input {JSON} pose The current pose of the Scarab, formatted according to the ROS datatype geometry_msgs/Pose.&#10; *  @parameter {JSON} lightMap The coordinates and light id's of the Hue bulbs.&#10; *  @parameter {integer} checkLightsInterval The interval, in milliseconds, to find the nearest light bulb to the Scarab. &#10; *  @parameter {number} brightness Brightness of the light (number between 0-255). &#10; *  @parameter {number} hue Hue of the light (number between 0 - 62580). &#10; *  @parameter {number} saturation Saturation of the light (number between 0-255).&#10; *  @parameter {integer} transitionTime Transition time between light states, in multiples of 100 ms.&#10; *  @parameter {number} distanceThreshold. If the closest light's distance is less than distanceThresholdin m, turn the light on.&#10; *  @output {integer} lightID id of the light to turn on. &#10; *  @output {number} brightnessOut Brightness of the light (number between 0-255). &#10; *  @output {number} hueOut Hue of the light (number between 0 - 62580). &#10; *  @output {number} saturationOut Saturation of the light (number between 0-255).&#10; *  @output {boolean} onOut whether the light is on (true) or off (false). &#10; *  @output {integer} transitionTimeOut Transition time between light states, in mulitples of 100 ms.&#10; *  @author Marcus Pan &#10; *  @version $$Id$$ &#10; *&#10; */&#10;var lightMap;&#10;var handle;&#10;&#10;exports.setup = function() {&#10;  accessor.input('pose', {&#10;    type: 'JSON', &#10;    value: {}&#10;  });&#10;  accessor.parameter('lightMap', {&#10;    type: 'JSON', &#10;    value: {}&#10;  });&#10;  accessor.parameter('brightness', {&#10;    type: 'number',&#10;    value: 255&#10;  });&#10;  accessor.parameter('on', {&#10;    type: 'boolean',&#10;    value: false&#10;  });&#10;  accessor.parameter('hue', {&#10;    type: 'number',&#10;    value: 1&#10;  });&#10;  accessor.parameter('saturation', {&#10;    type: 'number',&#10;    value: 254&#10;  });&#10;  accessor.parameter('transitionTime', {&#10;    type: 'int',&#10;    value: 1&#10;  });&#10;  accessor.parameter('checkLightsInterval', {&#10;    type: 'int', &#10;    value: 1000&#10;  });&#10;  accessor.parameter('distanceThreshold', {&#10;    type: 'number',&#10;    value: 1&#10;   });&#10;  accessor.output('lightIDOut', {&#10;    type: 'int'&#10;  });&#10;  accessor.output('brightnessOut', {&#10;    type: 'number'&#10;  });&#10;  accessor.output('hueOut', {&#10;    type: 'number'&#10;  });&#10;  accessor.output('saturationOut', {&#10;    type: 'number'&#10;  });&#10;  accessor.output('onOut', {&#10;    type: 'boolean'&#10;  });&#10;  accessor.output('transitionTimeOut', {&#10;    type: 'int'&#10;  });&#10;}&#10;&#10;exports.initialize = function() {&#10;  lightMap = getParameter('lightMap');&#10;  if (lightMap == null || lightMap.lights == null ) {&#10;     throw &quot;Invalid light map&quot;;&#10;   }&#10;  handle = setInterval(checkLights, getParameter('checkLightsInterval'));&#10;}&#10;&#10;function checkLights() {&#10;  var pose = get('pose');&#10;  //make sure pose isn't empty&#10;  if (Object.keys(pose) == 0) {&#10;    console.log('no pose yet');&#10;    return;&#10;  }&#10;  var sortedLights = []; //array of lights sorted by closest distance to Scarab&#10;  var nearestLight = {&quot;id&quot;: null, &quot;distance&quot;: null};&#10;&#10;  //get nearest light&#10;  for (var i = 0; i &lt; lightMap.lights.length; i++) {&#10;    var light = lightMap.lights[i];&#10;    var dx = Math.pow(pose.msg.pose.position.x-light.position[0], 2);&#10;    var dy = Math.pow(pose.msg.pose.position.y-light.position[1], 2);&#10;    var dz = Math.pow(pose.msg.pose.position.z-light.position[2], 2);&#10;    var distance = Math.sqrt(dx+dy+dz);&#10;    if (nearestLight.distance == null || distance &lt; nearestLight.distance) {&#10;       nearestLight.id = light.id;&#10;       nearestLight.distance = distance;&#10;    }&#10;  }&#10;&#10;  //send light information&#10;  if (nearestLight.distance &lt; getParameter('distanceThreshold')) {&#10;    send('lightIDOut', nearestLight.id);&#10;    send('transitionTimeOut', getParameter('transitionTime'));&#10;    send('onOut', getParameter('on'));&#10;    send('hueOut', getParameter('hue'));&#10;    send('brightnessOut', getParameter('brightness'));&#10;    send('saturationOut', getParameter('saturation'));&#10;  }&#10;}&#10;&#10;exports.wrapup = function() {&#10;  clearTimeout(handle);&#10;}&#10;&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://terraswarm.org/accessors/ScarabHueController.js">
        </property>
        <property name="pose" class="ptolemy.actor.parameters.PortParameter" value="{msg = {header = {frame_id = &quot;map_hokuyo&quot;, seq = 57803, stamp = {nsecs = 647193908, secs = 1435108954}}, pose = {orientation = {w = 0.8819559110968, x = 0, y = 0, z = 0.4713319115882}, position = {x = 0.1196324932801, y = 0.0050147630647, z = 0}}}, op = &quot;publish&quot;, topic = &quot;/pose&quot;}">
        </property>
        <property name="lightMap" class="ptolemy.data.expr.Parameter" value="lightMap">
        </property>
        <property name="brightness" class="ptolemy.data.expr.Parameter" value="100.0">
        </property>
        <property name="on" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="hue" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <property name="saturation" class="ptolemy.data.expr.Parameter" value="254.0">
        </property>
        <property name="transitionTime" class="ptolemy.data.expr.Parameter" value="1">
        </property>
        <property name="checkLightsInterval" class="ptolemy.data.expr.Parameter" value="1000">
        </property>
        <property name="distanceThreshold" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[85.0, 155.0]">
        </property>
        <port name="pose" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="lightIDOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="brightnessOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="hueOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="saturationOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="onOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="transitionTimeOut" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[200.0, 120.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Hue.lightID" relation="relation8"/>
    <link port="Hue.brightness" relation="relation"/>
    <link port="Hue.hue" relation="relation2"/>
    <link port="Hue.saturation" relation="relation3"/>
    <link port="Hue.on" relation="relation5"/>
    <link port="Hue.transitionTime" relation="relation4"/>
    <link port="RosSubscriber.received" relation="relation6"/>
    <link port="Display.input" relation="relation8"/>
    <link port="ScarabHueController2.pose" relation="relation6"/>
    <link port="ScarabHueController2.lightIDOut" relation="relation8"/>
    <link port="ScarabHueController2.brightnessOut" relation="relation"/>
    <link port="ScarabHueController2.hueOut" relation="relation2"/>
    <link port="ScarabHueController2.saturationOut" relation="relation3"/>
    <link port="ScarabHueController2.onOut" relation="relation5"/>
    <link port="ScarabHueController2.transitionTimeOut" relation="relation4"/>
</entity>
