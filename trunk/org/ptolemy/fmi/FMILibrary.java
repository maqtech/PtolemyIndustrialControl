/* Functional Mock-up Interface (FMI) event information.

   Copyright (c) 2012 The Regents of the University of California.
   All rights reserved.
   Permission is hereby granted, without written agreement and without
   license or royalty fees, to use, copy, modify, and distribute this
   software and its documentation for any purpose, provided that the above
   copyright notice and the following two paragraphs appear in all copies
   of this software.

   IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
   FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
   ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
   THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
   SUCH DAMAGE.

   THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
   PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
   CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
   ENHANCEMENTS, OR MODIFICATIONS.

   PT_COPYRIGHT_VERSION_2
   COPYRIGHTENDKEY

*/

package org.ptolemy.fmi;
import org.ptolemy.fmi.FMICallbackFunctions.ByValue;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
/**
 * A Java Native Acess (JNA) Wrapper for a Functional Mock-up Unit shared library.
 *
 * <p>This file is based on a file that was autogenerated by 
 * <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br> a tool
 * written by <a href="http://ochafik.com/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses
 * a few opensource projects.</a>.</p>
 *
 * @author Christopher Brooks
 * @version $Id$
 * @Pt.ProposedRating Red (cxh)
 * @Pt.AcceptedRating Red (cxh)
 */
public interface FMILibrary extends Library {

    /**
     * enum values
     */
    public static interface FMIStatus {
        public static final int fmiOK = (int)0;
        public static final int fmiWarning = (int)1;
        public static final int fmiDiscard = (int)2;
        public static final int fmiError = (int)3;
        public static final int fmiFatal = (int)4;
        public static final int fmiPending = (int)5;
    };
    /**
     * enum values
     */
    public static interface FMIStatusKind {
        public static final int fmiDoStepStatus = (int)0;
        public static final int fmiPendingStatus = (int)1;
        public static final int fmiLastSuccessfulTime = (int)2;
    };

    public interface FMICallbackLogger extends Callback {
        // FIXME: Handle vargargs
        void apply(Pointer c, Pointer instanceName, int status, Pointer category, Pointer message, String ... parameters);
    };

    public interface FMICallbackAllocateMemory extends Callback {
        Pointer apply(NativeSizeT nobj, NativeSizeT size);
    };

    public interface FMICallbackFreeMemory extends Callback {
        void apply(Pointer obj);
    };

    public interface FMIStepFinished extends Callback {
        void apply(Pointer c, int status);
    };
}
