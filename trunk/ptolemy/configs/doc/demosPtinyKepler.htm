<!-- DO NOT EDIT this file, it is created by running make.
     The file to edit is $PTII/doc/ptIIx.x.release.htm
     where x.x is the release number, then run 'make update'
     to update the derived files and check them in to cvs. -->
<!-- DO NOT EDIT this file, it is created by running make.
     The file to edit is $PTII/doc/ptIIx.x.release.htm
     where x.x is the release number, then run 'make update'
     to update the derived files and check them in to cvs. -->
<html>
<head>
<!-- $Id$ -->
<!--

demosPtiny.htm is derived from this file by including
anything between the tags vergilDoc and /vergilDoc.
The vergilDoc tags are used by $PTII/doc/javahtml.awk
to generate demosPtiny.htm.


-->
<link href="../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<!--ptinyKeplerDocs-->
<h1>
Tour of Ptolemy II
</h1>

<!--
Note:  demos should go with in the directory of their respective
domains. Demo xml files should usually be upper case, and have the
same name as the directory they reside in; so we should
have sdf/demo/Foo/Foo.xml.
The reason that the xml files are upcased is so that if
we do codegen, we get Foo.java instead of foo.java
-->

If you are viewing this from within Vergil, the graphical
editor for Ptolemy II, then
many of the following links will open models that highlight the
key features of Ptolemy II. If you are using an ordinary
web browser, then you will see the XML definition of the models.
To run the models in Vergil,
click on the red triangle in the toolbar. The
diagrams are fully editable, so feel free to explore.
You can also access the <a href="completeDemosPtinyKepler.htm">complete
list of demos</a>
<!-- whatNew.htm links to whatsNew4.0.htm, which has many of features
     not present in ptiny -->
<!--vergilDocs-->
. Contents:
<ul>
<li> <a href="#domain">Application Domain-Specific Modeling</a>: Application Domain-specific modeling and design.
<li> <a href="#heterogeneous">Heterogeneous Modeling</a>: Mixing models of computation.
<li> <a href="#basic">Basic Modeling Capabilities</a>: Commonly used models of computation.
<li> <a href="#infrastructure">Modeling Infrastructure</a>: Capabilities shared by all uses of Ptolemy II.
<li> <a href="#libraries">Actor Libraries</a>: Useful libraries of actors.
<!--vergilDocs-->
</ul>

<h2>
<a name="domain">Application Domain-Specific Modeling</a>
</h2>
Ptolemy II can be used to build sophisticated application domain-specific modeling capabilities
and frameworks. These frameworks can be packaged as separate executable
applications (e.g. HyVisual or VisualSense)
or accessed from within Ptolemy II. Here, we illustrate some such frameworks.
<ul>

<!--vergilDocs-->
<!--ptinyKeplerDocs-->
<!--vergilDocs-->

<!--ptinyKeplerDocs-->
<!--vergilDocs-->
<!--ptinyKeplerDocs-->
<!--vergilDocs-->

<br>
<li>
<i>Stochastic hybrid systems</i>:
<a href="../../domains/ct/demo/Spontaneous/IncreasingRatePoisson.xml">IncreasingRatePoisson</a>
(see also
<a href="../../domains/ct/demo/Hysteresis/HysteresisWithRandomDelay.xml">HysteresisWithRandomDelay</a>,
<a href="../../domains/ct/demo/Brownian/Brownian.xml">Brownian</a>
).
<br>
Stochastic hybrid systems add random behavior to continuous-time models mixed
with discrete events. The 
<a href="../../domains/ct/demo/Spontaneous/IncreasingRatePoisson.xml">IncreasingRatePoisson</a>
models spontaneous mode transitions governed by a Poisson process.
The <a href="../../domains/ct/demo/Hysteresis/HysteresisWithRandomDelay.xml">HysteresisWithRandomDelay</a>
example uses similar spontaneous mode transitions to model random delay in mode transitions.
The <a href="../../domains/ct/demo/Brownian/Brownian.xml">Brownian</a> example
models a stochastic differential equation describing a random walk process.

<!--vergilDocs-->

<br>

<li><i>Signal Processing</i>:
<a href="../../domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.xml">MaximumEntropySpectrum</a>
(See also
<a href="../../domains/sdf/demo/LMSAdaptive/LMSAdaptive.xml">LMSAdaptive</a>,
<a href="../../domains/sdf/demo/SynthesizedVoice/SynthesizedVoice.xml">SynthesizedVoice</a>,
<a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">FourierSeries</a>, and
<a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">SoundSpectrum</a>)
<br>
Ptolemy II includes an extensive library and models of computation suitable for
digital signal processing, communication systems design, and image and video processing.
The <a href="../../domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.xml">MaximumEntropySpectrum</a>
example shows spectral estimation of sinusoids in noise.
It illustrates models the use of synchronous dataflow (SDF) for signal
processing, and also shows many basic capabilities like
hierarchical models,
the Expression actor, and the signal processing actor library.


</ul>
<h2>
<a name="heterogeneous">Heterogeneous Models</a>
</h2>
A particular capability of Ptolemy II is the ability to mix models of computation.
These examples illustrate some of these capabilities.
<ul>

<li><i>Modal Models</i>:
<a href="../../domains/de/demo/ModalModel/ModalModel.xml">
ModalModel</a>
<br>
A modal model is one whose behavior depends on its "mode"
of operation. A modal model in Ptolemy II heterogeneously combines the
<i>finite state machine</i> (FSM) domain
combined hierarchically with other models. A state in the FSM represents
a mode of operation, and can have a refinement that gives the behavior
in that mode.
The refinement can be another FSM or some other model using some other
Ptolemy domain. The <a href="../../domains/de/demo/ModalModel/ModalModel.xml">
ModalModel</a> example combines DE, FSM, and SDF to model a
system where regularly sampled signals are perturbed by irregular
events in time.


<br>

<li><i>Mixed-Signal Modeling</i>:
<a href="../../domains/ct/demo/SigmaDelta/SigmaDelta.xml">
SigmaDelta</a> (see also
<a href="../../domains/ct/demo/Switch/Switch.xml">Switching Continuous</a>)
<br>
This example shows how to combine continuous-time modeling
with discrete-event modeling to get mixed-signal modeling.
The example models a MEMS accelerometer where a digital circuit
implements feedback control and A/D conversion (a design due to
Mark Lemkin).

</ul>
<h2>
<a name="basic">Basic Modeling Capabilities</a>
</h2>
Many common models of computation have been implemented in
Ptolemy II.  This section illustrates some of them.
<ul>

<li><i>Synchronous Dataflow</i>:
<a href="../../domains/sdf/demo/Spectrum/Spectrum.xml">
Spectrum</a> (See also
<a href="../../domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.xml">MaximumEntropySpectrum</a>,
<a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">FourierSeries</a>, and
<a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">SoundSpectrum</a>)
<br> This example shows simple spectral estimation of the product
of two sinusoids in noise.  It illustrates models the use of synchronous dataflow (SDF) for signal
processing, and also shows many basic capabilities like
hierarchical models,
the Expression actor, and the signal processing actor library.
In SDF, the firing of actors is statically scheduled, and at the start of execution,
boundedness and deadlock conditions are checked.


<br>

<li><i>Continuous-Time Modeling</i>:
<a href="../../domains/ct/demo/Lorenz/Lorenz.xml">
Lorenz</a> (see also
<a href="../../domains/ct/demo/SquareWave/SquareWave.xml">SquareWave</a>)
<br> This example shows a continuous-time
nonlinear feedback system that exhibits
chaotic behavior (this system is called a Lorenz attractor).
It illustrates the <i>continuous-time</i> (CT) domain,
which uses an underlying solver for ordinary differential equations.


<br>

<li><i>Discrete-Event Modeling</i>:
<a href="../../domains/de/demo/Inspection/Inspection.xml">Inspection</a>
(see also

<!--ptinyKeplerDocs-->

<!--vergilDocs-->
<li> <a href="../../actor/lib/comm/demo/TrellisDecoder/TrellisDecoder.xml">TrellisDecoder</a>:
Communication library.

</ul>

<!--vergilDocs-->
</body>
</html>
</body>
</html>
</body>
</html>
