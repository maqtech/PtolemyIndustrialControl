<html>
<head>
<!-- $Id$ -->
<!--

demosPtiny.htm is derived from this file by including
anything between the tags vergilDoc and /vergilDoc.
The vergilDoc tags are used by $PTII/doc/javahtml.awk
to generate demosPtiny.htm.


-->
</head>
<body>
<!--vergilDocs-->
<h1>
Quick Tour
</h1>

<!--
Note:  demos should go with in the directory of their respective
domains. Demo xml files should usually be upper case, and have the
same name as the directory they reside in; so we should
have sdf/demo/Foo/Foo.xml.
The reason that the xml files are upcased is so that if
we do codegen, we get Foo.java instead of foo.java
-->

The following links open models that highlight the
key features of Ptolemy II. To run the models,
click on the red triangle in the toolbar. The
diagrams are fully editable, so feel free to explore.
You can also access the <a href="completeDemos.htm">complete
list of demos</a>
<!-- whatNew.htm links to whatsNew4.0.htm, which has lots of features
     not present in ptiny -->
<!--/vergilDocs-->
and the summary of
<a href="whatsNew.htm">new capabilities</a>
<!--vergilDocs-->
. Contents:
<ul>
<li> <a href="#domain">Domain-Specific Modeling</a>: Domain-specific modeling and design.
<li> <a href="#heterogeneous">Heterogeneous Modeling</a>: Mixing models of computation.
<li> <a href="#basic">Basic Modeling Capabilities</a>: Commonly used models of computation.
<li> <a href="#infrastructure">Modeling Infrastructure</a>: Capabilities shared by all uses of Ptolemy II.
<li> <a href="#experimental">Experimental</a>: Demonstrations of less mature capabilities.
</ul>

<h2>
<a name="domain">Domain-Specific Modeling</a>
</h2>
Ptolemy II can be used to build sophisticated domain-specific modeling capabilities
and domain-specific frameworks. These frameworks can be packaged as separate executable
applications (e.g. HyVisual or VisualSense)
or accessed from within Ptolemy II. Here, we illustrate some such frameworks.
<ul>

<!--/vergilDocs-->

<li><i>Modeling of wireless networks</i>: <a href="../../domains/wireless/demo/WirelessSoundDetection/WirelessSoundDetection.xml">
WirelessSoundDetection</a> (See also
<a href="../visualsense/intro.htm">VisualSense introduction</a>)
<br> This example illustrates the wireless domain in Ptolemy II,
which extends discrete-event modeling with wireless channel models.
This example models a sound localization problem. A single sound source
moves through a field of sound sensors. The sound sensors detect the sound
and communicate via a radio channel to a sensor fusion component that
localizes the sound by triangulation.
</li>

<!--vergilDocs-->

<li>
<i>Modeling of hybrid systems</i>: <a href="../../domains/gr/demo/StickyMasses/StickyMasses.xml">
StickyMasses</a> 
(see also
<!-- GR does not get included in demosPtiny.htm -->
<!--/vergilDocs-->
<a href="../../domains/ct/demo/BouncingBall/BouncingBall.xml">BouncingBall</a>,
<a href="../../domains/gr/demo/FurutaPendulum/FurutaPendulum.xml">FurutaPendulum</a>,
and
<!--vergilDocs-->
the <a href="../../configs/hyvisual/intro.htm">HyVisual introduction</a>).
<br> <i>Hybrid systems</i> are a special case of modal models
where the FSM domain is combined with the continuous-time (CT) domain
to get mixed continuous-time and discrete-event models.
The StickyMasses example models a physical system consisting of two point masses
on springs that stick together when they collide.
</li>

<li>
<i>Stochastic hybrid systems</i>:
<a href="../../domains/ct/demo/Hysteresis/HysteresisWithRandomDelay.xml">
HysteresisWithRandomDelay</a>.
<br>This example illustrates how to model random delays associated with
state transitions of a hybrid systems.

</ul>
<h2>
<a name="heterogeneous">Heterogeneous Models</a>
</h2>
A particular capability of Ptolemy II is the ability to mix models of computation.
These examples illustrate this.
<ul>

<li><i>Modal Models</i>:
<a href="../../domains/de/demo/ModalModel/ModalModel.xml">
ModalModel</a>
<br>
A modal model is one whose behavior depends on its "mode"
of operation. A modal model in Ptolemy II heterogeneously combines the
<i>finite state machine</i> (FSM) domain
combined hierarchically with other models. A state in the FSM represents
a mode of operation, and can have a refinement that gives the behavior
in that mode.
The refinement can be another FSM or some other model using some other
Ptolemy domain. This example combines DE, FSM, and SDF to model a
system where regularly sampled signals are perturbed by irregular
events in time.
</li>

<li><i>Mixed-Signal Modeling</i>:
<a href="../../domains/ct/demo/SigmaDelta/SigmaDelta.xml">
SigmaDelta</a> (see also
<a href="../../domains/ct/demo/Switch/Switch.xml">Switching Continuous</a>)
<br>
This example shows how to combine continuous-time modeling
with discrete-event modeling to get mixed-signal modeling.
The example models a MEMS accelerometer where a digital circuit
implements feedback control and A/D conversion (a design due to
Mark Lemkin).

</ul>
<h2>
<a name="basic">Basic Modeling Capabilities</a>
</h2>
Many common modeling and design techniques have been implemented in
Ptolemy II.  This section illustrates some of them.
<ul>

<li><i>Synchronous Dataflow</i>:
<a href="../../domains/sdf/demo/Spectrum/Spectrum.xml">
Spectrum</a> (See also
<a href="../../domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.xml">MaximumEntropySpectrum</a>,
<a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">FourierSeries</a>, and
<a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">SoundSpectrum</a>)
<br> This example shows simple spectral estimation of the product
of two sinusoids in noise.  It illustrates models the use of synchronous dataflow (SDF) for signal
processing, and also shows many basic capabilities like
hierarchical models,
the Expression actor, and the signal processing actor library.
In SDF, the firing of actors is statically scheduled, and at the start of execution,
boundedness and deadlock conditions are checked.
</li>

<li><i>Continuous-Time Modeling</i>:
<a href="../../domains/ct/demo/Lorenz/Lorenz.xml">
Lorenz</a> (see also
<a href="../../domains/ct/demo/SquareWave/SquareWave.xml">SquareWave</a>)
<br> This example shows a continuous-time
nonlinear feedback system that exhibits
chaotic behavior (this system is called a Lorenz attractor).
It illustrates the <i>continuous-time</i> (CT) domain,
which uses an underlying solver for ordinary differential equations.
</li>

<li><i>Discrete-Event Modeling</i>:
<a href="../../domains/de/demo/Inspection/Inspection.xml">
Inspection</a> (see also
<a href="../../data/type/demo/Router/Router.xml">Router</a>
and <a href="../../domains/de/demo/TimingParadox/TimingParadox.xml">
TimingParadox</a>).
<br> This example shows
a famous paradox in probability called the inspection paradox.
It illustrates use of the <i>discrete-event</i> (DE) domain, where
events occur on a time line and are processed chronologically.
In this example, random
data stimulates a model and statistics are collected and reported
in various ways.
</li>

<li><i>Process Networks</i>:
<a href="../../domains/pn/demo/OrderedMerge/OrderedMerge.xml">
OrderedMerge</a> (see also
<a href="../../domains/pn/demo/QR/QR.xml">QR</a>).<br>
This example illustrates the <i>process networks</i> (PN) domain,
where each actor executes in a separate Java thread.
The example calculates numbers whose prime
factors are 2, 3, and 5, only, and produces
them in an ordered sequence.
</li>

<!--/vergilDocs-->
<!--sr does not get included in demosPtiny.htm -->
<li><i>Synchronous/Reactive Modeling</i>:
<a href="../../domains/sr/demo/TokenRing/TokenRing.xml">
TokenRing</a>.<br>
This example illustrates the <i>synchronous/reactive</i> (SR) domain,
which is inspired by the synchronous languages Esterel, Lustre, and Signal.
The example uses the fixed-point semantics of SR to arbitrate access
to a shared medium using a token-ring protocol.
</li>
<!--vergilDocs-->

</ul>
<h2>
<a name="infrastructure">Modeling Infrastructure</a>
</h2>
Ptolemy II models are built on an underlying framework that provides a rich
set of generic capabilities that are available in all models.
This section illustrates that infrastructure.
<ul>

<li>
<i>Classes, subclasses, and inner classes</i>:
<a href="ClassesIllustrated.xml">
ClassesIllustrated</a> (see also
<a href="../../domains/sdf/demo/NoisySinewave/NoisySinewave.xml">
Noisy sinewaves</a> and
<a href="../../domains/sdf/demo/RijndaelEncryption/RijndaelEncryption.xml">
Rijndael Encryption</a>).
<br>
Actor-oriented classes, subclasses, and
inner classes with inheritance are a special feature of Ptolemy II.
They provide modularity mechanisms analogous to those of object-oriented
design, but adapted to actor-oriented design. This capability permits, for
example, defining a class of models that can have instances and subclasses.
The instances and subclasses inherit all the features of the class, and
track any changes that are made to the class.

<li><i>The Type System</i>:
<a href="../../data/type/demo/Router/Router.xml">
Router</a>.
<br>
This model illustrates the very sophisticated type system
of Ptolemy II, where type constraints propagate transparently,
actors are polymorphic, and composite types such as records and
arrays are supported.
This example illustrates composite types, where records are
constructed out of tokens with various types. Here, a record
models a packet in a packet-switched network, where variable
delays may result in out-of-order arrival of packets.
</li>

<li><i>Expression Language</i>:
<a href="../../domains/ct/demo/Transmission/Transmission.xml">
Transmission</a>.
<br>
To simplify creating new components, Ptolemy II contains a functional
expression language.  The expression language is integrated with the
type system, allowing static type checking of polymorphic expressions
with few type annotations.  The expression language also allows new,
encapsulated functions, called function closures, to be defined and
passed as data.  This model illustrates how function closures can be
used to make models much more compact. </li>

<li><i>Higher-Order Components</i>:
<a href="../../actor/lib/hoc/demo/HocDE/HocDE.xml">HocDE</a>
(see also
<a href="../../actor/lib/hoc/demo/DFTSubset/DFTSubset.xml">DFTSubset</a>,
<a href="../../actor/lib/hoc/demo/ApplyFFT/ApplyFFT.xml">ApplyFFT</a>
).
<br>Higher-order components are components that operate on components.
This example contains a component that is a composite actor that
replicates itself some specified number of times to operate on
multiple channels of input.  This capability was created by
Zoltan Kemenczy and Sean Simmons, Research In Motion, Ltd.


<li><i>Interactive Signal Plotter</i>:
<a href="../../domains/sdf/demo/Sketch/Sketch.xml">Sketch</a>
(see also <a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">FourierSeries</a>).
<br>
This model illustrates the use of plotter to provide input
as well as rendering output from a model.  Right click and drag
on the plot to trace out a new signal. The model runs each time you
do this.

<li><i>Matlab Integration</i>:
<a href="../../matlab/demo/MatlabExpression/MatlabExpression.xml">
MatlabExpression</a> (see also
<a href="../../matlab/demo/MatlabCT/MatlabCT.xml">Matlab in CT</a>).
<br>
This example uses the Matlab interface created by
Zoltan Kemenczy and Sean Simmons, of Research in Motion Ltd.,
to plot a 3-D surface. This works only if Matlab is installed locally.

<li><i>Model Animations</i>:
<a href="../../actor/parameters/demo/Bouncer/Bouncer.xml">Bouncer</a>
<!--/vergilDocs-->
(see also <a href="../../domains/wireless/demo/WirelessSoundDetection/WirelessSoundDetection.xml">
WirelessSoundDetection</a>)
<!--vergilDocs-->
.
<br>
Ptolemy II models can, while executing, control their visual rendition
in Vergil, the visual editor for Ptolemy II.
In this example, a model alters the position in the Vergil diagram
of one of its own actors.

<li><i>Statically Checked Units System</i>:
<a href="../../data/unit/demo/StaticUnits/StaticUnits.xml">
StaticUnits</a> (see also
<a href="../../data/unit/demo/Units/Units.xml">Units</a>, the
dynamically checked units system).
<br>
This model illustrates the use of the statically
checked units system. A unit system
defines a set of interrelated dimensions and measures. For example, in
the time dimension, we might have seconds, minutes, hours, days, weeks,
and fortnights. Ptolemy II includes two experimental units systems,
one that is statically checked and one that is dynamically checked.
</li>

<li><i>Network Integration</i>:
<a href="../../moml/demo/Networked/Networked.xml">
Networked</a>.<br>
This example illustrates that models may be defined in a networked,
distributed fashion.
This model contains a component that is defined on the Ptolemy project
website.  When you open the model, you will be alerted to the fact
that it requires loading a model definition from a remote source.
If you agree to proceed, then you will have a model with a remotely
defined component.  The component itself is at
<a href="http://ptolemy.eecs.berkeley.edu/xml/models/Waveform.xml">
http://ptolemy.eecs.berkeley.edu/xml/models/Waveform.xml</a>.
You can open that definition by clicking on the hyperlink, or by
using the "Open URL" command in the File menu.
</li>

<li><i>Audio</i>:
<a href="../../actor/lib/javasound/demo/KarplusStrong/KarplusStrong.xml">
KarplusStrong</a> (see also <a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">SoundSpectrum</a>).
<br>
Ptolemy II includes actors that interface to the audio system on
the executing machine, assuming it has one.
This example shows the Karplus-Strong algorithm, which synthesizes
a musical sound that closely resembles a plucked string instrument.
It illustrates the audio capabilities of Ptolemy II.
</li>

<h2>
<a name="experimental">Experimental Capabililties</a>
</h2>
<p>
Ptolemy II has a number of less well-developed experimental
capabilities that may continue to evolve over time.
These are illustrated in the following examples.

<ul>


<!--/vergilDocs-->
<!--ci does not get included in demosPtiny.htm -->
<li> <a href="../../domains/ci/demo/Router/Router.xml">Push/Pull
Component Interaction</a>.
<br>
The CI (component interaction) domain models communication between
components that uses a combination of push and pull. This model
illustrates the use of these styles of communication to route packets
through queues using some policy that depends on the queue sizes.
<!--vergilDocs-->

<!--/vergilDocs-->
<!--python does not get included in demosPtiny.htm -->
<li><a href="../../actor/lib/python/demo/PythonScale/PythonScale.xml">Python Integration</a>
<br>This example shows a trivial implementation of the Scale actor
using the Python language.  The advantage of using Python 
is that Python is an interpreted language, so changes
to the actor body can be made on the fly without restarting
Ptolemy II.  New users may find it easier to prototype
actors in Python and then reimplement them as necessary
as standard Ptolemy II actors.
<!--vergilDocs-->

<!--/vergilDocs-->
<!--caltrop does not get included in demosPtiny.htm -->
<li>Cal: an interpreted actor definition language.
<a href="../../caltrop/demo/FunctionClosures/FunctionClosures.xml">Function Closures</a>,
<a href="../../caltrop/demo/FunctionDefinition/FunctionDefinition.xml">Function Definition</a>,
<a href="../../caltrop/demo/Primes/Primes.xml">Primes</a>,
<a href="../../caltrop/demo/SDFDDI/SDFDDI.xml">SDFDDI</a>
<!--vergilDocs-->

<!--/vergilDocs-->
<!--dt does not get included in demosPtiny.htm -->
<li><a href="../../domains/dt/demo/Eye/Eye.xml">
Discrete-Time Models</a>.
<br> This example shows a simple pulse-amplitude modulation, physical
layer communication system.  It illustrates the <i>discrete-time</i> (DT)
domain, live parameter editing and
the scope-style plotter (which shows an eye diagram).
Note that discrete-time models can also be represented using the
SDF domain, which is not explicit about the passage of time.
</li>
<!--vergilDocs-->

<!--/vergilDocs-->
<!-- codegen does not get shipped with ptiny -->
<li> <a href="../../../doc/codegen.htm">
Code Generation</a>
<br>
This release includes a limited prototype of our code generation facility
that will generate .class files for non-hierarchical SDF models.
This example leads to more information about this capability.
</li>
<!--vergilDocs-->

<!--/vergilDocs-->
<!--Ptiny does not include the GR domain-->
<li><a href="../../domains/gr/demo/Pendulum/Pendulum.xml">
Three-Dimensional Graphics</a> (see also
<a href="../../domains/gr/demo/Universe/Universe.xml">Universe</a>,
<a href="../../domains/gr/demo/StickyMasses/StickyMasses.xml">Sticky Masses</a>)
and <a href="../../domains/ct/demo/BouncingBall/BouncingBall.xml">Bouncing Ball</a>).
<br>
<font color="red">NOTE: This model requires that you have
installed Java 3D from Sun
(see http://java.sun.com/products/java-media/3D/).</font>
This example shows a continuous-time physical model of pendulum
animated in the <i>graphics</i> (GR) domain, in which graphical components
can be assembled and dynamically manipulated.  Note that clicking
and dragging in the graphics window rotates the model.
For further details, see the
<a href="../../domains/gr/doc/main.htm">GR domain</a>.
</li>
<!--vergilDocs-->

<!--/vergilDocs-->
<!--Ptiny does not include the TM domain-->
<li><a href="../../domains/tm/demo/Controllers/Controllers.xml">
Timed Multitasking</a>.<br>
This example illustrates the <i>timed multitasking</i> (TM) domain,
which is inspired by the Giotto language, and has features of
priority-driven real-time operating systems. In this example,
two control systems share a computational resource. Depending
on the scheduling strategy chosen (preemptive or nonpreemptive)
and the priorities, the two control systems may be both stable,
or one may be stable, or the other may be stable.
</li>

<!--vergilDocs-->
</ul>
</body>
</html>
