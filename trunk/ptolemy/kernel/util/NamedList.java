/* Generated By:JavaScope: Do not edit this line. NamedList.java */
/* An ordered list of objects with names.

 Copyright (c) 1997-2001 The Regents of the University of California.
 All rights reserved.
 Permission is hereby granted, without written agreement and without
 license or royalty fees, to use, copy, modify, and distribute this
 software and its documentation for any purpose, provided that the above
 copyright notice and the following two paragraphs appear in all copies
 of this software.

 IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
 ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

 THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
 PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
 CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 ENHANCEMENTS, OR MODIFICATIONS.

                                        PT_COPYRIGHT_VERSION_2
                                        COPYRIGHTENDKEY

@ProposedRating Green (eal@eecs.berkeley.edu)
@AcceptedRating Green (johnr@eecs.berkeley.edu)

NOTE: This class could leverage better
the underlying LinkedList class. E.g., it could be
capable of returning an enumeration sorted alphabetically by name.
This would require extensions to the interface, but not modifications
of the current interface.
*/

package ptolemy.kernel.util;

import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.NoSuchElementException;
import java.io.Serializable; import COM.sun.suntest.javascope.database.js$;import COM.sun.suntest.javascope.database.CoverageUnit; 

//////////////////////////////////////////////////////////////////////////
//// NamedList
/**
An ordered list of objects with names.
The objects must implement the Nameable interface.
The names are required to be unique and non-null.
<p>
This class is biased towards sequential accesses.
If it is used with name lookups, the list should be small.
It is implemented as a linked list rather than hash table to
preserve ordering information, and thus would not provide efficient
name lookup for large lists.
Also, it permits the name of an object in the list
to change without this list being informed.
<p>
An instance of this class may have a container, but that container
is only used for error reporting.

@author Mudit Goel, Edward A. Lee
@version $Id$
@see Nameable
*/
public final class NamedList implements Cloneable, Serializable { static private int js$t0 = js$.setDatabase("/home/eecs/cxh/jsdatabase");static private String[] js$p={"ptolemy","kernel","util",};static private CoverageUnit js$c=js$.c(js$p,"NamedList","/export/maury/maury2/cxh/tmp/ptII/ptolemy/kernel/util/jsoriginal/NamedList.java",976122374900L,js$n());  static final int[] js$a = js$c.counters; 

    /** Construct an empty NamedList with no container.
     */
    public NamedList() {
        super(); try{  js$.g(NamedList.js$a,1);  }finally{js$.flush(NamedList.js$c);} 
     js$.g(NamedList.js$a,0);/*$js$*/ }

    /** Construct an empty list with a Nameable container.
     *  @param container The container (for error reporting).
     */
    public NamedList(Nameable container) {
        super(); try{  js$.g(NamedList.js$a,3); 
         js$.g(NamedList.js$a,2);/*$js$*/ _container = container; }finally{js$.flush(NamedList.js$c);} 
    }

    /** Copy constructor.  Create a copy of the specified list, but
     *  with no container. This is useful to permit enumerations over
     *  a list while the list continues to be modified.
     *  @param original The list to copy.
     */
    public NamedList(NamedList original) {
        super(); try{  js$.g(NamedList.js$a,5); 
         js$.g(NamedList.js$a,4);/*$js$*/ _namedList.addAll(original.elementList());
        _container = null; }finally{js$.flush(NamedList.js$c);} 
    }

    ///////////////////////////////////////////////////////////////////
    ////                         public methods                    ////

    /** Add an element to the end of the list.
     *  The element is required to have a name that does not coincide with
     *  that of an element already on the list.
     *  @param element Element to be added to the list.
     *  @exception IllegalActionException If the argument has no name.
     *  @exception NameDuplicationException If the name coincides with
     *   an element already on the list.
     */
    public void append(Nameable element)
            throws IllegalActionException, NameDuplicationException {try  { js$.g(NamedList.js$a,10); 
         js$.g(NamedList.js$a,6);/*$js$*/ String newName = element.getName();
        if ( ((( newName == null ) && ++NamedList.js$a[11] != 0) || ++NamedList.js$a[12] == 0) ) {
             js$.g(NamedList.js$a,7);/*$js$*/ throw new IllegalActionException(_container,
                    _NULL_NAME_EXCEPTION_STRING);
        }
        // NOTE: Having to do this named lookup each time is expensive.
        if( (((  get(newName) == null ) && ++NamedList.js$a[13] != 0) || ++NamedList.js$a[14] == 0)  ) {
             js$.g(NamedList.js$a,8);/*$js$*/ _namedList.add(element);
        } else {
             js$.g(NamedList.js$a,9);/*$js$*/ throw new NameDuplicationException(_container, element);
        }
    } finally{js$.flush(NamedList.js$c);}} 

    /** Build an independent copy of the list.
     *  The elements themselves are not cloned.
     *  @return A new instance of NamedList.
     */
    public Object clone() {try  { js$.g(NamedList.js$a,16); 
         js$.g(NamedList.js$a,15);/*$js$*/ return new NamedList(this);
    } finally{js$.flush(NamedList.js$c);}} 

    /** Return an unmodifiable list with the contents of this named list.
     *  @return A list of Nameable objects.
     */
    public List elementList() {try  { js$.g(NamedList.js$a,18); 
         js$.g(NamedList.js$a,17);/*$js$*/ return Collections.unmodifiableList(_namedList);
    } finally{js$.flush(NamedList.js$c);}} 

    /** Enumerate the elements of the list.
     *  @deprecated Use elementList() instead.
     *  @return An enumeration of Nameable objects.
     */
    public Enumeration elements() {try  { js$.g(NamedList.js$a,20); 
         js$.g(NamedList.js$a,19);/*$js$*/ return Collections.enumeration(_namedList);
    } finally{js$.flush(NamedList.js$c);}} 

    /** Get the first element.
     *  @exception NoSuchElementException If the list is empty.
     *  @return The specified element.
     */
    public Nameable first() throws NoSuchElementException {try  { js$.g(NamedList.js$a,22); 
	 js$.g(NamedList.js$a,21);/*$js$*/ return (Nameable)_namedList.getFirst();
    } finally{js$.flush(NamedList.js$c);}} 

    /** Get an element by name.
     *  @param name The name of the desired element.
     *  @return The requested element if it is found, and null otherwise.
     */
    public Nameable get(String name) {try  { js$.g(NamedList.js$a,27); 
         js$.g(NamedList.js$a,23);/*$js$*/ Iterator iterator = _namedList.iterator();
        while( (((  iterator.hasNext() ) && ++NamedList.js$a[28] != 0) || ++NamedList.js$a[29] == 0)  ) {
             js$.g(NamedList.js$a,24);/*$js$*/ Nameable obj = (Nameable)iterator.next();
            if( (((  name.equals(obj.getName()) ) && ++NamedList.js$a[30] != 0) || ++NamedList.js$a[31] == 0)  ) {
                 js$.g(NamedList.js$a,25);/*$js$*/ return obj;
            }
        }
         js$.g(NamedList.js$a,26);/*$js$*/ return null;
    } finally{js$.flush(NamedList.js$c);}} 

    /** Return true if the specified object is on the list.
     *  @param element Element to be searched for in the list.
     *  @return A boolean indicating whether the element is on the list.
     */
    public boolean includes(Nameable element) {try  { js$.g(NamedList.js$a,33); 
         js$.g(NamedList.js$a,32);/*$js$*/ return _namedList.contains(element);
    } finally{js$.flush(NamedList.js$c);}} 

    /** Insert a new element after an element with the specified name.
     *  If there is no element with such name, then the new element is
     *  appended to the end of the list.
     *  @param name The name of the element after which to insert.
     *  @param element The element to insert.
     *  @exception IllegalActionException If the element to insert has no name.
     *  @exception NameDuplicationException If the element to insert has a
     *   name that coincides with one already on the list.
     */
    public void insertAfter(String name, Nameable element)
            throws IllegalActionException, NameDuplicationException {try  { js$.g(NamedList.js$a,37); 
         js$.g(NamedList.js$a,34);/*$js$*/ int index = _getIndexOf(name);
        if ( ((( index == -1 ) && ++NamedList.js$a[38] != 0) || ++NamedList.js$a[39] == 0) ) {
            // name doesn't exist in list
             js$.g(NamedList.js$a,35);/*$js$*/ append(element);
        } else {
            // name exists in list
             js$.g(NamedList.js$a,36);/*$js$*/ _insertAt((index+1), element);
        }
    } finally{js$.flush(NamedList.js$c);}} 

    /** Insert a new element before an element with the specified name.
     *  If there is no element with such name, then the new element is
     *  added to the beginning of the list.
     *  @param name The name of the element before which to insert.
     *  @param element The element to insert.
     *  @exception IllegalActionException If the element to insert has no name.
     *  @exception NameDuplicationException If the element to insert has a
     *   name that coincides with one already on the list.
     */
    public void insertBefore(String name, Nameable element)
            throws IllegalActionException, NameDuplicationException {try  { js$.g(NamedList.js$a,43); 
         js$.g(NamedList.js$a,40);/*$js$*/ int index = _getIndexOf(name);
        if ( ((( index == -1 ) && ++NamedList.js$a[44] != 0) || ++NamedList.js$a[45] == 0) ) {
            // name doesn't exist in list
             js$.g(NamedList.js$a,41);/*$js$*/ prepend(element);
        } else {
            // name exists in the list
             js$.g(NamedList.js$a,42);/*$js$*/ _insertAt(index, element);
        }
    } finally{js$.flush(NamedList.js$c);}} 

    /** Get the last element.
     *  @exception NoSuchElementException If the list is empty.
     *  @return The last element.
     */
    public Nameable last() throws NoSuchElementException {try  { js$.g(NamedList.js$a,47); 
	 js$.g(NamedList.js$a,46);/*$js$*/ return (Nameable)_namedList.getLast();
    } finally{js$.flush(NamedList.js$c);}} 

    /** Add an element to the beginning of the list.
     *  The element is required to have a name that does not coincide with
     *  that of an element already on the list.
     *  @param element Element to be added to the list.
     *  @exception IllegalActionException If the argument has no name.
     *  @exception NameDuplicationException If the name coincides with
     *   an element already on the list.
     */
    public void prepend(Nameable element)
            throws IllegalActionException, NameDuplicationException {try  { js$.g(NamedList.js$a,49); 
         js$.g(NamedList.js$a,48);/*$js$*/ _insertAt(0, element);
    } finally{js$.flush(NamedList.js$c);}} 

    /** Remove the specified element.  If the element is not on the
     *  list, do nothing.
     *  @param element Element to be removed.
     */
    public void remove(Nameable element) {try  { js$.g(NamedList.js$a,51); 
         js$.g(NamedList.js$a,50);/*$js$*/ _namedList.remove(element);
    } finally{js$.flush(NamedList.js$c);}} 

    /** Remove an element specified by name.  If no such element exists
     *  on the list, do nothing.
     *  @param name Name of the element to be removed.
     *  @return A reference to the removed object, or null if no
     *   object with the specified name is found.
     */
    public Nameable remove(String name) {try  { js$.g(NamedList.js$a,55); 
         js$.g(NamedList.js$a,52);/*$js$*/ Nameable element = get(name);
        if ( ((( element != null ) && ++NamedList.js$a[56] != 0) || ++NamedList.js$a[57] == 0) ) {
             js$.g(NamedList.js$a,53);/*$js$*/ remove(element);
            return element;
        }
         js$.g(NamedList.js$a,54);/*$js$*/ return null;
    } finally{js$.flush(NamedList.js$c);}} 

    /** Remove all elements from the list. */
    public void removeAll() {try  { js$.g(NamedList.js$a,59); 
         js$.g(NamedList.js$a,58);/*$js$*/ _namedList.clear();
    } finally{js$.flush(NamedList.js$c);}} 

    /** Return the number of elements in the list.
     *  @return A non-negative integer.
     */
    public int size() {try  { js$.g(NamedList.js$a,61); 
         js$.g(NamedList.js$a,60);/*$js$*/ return _namedList.size();
    } finally{js$.flush(NamedList.js$c);}} 


    ///////////////////////////////////////////////////////////////////
    ////                         private methods                   ////

    /*  Get the index of the element with the specified name.
     *  This is private because the
     *  interface to this class does not include the notion of indexes.
     *  @param name The name of the desired element.
     *  @return The index of the desired element, or -1 if it not on the list.
     */
    private int _getIndexOf(String name) {try  { js$.g(NamedList.js$a,67); 
         js$.g(NamedList.js$a,62);/*$js$*/ Iterator iterator = _namedList.iterator();
        int count = 0;
        while( (((  iterator.hasNext() ) && ++NamedList.js$a[68] != 0) || ++NamedList.js$a[69] == 0)  ) {
             js$.g(NamedList.js$a,63);/*$js$*/ Nameable obj = (Nameable)iterator.next();
            if( (((  name.equals(obj.getName()) ) && ++NamedList.js$a[70] != 0) || ++NamedList.js$a[71] == 0)  ) {
                 js$.g(NamedList.js$a,64);/*$js$*/ return count;
            }
             js$.g(NamedList.js$a,65);/*$js$*/ count++;
        }
         js$.g(NamedList.js$a,66);/*$js$*/ return -1;
    } finally{js$.flush(NamedList.js$c);}} 

    /*  Add an element at the specified position index in the list.
     *  The element is inserted just prior to that element that currently
     *  has the specified position index.  The index can range from 0..size()
     * (i.e., one past the current last index). If the index is equal to
     *  size(), the element is appended as the new last element.
     *  This is private because the
     *  interface to this class does not include the notion of indexes.
     *  @param index Where to insert the new element.
     *  @param element The element to insert.
     *  @exception IllegalActionException If the Element to insert has no name.
     *  @exception NameDuplicationException If the Element to insert has a
     *   name that coincides with one already on the list.
     */
    private void _insertAt(int index, Nameable element)
            throws IllegalActionException, NameDuplicationException {try  { js$.g(NamedList.js$a,75); 
        if( (((  element.getName() == null ) && ++NamedList.js$a[76] != 0) || ++NamedList.js$a[77] == 0)  ) {
             js$.g(NamedList.js$a,72);/*$js$*/ throw new IllegalActionException(_container,
                    _NULL_NAME_EXCEPTION_STRING);
        } else {  if ( ((( get(element.getName()) == null ) && ++NamedList.js$a[78] != 0) || ++NamedList.js$a[79] == 0) ) {
             js$.g(NamedList.js$a,73);/*$js$*/ _namedList.add(index, element);
            return;
        } } 
         js$.g(NamedList.js$a,74);/*$js$*/ throw new NameDuplicationException(_container, element);
    } finally{js$.flush(NamedList.js$c);}} 

    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////

    /** @serial The container (owner) of this list. */
    private Nameable _container;

    /** @serial A LinkedList containing the elements. */
    private LinkedList _namedList = new LinkedList();

    // Constant strings.
    private static final String _NULL_NAME_EXCEPTION_STRING =
    "Attempt to add an object with a null name to a NamedList."; static private int js$n() {return 80;}  static private int js$t1=js$.flush(NamedList.js$c);private int js$t2=js$.flush(NamedList.js$c); 
