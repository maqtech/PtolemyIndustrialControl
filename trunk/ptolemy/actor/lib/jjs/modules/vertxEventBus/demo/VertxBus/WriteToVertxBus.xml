<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="WriteToVertxBus" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[110.0, 50.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={659, 22, 774, 430}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[540, 320]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{270.0, 160.0}">
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="synchronizeToRealTime is set to &#10;TRUE, 1 time unit in model&#10;time corresponds to 1 second.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 85.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Write a token to address 'x' on the Vert.x bus.">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[105.0, 245.0]">
        </property>
    </property>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="0.5">
        </property>
        <property name="offsets" class="ptolemy.data.expr.Parameter" value="{0.0}">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[90.0, 190.0]">
        </property>
    </entity>
    <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
        <doc>Create a sequence of tokens with increasing value</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[245.0, 200.0]">
        </property>
    </entity>
    <entity name="VertxPublish" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Publish to a Vert.x event bus, which is a peer-to-peer publish-and-subscribe system.&#10; *  The published data will be sent to any subscriber that subscribes to the same&#10; *  address and runs in the same Vertx cluster (see the VertxSubscribe accessor).&#10; *  The Vertx cluster normally includes all machines that hear multicast packets&#10; *  sent by the machine hosting this accessor.&#10; * &#10; *  The input to be published can be any data type supported by accessors that&#10; *  has a string representation in JSON syntax. The data will be converted to a&#10; *  string in JSON format and sent to the event bus. The VertxSubscribe accessor&#10; *  will parse that string and output the data in the native format of its host.&#10; * &#10; *  If the broadcast input is set to false, then instead of broadcasting the&#10; *  message to all subscribers, the Vertx bus will pick exactly one subscriber&#10; *  and send the message to it.  The bus picks the subscribers in an approximately&#10; *  round-robin fashion. If the subscriber replies to this message, then that&#10; *  will reply (required to be also be a JSON object) will be produced on the&#10; *  reply output port.&#10; * &#10; *  The busHost input specifies the name of the network interface through which&#10; *  to connect to the Vert.x event bus cluster, and busHostPort specifies the&#10; *  port to use for this. Normally, you can leave these at their default values&#10; *  unless you need to need to use a network interface that is not 'localhost'&#10; *  or you need to use a particular port. These two inputs are examined only&#10; *  at initialization time, so changing them during execution of a swarmlet&#10; *  will have no effect.&#10; * &#10; *  @accessor net/VertxPublish&#10; *  @author Patricia Derler, Edward A. Lee, Ben Zhang&#10; *  @version $$$$Id: VertxPublish.js 292 2015-09-01 14:16:50Z eal $$$$&#10; *  @input {string} address The event bus address, which is the name of the event stream.&#10; *   This defaults to 'topic'.&#10; *  @input message The message to publish.&#10; *  @input {boolean} broadcast Indicator of whether to send to all subscribers or just one.&#10; *   This defaults to true, which means to send to all subscribers.&#10; *  @parameter {string} busHost The name of the network interface to use for the Vert.x&#10; *   event bus. A blank string is interpreted as 'localhost' (the default).&#10; *  @parameter {int} busHostPort The port for the Vert.x event bus. A value of 0&#10; *   indicates to just find an available port (the default).&#10; *  @output reply The reply, if any, received after a point-to-point send&#10; *   (where broadcast == false).&#10; */&#10;var eventbus = require('eventbus');&#10;&#10;/** Set up the accessor by defining the inputs and outputs. */&#10;exports.setup = function() {&#10;    input('address', {&#10;        'value':'topic',&#10;        'type':'string'&#10;    });&#10;    input('message');&#10;    input('broadcast', {&#10;        'value':true,&#10;        'type':'boolean'&#10;    });&#10;    parameter('busHost', {&#10;        'type':'string'&#10;    });&#10;    parameter('busHostPort', {&#10;        'value':0,&#10;        'type':'int'&#10;    });&#10;    output('reply');&#10;};&#10;&#10;// State variables.&#10;var bus;&#10;var handle;&#10;&#10;exports.initialize = function() {&#10;    var port = get('busHostPort');&#10;    var host = get('busHost');&#10;    bus = new eventbus.VertxBus({'port':port, 'host':host});&#10;    &#10;    handle = addInputHandler('message', function() {&#10;        var topic = get('address');&#10;        var msg = get('message');&#10;        var all = get('broadcast');&#10;        if (msg) {&#10;            if (all) {&#10;                bus.publish(topic, msg);&#10;            } else {&#10;                bus.send(topic, msg, replyHandler);&#10;            }&#10;        }&#10;    });&#10;}&#10;&#10;var replyHandler = function(message) {&#10;   send('reply', message);&#10;}&#10;&#10;exports.wrapup = function() {&#10;  bus.unsubscribe();&#10;  removeInputHandler(handle, 'message');&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/net/VertxPublish.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Publish to a Vert.x event bus, which is a peer-to-peer publish-and-subscribe system.&#10; The published data will be sent to any subscriber that subscribes to the same&#10; address and runs in the same Vertx cluster (see the VertxSubscribe accessor).&#10; The Vertx cluster normally includes all machines that hear multicast packets&#10; sent by the machine hosting this accessor.&lt;/p&gt;&#10;&lt;p&gt; The input to be published can be any data type supported by accessors that&#10; has a string representation in JSON syntax. The data will be converted to a&#10; string in JSON format and sent to the event bus. The VertxSubscribe accessor&#10; will parse that string and output the data in the native format of its host.&lt;/p&gt;&#10;&lt;p&gt; If the broadcast input is set to false, then instead of broadcasting the&#10; message to all subscribers, the Vertx bus will pick exactly one subscriber&#10; and send the message to it.  The bus picks the subscribers in an approximately&#10; round-robin fashion. If the subscriber replies to this message, then that&#10; will reply (required to be also be a JSON object) will be produced on the&#10; reply output port.&lt;/p&gt;&#10;&lt;p&gt; The busHost input specifies the name of the network interface through which&#10; to connect to the Vert.x event bus cluster, and busHostPort specifies the&#10; port to use for this. Normally, you can leave these at their default values&#10; unless you need to need to use a network interface that is not 'localhost'&#10; or you need to use a particular port. These two inputs are examined only&#10; at initialization time, so changing them during execution of a swarmlet&#10; will have no effect.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Patricia Derler, Edward A. Lee, Ben Zhang">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: VertxPublish.js 292 2015-09-01 14:16:50Z eal $$">
            </property>
            <property name="address (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The event bus address, which is the name of the event stream.&#10;  This defaults to 'topic'.">
            </property>
            <property name="message (port)" class="ptolemy.kernel.util.StringAttribute" value="undefined The message to publish.">
            </property>
            <property name="broadcast (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;boolean&quot;]}) Indicator of whether to send to all subscribers or just one.&#10;  This defaults to true, which means to send to all subscribers.">
            </property>
            <property name="reply (port)" class="ptolemy.kernel.util.StringAttribute" value="undefined The reply, if any, received after a point-to-point send&#10;  (where broadcast == false).">
            </property>
            <property name="busHost (parameter)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The name of the network interface to use for the Vert.x&#10;  event bus. A blank string is interpreted as 'localhost' (the default).">
            </property>
            <property name="busHostPort (parameter)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;int&quot;]}) The port for the Vert.x event bus. A value of 0&#10;  indicates to just find an available port (the default).">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[415.0, 200.0]">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="address" class="ptolemy.actor.parameters.PortParameter" value="x">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="broadcast" class="ptolemy.actor.parameters.PortParameter" value="true">
        </property>
        <property name="busHost" class="ptolemy.data.expr.Parameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="busHostPort" class="ptolemy.data.expr.Parameter" value="8087">
        </property>
        <port name="address" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="message" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="broadcast" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="reply" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="DiscreteClock.output" relation="relation"/>
    <link port="Ramp.output" relation="relation2"/>
    <link port="Ramp.trigger" relation="relation"/>
    <link port="VertxPublish.message" relation="relation2"/>
</entity>
