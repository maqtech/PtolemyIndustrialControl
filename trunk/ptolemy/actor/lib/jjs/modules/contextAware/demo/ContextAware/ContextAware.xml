<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="ContextAware" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="5.0">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{80.0, 100.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={127, 22, 1092, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[858, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.8000000000000009">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{447.2726576063368, 383.0677693684896}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This is a very experimental example of how an accessor&#10;could adapt to different services that provide data via JSON, XML, text.&#10;&#10;Eventually, there will be a gui, but in the mean time&#10;1. Double Click on the ContextAware actor and in the RESTSource parameter, select GSN, press commit.&#10;2. Double Click on the actor again and press reload, and then press commit.&#10;3. Double Click on the actor and the required parameters of  GSN will appear.&#10;4. Provide input for the parameters:&#10;       in the host parameter, enter 'pluto.cs.txstate.edu',&#10;       in the port parameter, enter '22001',&#10;       in the path parameter, enter 'gsn'     &#10;       leave the other paraemters as default,&#10;5. Press commit and run it. &#10;6. If you choose Paraimpu, the input  are:&#10;      in the host parameter, enter 'api.paraimpu.com'&#10;      in the path parameter, enter 'v1/things'&#10;      in the port paraemter, enter 443&#10;      in the access token, enter '46e0ee55195c4dd9dca295a7ac8282d28f4a2259'&#10;7. If you choose Firebase, the required input are:&#10;      in the host parameter, enter 'sizzling-fire-8605.firebaseio.com'&#10;      in the port parameter, enter '443'&#10;      in the path parameter, enter 'devices.json'&#10;  ">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-50.0, 305.0]">
        </property>
    </property>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{60.0, 185.0}">
        </property>
    </entity>
    <entity name="Display2" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={470, 346, 652, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[652, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{390.0, 260.0}">
        </property>
    </entity>
    <entity name="Stop" class="ptolemy.actor.lib.Stop">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{590.0, 165.0}">
        </property>
    </entity>
    <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{470.0, 165.0}">
        </property>
    </entity>
    <entity name="Const2" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{410.0, 165.0}">
        </property>
    </entity>
    <entity name="Test" class="ptolemy.actor.lib.Test">
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;200: OK&quot;}">
        </property>
        <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{300.0, 260.0}">
        </property>
    </entity>
    <entity name="ContextAware" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;//copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/**&#10; * This accessor discovers REST services on the web and and generates a concrete&#10; * REST accessor for the service. It requires the contextAware module and&#10; * interface definition of concrete REST services. Please see:&#10; * https://www.terraswarm.org/accessors/wiki/Version0/ContextAware&#10; * &#10; * Example usage of ContextAware accessor:&#10; * &#10; * This accessor generalizes the capability of REST.js by providing a simple&#10; * interface for a user to select a concrete REST service and provides the&#10; * context (set of inputs needed) to invoke that concrete REST service.&#10; * Currently it is coded for two concrete REST services (GSN and Paraimpu), but&#10; * can be expanded to any number of REST services as long as the interface of&#10; * the service can be defined. The two services that this accessor works with&#10; * are the GSN, which is a global sensor network server hosted in Texas State&#10; * university, and the Paraimpu which is a social aware middleware for Internet&#10; * of Things.&#10; * &#10; * This is just an experimental system, so the UI is very primitive and basic.&#10; * To experiment with it, do the following:&#10; * &#10; * &lt;ul&gt;&#10; * &lt;li&gt; double click on the accessor, make a selection, press commit,&lt;/li&gt;&#10; * &lt;li&gt; double click on the accessor, press the reload button and then press&#10; * commit,&lt;/li&gt;&#10; * &lt;li&gt; double click again and the required input for the selected REST service&#10; * will appear on the editor menu&lt;/li&gt;&#10; * &lt;li&gt; for GSN, enter 'pluto.cs.txstate.edu' for the host, enter '22001' for&#10; * the port, leave the rest as default&lt;/li&gt;&#10; * &lt;li&gt; for Paraimpu, enter 'api.paraimpu.com' for the host, enter'443' for the&#10; * port, enter this &lt;code&gt;46e0ee55195c4dd9dca295a7ac8282d28f4a2259&lt;/code&gt; for&#10; * access token.&lt;/li&gt;&#10; * &lt;li&gt; for Firebase, enter 'sizzling-fire-8605.firebaseio.com' for teh host, enter '443' for&#10; * port, leave the rest as default. However, if you want to change to retrieve sensor data &#10; * rather then the devices, change the path data to 'sensors.json'.&lt;/li&gt;&#10; * &lt;/ul&gt;&#10; * &#10; * @accessor contextAware&#10; * @author Anne H. Ngu (angu@txstate.edu)&#10; * @input {number} input to the accessor&#10; * @parameter{string} the name of the REST service that context aware tries to&#10; *                    adapt. A list of available services are presented as&#10; *                    option. This is obtained by the function service() which&#10; *                    is defined in the supporting module&#10; * &#10; * @version $$Id$$&#10; */&#10;&#10;var contextAware = require(&quot;contextAware&quot;);&#10;&#10;// Initialize the context aware service discovery class. Not used currently.&#10;var contextAwareService = new contextAware.DiscoveryOfRESTService();&#10;&#10;// The service that was selected by the user.&#10;var selectedService;&#10;&#10;/**&#10; * Define the input and the choice of REST services to which this accessor may&#10; * adapt.&#10; */&#10;exports.setup = function() {&#10;	input('input');&#10;	// a simple UI interface to start the dialog with users&#10;	parameter('RESTSource', {&#10;		'type' : 'string',&#10;		'value' : 'Make a selection',&#10;		'options' : contextAware.services()&#10;	});&#10;	selectedService = getParameter('RESTSource');&#10;	if (selectedService == 'GSN')&#10;		implement(&quot;contextAware/GSNInterface.js&quot;);&#10;	else if (selectedService == 'Paraimpu') &#10;		implement(&quot;contextAware/ParaimpuInterface.js&quot;);&#10;	else if (selectedService == 'Firebase')&#10;		implement(&quot;contextAware/FirebaseInterface.js&quot;);&#10;    else {&#10;		console.log(&quot;Service interface not available&quot;);&#10;	}&#10;	extend(&quot;net/REST.js&quot;);&#10;}&#10;&#10;/**&#10; * Upon receiving details of a REST service, construct a concrete REST accessor&#10; * to access the service.&#10; */&#10;exports.initialize = function() {&#10;	// The superclass registers a handler for the 'trigger' input&#10;	// to issue an HTTP request based on the current inputs.&#10;	this.ssuper.initialize();&#10;	// Add a handler for the 'input' input.&#10;	addInputHandler(&#10;			'input',&#10;			function() {&#10;				// construct the URL for the selected service&#10;				var serviceURL = {&#10;					&quot;url&quot; : {&#10;						&quot;host&quot; : getParameter('host'),&#10;						&quot;port&quot; : getParameter('port'),&#10;						&quot;protocol&quot; : getParameter('protocol')&#10;					}&#10;				};&#10;				send('options', serviceURL);&#10;			    send('command', getParameter('path'));&#10;			    if (selectedService == 'Paraimpu') {&#10;					// sample access token to use&#10;					// &quot;46e0ee55195c4dd9dca295a7ac8282d28f4a2259&quot;&#10;					var arg = {&quot;access_token&quot; : getParameter('accessToken')};&#10;					console.log(&quot;org/terraswarm/accessor/accessors/web/contextAware/ContextAware.js: access_token:&quot;&#10;									+ arg);&#10;					send('arguments', arg);&#10;				}&#10;&#10;				// ex. of valid json format for reference&#10;				// send('options', {&quot;url&quot;:&quot;http://pluto.cs.txstate.edu:22001&quot;});&#10;				// send('options',&#10;				// {&quot;url&quot;:{&quot;host&quot;:&quot;pluto.cs.txstate.edu&quot;,&quot;port&quot;:22001}});&#10;				// send('command', 'gsn');&#10;&#10;				// Cause the base class handler to issue the HTTP request.&#10;				send('trigger', true);&#10;			});&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/contextAware/ContextAware.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor discovers IOT services on web.&#10; It requires the contextAware module.  Please see:&#10; https://www.terraswarm.org/accessors/wiki/Version0/ContextAware&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Anne H. Ngu (angu@btxstate.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;number&quot;]}) to the accessor">
            </property>
            <property name="{{string} (parameter)" class="ptolemy.kernel.util.StringAttribute" value="undefined the name of the REST service that context aware tries&#10;    to adapt. A list of available services are presented as option.">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[210.8314437866211, 187.5]">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="RESTSource" class="ptolemy.data.expr.Parameter" value="Firebase">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value=" ">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="host" class="ptolemy.data.expr.Parameter" value="sizzling-fire-8605.firebaseio.com">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="protocol" class="ptolemy.data.expr.Parameter" value="https">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="path" class="ptolemy.data.expr.Parameter" value="sensors.json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="method" class="ptolemy.data.expr.Parameter" value="GET">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
    </entity>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.basic.layout.kieler.LayoutHint" value="{ { head={id=&quot;Stop.input&quot;,x=590.0,y=165.0}, tail={id=&quot;MicrostepDelay.output&quot;,x=470.0,y=165.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.basic.layout.kieler.LayoutHint" value="{ { head={id=&quot;MicrostepDelay.input&quot;,x=470.0,y=165.0}, tail={id=&quot;Const2.output&quot;,x=410.0,y=165.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[345.0, 165.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="SingleEvent.output" relation="relation"/>
    <link port="Display2.input" relation="relation7"/>
    <link port="Stop.input" relation="relation5"/>
    <link port="MicrostepDelay.input" relation="relation6"/>
    <link port="MicrostepDelay.output" relation="relation5"/>
    <link port="Const2.output" relation="relation6"/>
    <link port="Const2.trigger" relation="relation7"/>
    <link port="Test.input" relation="relation2"/>
    <link port="ContextAware.input" relation="relation"/>
    <link port="ContextAware.response" relation="relation7"/>
    <link port="ContextAware.status" relation="relation2"/>
</entity>
