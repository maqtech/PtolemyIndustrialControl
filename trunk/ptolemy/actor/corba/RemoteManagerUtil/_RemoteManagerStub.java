package ptolemy.actor.corba.RemoteManagerUtil;


/**
* ptolemy/actor/corba/RemoteManagerUtil/_RemoteManagerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.1"
* from RemoteManager.idl
* Thursday, January 16, 2003 3:50:31 PM PST
*/


/* A CORBA compatible interface that implements the execution
	 * methods of Ptolemy II.
	 */
public class _RemoteManagerStub extends org.omg.CORBA.portable.ObjectImpl implements ptolemy.actor.corba.RemoteManagerUtil.RemoteManager
{


  /* Mirror the execute() method of Ptolemy II
		 * manager interface.
		 * @exception CorbaIllegalActionException If the
		 *   method is an illegal action of the actor.
		 */
  public void execute () throws ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionException
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("execute", true);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       if (_id.equals ("IDL:RemoteManagerUtil/CorbaIllegalActionException:1.0"))
          throw ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionExceptionHelper.read ($in);
       else
            throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       execute ();
    } finally {
        _releaseReply ($in);
    }
  } // execute


  /* Mirror the initialize() method of Ptolemy II
  		 * manager interface.
  		 * @exception CorbaIllegalActionException If the
  		 *   method is an illegal action of the actor.
  		 */
  public void initialize () throws ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionException
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("initialize", true);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       if (_id.equals ("IDL:RemoteManagerUtil/CorbaIllegalActionException:1.0"))
          throw ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionExceptionHelper.read ($in);
       else
            throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       initialize ();
    } finally {
        _releaseReply ($in);
    }
  } // initialize


  /* Mirror the pause() method of Ptolemy II
  		 * manager interface.
  		 * @exception CorbaIllegalActionException If the
  		 *   method is an illegal action of the actor.
  		 */
  public void pause () throws ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionException
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("pause", true);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       if (_id.equals ("IDL:RemoteManagerUtil/CorbaIllegalActionException:1.0"))
          throw ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionExceptionHelper.read ($in);
       else
            throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       pause ();
    } finally {
        _releaseReply ($in);
    }
  } // pause


  /* Mirror the resume() method of Ptolemy II
  		 * manager interface.
  		 * @exception CorbaIllegalActionException If the
  		 *   method is an illegal action of the actor.
  		 */
  public void resume () throws ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionException
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("resume", true);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       if (_id.equals ("IDL:RemoteManagerUtil/CorbaIllegalActionException:1.0"))
          throw ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionExceptionHelper.read ($in);
       else
            throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       resume ();
    } finally {
        _releaseReply ($in);
    }
  } // resume


  /* Mirror the startRun() method of Ptolemy II
  		 * manager interface.
  		 * @exception CorbaIllegalActionException If the
  		 *   method is an illegal action of the actor.
  		 */
  public void startRun () throws ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionException
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("startRun", true);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       if (_id.equals ("IDL:RemoteManagerUtil/CorbaIllegalActionException:1.0"))
          throw ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionExceptionHelper.read ($in);
       else
            throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       startRun ();
    } finally {
        _releaseReply ($in);
    }
  } // startRun


  /* Mirror the stop() method of Ptolemy II
  		 * manager interface.
  		 * @exception CorbaIllegalActionException If the
  		 *   method is an illegal action of the actor.
  		 */
  public void stop () throws ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionException
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("stop", true);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       if (_id.equals ("IDL:RemoteManagerUtil/CorbaIllegalActionException:1.0"))
          throw ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionExceptionHelper.read ($in);
       else
            throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       stop ();
    } finally {
        _releaseReply ($in);
    }
  } // stop


  /* Mirror the terminate() method of Ptolemy II
  		 * manager interface.
  		 * @exception CorbaIllegalActionException If the
  		 *   method is an illegal action of the actor.
  		 */
  public void terminate () throws ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionException
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("terminate", true);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       if (_id.equals ("IDL:RemoteManagerUtil/CorbaIllegalActionException:1.0"))
          throw ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionExceptionHelper.read ($in);
       else
            throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       terminate ();
    } finally {
        _releaseReply ($in);
    }
  } // terminate


  /* Mirror the terminate() method of Ptolemy II
  		 * remoteManager interface.
		 * @exception CorbaIllegalActionException If the
		 *  query of parameter is not supported by the actor.
		 * @exception CorbaUnknowParamException If the parameter
		 *  name is not known by the actor.
		 */
  public void changeModel (String model) throws ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionException, ptolemy.actor.corba.RemoteManagerUtil.CorbaUnknownParamException
  {
    org.omg.CORBA.portable.InputStream $in = null;
    try {
       org.omg.CORBA.portable.OutputStream $out = _request ("changeModel", true);
       $out.write_string (model);
       $in = _invoke ($out);
    } catch (org.omg.CORBA.portable.ApplicationException $ex) {
       $in = $ex.getInputStream ();
       String _id = $ex.getId ();
       if (_id.equals ("IDL:RemoteManagerUtil/CorbaIllegalActionException:1.0"))
          throw ptolemy.actor.corba.RemoteManagerUtil.CorbaIllegalActionExceptionHelper.read ($in);
       else if (_id.equals ("IDL:RemoteManagerUtil/CorbaUnknownParamException:1.0"))
          throw ptolemy.actor.corba.RemoteManagerUtil.CorbaUnknownParamExceptionHelper.read ($in);
       else
            throw new org.omg.CORBA.MARSHAL (_id);
    } catch (org.omg.CORBA.portable.RemarshalException $rm) {
       changeModel (model);
    } finally {
        _releaseReply ($in);
    }
  } // changeModel

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:RemoteManagerUtil/RemoteManager:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _RemoteManagerStub
