<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\SimplePtidesOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\SimplePtidesOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.1 [Build 934]: Last Updated: Sun Nov 16 17:43:10 2008
<BR><P>
<H3>Maximum Stack Usage =        948 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; RIT128x96x4Init &rArr; RIT128x96x4Enable &rArr; GPIOPinTypeSSI
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b63438]">Reset_Handler</a>
 <LI><a href="#[1084298]">CPUcpsid</a>
 <LI><a href="#[1084250]">CPUcpsie</a>
 <LI><a href="#[1084208]">CPUwfi</a>
 <LI><a href="#[b63678]">NmiSR</a>
 <LI><a href="#[b63630]">FaultISR</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10f18a0]">SSIDataPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10f18a0]">SSIDataPut</a><BR>
 <LI><a href="#[10f1930]">SSIDataGet</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10f1930]">SSIDataGet</a><BR>
 <LI><a href="#[b5eb60]">deadline</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b5eb60]">deadline</a><BR>
 <LI><a href="#[1161f98]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1161f98]">SysCtlDelay</a><BR>
 <LI><a href="#[b63678]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63678]">NmiSR</a><BR>
 <LI><a href="#[b63630]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63630]">FaultISR</a><BR>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b635e8]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b63438]">Reset_Handler</a>
 <LI><a href="#[b63678]">NmiSR</a>
 <LI><a href="#[b63630]">FaultISR</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b631b0]">SysTickHandler</a>
 <LI><a href="#[b633a8]">IntGPIOa</a>
 <LI><a href="#[b63360]">IntGPIOb</a>
 <LI><a href="#[b63318]">IntGPIOc</a>
 <LI><a href="#[b632d0]">IntGPIOd</a>
 <LI><a href="#[b63288]">IntGPIOe</a>
 <LI><a href="#[b630d8]">UARTIntHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b63168]">Timer0IntHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b63120]">Timer1IntHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b63240]">IntGPIOf</a>
 <LI><a href="#[b631f8]">IntGPIOg</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[fe7960]">ip_input</a>
 <LI><a href="#[fe05b8]">ethernetif_init</a>
 <LI><a href="#[b5e410]">main</a>
 <LI><a href="#[1256908]">fputc</a>
 <LI><a href="#[1080690]">_sputc</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b63438]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1083a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1083a48]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, entry.o($$startup$$))
<BR><BR>[Calls]<UL><LI><a href="#[1256f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>
<BR>[Called By]<UL><LI><a href="#[b63438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[1161f98]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[1161f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1161800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[1161f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[1256f48]"></a>__call_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1256f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>

<P><STRONG><a name="[b5ecc8]"></a>die</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10836a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>
<BR>[Called By]<UL><LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[b5ec80]"></a>addEvent</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[10804e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[b5e800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5e890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5e8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5e920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
</UL>

<P><STRONG><a name="[b5ec38]"></a>alreadyFiring</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5ebf0]"></a>currentlyFiring</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5eba8]"></a>min</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deadline
</UL>

<P><STRONG><a name="[b5eb60]"></a>deadline</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = deadline &rArr;  deadline (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deadline
<LI><a href="#[b5eba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deadline
</UL>

<P><STRONG><a name="[b5eb18]"></a>disableInterrupts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[b5ead0]"></a>enableInterrupts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[b5ea88]"></a>fireActor</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fireActor &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[10804e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[10836a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
</UL>

<P><STRONG><a name="[b5ea40]"></a>setActuationInterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5e9f8]"></a>getCurrentPhysicalTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getCurrentPhysicalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[115c730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
<LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[b5e800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActuator
</UL>

<P><STRONG><a name="[b5e9b0]"></a>fireActuator</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[10804e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>

<P><STRONG><a name="[b5e968]"></a>newEvent</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = newEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[b5e800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5e890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5e8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5e920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
</UL>

<P><STRONG><a name="[b5e920]"></a>fireClock</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[10804e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[1083148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[b5e8d8]"></a>fireComputation</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[10804e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[1083148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12574a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b5e890]"></a>fireMerge</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[10804e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[1083148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b5e848]"></a>fireModelDelay</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[10804e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[1083148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b5e800]"></a>fireSensor</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[10804e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[1083148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12571c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[b5e7b8]"></a>freeEvent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
</UL>

<P><STRONG><a name="[b5e770]"></a>getRand</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5df00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomSeed
<LI><a href="#[b5df48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomNumber
<LI><a href="#[b5df90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomAddEntropy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[b5e728]"></a>higherPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
</UL>

<P><STRONG><a name="[b5e6e0]"></a>initializeClock</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
</UL>

<P><STRONG><a name="[b5e698]"></a>initializeMemory</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5e650]"></a>interruptInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f5448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[10f55f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>

<P><STRONG><a name="[b5e608]"></a>setTimedInterrupt</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setTimedInterrupt &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10833b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[10f55f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[1157f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
<LI><a href="#[1158158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[11582c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[1158398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[11583e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
<LI><a href="#[1158548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
</UL>

<P><STRONG><a name="[b5e5c0]"></a>removeEvent</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = removeEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeEvent
<LI><a href="#[10804e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[1080570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
</UL>

<P><STRONG><a name="[b5e578]"></a>safeToProcess</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
</UL>

<P><STRONG><a name="[b5e530]"></a>processAvailableEvents</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safeToProcess
<LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
<LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;higherPriority
<LI><a href="#[b5e7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeEvent
<LI><a href="#[b5e920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[b5ea88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOg
<LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOf
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOe
<LI><a href="#[b632d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOd
<LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
</UL>

<P><STRONG><a name="[b631f8]"></a>IntGPIOg</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IntGPIOg &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b60f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[10f9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63240]"></a>IntGPIOf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IntGPIOf &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b60f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[10f9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63288]"></a>IntGPIOe</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IntGPIOe &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b60f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[10f9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b632d0]"></a>IntGPIOd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IntGPIOd &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b60f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[10f9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63318]"></a>IntGPIOc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IntGPIOc &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b60f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[10f9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63360]"></a>IntGPIOb</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IntGPIOb &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b60f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[10f9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b5e4e8]"></a>timerHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b633a8]"></a>IntGPIOa</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = IntGPIOa &rArr; DisplayIntStatus &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b60f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[10f9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b5e4a0]"></a>processEvents</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safeToProcess
<LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
<LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;higherPriority
<LI><a href="#[b5e7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeEvent
<LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[b5ea88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[10804e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[10836a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[b631b0]"></a>SysTickHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63168]"></a>Timer0IntHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10f5640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[1158308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntDisable
<LI><a href="#[1158350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
<LI><a href="#[11583e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63120]"></a>Timer1IntHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1158350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b5e458]"></a>timerInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b630d8]"></a>UARTIntHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UARTIntHandler &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5e920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[10861f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[1086318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b5e410]"></a>main</STRONG> (Thumb, 306 bytes, Stack size 896 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = main &rArr; RIT128x96x4Init &rArr; RIT128x96x4Enable &rArr; GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deadline
<LI><a href="#[1161188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[1161800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.text)
</UL>
<P><STRONG><a name="[b5e3c8]"></a>setTime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd8cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
</UL>

<P><STRONG><a name="[b5e380]"></a>getTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd8db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[fd9278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[fd9350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
</UL>

<P><STRONG><a name="[b5e338]"></a>getRxTime</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_rx_timestamp
<LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[1157f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[b5e2f0]"></a>SysTickIntHandler</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerTick
<LI><a href="#[b5d768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_tick
<LI><a href="#[b5d7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[1047110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntEnable
<LI><a href="#[10f9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[115c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
</UL>

<P><STRONG><a name="[b5e2a8]"></a>displayStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[b5aa20]"></a>httpd_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[b5a5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[b5a6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[b5a750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[b57bd0]"></a>tcp_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b57b88]"></a>tcp_seg_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f810f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f81188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57b40]"></a>tcp_segs_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b5a798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[b57af8]"></a>tcp_pcb_purge</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[f810f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[b57ab0]"></a>tcp_pcb_remove</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5a798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b5a798]"></a>tcp_abort</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b575e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b57b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b578b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b57a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b5b998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
<LI><a href="#[f810f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f8f278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[b57a68]"></a>tcp_slowtmr</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[b57678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b57b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5a798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b579d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[b57a20]"></a>tcp_fasttmr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b579d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[b579d8]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[b57a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[b5a678]"></a>tcp_close</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b575a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[b57798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b58b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[b5ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5a6c0]"></a>tcp_bind</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b58b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5aa20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5a5e8]"></a>tcp_listen</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5aa20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5a480]"></a>tcp_recved</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[b57990]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b578b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b57948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[b57948]"></a>tcp_connect</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[b58b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[b5a3f0]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5b8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[b57900]"></a>tcp_seg_copy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[b57750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1083148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f81188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b578b8]"></a>tcp_alloc</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[b5a798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1082e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[f810b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[b5a5a0]"></a>tcp_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b578b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5aa20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5a708]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5b8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[b5ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5a4c8]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5b8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[b5ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5a438]"></a>tcp_sent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5b908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[b5ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5a630]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5b8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[b5a750]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5aa20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5a510]"></a>tcp_poll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5b8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[b55560]"></a>udp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b55518]"></a>udp_input</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b551b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b554d0]"></a>udp_bind</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, udp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b553f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[fd8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b55488]"></a>udp_send</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b55170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b55200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b554d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b55440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[b55440]"></a>udp_sendto</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[fd89c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[fd8a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
</UL>

<P><STRONG><a name="[b553f8]"></a>udp_connect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b554d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[fd8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b553b0]"></a>udp_disconnect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[fd8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b55368]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[fd8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b55320]"></a>udp_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[fd8978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[fd8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b552d8]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1082e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[fd8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[f8f620]"></a>dhcp_renew</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b53c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b553f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b554d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f903e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f90430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f90478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f904c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f90790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[f90310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[f8f5d8]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[f8f590]"></a>dhcp_release</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b553f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b554d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8f230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8f278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8f2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8f308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[f903e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f90430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f90478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f904c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f90790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[f90310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[f8f548]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f90310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[f8f500]"></a>dhcp_stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5a8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f905e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f8f4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[f8f4b8]"></a>dhcp_start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b552d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b5a870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5a8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8f500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1082e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f8f470]"></a>dhcp_inform</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b53c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b552d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b55320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b553f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b554d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b5a870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5a8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f903e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f90430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f90478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f90790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[1082e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[f8f428]"></a>dhcp_arp_reply</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[fe3f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[b55290]"></a>htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b55248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b575e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f8f3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fe06d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[fe3f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe3f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe3f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe4da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fea508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fef308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[b55200]"></a>inet_chksum_pseudo</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8e588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b575e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[fef308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f8de38]"></a>inet_chksum</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8e588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b55170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b55248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f8ddf0]"></a>inet_chksum_pbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8e588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[fea508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[b577e0]"></a>htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b575e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f810b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f81188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f90598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f90628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[f90670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[f90790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[fef308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[f8dda8]"></a>inet_aton</STRONG> (Thumb, 252 bytes, Stack size 36 bytes, inet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8dd60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[fd8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[f8dd60]"></a>inet_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8dda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
</UL>

<P><STRONG><a name="[f8dd18]"></a>inet_ntoa</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, inet.o(.text), UNUSED)

<P><STRONG><a name="[b55050]"></a>ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b55248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b575e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f81140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[f81188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f84848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[fe3f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe3f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fea508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b55098]"></a>ntohl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f810f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f81188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f8f3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f90670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[fe3f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe4da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fea508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fef308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[ff0688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f8c7f0]"></a>mem_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1082ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b5a8b8]"></a>mem_free</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f8cfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5a990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5a9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[b5ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[b5ba70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_err
<LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[f8f500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f90358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[f905e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>

<P><STRONG><a name="[f8c7a8]"></a>mem_realloc</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_realloc &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f8cfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[b5a870]"></a>mem_malloc</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b5a990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5b8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[f90358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[fe05b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[f8a1a0]"></a>memp_init</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, memp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b57750]"></a>memp_malloc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = memp_malloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b552d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b578b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b57900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[b5a5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[f84650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>

<P><STRONG><a name="[b57798]"></a>memp_free</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b55320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[b5a678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5a798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f84698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f8f2c0]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8f2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f88270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8f2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f90670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[f8f230]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8f230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f88270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8f230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f90670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[f8f278]"></a>netif_set_ipaddr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f88270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f90670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[f88270]"></a>netif_set_addr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8f230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8f278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8f2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[f88228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[f88228]"></a>netif_add</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f88270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f881e0]"></a>netif_remove</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[f88198]"></a>netif_find</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[f88150]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f8f1e8]"></a>netif_set_up</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f90670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f88108]"></a>netif_is_up</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f8f308]"></a>netif_set_down</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[f880c0]"></a>netif_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f869d0]"></a>pbuf_init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b5a828]"></a>pbuf_free</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5a8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[b5d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b575e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b58b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5b908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[f84728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[f86820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[f86868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8f500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f90478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f90598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[fd8978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[fd8a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[fd8ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
<LI><a href="#[fd8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[fe0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fe0690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[fe06d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[fe3f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe3f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe4068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[fe4da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe4de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fea508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b55008]"></a>pbuf_alloc</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5a870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[f872d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b55248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b575e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f84728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[f86868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[f90790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[fd8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[fe0768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[fe3f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[f8f1a0]"></a>pbuf_realloc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8c7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f81188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[fd89c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[fd8a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
<LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b54f78]"></a>pbuf_header</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[b55170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[f81188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f84728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[fe0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fe06d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[fe3f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fea508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f86988]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f81188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57708]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = pbuf_ref &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b54fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b57900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[f868f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_queue
<LI><a href="#[f8f3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[f86940]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[b54fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[f81188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b54fc0]"></a>pbuf_chain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[f86940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f84728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[f868f8]"></a>pbuf_queue</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>

<P><STRONG><a name="[f868b0]"></a>pbuf_dequeue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe4da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[f86868]"></a>pbuf_take</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[f86820]"></a>pbuf_dechain</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[f84890]"></a>raw_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)

<P><STRONG><a name="[f84848]"></a>raw_input</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Calls]<UL><LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f84800]"></a>raw_bind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f84800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[f84800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>

<P><STRONG><a name="[f847b8]"></a>raw_connect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f847b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[f847b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
</UL>

<P><STRONG><a name="[f84770]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)

<P><STRONG><a name="[f84728]"></a>raw_sendto</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b55170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f846e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>

<P><STRONG><a name="[f846e0]"></a>raw_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f84728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[f84698]"></a>raw_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[f84650]"></a>raw_new</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1082e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[f83488]"></a>stats_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stats.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1082ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[ff06d0]"></a>tcp_input</STRONG> (Thumb, 810 bytes, Stack size 40 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b551b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b575e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f810b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f810f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>
<BR>[Called By]<UL><LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b576c0]"></a>tcp_enqueue</STRONG> (Thumb, 652 bytes, Stack size 64 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b54f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f86940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b575a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[b57948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[f810b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[b575a0]"></a>tcp_send_ctrl</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[b5a3a8]"></a>tcp_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5a558]"></a>tcp_output</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fee4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[fef308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[b57630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[b57948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b57a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[b57a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b5a480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[b5a678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[f810b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f810f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f81188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[ff0688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b575e8]"></a>tcp_rst</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fee4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[f810b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f810f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b57630]"></a>tcp_rexmit_rto</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b57a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[ff0688]"></a>tcp_rexmit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[f81188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57678]"></a>tcp_keepalive</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fee4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b57a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[fea508]"></a>icmp_input</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b551b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8ddf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b55248]"></a>icmp_dest_unreach</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8de38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[fee4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b55518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[fe79a8]"></a>ip_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ip.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b55128]"></a>ip_route</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f84728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[fee4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[fef308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[fe7960]"></a>ip_input</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b551b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b55518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f84848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[f88108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
<LI><a href="#[f8de38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[fea508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_lwip.o(.text)
</UL>
<P><STRONG><a name="[b55170]"></a>ip_output_if</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[f8de38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f84728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[fea508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fee4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[fee4f8]"></a>ip_output</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b55170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[b55248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b575e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[fef308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[b551b8]"></a>ip_addr_isbroadcast</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ip_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[f8f3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe3f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe4da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe7960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fea508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[fe40b0]"></a>etharp_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = etharp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[fe05b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[fe4068]"></a>etharp_tmr</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[fe0600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[fe4020]"></a>etharp_find_addr</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, etharp.o(.text), UNUSED)

<P><STRONG><a name="[fe3fd8]"></a>etharp_ip_input</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe4da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fe06d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[fe3f90]"></a>etharp_arp_input</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8f428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[fe4da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fe06d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[fe3f48]"></a>etharp_request</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[f8f3e0]"></a>etharp_query</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b551b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[f86868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[fe3f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe4de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[b53c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[fe3f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[fe3f00]"></a>etharp_output</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b551b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[f8f3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_output
</UL>

<P><STRONG><a name="[fe07f8]"></a>low_level_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = low_level_init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1047080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntStatus
<LI><a href="#[1047110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntEnable
<LI><a href="#[1047158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntDisable
<LI><a href="#[10471a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntClear
<LI><a href="#[10471e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetInitExpClk
<LI><a href="#[1047230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetEnable
<LI><a href="#[10472c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigSet
<LI><a href="#[10f55f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[1161848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fe05b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[fe07b0]"></a>low_level_output</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1046d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSpaceAvail
</UL>

<P><STRONG><a name="[fe0768]"></a>low_level_input</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b5e338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[fe06d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[fe0720]"></a>ethernetif_output</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe3f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[fe06d8]"></a>ethernetif_input</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fe0768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[fe3f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe3fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[1046ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPacketAvail
</UL>

<P><STRONG><a name="[b5d6d8]"></a>sys_arch_unprotect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b57708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[b57750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5e3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[f872d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
<LI><a href="#[fe0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fe2000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_frame
</UL>

<P><STRONG><a name="[b5d720]"></a>sys_arch_protect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sys_arch_protect &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b57708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[b57750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5e3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[f872d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
<LI><a href="#[fe0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fe2000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_frame
</UL>

<P><STRONG><a name="[fe0690]"></a>ethernetif_enqueue</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fe0768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[fe2000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_frame
<LI><a href="#[1046ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPacketAvail
</UL>
<BR>[Called By]<UL><LI><a href="#[fda470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
</UL>

<P><STRONG><a name="[fe0648]"></a>ethernetif_dequeue</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[fe3f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe3fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[fe0600]"></a>arp_timer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe4068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[fe05b8]"></a>ethernetif_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethernetif_init &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[fe07f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[fe40b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_init
<LI><a href="#[1046ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_lwip.o(.text)
</UL>
<P><STRONG><a name="[fde598]"></a>fs_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmi_fs.o(.text), UNUSED)

<P><STRONG><a name="[fde550]"></a>fs_tick</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmi_fs.o(.text), UNUSED)

<P><STRONG><a name="[b5a990]"></a>fs_open</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lmi_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5a8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[10824f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1082930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[b5a9d8]"></a>fs_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lmi_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[b5ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[b5ba70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_err
</UL>

<P><STRONG><a name="[b5a948]"></a>fs_read</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, lmi_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fde3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[fde430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulocaltime
<LI><a href="#[10824f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[10827c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1082c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[fda470]"></a>EthernetIntHandler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe0690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[1047080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntStatus
<LI><a href="#[1047158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntDisable
<LI><a href="#[10471a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntClear
</UL>

<P><STRONG><a name="[fda428]"></a>lwip_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[f83488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[f869d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init
<LI><a href="#[f880c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[f88150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[f88228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[f8a1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[f8c7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[f8f1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[f8f4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[fe40b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_init
<LI><a href="#[fe79a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[b5d840]"></a>lwip_tick</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[b57a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[f8f230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8f278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8f2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8f500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f8f548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[f8f5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[fdc090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_display_address
<LI><a href="#[fe0648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fe4068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[fd9620]"></a>toState</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayStats
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
<LI><a href="#[fd87c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStop
<LI><a href="#[fd8810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStart
<LI><a href="#[fd9038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
<LI><a href="#[fd91e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[fd9230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[fd9278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd9350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
<LI><a href="#[fd93e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[fd9428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[fd9470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[fd94b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
<LI><a href="#[fd9500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[fd9548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
<LI><a href="#[fd9590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
<LI><a href="#[fd95d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[fd95d8]"></a>doInit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd8978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[fd8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[fd8df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackHeader
<LI><a href="#[fd8f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[fd8fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[fd8ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initData
<LI><a href="#[fd9038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
<LI><a href="#[fd91a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_loop
<LI><a href="#[fd91e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
</UL>

<P><STRONG><a name="[fd9590]"></a>issueManagement</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd89c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[fd8db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[fd9548]"></a>handleManagement</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd88a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum
<LI><a href="#[fd8bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagement
<LI><a href="#[fd8cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
<LI><a href="#[fd9590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[1082660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd9500]"></a>handleDelayResp</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd86f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[fd8780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[fd8c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackDelayResp
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[1082660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd94b8]"></a>issueDelayResp</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd89c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[fd8e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayResp
<LI><a href="#[fd9080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
</UL>

<P><STRONG><a name="[fd9470]"></a>handleDelayReq</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd86f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[fd9110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
<LI><a href="#[fd94b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd9428]"></a>handleFollowUp</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd86a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[fd8738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd8780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[fd8c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackFollowUp
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[1082660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd93e0]"></a>issueFollowup</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd89c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[fd8e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackFollowUp
<LI><a href="#[fd9080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[fd9398]"></a>addForeign</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd8b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackSync
<LI><a href="#[fd8c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[1082660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[fd9350]"></a>issueDelayReq</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[fd8a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
<LI><a href="#[fd8ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayReq
<LI><a href="#[fd9080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[fd9308]"></a>handleSync</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
<LI><a href="#[fd86a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[fd8738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd8780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[fd8810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStart
<LI><a href="#[fd8930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[fd9110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
<LI><a href="#[fd9350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
<LI><a href="#[fd9398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
<LI><a href="#[fd93e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[1082660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd92c0]"></a>handle</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[fd88e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[fd8a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSelect
<LI><a href="#[fd8a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[fd8ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
<LI><a href="#[fd8c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[fd8d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPeek
<LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd9428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[fd9470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[fd9500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[fd9548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[1082660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[fd9278]"></a>issueSync</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[fd8a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
<LI><a href="#[fd8d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackSync
<LI><a href="#[fd9080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[fd9230]"></a>doState</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd8858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerExpired
<LI><a href="#[fd8f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[fd90c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
<LI><a href="#[fd9278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
<LI><a href="#[fd91a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_loop
<LI><a href="#[fd91e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
</UL>

<P><STRONG><a name="[fd91e8]"></a>protocol_first</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd9230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[fd95d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
</UL>

<P><STRONG><a name="[fd91a0]"></a>protocol_loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd9230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[fd95d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_tick
</UL>

<P><STRONG><a name="[fd9158]"></a>protocol</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd9230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[fd95d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[fd8fa8]"></a>initTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd95d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[b5d690]"></a>timerTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[fd7610]"></a>timerUpdate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerExpired
</UL>

<P><STRONG><a name="[fd87c8]"></a>timerStop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[fd8810]"></a>timerStart</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[fd8858]"></a>timerExpired</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd7610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[fd8d20]"></a>msgPeek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd8c00]"></a>msgUnpackHeader</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[fd9398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>

<P><STRONG><a name="[fd8b70]"></a>msgUnpackSync</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>

<P><STRONG><a name="[fd66f8]"></a>msgUnpackDelayReq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ptpd_msg.o(.text), UNUSED)

<P><STRONG><a name="[fd8c48]"></a>msgUnpackFollowUp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd9428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[fd8c90]"></a>msgUnpackDelayResp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[fd8bb8]"></a>msgUnpackManagement</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[fd8cd8]"></a>msgUnloadManagement</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[fd8780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[fd66b0]"></a>msgUnpackManagementPayload</STRONG> (Thumb, 660 bytes, Stack size 32 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[fd8df8]"></a>msgPackHeader</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd95d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[fd8d68]"></a>msgPackSync</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
</UL>

<P><STRONG><a name="[fd8ed0]"></a>msgPackDelayReq</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
</UL>

<P><STRONG><a name="[fd8e40]"></a>msgPackFollowUp</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd93e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
</UL>

<P><STRONG><a name="[fd8e88]"></a>msgPackDelayResp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd94b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
</UL>

<P><STRONG><a name="[fd6668]"></a>msgPackManagement</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[fd8db0]"></a>msgPackManagementResponse</STRONG> (Thumb, 1122 bytes, Stack size 56 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[fd9080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
</UL>

<P><STRONG><a name="[fd4058]"></a>netQGet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[fd8ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
</UL>

<P><STRONG><a name="[fd4010]"></a>lookupSubdomainAddress</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd3fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_algorithm
<LI><a href="#[1082660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[fd8b28]"></a>netInit</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b552d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b55320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b55368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[b553b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[b553f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b554d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8dda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[fd4010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
<LI><a href="#[fd5138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd95d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[fd8978]"></a>netShutdown</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b553b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fd95d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[fd8a50]"></a>netSelect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd50a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd8ae0]"></a>netRecvEvent</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd4058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd8a98]"></a>netRecvGeneral</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd4058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd8a08]"></a>netSendEvent</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[fd9350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
</UL>

<P><STRONG><a name="[fd89c0]"></a>netSendGeneral</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd93e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[fd94b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
<LI><a href="#[fd9590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
</UL>

<P><STRONG><a name="[fd9038]"></a>initClock</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd3170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd95d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
<LI><a href="#[fd9620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[fd86f0]"></a>updateDelay</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd88e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[fd9110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[fd9500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[fd86a8]"></a>updateOffset</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd88e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd9428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[fd8738]"></a>updateClock</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayStats
<LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[b5e3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[fd3170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjFreq
<LI><a href="#[fd88e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[fd9038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd9428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[fd3fc8]"></a>crc_algorithm</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd4010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
</UL>

<P><STRONG><a name="[fd88a0]"></a>sum</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd9548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[fd9080]"></a>fromInternalTime</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[fd9278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[fd9350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
<LI><a href="#[fd93e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[fd94b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
</UL>

<P><STRONG><a name="[fd8780]"></a>toInternalTime</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
<LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd9428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[fd9500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[fd2350]"></a>normalizeTime</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd88e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[fd9110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>

<P><STRONG><a name="[fd9110]"></a>addTime</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, arith.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd2350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd86f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd9470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
</UL>

<P><STRONG><a name="[fd88e8]"></a>subTime</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, arith.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd2350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd86a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[fd86f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[fd8738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd8ff0]"></a>initData</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd95d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[fd8f60]"></a>m1</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd1428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[fd90c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
<LI><a href="#[fd9230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[fd95d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[fd8930]"></a>s1</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd1428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[fd1500]"></a>copyD0</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd1428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
</UL>

<P><STRONG><a name="[fd14b8]"></a>getIdentifierOrder</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1082660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd1470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
</UL>

<P><STRONG><a name="[fd1470]"></a>bmcDataSetComparison</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd14b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIdentifierOrder
<LI><a href="#[1082660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd1428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[fd90c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
</UL>

<P><STRONG><a name="[fd1428]"></a>bmcStateDecision</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd1470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
<LI><a href="#[fd1500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyD0
<LI><a href="#[fd8930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[fd8f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
</UL>
<BR>[Called By]<UL><LI><a href="#[fd90c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
</UL>

<P><STRONG><a name="[fd90c8]"></a>bmc</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd1428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[fd1470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
<LI><a href="#[fd8f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[b5df90]"></a>RandomAddEntropy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, random.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[b5df00]"></a>RandomSeed</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, random.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[b5df48]"></a>RandomNumber</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, random.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[104fdc0]"></a>uvsnprintf</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1082aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fde3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[104fd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
</UL>

<P><STRONG><a name="[fde3e8]"></a>usprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104fdc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[fdc090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_display_address
</UL>

<P><STRONG><a name="[104fd78]"></a>usnprintf</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104fdc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[fde430]"></a>ulocaltime</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5a948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[104fd30]"></a>ustrtoul</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, ustdlib.o(.text), UNUSED)

<P><STRONG><a name="[b5d888]"></a>adjust_rx_timestamp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, phpd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
</UL>

<P><STRONG><a name="[fd3170]"></a>adjFreq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, phpd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd9038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>

<P><STRONG><a name="[104cbf8]"></a>ptpd_systick_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, phpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115c7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodGet
<LI><a href="#[115c898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[115c928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[1161848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[104cbb0]"></a>IEEE1588Init</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, phpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5aa20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
<LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[1041de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashUserGet
<LI><a href="#[1046fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrSet
<LI><a href="#[104cbf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
<LI><a href="#[10f5448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10fa248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10fa368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[1158038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerPrescaleSet
<LI><a href="#[1158158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[1158398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[1158500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlEvent
<LI><a href="#[1158548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[11610f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[1161188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>

<P><STRONG><a name="[b5d7b0]"></a>ptpd_init</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, phpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd91e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[1046ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrGet
<LI><a href="#[10472c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigSet
<LI><a href="#[1047308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigGet
<LI><a href="#[1082e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1083190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[b5d768]"></a>ptpd_tick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, phpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd91a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[b5e068]"></a>RIT128x96x4Clear</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RIT128x96x4Clear &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[104ba98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[104bae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b60f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
</UL>

<P><STRONG><a name="[b5dfd8]"></a>RIT128x96x4StringDraw</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[104ba98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[104bae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[b5e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[b5e800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5e890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5e8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5e920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[b5e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5e9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActuator
<LI><a href="#[b5ea88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[b60f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[fda428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[fdc090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_display_address
<LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[104b468]"></a>RIT128x96x4ImageDraw</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104ba98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[104bae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[104b420]"></a>RIT128x96x4Enable</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RIT128x96x4Enable &rArr; GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[10f17c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[10f1810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[10f18e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[10f1a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[10f9e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10fa248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1161848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
</UL>

<P><STRONG><a name="[104b3d8]"></a>RIT128x96x4Disable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f1810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[10f18e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[10f9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[10f9f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[10fa248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>

<P><STRONG><a name="[b5e020]"></a>RIT128x96x4Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RIT128x96x4Init &rArr; RIT128x96x4Enable &rArr; GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[104b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
<LI><a href="#[104bae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
<LI><a href="#[10f9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[10f9e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10f9f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[10fa248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1161188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104b390]"></a>RIT128x96x4DisplayOn</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104bae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[104b348]"></a>RIT128x96x4DisplayOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104bae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[1084298]"></a>CPUcpsid</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f55b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[1084250]"></a>CPUcpsie</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f5568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[1084208]"></a>CPUwfi</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[10836a0]"></a>perror</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, perror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[1255b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1255e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[1256be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5ea88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>

<P><STRONG><a name="[10833b8]"></a>__aeabi_ldivmod</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1256368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
</UL>

<P><STRONG><a name="[1083190]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[b5a948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[b5d7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[f86868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[fd1500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyD0
<LI><a href="#[fd4010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
<LI><a href="#[fd6668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagement
<LI><a href="#[fd66b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagementPayload
<LI><a href="#[fd8930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[fd8b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackSync
<LI><a href="#[fd8bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagement
<LI><a href="#[fd8c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[fd8c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackDelayResp
<LI><a href="#[fd8cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
<LI><a href="#[fd8d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackSync
<LI><a href="#[fd8db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[fd8df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackHeader
<LI><a href="#[fd8e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayResp
<LI><a href="#[fd8ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayReq
<LI><a href="#[fd8f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[fd8ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initData
<LI><a href="#[fd9398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
<LI><a href="#[fe3f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe3f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[1083148]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b57900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[b5e800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5e890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5e8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5e920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
</UL>

<P><STRONG><a name="[1083100]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1082f98]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1082de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_wrapper
<LI><a href="#[1082ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1082f50]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1082f08]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1082ec0]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1082f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f83488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[f8c7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[1082e78]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b552d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b578b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b5d7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[f84650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[1082e30]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1082de8]"></a>_memset_wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1082f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1082c10]"></a>strstr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, strstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5a948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[1082aa0]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104fdc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[1082930]"></a>strchr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strchr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5a990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[10827c8]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5a948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[1082660]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd1470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
<LI><a href="#[fd14b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIdentifierOrder
<LI><a href="#[fd4010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
<LI><a href="#[fd92c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[fd9308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd9398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
<LI><a href="#[fd9428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[fd9500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[fd9548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[10824f0]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5a948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[b5a990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5b908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[12574a8]"></a>__aeabi_dadd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12574f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
</UL>

<P><STRONG><a name="[1257460]"></a>__aeabi_dsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12574f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1257418]"></a>__aeabi_drsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12574f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[12571c0]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1255730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
</UL>

<P><STRONG><a name="[1256f00]"></a>__init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1256f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__call_main
</UL>
<BR>[Called By]<UL><LI><a href="#[1083a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1256eb8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1256be8]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[10836a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[1256908]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fputc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf_1)
</UL>
<P><STRONG><a name="[1256520]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[12564d8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10806d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1256368]"></a>__aeabi_uldivmod</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1255fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[10833b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[1256198]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12574f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1256150]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1255fe8]"></a>__aeabi_llsr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1256368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12574f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1255fa0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1255e38]"></a>strerror</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10836a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[1255778]"></a>_double_round</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1255730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1255730]"></a>_double_epilogue</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1255778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[12571c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12574f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[12549c8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1254980]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1047308]"></a>EthernetConfigGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ethernet.o(i.EthernetConfigGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5d7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
</UL>

<P><STRONG><a name="[10472c0]"></a>EthernetConfigSet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ethernet.o(i.EthernetConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5d7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[fe07f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1047230]"></a>EthernetEnable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ethernet.o(i.EthernetEnable))
<BR><BR>[Called By]<UL><LI><a href="#[fe07f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[10471e8]"></a>EthernetInitExpClk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernet.o(i.EthernetInitExpClk))
<BR><BR>[Called By]<UL><LI><a href="#[fe07f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[10471a0]"></a>EthernetIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[fda470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
<LI><a href="#[fe07f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1047158]"></a>EthernetIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[fda470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
<LI><a href="#[fe07f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1047110]"></a>EthernetIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[fe07f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1047080]"></a>EthernetIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[fda470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
<LI><a href="#[fe07f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1046ff0]"></a>EthernetMACAddrGet</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, ethernet.o(i.EthernetMACAddrGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EthernetMACAddrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[fe05b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[1046fa8]"></a>EthernetMACAddrSet</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, ethernet.o(i.EthernetMACAddrSet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[1046ed0]"></a>EthernetPacketAvail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernet.o(i.EthernetPacketAvail), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe0690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[fe06d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[1046d68]"></a>EthernetSpaceAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet.o(i.EthernetSpaceAvail), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe07b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[1041de8]"></a>FlashUserGet</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, flash.o(i.FlashUserGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[10fa368]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[10f9e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10f9f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>

<P><STRONG><a name="[10fa248]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5e020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[104b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[104b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
<LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[10f9e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10f9f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>

<P><STRONG><a name="[10f9f78]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[10fa248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10fa368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[104b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
</UL>

<P><STRONG><a name="[10f9e10]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[10fa248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10fa368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[104b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10f9cf0]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[b5e020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOg
<LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOf
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOe
<LI><a href="#[b632d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOd
<LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
<LI><a href="#[104b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[104ba98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[104bae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[10f5640]"></a>IntDisable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b63168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntHandler
</UL>

<P><STRONG><a name="[10f55f8]"></a>IntEnable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
<LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptInit
<LI><a href="#[fe07f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[10f55b0]"></a>IntMasterDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[1084298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5eb18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
<LI><a href="#[b630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOg
<LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOf
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOe
<LI><a href="#[b632d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOd
<LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
</UL>

<P><STRONG><a name="[10f5568]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1084250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
<LI><a href="#[b630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOg
<LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOf
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOe
<LI><a href="#[b632d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOd
<LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
<LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[10f5448]"></a>IntPrioritySet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(i.IntPrioritySet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptInit
<LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[10f1a08]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[104b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10f1930]"></a>SSIDataGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGet))
<BR><BR>[Calls]<UL><LI><a href="#[10f1930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[104ba98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[104bae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
<LI><a href="#[10f1930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
</UL>

<P><STRONG><a name="[10f18e8]"></a>SSIDataGetNonBlocking</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[104b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[104b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10f18a0]"></a>SSIDataPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPut))
<BR><BR>[Calls]<UL><LI><a href="#[10f18a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[104ba98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[104bae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
<LI><a href="#[10f18a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>

<P><STRONG><a name="[10f1810]"></a>SSIDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIDisable))
<BR><BR>[Called By]<UL><LI><a href="#[104b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[104b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10f17c8]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[104b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[1161848]"></a>SysCtlClockGet</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fe07f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[104b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
<LI><a href="#[104cbf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
</UL>

<P><STRONG><a name="[1161800]"></a>SysCtlClockSet</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1161f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1161188]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[11610f8]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115c928]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104cbf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
</UL>

<P><STRONG><a name="[115c898]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104cbf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
</UL>

<P><STRONG><a name="[115c7c0]"></a>SysTickPeriodGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104cbf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
</UL>

<P><STRONG><a name="[115c778]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[115c730]"></a>SysTickValueGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systick.o(i.SysTickValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
</UL>

<P><STRONG><a name="[1158548]"></a>TimerConfigure</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
<LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[1158500]"></a>TimerControlEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i.TimerControlEvent), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[11583e0]"></a>TimerDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.TimerDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
<LI><a href="#[b63168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntHandler
</UL>

<P><STRONG><a name="[1158398]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
<LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[1158350]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b63120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntHandler
<LI><a href="#[b63168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntHandler
</UL>

<P><STRONG><a name="[1158308]"></a>TimerIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b63168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntHandler
</UL>

<P><STRONG><a name="[11582c0]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
</UL>

<P><STRONG><a name="[1158158]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
<LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[1158038]"></a>TimerPrescaleSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerPrescaleSet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[1157f18]"></a>TimerValueGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[b5e338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
<LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
</UL>

<P><STRONG><a name="[1086318]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[10861f8]"></a>UARTIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[10805b8]"></a>__0printf_1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf_1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10806d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1080570]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
</UL>

<P><STRONG><a name="[1080528]"></a>__0sprintf_1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf_1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1080690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[10806d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10804e0]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __1sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5e800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5e890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5e8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5e920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[b5e9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActuator
<LI><a href="#[b5ea88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
</UL>

<P><STRONG><a name="[1255b20]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[10836a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[1255ad8]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1254c50]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1254c08]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1254bc0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b63678]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b63678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[b63678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63630]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b63630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[b63630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b635e8]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b60f18]"></a>DisplayIntStatus</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DisplayIntStatus &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOg
<LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOf
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOe
<LI><a href="#[b632d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOd
<LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
</UL>

<P><STRONG><a name="[b5ba70]"></a>conn_err</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[b5a9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>

<P><STRONG><a name="[b5ba28]"></a>close_conn</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[b5a4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[b5a678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5a708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[b5a8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[b5a9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[b5b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5b9e0]"></a>send_data</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5a948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[b5a9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[b5ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[b5b950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
<LI><a href="#[b5b998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[b5b998]"></a>http_poll</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[b5b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5b950]"></a>http_sent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5b908]"></a>http_recv</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[b5a480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5a990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[b5ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[10824f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[b5b8c0]"></a>http_accept</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[b5a4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[b5a510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[b5a630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[b5a708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[b5a870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>

<P><STRONG><a name="[b58b90]"></a>tcp_new_port</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b57948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[b58b00]"></a>tcp_recv_null</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[b53c90]"></a>dhcp_check</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8f3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[f904c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[f90310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f90598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[b53c48]"></a>dhcp_option_trailer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[b53c00]"></a>dhcp_option_long</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[b53bb8]"></a>dhcp_option_short</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f90790]"></a>dhcp_create_request</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f90748]"></a>dhcp_select</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b53c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[b53c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b553f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b554d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f903e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f90430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f90478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f904c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f90790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[f90310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f90598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[f90700]"></a>dhcp_get_option_ptr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f90598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f90628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[f906b8]"></a>dhcp_rebind</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b53c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b553f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b554d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f903e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f90430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f90478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f904c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f90790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[f90310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[f90670]"></a>dhcp_bind</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[f8f1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[f8f230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8f278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8f2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f904c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[f90310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f90598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[f90628]"></a>dhcp_handle_ack</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[f903a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[f90700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[f90598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[f905e0]"></a>dhcp_free_reply</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f90358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
</UL>

<P><STRONG><a name="[f90598]"></a>dhcp_recv</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f90358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[f903a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[f904c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f90628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[f90670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[f90700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f90550]"></a>dhcp_discover</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b53c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[b553f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b554d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f903e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f90430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f90478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f904c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f90790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[f90310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[f90508]"></a>dhcp_decline</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b53c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[b53c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b553f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b554d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f903e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f90430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f90478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f904c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f90790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[f904c0]"></a>dhcp_set_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b53c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f90598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f90670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f90478]"></a>dhcp_delete_request</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f90430]"></a>dhcp_option_byte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f903e8]"></a>dhcp_option</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8f470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f90508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f903a0]"></a>dhcp_get_option_long</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f90598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f90628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[f90358]"></a>dhcp_unfold_reply</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5a8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f905e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[f90598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[f90310]"></a>dhcp_timeout</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[f8f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8f620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f90550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f90670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[f906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f90748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[f8e588]"></a>lwip_standard_chksum</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b55200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[f8ddf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[f8de38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[f8cfd0]"></a>plug_holes</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8c7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>

<P><STRONG><a name="[f872d0]"></a>pbuf_pool_alloc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = pbuf_pool_alloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b55008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[f81188]"></a>tcp_receive</STRONG> (Thumb, 1430 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_rexmit &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[b57b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f86940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[f86988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[f8f1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[ff0688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f810f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[f81140]"></a>tcp_parseopt</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[b55050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[f810b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f810f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[f810f8]"></a>tcp_process</STRONG> (Thumb, 794 bytes, Stack size 48 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b575e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b57b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5a798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[f81140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[f81188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f810b0]"></a>tcp_listen_input</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b575e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b576c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b578b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f81140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[ff06d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[fef308]"></a>tcp_output_segment</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b55200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[fee4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[fe4de8]"></a>find_entry</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe4da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[fe4da0]"></a>update_arp_entry</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b551b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f868b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dequeue
<LI><a href="#[fe4de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[fe3f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe3fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
</UL>

<P><STRONG><a name="[fe2000]"></a>enqueue_frame</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
</UL>

<P><STRONG><a name="[fdc090]"></a>lwip_display_address</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[fde3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[fd51c8]"></a>eventRecv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd50f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQPut
</UL>

<P><STRONG><a name="[fd5180]"></a>generalRecv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd50f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQPut
</UL>

<P><STRONG><a name="[fd5138]"></a>netQInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[fd50f0]"></a>netQPut</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd5180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generalRecv
<LI><a href="#[fd51c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventRecv
</UL>

<P><STRONG><a name="[fd50a8]"></a>netQCheck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSelect
</UL>

<P><STRONG><a name="[104bae0]"></a>RITWriteCommand</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RITWriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[10f18a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[10f1930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[10f9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5e068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[104b348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4DisplayOff
<LI><a href="#[104b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4DisplayOn
<LI><a href="#[104b468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4ImageDraw
</UL>

<P><STRONG><a name="[104ba98]"></a>RITWriteData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[10f18a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[10f1930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[10f9cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[104b468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4ImageDraw
</UL>

<P><STRONG><a name="[10806d8]"></a>_printf_core</STRONG> (Thumb, 326 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12564d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1080528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf_1
<LI><a href="#[10805b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf_1
</UL>

<P><STRONG><a name="[1080690]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1080528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf_1)
</UL>
<P><STRONG><a name="[12574f0]"></a>_double_addcore</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1255730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1255fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1256198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1257418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1257460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12574a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
