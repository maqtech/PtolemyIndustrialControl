<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\SimplePtidesOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\SimplePtidesOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.1 [Build 934]: Last Updated: Thu Nov 13 16:03:17 2008
<BR><P>
<H3>Maximum Stack Usage =        592 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; processEvents &rArr; setTimedInterrupt &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b63438]">Reset_Handler</a>
 <LI><a href="#[108e8f0]">CPUcpsid</a>
 <LI><a href="#[108e8a8]">CPUcpsie</a>
 <LI><a href="#[108e860]">CPUwfi</a>
 <LI><a href="#[b63678]">NmiSR</a>
 <LI><a href="#[b63630]">FaultISR</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10fb260]">SSIDataPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10fb260]">SSIDataPut</a><BR>
 <LI><a href="#[10fb2f0]">SSIDataGet</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10fb2f0]">SSIDataGet</a><BR>
 <LI><a href="#[1090b68]">UARTConfigSetExpClk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1090b68]">UARTConfigSetExpClk</a><BR>
 <LI><a href="#[1164d70]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1164d70]">SysCtlDelay</a><BR>
 <LI><a href="#[b63678]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63678]">NmiSR</a><BR>
 <LI><a href="#[b63630]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63630]">FaultISR</a><BR>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b635e8]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b63438]">Reset_Handler</a>
 <LI><a href="#[b63678]">NmiSR</a>
 <LI><a href="#[b63630]">FaultISR</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b631b0]">SysTickHandler</a>
 <LI><a href="#[b633a8]">IntGPIOa</a>
 <LI><a href="#[b63360]">IntGPIOb</a>
 <LI><a href="#[b63318]">IntGPIOc</a>
 <LI><a href="#[b632d0]">IntGPIOd</a>
 <LI><a href="#[b63288]">IntGPIOe</a>
 <LI><a href="#[b630d8]">UARTIntHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b63168]">Timer0IntHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b63120]">Timer1IntHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b63240]">IntGPIOf</a>
 <LI><a href="#[b631f8]">IntGPIOg</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b5ede8]">timerHandler</a>
 <LI><a href="#[fe6780]">ip_input</a>
 <LI><a href="#[fdf300]">ethernetif_init</a>
 <LI><a href="#[b5e650]">main</a>
 <LI><a href="#[1082a30]">fputc</a>
 <LI><a href="#[108ace8]">_sputc</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b63438]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[108e0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[108e0a0]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, entry.o($$startup$$))
<BR><BR>[Calls]<UL><LI><a href="#[1083028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>
<BR>[Called By]<UL><LI><a href="#[b63438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[1164d70]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[1164d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[11645d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[1164d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[1083070]"></a>__call_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1083028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>

<P><STRONG><a name="[b5ee30]"></a>itoa</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5ede8]"></a>timerHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> simpleptidesos.o(.text)
</UL>
<P><STRONG><a name="[b631b0]"></a>SysTickHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63168]"></a>Timer0IntHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10ff000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[115b090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntDisable
<LI><a href="#[115b0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
<LI><a href="#[115b168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63120]"></a>Timer1IntHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[115b0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b5eda0]"></a>setActuationInterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5ed58]"></a>getCurrentPhysicalTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getCurrentPhysicalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[115f508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
<LI><a href="#[b5e4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActuator
</UL>

<P><STRONG><a name="[b5ed10]"></a>fireActuator</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[108ab38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>

<P><STRONG><a name="[b5ecc8]"></a>alreadyFiring</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5ec80]"></a>die</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[b5ec38]"></a>addEvent</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[108ab38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[b5eba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
</UL>

<P><STRONG><a name="[b5ebf0]"></a>newEvent</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = newEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[b5eba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
</UL>

<P><STRONG><a name="[b5eba8]"></a>fireClock</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[108ab38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[108d7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[b5eb60]"></a>initializeClock</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = initializeClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5eb18]"></a>currentlyFiring</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5ead0]"></a>fireComputation</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[1083628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[108ab38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[108d7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b5ea88]"></a>freeEvent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5ea40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
</UL>

<P><STRONG><a name="[b5ea40]"></a>removeEvent</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = removeEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5ea88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeEvent
<LI><a href="#[108ab38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[108abc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[b5e9f8]"></a>fireActor</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fireActor &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[108ab38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[108dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeEvent
</UL>

<P><STRONG><a name="[b5e9b0]"></a>executeEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[108dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[b5e968]"></a>fireMerge</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[108ab38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[108d7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b5e920]"></a>fireModelDelay</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[108ab38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[108d7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b5e8d8]"></a>higherPriority</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5e890]"></a>enableInterrupts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[b5e848]"></a>setTimedInterrupt</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setTimedInterrupt &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[108da10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[10fefb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[115aca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
<LI><a href="#[115aee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[115b048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[115b120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[115b168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
<LI><a href="#[115b2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[b5e800]"></a>safeToProcess</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[b5e7b8]"></a>disableInterrupts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[b5e770]"></a>processEvents</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = processEvents &rArr; setTimedInterrupt &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safeToProcess
<LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
<LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5ea40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5ea88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeEvent
<LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[108ab38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[108dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5e728]"></a>processAvailableEvents</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safeToProcess
<LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5ea40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5ea88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeEvent
<LI><a href="#[b5eba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOg
<LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOf
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOe
<LI><a href="#[b632d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOd
<LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
</UL>

<P><STRONG><a name="[b5e6e0]"></a>fireSensor</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fireSensor &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[10832e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[108ab38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
<LI><a href="#[108d7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b630d8]"></a>UARTIntHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UARTIntHandler &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5eba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[10907c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[10908e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b5e698]"></a>initializeMemory</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5e650]"></a>main</STRONG> (Thumb, 316 bytes, Stack size 456 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = main &rArr; processEvents &rArr; setTimedInterrupt &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5e698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeMemory
<LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[1090850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[1090b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10fefb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[11037b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[115f550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[115f700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[1163f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[11645d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[1164620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.text)
</UL>
<P><STRONG><a name="[b5e608]"></a>timerInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5e5c0]"></a>ptpd_systick_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115f598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodGet
<LI><a href="#[115f670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[115f700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[1164620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[b5e578]"></a>IEEE1588Init</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[b5d2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
<LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
<LI><a href="#[1044020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashUserGet
<LI><a href="#[1049250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrSet
<LI><a href="#[108dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[10fee08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[1103c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1103da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[115adc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerPrescaleSet
<LI><a href="#[115aee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[115b120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[115b288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlEvent
<LI><a href="#[115b2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[1163ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[1163f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>

<P><STRONG><a name="[b5e530]"></a>setTime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd7bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
</UL>

<P><STRONG><a name="[b5e4e8]"></a>getTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd7ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[fd80e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[fd81b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
</UL>

<P><STRONG><a name="[b5e4a0]"></a>adjust_rx_timestamp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
</UL>

<P><STRONG><a name="[b5e458]"></a>getRxTime</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_rx_timestamp
<LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[115aca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fdf4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[b5e410]"></a>ptpd_init</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[1049298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrGet
<LI><a href="#[1049568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigSet
<LI><a href="#[10495b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigGet
<LI><a href="#[108d4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[b5e3c8]"></a>ptpd_tick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[b5e380]"></a>SysTickIntHandler</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d0a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerTick
<LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[b5e3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_tick
<LI><a href="#[b5e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[10493b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntEnable
<LI><a href="#[1103728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[115f550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
</UL>

<P><STRONG><a name="[b5e338]"></a>adjFreq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd7630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd7f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>

<P><STRONG><a name="[b5e2f0]"></a>getRand</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomSeed
<LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomNumber
<LI><a href="#[b5dd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomAddEntropy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[b5e2a8]"></a>displayStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd7630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[b5e260]"></a>interruptInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10fee08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[10fefb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>

<P><STRONG><a name="[b631f8]"></a>IntGPIOg</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IntGPIOg &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b60f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[1103728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63240]"></a>IntGPIOf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IntGPIOf &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b60f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[1103728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63288]"></a>IntGPIOe</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IntGPIOe &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b60f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[1103728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b632d0]"></a>IntGPIOd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IntGPIOd &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b60f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[1103728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63318]"></a>IntGPIOc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IntGPIOc &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b60f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[1103728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63360]"></a>IntGPIOb</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IntGPIOb &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b60f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[1103728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b633a8]"></a>IntGPIOa</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = IntGPIOa &rArr; DisplayIntStatus &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b60f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[1103728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b5d2e8]"></a>httpd_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[b5a098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[b5a170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[b5a200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[b57680]"></a>tcp_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b57638]"></a>tcp_seg_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b572d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b575f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f803f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f80480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b575f0]"></a>tcp_segs_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b575a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b5a248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[b575a8]"></a>tcp_pcb_purge</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b575f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[f803f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[b57560]"></a>tcp_pcb_remove</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b575a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5a248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b5a248]"></a>tcp_abort</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b572d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b575f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b57518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b5b400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
<LI><a href="#[f803f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f8e610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[b57518]"></a>tcp_slowtmr</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[b571b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b572d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b575a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b575f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5a248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b57488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[b574d0]"></a>tcp_fasttmr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b57488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[b57488]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b574d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[b57518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[b5a128]"></a>tcp_close</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b570e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[b572d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b585b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[b5b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5a170]"></a>tcp_bind</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b58640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5a098]"></a>tcp_listen</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b572d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b59f30]"></a>tcp_recved</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[b57440]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b57368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b573f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[b573f8]"></a>tcp_connect</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[b58640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[b59ea0]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5b328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[b573b0]"></a>tcp_seg_copy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[b57290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[108d7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f80480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57368]"></a>tcp_alloc</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[b5a248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[108d4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[f803a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[b5a050]"></a>tcp_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5a1b8]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5b328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[b5b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b59f78]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5b328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[b5b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b59ee8]"></a>tcp_sent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5b370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[b5b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5a0e0]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5b328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[b5a200]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5d2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b59fc0]"></a>tcp_poll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5b328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[b550a0]"></a>udp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b55058]"></a>udp_input</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b54cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b54d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b54d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b55010]"></a>udp_bind</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, udp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b54f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[fd7a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b54fc8]"></a>udp_send</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b54c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b54cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b54d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b55010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b54f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[b54f80]"></a>udp_sendto</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[fd78b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[fd7900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
</UL>

<P><STRONG><a name="[b54f38]"></a>udp_connect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[fd7a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b54ef0]"></a>udp_disconnect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd7870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[fd7a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b54ea8]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[fd7a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b54e60]"></a>udp_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b572d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[fd7870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[fd7a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b54e18]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[108d4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[fd7a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[f8e9b8]"></a>dhcp_renew</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8f780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f8f7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f8f810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f8f858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f8fb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[f8fb70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[f8fc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[f8f6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[f8e970]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[f8e928]"></a>dhcp_release</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8e5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8e610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8e658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8e6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[f8f780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f8f7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f8f810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f8f858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f8fb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[f8fc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[f8e8e0]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8f6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[f8e898]"></a>dhcp_stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8f978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f8e850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[f8e850]"></a>dhcp_start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b5a320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8e898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[108d4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f8e808]"></a>dhcp_inform</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b54e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b54f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b5a320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8f780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f8f7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f8f810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f8fb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[f8fb70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[f8fc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[108d4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[f8e7c0]"></a>dhcp_arp_reply</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[fe2ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[b54dd0]"></a>htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b54cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b54d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b57128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b571b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f8e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fdf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fdf420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[fe2c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe2c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe3af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe9328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fee128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[b54d40]"></a>inet_chksum_pseudo</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8d920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b571b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[fee128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f8d1d0]"></a>inet_chksum</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8d920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b54cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b54d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f8d188]"></a>inet_chksum_pbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8d920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[fe9328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[b57320]"></a>htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b57128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b571b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b573f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[f803a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f80480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f8f930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f8f9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[f8fa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[f8fb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[fee128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[f8d140]"></a>inet_aton</STRONG> (Thumb, 252 bytes, Stack size 36 bytes, inet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8d0f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[fd7a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[f8d0f8]"></a>inet_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8d140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
</UL>

<P><STRONG><a name="[f8d0b0]"></a>inet_ntoa</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, inet.o(.text), UNUSED)

<P><STRONG><a name="[b54b90]"></a>ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b54cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b54d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b571b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f80438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[f80480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f83b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[fe2c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe9328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b54bd8]"></a>ntohl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f803f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f80480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f8e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8f930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f8fa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[fe2c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe3af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe9328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fee128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[fef4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f8bae8]"></a>mem_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b5a368]"></a>mem_free</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f8c2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5a488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[b5b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[b5b4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_err
<LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[f8e898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f8f6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[f8f978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>

<P><STRONG><a name="[f8baa0]"></a>mem_realloc</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_realloc &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f8c2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[b5a320]"></a>mem_malloc</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b5a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5b328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[f8f6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[fdf300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[f89498]"></a>memp_init</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, memp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b57290]"></a>memp_malloc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = memp_malloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b54e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b573b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[b5a098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[f83948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>

<P><STRONG><a name="[b572d8]"></a>memp_free</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b54e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[b5a128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5a248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f83990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f8e658]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8e658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f87568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8e658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8fa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[f8e5c8]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8e5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f87568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8e5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8fa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[f8e610]"></a>netif_set_ipaddr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f87568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8fa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[f87568]"></a>netif_set_addr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8e5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8e610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8e658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[f87520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[f87520]"></a>netif_add</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f87568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f874d8]"></a>netif_remove</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[f87490]"></a>netif_find</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[f87448]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f8e580]"></a>netif_set_up</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[f8fa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[f87400]"></a>netif_is_up</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f8e6a0]"></a>netif_set_down</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[f873b8]"></a>netif_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f85cc8]"></a>pbuf_init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b5a2d8]"></a>pbuf_free</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b572d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[b5d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b54d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b571b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b585b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5b370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[f83a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[f85b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[f85b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8e898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f8f810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f8f930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[fd7870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[fd7990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[fd79d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
<LI><a href="#[fd7a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[fdf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fdf3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[fdf420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[fe2c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe2db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[fe3af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe3b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe9328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b54b48]"></a>pbuf_alloc</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5a320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[f865c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b54d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b57128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b571b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f83a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[f85b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[f8fb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[fd7a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[fdf4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[fe2c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[f8e538]"></a>pbuf_realloc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8baa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f80480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[fd78b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[fd7900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
<LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b54ab8]"></a>pbuf_header</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[b54cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[f80480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f83a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[fdf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fdf420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[fe2c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe9328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f85c80]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f80480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57248]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = pbuf_ref &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b54b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b573b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[f85bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_queue
<LI><a href="#[f8e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[f85c38]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[b54b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[f80480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b54b00]"></a>pbuf_chain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[f85c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f83a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[f85bf0]"></a>pbuf_queue</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>

<P><STRONG><a name="[f85ba8]"></a>pbuf_dequeue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe3af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[f85b60]"></a>pbuf_take</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[f85b18]"></a>pbuf_dechain</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[f83b88]"></a>raw_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)

<P><STRONG><a name="[f83b40]"></a>raw_input</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Calls]<UL><LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f83af8]"></a>raw_bind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f83af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[f83af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>

<P><STRONG><a name="[f83ab0]"></a>raw_connect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f83ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[f83ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
</UL>

<P><STRONG><a name="[f83a68]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)

<P><STRONG><a name="[f83a20]"></a>raw_sendto</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b54c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b54cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f839d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>

<P><STRONG><a name="[f839d8]"></a>raw_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f83a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[f83990]"></a>raw_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b572d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[f83948]"></a>raw_new</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[108d4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[f82780]"></a>stats_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stats.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[fef4f0]"></a>tcp_input</STRONG> (Thumb, 810 bytes, Stack size 40 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b54cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b54d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b57128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b572d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f803a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f803f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>
<BR>[Called By]<UL><LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b57200]"></a>tcp_enqueue</STRONG> (Thumb, 652 bytes, Stack size 64 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b54ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b572d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b575f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f85c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b570e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[b573f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b59e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[f803a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[b570e0]"></a>tcp_send_ctrl</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[b59e58]"></a>tcp_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5a008]"></a>tcp_output</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b54d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fed318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[fee128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[b57170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[b573f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b574d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[b57518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b59f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[b5a128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5b448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[f803a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f803f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f80480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[fef4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b57128]"></a>tcp_rst</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fed318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[f803a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f803f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b57170]"></a>tcp_rexmit_rto</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b57518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[fef4a8]"></a>tcp_rexmit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[f80480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b571b8]"></a>tcp_keepalive</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fed318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b57518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[fe9328]"></a>icmp_input</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b54cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b54cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8d188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b54d88]"></a>icmp_dest_unreach</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8d1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[fed318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b55058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[fe67c8]"></a>ip_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ip.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b54c68]"></a>ip_route</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f83a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[fed318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[fee128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[fe6780]"></a>ip_input</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b54cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b54d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b55058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f83b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[f87400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
<LI><a href="#[f8d1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[fe9328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_lwip.o(.text)
</UL>
<P><STRONG><a name="[b54cb0]"></a>ip_output_if</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[f8d1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f83a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[fe9328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fed318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[fed318]"></a>ip_output</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b54cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[b54d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b57128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b571b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[fee128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[b54cf8]"></a>ip_addr_isbroadcast</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ip_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[f8e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe2c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe3af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe6780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe9328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[fe2e00]"></a>etharp_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = etharp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[fdf300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[fe2db8]"></a>etharp_tmr</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[fdf348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[fe2d70]"></a>etharp_find_addr</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, etharp.o(.text), UNUSED)

<P><STRONG><a name="[fe2d28]"></a>etharp_ip_input</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe3af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[fdf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fdf420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[fe2ce0]"></a>etharp_arp_input</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8e7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[fe3af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fdf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fdf420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[fe2c98]"></a>etharp_request</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[f8e778]"></a>etharp_query</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b54cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[f85b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[fe2c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe3b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[f8fc48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[fe2c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[fe2c50]"></a>etharp_output</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b54cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[f8e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[fdf468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_output
</UL>

<P><STRONG><a name="[fdf540]"></a>low_level_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = low_level_init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1049328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntStatus
<LI><a href="#[10493b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntEnable
<LI><a href="#[1049400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntDisable
<LI><a href="#[1049448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntClear
<LI><a href="#[1049490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetInitExpClk
<LI><a href="#[10494d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetEnable
<LI><a href="#[1049568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigSet
<LI><a href="#[10fefb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[1164620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fdf300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[fdf4f8]"></a>low_level_output</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1049010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSpaceAvail
</UL>

<P><STRONG><a name="[fdf4b0]"></a>low_level_input</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b5e458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fdf3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[fdf420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[fdf468]"></a>ethernetif_output</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe2c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[fdf420]"></a>ethernetif_input</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fdf4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[fe2ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe2d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[1049178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPacketAvail
</UL>

<P><STRONG><a name="[b5d0f0]"></a>sys_arch_unprotect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b57248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[b57290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b572d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[f865c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
<LI><a href="#[fdf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fe0d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_frame
</UL>

<P><STRONG><a name="[b5d138]"></a>sys_arch_protect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sys_arch_protect &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b57248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[b57290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b572d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[f865c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
<LI><a href="#[fdf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fe0d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_frame
</UL>

<P><STRONG><a name="[fdf3d8]"></a>ethernetif_enqueue</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fdf4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[fe0d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_frame
<LI><a href="#[1049178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPacketAvail
</UL>
<BR>[Called By]<UL><LI><a href="#[fd9290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
</UL>

<P><STRONG><a name="[fdf390]"></a>ethernetif_dequeue</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[fe2ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe2d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[fdf348]"></a>arp_timer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe2db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[fdf300]"></a>ethernetif_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethernetif_init &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[fdf540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[fe2e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_init
<LI><a href="#[1049298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_lwip.o(.text)
</UL>
<P><STRONG><a name="[fdd3b8]"></a>fs_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmi_fs.o(.text), UNUSED)

<P><STRONG><a name="[fdd370]"></a>fs_tick</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmi_fs.o(.text), UNUSED)

<P><STRONG><a name="[b5a440]"></a>fs_open</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lmi_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[108cb48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[108cf88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[b5a488]"></a>fs_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lmi_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[b5b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[b5b4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_err
</UL>

<P><STRONG><a name="[b5a3f8]"></a>fs_read</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, lmi_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fdd208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[fdd250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulocaltime
<LI><a href="#[108cb48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[108ce20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[108d268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[fd9290]"></a>EthernetIntHandler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fdf3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[1049328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntStatus
<LI><a href="#[1049400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntDisable
<LI><a href="#[1049448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntClear
</UL>

<P><STRONG><a name="[b5d2a0]"></a>lwip_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b550a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[f82780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[f85cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init
<LI><a href="#[f873b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[f87448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[f87520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[f89498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[f8bae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[f8e580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[f8e850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[fe2e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_init
<LI><a href="#[fe67c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[b5d258]"></a>lwip_tick</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b574d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[b57518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[f8e5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8e610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8e658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8e898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f8e8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[f8e970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[fdaeb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_display_address
<LI><a href="#[fdf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[fe2db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[fd8488]"></a>toState</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayStats
<LI><a href="#[b5e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
<LI><a href="#[fd76c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStop
<LI><a href="#[fd7708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStart
<LI><a href="#[fd7f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[fd8050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
<LI><a href="#[fd8098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[fd80e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd81b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
<LI><a href="#[fd8248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[fd8290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[fd82d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[fd8320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
<LI><a href="#[fd8368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[fd83b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
<LI><a href="#[fd83f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
<LI><a href="#[fd8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[fd8440]"></a>doInit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd7870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[fd7a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[fd7cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackHeader
<LI><a href="#[fd7e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[fd7ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[fd7ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initData
<LI><a href="#[fd7f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_loop
<LI><a href="#[b5d1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[fd8050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[fd83f8]"></a>issueManagement</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd78b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[fd7ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd83b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[fd83b0]"></a>handleManagement</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd7798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum
<LI><a href="#[fd7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagement
<LI><a href="#[fd7bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
<LI><a href="#[fd83f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[108ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd8368]"></a>handleDelayResp</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd75e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[fd7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[fd7b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackDelayResp
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[108ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd8320]"></a>issueDelayResp</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd78b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[fd7d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayResp
<LI><a href="#[fd7f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd82d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
</UL>

<P><STRONG><a name="[fd82d8]"></a>handleDelayReq</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd75e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[fd8008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
<LI><a href="#[fd8320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd8290]"></a>handleFollowUp</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd75a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[fd7630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[fd7b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackFollowUp
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[108ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd8248]"></a>issueFollowup</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd78b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[fd7d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackFollowUp
<LI><a href="#[fd7f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[fd8200]"></a>addForeign</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd7a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackSync
<LI><a href="#[fd7af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[108ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[fd81b8]"></a>issueDelayReq</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[fd7900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
<LI><a href="#[fd7dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayReq
<LI><a href="#[fd7f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[fd8170]"></a>handleSync</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
<LI><a href="#[fd75a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[fd7630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[fd7708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStart
<LI><a href="#[fd7828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[fd8008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
<LI><a href="#[fd81b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
<LI><a href="#[fd8200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
<LI><a href="#[fd8248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[108ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd8128]"></a>handle</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[fd77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[fd7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSelect
<LI><a href="#[fd7990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[fd79d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
<LI><a href="#[fd7af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[fd7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPeek
<LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd8290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[fd82d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[fd8368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[fd83b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[108ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[fd80e0]"></a>issueSync</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[fd7900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
<LI><a href="#[fd7c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackSync
<LI><a href="#[fd7f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[fd8098]"></a>doState</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd7750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerExpired
<LI><a href="#[fd7e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[fd7fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
<LI><a href="#[fd80e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_loop
<LI><a href="#[b5d1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[fd8050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[b5d1c8]"></a>protocol_first</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd8098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[fd8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
</UL>

<P><STRONG><a name="[b5d180]"></a>protocol_loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd8098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[fd8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_tick
</UL>

<P><STRONG><a name="[fd8050]"></a>protocol</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd8098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[fd8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[fd7ea0]"></a>initTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[b5d0a8]"></a>timerTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[fd6588]"></a>timerUpdate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd7750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerExpired
</UL>

<P><STRONG><a name="[fd76c0]"></a>timerStop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[fd7708]"></a>timerStart</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[fd7750]"></a>timerExpired</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd6588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[fd7c18]"></a>msgPeek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd7af8]"></a>msgUnpackHeader</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[fd8200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>

<P><STRONG><a name="[fd7a68]"></a>msgUnpackSync</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>

<P><STRONG><a name="[fd5670]"></a>msgUnpackDelayReq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ptpd_msg.o(.text), UNUSED)

<P><STRONG><a name="[fd7b40]"></a>msgUnpackFollowUp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[fd7b88]"></a>msgUnpackDelayResp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[fd7ab0]"></a>msgUnpackManagement</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd83b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[fd7bd0]"></a>msgUnloadManagement</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[fd7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd83b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[fd5628]"></a>msgUnpackManagementPayload</STRONG> (Thumb, 660 bytes, Stack size 32 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[fd7cf0]"></a>msgPackHeader</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[fd7c60]"></a>msgPackSync</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd80e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
</UL>

<P><STRONG><a name="[fd7dc8]"></a>msgPackDelayReq</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd81b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
</UL>

<P><STRONG><a name="[fd7d38]"></a>msgPackFollowUp</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd8248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
</UL>

<P><STRONG><a name="[fd7d80]"></a>msgPackDelayResp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
</UL>

<P><STRONG><a name="[fd55e0]"></a>msgPackManagement</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[fd7ca8]"></a>msgPackManagementResponse</STRONG> (Thumb, 1122 bytes, Stack size 56 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[fd7f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd83f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
</UL>

<P><STRONG><a name="[fd2fd0]"></a>netQGet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd7990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[fd79d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
</UL>

<P><STRONG><a name="[fd2f88]"></a>lookupSubdomainAddress</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd2f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_algorithm
<LI><a href="#[108ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[fd7a20]"></a>netInit</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b54e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b54e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b54ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[b54ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[b54f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8d140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[fd2f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
<LI><a href="#[fd40b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[fd7870]"></a>netShutdown</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b54ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[fd7948]"></a>netSelect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd4020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd79d8]"></a>netRecvEvent</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd2fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd7990]"></a>netRecvGeneral</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd2fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd7900]"></a>netSendEvent</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd80e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[fd81b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
</UL>

<P><STRONG><a name="[fd78b8]"></a>netSendGeneral</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[fd8320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
<LI><a href="#[fd83f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
</UL>

<P><STRONG><a name="[fd7f30]"></a>initClock</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
<LI><a href="#[fd8488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[fd75e8]"></a>updateDelay</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[fd8008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd82d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[fd8368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[fd75a0]"></a>updateOffset</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd8290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[fd7630]"></a>updateClock</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayStats
<LI><a href="#[b5e338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjFreq
<LI><a href="#[b5e4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[fd77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[fd7f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd8290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[fd2f40]"></a>crc_algorithm</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd2f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
</UL>

<P><STRONG><a name="[fd7798]"></a>sum</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd83b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[fd7f78]"></a>fromInternalTime</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd7ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[fd80e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[fd81b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
<LI><a href="#[fd8248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[fd8320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
</UL>

<P><STRONG><a name="[fd7678]"></a>toInternalTime</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd7bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
<LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd8290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[fd8368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[fd1310]"></a>normalizeTime</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[fd8008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>

<P><STRONG><a name="[fd8008]"></a>addTime</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, arith.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd1310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd75e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd82d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
</UL>

<P><STRONG><a name="[fd77e0]"></a>subTime</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, arith.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd1310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd75a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[fd75e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[fd7630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[fd7ee8]"></a>initData</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[fd7e58]"></a>m1</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd03e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[fd7fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
<LI><a href="#[fd8098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[fd8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[fd7828]"></a>s1</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd03e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[fd04c0]"></a>copyD0</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd03e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
</UL>

<P><STRONG><a name="[fd0478]"></a>getIdentifierOrder</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd0430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
</UL>

<P><STRONG><a name="[fd0430]"></a>bmcDataSetComparison</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd0478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIdentifierOrder
<LI><a href="#[108ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd03e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[fd7fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
</UL>

<P><STRONG><a name="[fd03e8]"></a>bmcStateDecision</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd0430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
<LI><a href="#[fd04c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyD0
<LI><a href="#[fd7828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[fd7e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
</UL>

<P><STRONG><a name="[fd7fc0]"></a>bmc</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd03e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[fd0430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
<LI><a href="#[fd7e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
</UL>
<BR>[Called By]<UL><LI><a href="#[fd8098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[b5dd08]"></a>RandomAddEntropy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, random.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[b5dc78]"></a>RandomSeed</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, random.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[b5dcc0]"></a>RandomNumber</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, random.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[104ed90]"></a>uvsnprintf</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d0f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fdd208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[104ed48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
</UL>

<P><STRONG><a name="[fdd208]"></a>usprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104ed90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[fdaeb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_display_address
</UL>

<P><STRONG><a name="[104ed48]"></a>usnprintf</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104ed90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[fdd250]"></a>ulocaltime</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5a3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[104ed00]"></a>ustrtoul</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, ustdlib.o(.text), UNUSED)

<P><STRONG><a name="[b5dde0]"></a>RIT128x96x4Clear</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RIT128x96x4Clear &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[104dd40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[104dd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b60f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
</UL>

<P><STRONG><a name="[b5dd50]"></a>RIT128x96x4StringDraw</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[104dd40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[104dd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[b5d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5ea40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[b5eba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActuator
<LI><a href="#[b60f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[fdaeb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_display_address
</UL>

<P><STRONG><a name="[104d710]"></a>RIT128x96x4ImageDraw</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104dd40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[104dd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[104d6c8]"></a>RIT128x96x4Enable</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RIT128x96x4Enable &rArr; GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[10fb188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[10fb1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[10fb2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[10fb3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[1103848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[1103c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1164620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
</UL>

<P><STRONG><a name="[104d680]"></a>RIT128x96x4Disable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10fb1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[10fb2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[1103728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[11039b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[1103c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>

<P><STRONG><a name="[b5dd98]"></a>RIT128x96x4Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RIT128x96x4Init &rArr; RIT128x96x4Enable &rArr; GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[104d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
<LI><a href="#[104dd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
<LI><a href="#[1103728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[1103848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[11039b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[1103c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1163f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104d638]"></a>RIT128x96x4DisplayOn</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104dd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[104d5f0]"></a>RIT128x96x4DisplayOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104dd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[108e8f0]"></a>CPUcpsid</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10fef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[108e8a8]"></a>CPUcpsie</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10fef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[108e860]"></a>CPUwfi</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[108dcf8]"></a>perror</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, perror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[1081c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1081f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[1082d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeEvent
<LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>

<P><STRONG><a name="[108da10]"></a>__aeabi_ldivmod</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1082490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
</UL>

<P><STRONG><a name="[108d7e8]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b54d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b573f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[b5a3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[b5e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[f85b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[fd04c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyD0
<LI><a href="#[fd2f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
<LI><a href="#[fd55e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagement
<LI><a href="#[fd5628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagementPayload
<LI><a href="#[fd7828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[fd7a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackSync
<LI><a href="#[fd7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagement
<LI><a href="#[fd7af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[fd7b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackDelayResp
<LI><a href="#[fd7bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
<LI><a href="#[fd7c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackSync
<LI><a href="#[fd7ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[fd7cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackHeader
<LI><a href="#[fd7d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayResp
<LI><a href="#[fd7dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayReq
<LI><a href="#[fd7e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[fd7ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initData
<LI><a href="#[fd8200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
<LI><a href="#[fe2c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[108d7a0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b573b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5eba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
</UL>

<P><STRONG><a name="[108d758]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[108d5f0]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108d440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_wrapper
<LI><a href="#[108d518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[108d5a8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[108d560]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[108d518]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f82780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[f8bae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[108d4d0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b54e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b57368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b5e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[f83948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[108d488]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[108d440]"></a>_memset_wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108d5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[108d268]"></a>strstr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, strstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5a3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[108d0f8]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104ed90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[108cf88]"></a>strchr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strchr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[108ce20]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5a3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[108ccb8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd0430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
<LI><a href="#[fd0478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIdentifierOrder
<LI><a href="#[fd2f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
<LI><a href="#[fd8128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[fd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[fd8200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
<LI><a href="#[fd8290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[fd8368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[fd83b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[108cb48]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5a3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[b5a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5b370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[1083628]"></a>__aeabi_dadd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
</UL>

<P><STRONG><a name="[10835e0]"></a>__aeabi_dsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1083598]"></a>__aeabi_drsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1083670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[10832e8]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1081858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
</UL>

<P><STRONG><a name="[1083028]"></a>__init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1083070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__call_main
</UL>
<BR>[Called By]<UL><LI><a href="#[108e0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1082fe0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1082d10]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[108dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[1082a30]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fputc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf_1)
</UL>
<P><STRONG><a name="[1082648]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1082600]"></a>__aeabi_uidivmod</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108ad30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1082490]"></a>__aeabi_uldivmod</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1082110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[108da10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[10822c0]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1083670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1082278]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1082110]"></a>__aeabi_llsr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1082490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1083670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[10820c8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1081f60]"></a>strerror</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[10818a0]"></a>_double_round</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1081858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1081858]"></a>_double_epilogue</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10818a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10832e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1083670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[11a6080]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[11a6038]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[10495b0]"></a>EthernetConfigGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ethernet.o(i.EthernetConfigGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
</UL>

<P><STRONG><a name="[1049568]"></a>EthernetConfigSet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ethernet.o(i.EthernetConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[fdf540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[10494d8]"></a>EthernetEnable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ethernet.o(i.EthernetEnable))
<BR><BR>[Called By]<UL><LI><a href="#[fdf540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1049490]"></a>EthernetInitExpClk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernet.o(i.EthernetInitExpClk))
<BR><BR>[Called By]<UL><LI><a href="#[fdf540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1049448]"></a>EthernetIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[fd9290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
<LI><a href="#[fdf540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1049400]"></a>EthernetIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[fd9290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
<LI><a href="#[fdf540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[10493b8]"></a>EthernetIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[fdf540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1049328]"></a>EthernetIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[fd9290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
<LI><a href="#[fdf540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1049298]"></a>EthernetMACAddrGet</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, ethernet.o(i.EthernetMACAddrGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EthernetMACAddrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[fdf300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[1049250]"></a>EthernetMACAddrSet</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, ethernet.o(i.EthernetMACAddrSet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[1049178]"></a>EthernetPacketAvail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernet.o(i.EthernetPacketAvail), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fdf3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[fdf420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[1049010]"></a>EthernetSpaceAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet.o(i.EthernetSpaceAvail), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fdf4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[1044020]"></a>FlashUserGet</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, flash.o(i.FlashUserGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[1103da0]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[11037b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[1103848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[11039b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>

<P><STRONG><a name="[1103c80]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[104d680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[104d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
<LI><a href="#[11037b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[1103848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[11039b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>

<P><STRONG><a name="[11039b0]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[1103c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1103da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[104d680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
</UL>

<P><STRONG><a name="[1103848]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[1103c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1103da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[104d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[11037b8]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[1103c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1103da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1103728]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOg
<LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOf
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOe
<LI><a href="#[b632d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOd
<LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
<LI><a href="#[104d680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[104dd40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[104dd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[10ff000]"></a>IntDisable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b63168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntHandler
</UL>

<P><STRONG><a name="[10fefb8]"></a>IntEnable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptInit
<LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
<LI><a href="#[fdf540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[10fef70]"></a>IntMasterDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[108e8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
<LI><a href="#[b630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOg
<LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOf
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOe
<LI><a href="#[b632d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOd
<LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
</UL>

<P><STRONG><a name="[10fef28]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[108e8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
<LI><a href="#[b630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOg
<LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOf
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOe
<LI><a href="#[b632d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOd
<LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
</UL>

<P><STRONG><a name="[10fee08]"></a>IntPrioritySet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(i.IntPrioritySet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptInit
<LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[10fb3c8]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[104d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10fb2f0]"></a>SSIDataGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGet))
<BR><BR>[Calls]<UL><LI><a href="#[10fb2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[104dd40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[104dd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
<LI><a href="#[10fb2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
</UL>

<P><STRONG><a name="[10fb2a8]"></a>SSIDataGetNonBlocking</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[104d680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[104d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10fb260]"></a>SSIDataPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPut))
<BR><BR>[Calls]<UL><LI><a href="#[10fb260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[104dd40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[104dd88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
<LI><a href="#[10fb260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>

<P><STRONG><a name="[10fb1d0]"></a>SSIDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIDisable))
<BR><BR>[Called By]<UL><LI><a href="#[104d680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[104d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10fb188]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[104d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[1164620]"></a>SysCtlClockGet</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
<LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fdf540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[104d6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[11645d8]"></a>SysCtlClockSet</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1164d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1163f60]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1163ed0]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115f700]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
<LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115f670]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
</UL>

<P><STRONG><a name="[115f598]"></a>SysTickPeriodGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
</UL>

<P><STRONG><a name="[115f550]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115f508]"></a>SysTickValueGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systick.o(i.SysTickValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
</UL>

<P><STRONG><a name="[115b2d0]"></a>TimerConfigure</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
</UL>

<P><STRONG><a name="[115b288]"></a>TimerControlEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i.TimerControlEvent), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115b168]"></a>TimerDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.TimerDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
<LI><a href="#[b63168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntHandler
</UL>

<P><STRONG><a name="[115b120]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
</UL>

<P><STRONG><a name="[115b0d8]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b63120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntHandler
<LI><a href="#[b63168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntHandler
</UL>

<P><STRONG><a name="[115b090]"></a>TimerIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b63168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntHandler
</UL>

<P><STRONG><a name="[115b048]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
</UL>

<P><STRONG><a name="[115aee0]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
</UL>

<P><STRONG><a name="[115adc0]"></a>TimerPrescaleSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerPrescaleSet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115aca0]"></a>TimerValueGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[b5e458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
<LI><a href="#[b5e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
</UL>

<P><STRONG><a name="[1090b68]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[1090b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1090b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[10908e0]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[1090850]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10907c0]"></a>UARTIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b630d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[108ac10]"></a>__0printf_1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf_1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108ad30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[108abc8]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ea40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
</UL>

<P><STRONG><a name="[108ab80]"></a>__0sprintf_1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf_1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108ace8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[108ad30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[108ab38]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __1sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireSensor
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5e920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5e968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5e9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5ea40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5eba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActuator
</UL>

<P><STRONG><a name="[1081c48]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[108dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[1081c00]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[11a6308]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[11a62c0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[11a6278]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b63678]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b63678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[b63678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63630]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b63630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[b63630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b635e8]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b60f60]"></a>DisplayIntStatus</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DisplayIntStatus &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5dde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOg
<LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOf
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOe
<LI><a href="#[b632d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOd
<LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
</UL>

<P><STRONG><a name="[b5b4d8]"></a>conn_err</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[b5a488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>

<P><STRONG><a name="[b5b490]"></a>close_conn</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b59ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[b59f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[b5a128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5a1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[b5a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[b5a488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[b5b448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5b448]"></a>send_data</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b59e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5a3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[b5a488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[b5b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[b5b3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
<LI><a href="#[b5b400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[b5b400]"></a>http_poll</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[b5b448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5b3b8]"></a>http_sent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5b448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5b370]"></a>http_recv</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b59ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[b59f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5a440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5b448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[b5b490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[108cb48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[b5b328]"></a>http_accept</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b59ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[b59f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[b59fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[b5a0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[b5a1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[b5a320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>

<P><STRONG><a name="[b58640]"></a>tcp_new_port</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b573f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[b585b0]"></a>tcp_recv_null</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[f8fc48]"></a>dhcp_check</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[f8f858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f8f930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[f8fc00]"></a>dhcp_option_trailer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f8fbb8]"></a>dhcp_option_long</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f8fb70]"></a>dhcp_option_short</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f8fb28]"></a>dhcp_create_request</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f8fae0]"></a>dhcp_select</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b54f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b54fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8f780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f8f7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f8f810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f8f858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f8fb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[f8fb70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[f8fbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[f8fc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f8f930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[f8fa98]"></a>dhcp_get_option_ptr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8f930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f8f9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[f8fa50]"></a>dhcp_rebind</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b54f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b55010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8f780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f8f7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f8f810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f8f858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f8fb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[f8fb70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[f8fc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[f8f6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[f8fa08]"></a>dhcp_bind</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[f8e580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[f8e5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8e610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8e658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8f858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f8f930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[f8f9c0]"></a>dhcp_handle_ack</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[f8f738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[f8fa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[f8f978]"></a>dhcp_free_reply</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f8f6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
</UL>

<P><STRONG><a name="[f8f930]"></a>dhcp_recv</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8f6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[f8f738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[f8f858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f8f9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[f8fa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[f8fa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8fc48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[f8f8e8]"></a>dhcp_discover</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[b54f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b54f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b55010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8f780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f8f7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f8f810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f8f858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f8fb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[f8fb70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[f8fc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[f8f6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[f8f8a0]"></a>dhcp_decline</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b54f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b54f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b55010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8f780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[f8f7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[f8f810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[f8f858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f8fb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[f8fb70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[f8fbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[f8fc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[f8f858]"></a>dhcp_set_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f8f930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f8fa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8fc48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[f8f810]"></a>dhcp_delete_request</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f8f7c8]"></a>dhcp_option_byte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f8f780]"></a>dhcp_option</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8e808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8f8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[f8f738]"></a>dhcp_get_option_long</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8f930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f8f9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[f8f6f0]"></a>dhcp_unfold_reply</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8f978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[f8f930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[f8f6a8]"></a>dhcp_timeout</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8e9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[f8f8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f8fa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[f8fa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8fc48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[f8d920]"></a>lwip_standard_chksum</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b54d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[f8d188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[f8d1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[f8c2c8]"></a>plug_holes</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8baa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>

<P><STRONG><a name="[f865c8]"></a>pbuf_pool_alloc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = pbuf_pool_alloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b54b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[f80480]"></a>tcp_receive</STRONG> (Thumb, 1430 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_rexmit &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b573b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[b57638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f85c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[f85c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[f8e538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[fef4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f803f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[f80438]"></a>tcp_parseopt</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[b54b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[f803a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f803f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[f803f0]"></a>tcp_process</STRONG> (Thumb, 794 bytes, Stack size 48 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b57128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b575a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b57638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5a248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[f80438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[f80480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f803a8]"></a>tcp_listen_input</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f80438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[fef4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[fee128]"></a>tcp_output_segment</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b54c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b54d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[fed318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[fe3b38]"></a>find_entry</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe3af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[fe3af0]"></a>update_arp_entry</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b54bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b54cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b54dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f85ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dequeue
<LI><a href="#[fe3b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[fe2ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe2d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
</UL>

<P><STRONG><a name="[fe0d50]"></a>enqueue_frame</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[fdf3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
</UL>

<P><STRONG><a name="[fdaeb0]"></a>lwip_display_address</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[fdd208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[fd4140]"></a>eventRecv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd4068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQPut
</UL>

<P><STRONG><a name="[fd40f8]"></a>generalRecv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd4068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQPut
</UL>

<P><STRONG><a name="[fd40b0]"></a>netQInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd7a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[fd4068]"></a>netQPut</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd40f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generalRecv
<LI><a href="#[fd4140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventRecv
</UL>

<P><STRONG><a name="[fd4020]"></a>netQCheck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSelect
</UL>

<P><STRONG><a name="[104dd88]"></a>RITWriteCommand</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RITWriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[10fb260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[10fb2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[1103728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5dde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[104d5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4DisplayOff
<LI><a href="#[104d638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4DisplayOn
<LI><a href="#[104d710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4ImageDraw
</UL>

<P><STRONG><a name="[104dd40]"></a>RITWriteData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[10fb260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[10fb2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[1103728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5dde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[104d710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4ImageDraw
</UL>

<P><STRONG><a name="[108ad30]"></a>_printf_core</STRONG> (Thumb, 326 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1082600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[108ab80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf_1
<LI><a href="#[108ac10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf_1
</UL>

<P><STRONG><a name="[108ace8]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[108ab80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf_1)
</UL>
<P><STRONG><a name="[1083670]"></a>_double_addcore</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1081858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1082110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[10822c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1083598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10835e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1083628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
