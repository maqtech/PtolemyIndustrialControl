<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.1 [Build 934]: Last Updated: Mon Nov 10 16:18:50 2008
<BR><P>
<H3>Maximum Stack Usage =        684 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; IEEE1588Init &rArr; lwip_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b63438]">Reset_Handler</a>
 <LI><a href="#[107dc70]">CPUcpsid</a>
 <LI><a href="#[107dc28]">CPUcpsie</a>
 <LI><a href="#[107dbe0]">CPUwfi</a>
 <LI><a href="#[b63678]">NmiSR</a>
 <LI><a href="#[b63630]">FaultISR</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10ea1d8]">SSIDataPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10ea1d8]">SSIDataPut</a><BR>
 <LI><a href="#[10ea268]">SSIDataGet</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10ea268]">SSIDataGet</a><BR>
 <LI><a href="#[f8d4b8]">netif_set_netmask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f8d4b8]">netif_set_netmask</a><BR>
 <LI><a href="#[f8d548]">netif_set_gw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f8d548]">netif_set_gw</a><BR>
 <LI><a href="#[107fee8]">UARTConfigSetExpClk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[107fee8]">UARTConfigSetExpClk</a><BR>
 <LI><a href="#[1165700]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1165700]">SysCtlDelay</a><BR>
 <LI><a href="#[b63678]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63678]">NmiSR</a><BR>
 <LI><a href="#[b63630]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63630]">FaultISR</a><BR>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b635e8]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b63438]">Reset_Handler</a>
 <LI><a href="#[b63678]">NmiSR</a>
 <LI><a href="#[b63630]">FaultISR</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b632d0]">SysTickHandler</a>
 <LI><a href="#[b633a8]">IntGPIOa</a>
 <LI><a href="#[b63360]">IntGPIOb</a>
 <LI><a href="#[b63318]">IntGPIOc</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b631f8]">UARTIntHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b63288]">Timer0IntHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b63240]">Timer1IntHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[fe5ad8]">ip_input</a>
 <LI><a href="#[103df18]">ethernetif_init</a>
 <LI><a href="#[b5ef08]">main</a>
 <LI><a href="#[1071b20]">fputc</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b63438]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[107d420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[107d420]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, entry.o($$startup$$))
<BR><BR>[Calls]<UL><LI><a href="#[1072118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>
<BR>[Called By]<UL><LI><a href="#[b63438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[1165700]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[1165700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1164f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[1165700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[1072160]"></a>__call_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1072118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>

<P><STRONG><a name="[b5f730]"></a>itoa</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b632d0]"></a>SysTickHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63288]"></a>Timer0IntHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Timer0IntHandler &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[10edea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10edee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[115ba18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63240]"></a>Timer1IntHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[115ba18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b633a8]"></a>IntGPIOa</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IntGPIOa &rArr; DisplayIntStatus &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b61308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[b61350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f2630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63360]"></a>IntGPIOb</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IntGPIOb &rArr; DisplayIntStatus &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b61308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[b61350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f2630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63318]"></a>IntGPIOc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IntGPIOc &rArr; DisplayIntStatus &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b61308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[b61350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f2630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b5f6e8]"></a>UARTSend</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107ffc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPutNonBlocking
</UL>

<P><STRONG><a name="[b5f6a0]"></a>setActuationInterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5f658]"></a>getCurrentPhysicalTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5f610]"></a>fireActuator</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5f5c8]"></a>alreadyFiring</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5f580]"></a>die</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[b5f538]"></a>addEvent</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = addEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSensor
<LI><a href="#[b5f220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5f268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5f3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5f460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[b5f4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
</UL>

<P><STRONG><a name="[b5f4f0]"></a>fireClock</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fireClock &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5f538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[1072af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[107cd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[b5f4a8]"></a>newEvent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = newEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[107a170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSensor
<LI><a href="#[b5f220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5f268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5f3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5f460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
</UL>

<P><STRONG><a name="[b5f460]"></a>initializeClock</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initializeClock &rArr; newEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5f538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5f418]"></a>currentlyFiring</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5f3d0]"></a>fireComputation</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5f538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[1072718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1072af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[b5f388]"></a>freeEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
</UL>

<P><STRONG><a name="[b5f340]"></a>removeEvent</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = removeEvent &rArr; __1printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5f388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeEvent
<LI><a href="#[107a170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[b5f2f8]"></a>fireActor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fireActor &rArr; perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[107d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeEvent
</UL>

<P><STRONG><a name="[b5f2b0]"></a>executeEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[107d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[b5f268]"></a>fireMerge</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5f538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[107cd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b5f220]"></a>fireModelDelay</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5f538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
</UL>

<P><STRONG><a name="[b5f1d8]"></a>enableInterrupts</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = enableInterrupts &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[107fbd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[10edea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10edf30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[b5f190]"></a>setTimedInterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5f148]"></a>safeToProcess</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[b5f100]"></a>disableInterrupts</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = disableInterrupts &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[107fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntDisable
<LI><a href="#[10edee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[10edf78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[b5f0b8]"></a>processEvents</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
<LI><a href="#[b5f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safeToProcess
<LI><a href="#[b5f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
<LI><a href="#[b5f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5f4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[1072b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[107d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[b5f070]"></a>processAvailableEvents</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = processAvailableEvents &rArr; fireClock &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
<LI><a href="#[b5f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safeToProcess
<LI><a href="#[b5f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
<LI><a href="#[b5f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5f4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[1072b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[b5f028]"></a>initializeSensor</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initializeSensor &rArr; newEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5f538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[10723d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b631f8]"></a>UARTIntHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = UARTIntHandler &rArr; processAvailableEvents &rArr; fireClock &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
<LI><a href="#[b5f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
<LI><a href="#[b5f4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[107fb40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[107fc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b5efe0]"></a>initializeMemory</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5ef98]"></a>ptpd_systick_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ptpd_systick_init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[115ff28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodGet
<LI><a href="#[1160000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[1160090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[1164fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[b5ef50]"></a>IEEE1588Init</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = IEEE1588Init &rArr; lwip_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[b5dd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
<LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5ef98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
<LI><a href="#[fd3538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashUserGet
<LI><a href="#[fd8788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrSet
<LI><a href="#[107d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[10edd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[10edea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10f2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10f2ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[115b700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerPrescaleSet
<LI><a href="#[115b820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[115ba60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[115bbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlEvent
<LI><a href="#[115bc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[1164860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[11648f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5ef08]"></a>main</STRONG> (Thumb, 532 bytes, Stack size 344 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = main &rArr; IEEE1588Init &rArr; lwip_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5efe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeMemory
<LI><a href="#[b5f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSensor
<LI><a href="#[b5f460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[107fbd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[107fee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[10edea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10edf30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[10f26c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[115b820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[115b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[115ba60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[115bc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[115fee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[1160090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[11648f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[1164f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[1164fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.text)
</UL>
<P><STRONG><a name="[b5eec0]"></a>setTime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5db10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[1036248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[10367e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
</UL>

<P><STRONG><a name="[b5ee78]"></a>getTime</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115fe98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickValueGet
<LI><a href="#[115ff28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ede8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
<LI><a href="#[1036248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[10368c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[1036cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[1036dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
</UL>

<P><STRONG><a name="[b5ee30]"></a>adjust_rx_timestamp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ede8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
</UL>

<P><STRONG><a name="[b5ede8]"></a>getRxTime</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ee30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_rx_timestamp
<LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[115b5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[103e0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[b5eda0]"></a>ptpd_init</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[fd87d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrGet
<LI><a href="#[fd8aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigSet
<LI><a href="#[fd8ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigGet
<LI><a href="#[107ca78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[b5ed58]"></a>ptpd_tick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[b5ed10]"></a>SysTickIntHandler</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5da80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerTick
<LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_tick
<LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[fd88f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntEnable
<LI><a href="#[10f2630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[115fee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
</UL>

<P><STRONG><a name="[b5ecc8]"></a>adjFreq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[1036b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>

<P><STRONG><a name="[b5ec80]"></a>getRand</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomSeed
<LI><a href="#[b5e698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomNumber
<LI><a href="#[b5e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomAddEntropy
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[b5ec38]"></a>displayStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[b5dd08]"></a>httpd_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = httpd_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[b5aa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[b5aad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[b5ab68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[b57fe8]"></a>tcp_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b57fa0]"></a>tcp_seg_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f7f2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f7f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57f58]"></a>tcp_segs_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b5abb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[b57f10]"></a>tcp_pcb_purge</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[f7f2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[b57ec8]"></a>tcp_pcb_remove</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5aa90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5abb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b5abb0]"></a>tcp_abort</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b57f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b57e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b5bd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
<LI><a href="#[f7f2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f8d500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[b57e80]"></a>tcp_slowtmr</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[b57b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b57f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5abb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b57df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[b57e38]"></a>tcp_fasttmr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b57df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[b57df0]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[b57e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[b5aa90]"></a>tcp_close</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[b57c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b58f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[b5bdf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5aad8]"></a>tcp_bind</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_bind &rArr; tcp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[b58fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5aa00]"></a>tcp_listen</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tcp_listen &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5a898]"></a>tcp_recved</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[b57da8]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b57cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b57d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[b57d60]"></a>tcp_connect</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[b58fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[b5a808]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5bc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[b57d18]"></a>tcp_seg_copy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[b57bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[107cd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f7f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57cd0]"></a>tcp_alloc</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[b5abb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[107ca78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[f7f298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[b5a9b8]"></a>tcp_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5ab20]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5bc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[b5bdf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5a8e0]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5bc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[b5bdf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5a850]"></a>tcp_sent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5bcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[b5bdf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5aa48]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5bc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[b5ab68]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5a928]"></a>tcp_poll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5bc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[b55a08]"></a>udp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b559c0]"></a>udp_input</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b556a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b556f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b55978]"></a>udp_bind</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b558a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1036638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b55930]"></a>udp_send</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = udp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b55420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b555d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b55618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b556a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b55978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b558e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b558e8]"></a>udp_sendto</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = udp_sendto &rArr; udp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[10364d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[1036518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
</UL>

<P><STRONG><a name="[b558a0]"></a>udp_connect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[b55978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1036638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b55858]"></a>udp_disconnect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[1036638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b55810]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[1036638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b557c8]"></a>udp_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = udp_remove &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[1036488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[1036638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b55780]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[107ca78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1036638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[f8d8a8]"></a>dhcp_renew</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[b53cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b54018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b54060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b540f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b558a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b53b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f8d860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[f8d860]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[f8d818]"></a>dhcp_release</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[b53cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b54018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b540f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b558a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8d500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8d548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8d590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[b53b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[f8d7d0]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[f8d788]"></a>dhcp_stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = dhcp_stop &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b53e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[b557c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5acd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f8d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[f8d740]"></a>dhcp_start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto &rArr; udp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b55780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b5ac88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5acd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8d788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[107ca78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f8d6f8]"></a>dhcp_inform</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[b53cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b54018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b54060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b540f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b557c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b558a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b5ac88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5acd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[107ca78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[f8d6b0]"></a>dhcp_arp_reply</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[fe2080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[b55738]"></a>htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b556f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b57a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f8d668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe1ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe2038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe2e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe8680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fed498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[103dfa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[103e038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[b556a8]"></a>inet_chksum_pseudo</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8c810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b559c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[fed498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f8c0c0]"></a>inet_chksum</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8c810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b55618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b556f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f8c078]"></a>inet_chksum_pbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8c810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[fe8680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[b57c88]"></a>htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b53eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[b53ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b54018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b57a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[f7f298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f7f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[fed498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[f8c030]"></a>inet_aton</STRONG> (Thumb, 252 bytes, Stack size 36 bytes, inet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8bfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[1036638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[f8bfe8]"></a>inet_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8c030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
</UL>

<P><STRONG><a name="[f8bfa0]"></a>inet_ntoa</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, inet.o(.text), UNUSED)

<P><STRONG><a name="[b554f8]"></a>ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b556f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b559c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f7f328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[f7f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f82a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[fe2038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe8680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b55540]"></a>ntohl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b53ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b559c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f7f2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f7f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f8d668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe1ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe2e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe8680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fed498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[fee818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f8a9d8]"></a>mem_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[107cac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b5acd0]"></a>mem_free</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f8b1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[b53be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[b53e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5ada8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5adf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[b5bdf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[b5be40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_err
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[f8d788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>

<P><STRONG><a name="[f8a990]"></a>mem_realloc</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_realloc &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f8b1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[b5ac88]"></a>mem_malloc</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b53be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b5ada8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5bc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[103df18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[f88388]"></a>memp_init</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b57bf8]"></a>memp_malloc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = memp_malloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5db10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b57d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[b5aa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[f82838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>

<P><STRONG><a name="[b57c40]"></a>memp_free</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5db10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b557c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5aa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[b5aa90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5abb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f82880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f8d548]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f8d548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[b53ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f86458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8d548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[f8d4b8]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f8d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
</UL>
<BR>[Called By]<UL><LI><a href="#[b53ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f86458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[f8d500]"></a>netif_set_ipaddr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b5abb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b53ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f86458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[f86458]"></a>netif_set_addr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8d500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8d548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[f86410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[f86410]"></a>netif_add</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f86458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f863c8]"></a>netif_remove</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[f86380]"></a>netif_find</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[f86338]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f8d470]"></a>netif_set_up</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f862f0]"></a>netif_is_up</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f8d590]"></a>netif_set_down</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[f862a8]"></a>netif_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f84bb8]"></a>pbuf_init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b5ac40]"></a>pbuf_free</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5acd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[b5dac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5db10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b556f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b559c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b58f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5bcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[f82910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[f84a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[f84a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8d788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[fe2038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe2158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[fe2e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe2ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe8680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1036488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[10365a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[10365f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
<LI><a href="#[1036638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[103dfa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[103dff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[103e038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[b554b0]"></a>pbuf_alloc</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5ac88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[f854b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b54018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b556f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b57a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f82910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[f84a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[fe2038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[1036638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[103e0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[f8d428]"></a>pbuf_realloc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8a990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f7f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[10364d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[1036518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
</UL>

<P><STRONG><a name="[b55420]"></a>pbuf_header</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[b55618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b559c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[f7f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f82910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[fe1ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe8680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[103dfa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[103e038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[f84b70]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57bb0]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = pbuf_ref &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5db10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b55468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b57d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[f84ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_queue
<LI><a href="#[f8d668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[f84b28]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[b55468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[f7f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b55468]"></a>pbuf_chain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[f84b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f82910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[f84ae0]"></a>pbuf_queue</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>

<P><STRONG><a name="[f84a98]"></a>pbuf_dequeue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe2e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[f84a50]"></a>pbuf_take</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[f84a08]"></a>pbuf_dechain</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[f82a78]"></a>raw_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)

<P><STRONG><a name="[f82a30]"></a>raw_input</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Calls]<UL><LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f829e8]"></a>raw_bind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f829e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[f829e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>

<P><STRONG><a name="[f829a0]"></a>raw_connect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f829a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[f829a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
</UL>

<P><STRONG><a name="[f82958]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)

<P><STRONG><a name="[f82910]"></a>raw_sendto</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b555d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b55618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f828c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>

<P><STRONG><a name="[f828c8]"></a>raw_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f82910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[f82880]"></a>raw_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[f82838]"></a>raw_new</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[107ca78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[f81670]"></a>stats_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stats.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[107cac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[fee860]"></a>tcp_input</STRONG> (Thumb, 810 bytes, Stack size 40 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b556a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b57a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f7f298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f7f2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>
<BR>[Called By]<UL><LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b57b68]"></a>tcp_enqueue</STRONG> (Thumb, 652 bytes, Stack size 64 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b55420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f84b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b57a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[b57d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[f7f298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[b57a48]"></a>tcp_send_ctrl</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5aa90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[b5a7c0]"></a>tcp_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5a970]"></a>tcp_output</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b556a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fec688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[fed498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[b57ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[b57d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b57e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[b57e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b5a898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[b5aa90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5bdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[f7f298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f7f2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f7f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[fee818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b57a90]"></a>tcp_rst</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b556a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fec688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5abb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[f7f298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f7f2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b57ad8]"></a>tcp_rexmit_rto</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b57e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[fee818]"></a>tcp_rexmit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[f7f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57b20]"></a>tcp_keepalive</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b556a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fec688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b57e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[fe8680]"></a>icmp_input</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b55660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8c078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b556f0]"></a>icmp_dest_unreach</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8c0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[fec688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b559c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[fe5b20]"></a>ip_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b555d0]"></a>ip_route</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f82910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[fec688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[fed498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[fe5ad8]"></a>ip_input</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b556f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b559c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f82a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[f862f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
<LI><a href="#[f8c0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[fe8680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_lwip.o(.text)
</UL>
<P><STRONG><a name="[b55618]"></a>ip_output_if</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[f8c0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f82910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[fe8680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fec688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[fec688]"></a>ip_output</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b555d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b55618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[b556f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b57a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[fed498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[b55660]"></a>ip_addr_isbroadcast</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ip_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b559c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[f8d668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe1ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe2e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe5ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe8680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[fe21a0]"></a>etharp_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = etharp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[103df18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[fe2158]"></a>etharp_tmr</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[103df60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[fe2110]"></a>etharp_find_addr</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, etharp.o(.text), UNUSED)

<P><STRONG><a name="[fe20c8]"></a>etharp_ip_input</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe2e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[103dfa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[103e038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[fe2080]"></a>etharp_arp_input</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8d6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[fe2e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103dfa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[103e038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[fe2038]"></a>etharp_request</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[f8d668]"></a>etharp_query</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[f84a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[fe2038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[b54138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[fe1ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[fe1ff0]"></a>etharp_output</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[f8d668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[103e080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_output
</UL>

<P><STRONG><a name="[103e158]"></a>low_level_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = low_level_init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fd8860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntStatus
<LI><a href="#[fd88f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntEnable
<LI><a href="#[fd8938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntDisable
<LI><a href="#[fd8980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntClear
<LI><a href="#[fd89c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetInitExpClk
<LI><a href="#[fd8a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetEnable
<LI><a href="#[fd8aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigSet
<LI><a href="#[10edf30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[1164fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[103df18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[103e110]"></a>low_level_output</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd8548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSpaceAvail
</UL>

<P><STRONG><a name="[103e0c8]"></a>low_level_input</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b5ede8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
</UL>
<BR>[Called By]<UL><LI><a href="#[103dff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[103e038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[103e080]"></a>ethernetif_output</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe1ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[103e038]"></a>ethernetif_input</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd86b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPacketAvail
<LI><a href="#[fe2080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe20c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[103e0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[b5dac8]"></a>sys_arch_unprotect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[10edea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b57bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[b57bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[f854b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
<LI><a href="#[fe00f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_frame
<LI><a href="#[103dfa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
</UL>

<P><STRONG><a name="[b5db10]"></a>sys_arch_protect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sys_arch_protect &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[10edee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b57bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[b57bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[f854b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
<LI><a href="#[fe00f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_frame
<LI><a href="#[103dfa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
</UL>

<P><STRONG><a name="[103dff0]"></a>ethernetif_enqueue</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd86b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPacketAvail
<LI><a href="#[fe00f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_frame
<LI><a href="#[103e0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1037ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
</UL>

<P><STRONG><a name="[103dfa8]"></a>ethernetif_dequeue</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5dac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5db10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[fe2080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe20c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[103df60]"></a>arp_timer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe2158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[103df18]"></a>ethernetif_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethernetif_init &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5ac88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[fd87d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrGet
<LI><a href="#[fe21a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_init
<LI><a href="#[103e158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_lwip.o(.text)
</UL>
<P><STRONG><a name="[103bfd0]"></a>fs_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmi_fs.o(.text), UNUSED)

<P><STRONG><a name="[103bf88]"></a>fs_tick</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmi_fs.o(.text), UNUSED)

<P><STRONG><a name="[b5ada8]"></a>fs_open</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lmi_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ac88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5acd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[107c0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[107c530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[b5adf0]"></a>fs_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lmi_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5acd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[b5bdf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[b5be40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_err
</UL>

<P><STRONG><a name="[b5ad60]"></a>fs_read</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, lmi_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103be20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[103be68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulocaltime
<LI><a href="#[107c0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[107c3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[107c810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[1037ea8]"></a>EthernetIntHandler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd8860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntStatus
<LI><a href="#[fd8938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntDisable
<LI><a href="#[fd8980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntClear
<LI><a href="#[103dff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
</UL>

<P><STRONG><a name="[b5dcc0]"></a>lwip_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, enet_lwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[f81670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[f84bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init
<LI><a href="#[f862a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[f86338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[f86410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[f88388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[f8a9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[f8d470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[f8d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[fe21a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_init
<LI><a href="#[fe5b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[b5dc78]"></a>lwip_tick</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[b57e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[f8d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8d500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8d548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8d788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f8d7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[f8d860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[fe2158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[1039ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_display_address
<LI><a href="#[103dfa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[10370a0]"></a>toState</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayStats
<LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
<LI><a href="#[10362d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStop
<LI><a href="#[1036320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStart
<LI><a href="#[1036b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[1036c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
<LI><a href="#[1036cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[1036cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1036dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
<LI><a href="#[1036e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[1036ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[1036ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[1036f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
<LI><a href="#[1036f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[1036fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
<LI><a href="#[1037010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
<LI><a href="#[1037058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[1037058]"></a>doInit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[1036638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[1036908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackHeader
<LI><a href="#[1036a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[1036ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[1036b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initData
<LI><a href="#[1036b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_loop
<LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[1036c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[1037010]"></a>issueManagement</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10364d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[10368c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[1036fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[1036fc8]"></a>handleManagement</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10363b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum
<LI><a href="#[10366c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagement
<LI><a href="#[10367e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
<LI><a href="#[1037010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[107c260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1036f80]"></a>handleDelayResp</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[1036290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[10367a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackDelayResp
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[107c260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1036f38]"></a>issueDelayResp</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10364d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[1036998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayResp
<LI><a href="#[1036b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[1036ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
</UL>

<P><STRONG><a name="[1036ef0]"></a>handleDelayReq</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[1036c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
<LI><a href="#[1036f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1036ea8]"></a>handleFollowUp</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10361b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[1036248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[1036290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[1036758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackFollowUp
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[107c260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1036e60]"></a>issueFollowup</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10364d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[1036950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackFollowUp
<LI><a href="#[1036b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[1036e18]"></a>addForeign</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackSync
<LI><a href="#[1036710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[107c260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[1036dd0]"></a>issueDelayReq</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1036518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
<LI><a href="#[10369e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayReq
<LI><a href="#[1036b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[1036d88]"></a>handleSync</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
<LI><a href="#[10361b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[1036248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[1036290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[1036320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStart
<LI><a href="#[1036440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[1036c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
<LI><a href="#[1036dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
<LI><a href="#[1036e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
<LI><a href="#[1036e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[107c260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1036d40]"></a>handle</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[10363f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[1036560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSelect
<LI><a href="#[10365a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[10365f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
<LI><a href="#[1036710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[1036830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPeek
<LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1036ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[1036ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[1036f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[1036fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[107c260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1036cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[1036cf8]"></a>issueSync</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1036518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
<LI><a href="#[1036878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackSync
<LI><a href="#[1036b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[1036cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[1036cb0]"></a>doState</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerExpired
<LI><a href="#[1036a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[1036bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
<LI><a href="#[1036cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_loop
<LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[1036c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[b5dba0]"></a>protocol_first</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[1037058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
</UL>

<P><STRONG><a name="[b5db58]"></a>protocol_loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[1037058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_tick
</UL>

<P><STRONG><a name="[1036c68]"></a>protocol</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[1037058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[1036ab8]"></a>initTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1037058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[b5da80]"></a>timerTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[1035120]"></a>timerUpdate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerExpired
</UL>

<P><STRONG><a name="[10362d8]"></a>timerStop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[1036320]"></a>timerStart</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[1036368]"></a>timerExpired</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1035120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1036cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[1036830]"></a>msgPeek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1036710]"></a>msgUnpackHeader</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[1036e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>

<P><STRONG><a name="[1036680]"></a>msgUnpackSync</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1036e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>

<P><STRONG><a name="[1034208]"></a>msgUnpackDelayReq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ptpd_msg.o(.text), UNUSED)

<P><STRONG><a name="[1036758]"></a>msgUnpackFollowUp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[10367a0]"></a>msgUnpackDelayResp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1036f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[10366c8]"></a>msgUnpackManagement</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1036fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[10367e8]"></a>msgUnloadManagement</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[1036290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1036fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[10341c0]"></a>msgUnpackManagementPayload</STRONG> (Thumb, 660 bytes, Stack size 32 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1036908]"></a>msgPackHeader</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1037058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[1036878]"></a>msgPackSync</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1036cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
</UL>

<P><STRONG><a name="[10369e0]"></a>msgPackDelayReq</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1036dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
</UL>

<P><STRONG><a name="[1036950]"></a>msgPackFollowUp</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
</UL>

<P><STRONG><a name="[1036998]"></a>msgPackDelayResp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1036f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
</UL>

<P><STRONG><a name="[1034178]"></a>msgPackManagement</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[10368c0]"></a>msgPackManagementResponse</STRONG> (Thumb, 1122 bytes, Stack size 56 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1036b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1037010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
</UL>

<P><STRONG><a name="[1031bb0]"></a>netQGet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10365a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[10365f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
</UL>

<P><STRONG><a name="[1031b68]"></a>lookupSubdomainAddress</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1031b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_algorithm
<LI><a href="#[107c260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1036638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[1036638]"></a>netInit</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b557c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b55810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[b55858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[b558a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8c030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[1031b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
<LI><a href="#[1032c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1037058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[1036488]"></a>netShutdown</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b557c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b55858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1037058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[1036560]"></a>netSelect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1032c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[10365f0]"></a>netRecvEvent</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1031bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[10365a8]"></a>netRecvGeneral</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1031bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1036518]"></a>netSendEvent</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b558e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1036cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[1036dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
</UL>

<P><STRONG><a name="[10364d0]"></a>netSendGeneral</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b558e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1036e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[1036f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
<LI><a href="#[1037010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
</UL>

<P><STRONG><a name="[1036b48]"></a>initClock</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1036248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[1037058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
<LI><a href="#[10370a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[1036200]"></a>updateDelay</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10363f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[1036c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1036ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[1036f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[10361b8]"></a>updateOffset</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10363f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1036ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[1036248]"></a>updateClock</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayStats
<LI><a href="#[b5ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjFreq
<LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[10363f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[1036b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1036ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[1031b20]"></a>crc_algorithm</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1031b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
</UL>

<P><STRONG><a name="[10363b0]"></a>sum</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[1036b90]"></a>fromInternalTime</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10368c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[1036cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[1036dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
<LI><a href="#[1036e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[1036f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
</UL>

<P><STRONG><a name="[1036290]"></a>toInternalTime</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10367e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
<LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1036ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[1036f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[102fef0]"></a>normalizeTime</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10363f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[1036c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>

<P><STRONG><a name="[1036c20]"></a>addTime</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, arith.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102fef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1036200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1036ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
</UL>

<P><STRONG><a name="[10363f8]"></a>subTime</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, arith.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102fef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[10361b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[1036200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[1036248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1036b00]"></a>initData</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1037058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[1036a70]"></a>m1</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102efc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[1036bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
<LI><a href="#[1036cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[1037058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[1036440]"></a>s1</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102efc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[102f0a0]"></a>copyD0</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102efc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
</UL>

<P><STRONG><a name="[102f058]"></a>getIdentifierOrder</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107c260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[102f010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
</UL>

<P><STRONG><a name="[102f010]"></a>bmcDataSetComparison</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102f058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIdentifierOrder
<LI><a href="#[107c260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[102efc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[1036bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
</UL>

<P><STRONG><a name="[102efc8]"></a>bmcStateDecision</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102f010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
<LI><a href="#[102f0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyD0
<LI><a href="#[1036440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[1036a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
</UL>
<BR>[Called By]<UL><LI><a href="#[1036bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
</UL>

<P><STRONG><a name="[1036bd8]"></a>bmc</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102efc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[102f010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
<LI><a href="#[1036a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
</UL>
<BR>[Called By]<UL><LI><a href="#[1036cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[b5e6e0]"></a>RandomAddEntropy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, random.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[b5e650]"></a>RandomSeed</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, random.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[b5e698]"></a>RandomNumber</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, random.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[fde2c8]"></a>uvsnprintf</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107c6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fde280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
<LI><a href="#[103be20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>

<P><STRONG><a name="[103be20]"></a>usprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fde2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ad60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[1039ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_display_address
</UL>

<P><STRONG><a name="[fde280]"></a>usnprintf</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fde2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[103be68]"></a>ulocaltime</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ad60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[fde238]"></a>ustrtoul</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, ustdlib.o(.text), UNUSED)

<P><STRONG><a name="[b5e7b8]"></a>RIT128x96x4Clear</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RIT128x96x4Clear &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[fdd278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[fdd2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b61350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
</UL>

<P><STRONG><a name="[b5e728]"></a>RIT128x96x4StringDraw</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[fdd278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[fdd2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[b5dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b61350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[1039ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_display_address
</UL>

<P><STRONG><a name="[fdcc48]"></a>RIT128x96x4ImageDraw</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fdd278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[fdd2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[fdcc00]"></a>RIT128x96x4Enable</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RIT128x96x4Enable &rArr; GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[10ea100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[10ea148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[10ea220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[10ea340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[10f2750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10f2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1164fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
</UL>

<P><STRONG><a name="[fdcbb8]"></a>RIT128x96x4Disable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10ea148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[10ea220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[10f2630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[10f28b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[10f2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>

<P><STRONG><a name="[b5e770]"></a>RIT128x96x4Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RIT128x96x4Init &rArr; RIT128x96x4Enable &rArr; GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[fdcc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
<LI><a href="#[fdd2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
<LI><a href="#[10f2630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[10f2750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10f28b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[10f2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[11648f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fdcb70]"></a>RIT128x96x4DisplayOn</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fdd2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[fdcb28]"></a>RIT128x96x4DisplayOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fdd2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[107dc70]"></a>CPUcpsid</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10edee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[107dc28]"></a>CPUcpsie</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10edea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[107dbe0]"></a>CPUwfi</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[107d078]"></a>perror</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, perror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[1070bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1071050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[1071e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeEvent
<LI><a href="#[b5f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5f580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>

<P><STRONG><a name="[107cd90]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b556f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5aad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[b5ad60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[f84a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[fe2038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[102f0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyD0
<LI><a href="#[1031b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
<LI><a href="#[1034178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagement
<LI><a href="#[10341c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagementPayload
<LI><a href="#[1036440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[1036680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackSync
<LI><a href="#[10366c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagement
<LI><a href="#[1036710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[10367a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackDelayResp
<LI><a href="#[10367e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
<LI><a href="#[1036878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackSync
<LI><a href="#[10368c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[1036908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackHeader
<LI><a href="#[1036998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayResp
<LI><a href="#[10369e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayReq
<LI><a href="#[1036a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[1036b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initData
<LI><a href="#[1036e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>

<P><STRONG><a name="[107cd48]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b57d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[b5f268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5f4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
</UL>

<P><STRONG><a name="[107cd00]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[107cb98]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107c9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_wrapper
<LI><a href="#[107cac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[107cb50]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[107cb08]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[107cac0]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[107cb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f81670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[f8a9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[107ca78]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b57cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[f82838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[107ca30]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[107c9e8]"></a>_memset_wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[107c810]"></a>strstr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, strstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ad60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[107c6a0]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fde2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[107c530]"></a>strchr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strchr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ada8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[107c3c8]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ad60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[107c260]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102f010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
<LI><a href="#[102f058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIdentifierOrder
<LI><a href="#[1031b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
<LI><a href="#[1036d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[1036d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1036e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
<LI><a href="#[1036ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[1036f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[1036fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[107c0f0]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ad60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[b5ada8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5bcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[1072718]"></a>__aeabi_dadd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1072760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
</UL>

<P><STRONG><a name="[10726d0]"></a>__aeabi_dsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1072760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1072688]"></a>__aeabi_drsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1072760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[10723d8]"></a>__aeabi_i2d</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dflt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10707e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSensor
</UL>

<P><STRONG><a name="[1072118]"></a>__init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1072160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__call_main
</UL>
<BR>[Called By]<UL><LI><a href="#[107d420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[10720d0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1071e00]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[107d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[1071b20]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fputc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf_1)
</UL>
<P><STRONG><a name="[1071738]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[10716f0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10713b0]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1072760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1071368]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1071200]"></a>__aeabi_llsr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1072760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[10711b8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1071050]"></a>strerror</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[1070828]"></a>_double_round</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10707e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[10707e0]"></a>_double_epilogue</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1070828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10723d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1072760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[106fa78]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1258498]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[fd8ae8]"></a>EthernetConfigGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ethernet.o(i.EthernetConfigGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
</UL>

<P><STRONG><a name="[fd8aa0]"></a>EthernetConfigSet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ethernet.o(i.EthernetConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[103e158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd8a10]"></a>EthernetEnable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ethernet.o(i.EthernetEnable))
<BR><BR>[Called By]<UL><LI><a href="#[103e158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd89c8]"></a>EthernetInitExpClk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernet.o(i.EthernetInitExpClk))
<BR><BR>[Called By]<UL><LI><a href="#[103e158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd8980]"></a>EthernetIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[1037ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
<LI><a href="#[103e158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd8938]"></a>EthernetIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1037ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
<LI><a href="#[103e158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd88f0]"></a>EthernetIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[103e158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd8860]"></a>EthernetIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1037ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
<LI><a href="#[103e158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd87d0]"></a>EthernetMACAddrGet</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, ethernet.o(i.EthernetMACAddrGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EthernetMACAddrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[103df18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[fd8788]"></a>EthernetMACAddrSet</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, ethernet.o(i.EthernetMACAddrSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EthernetMACAddrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[fd86b0]"></a>EthernetPacketAvail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernet.o(i.EthernetPacketAvail), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103dff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[103e038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[fd8548]"></a>EthernetSpaceAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet.o(i.EthernetSpaceAvail), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103e110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[fd3538]"></a>FlashUserGet</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, flash.o(i.FlashUserGet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[10f2ca8]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[10f26c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[10f2750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10f28b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>

<P><STRONG><a name="[10f2b88]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[fdcbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[fdcc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
<LI><a href="#[10f26c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[10f2750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10f28b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>

<P><STRONG><a name="[10f28b8]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[10f2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10f2ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[fdcbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
</UL>

<P><STRONG><a name="[10f2750]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[10f2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10f2ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[fdcc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10f26c0]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[10f2b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10f2ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f2630]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
<LI><a href="#[fdcbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[fdd278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[fdd2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[10edf78]"></a>IntDisable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b5f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
</UL>

<P><STRONG><a name="[10edf30]"></a>IntEnable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
<LI><a href="#[103e158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[10edee8]"></a>IntMasterDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[107dc70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[b5db10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[b5f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntHandler
</UL>

<P><STRONG><a name="[10edea0]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[107dc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntHandler
</UL>

<P><STRONG><a name="[10edd80]"></a>IntPrioritySet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(i.IntPrioritySet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[10ea340]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[fdcc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10ea268]"></a>SSIDataGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGet))
<BR><BR>[Calls]<UL><LI><a href="#[10ea268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fdd278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[fdd2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
<LI><a href="#[10ea268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
</UL>

<P><STRONG><a name="[10ea220]"></a>SSIDataGetNonBlocking</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[fdcbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[fdcc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10ea1d8]"></a>SSIDataPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPut))
<BR><BR>[Calls]<UL><LI><a href="#[10ea1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[fdd278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[fdd2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
<LI><a href="#[10ea1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>

<P><STRONG><a name="[10ea148]"></a>SSIDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIDisable))
<BR><BR>[Called By]<UL><LI><a href="#[fdcbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[fdcc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10ea100]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[fdcc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[1164fb0]"></a>SysCtlClockGet</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5ef98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
<LI><a href="#[fdcc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
<LI><a href="#[103e158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1164f68]"></a>SysCtlClockSet</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1165700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11648f0]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[1164860]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[1160090]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5ef98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
</UL>

<P><STRONG><a name="[1160000]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
</UL>

<P><STRONG><a name="[115ff28]"></a>SysTickPeriodGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodGet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[b5ef98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
</UL>

<P><STRONG><a name="[115fee0]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115fe98]"></a>SysTickValueGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systick.o(i.SysTickValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[b61308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[115bc10]"></a>TimerConfigure</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115bbc8]"></a>TimerControlEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i.TimerControlEvent))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115ba60]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115ba18]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntHandler
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntHandler
</UL>

<P><STRONG><a name="[115b988]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115b820]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115b700]"></a>TimerPrescaleSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerPrescaleSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115b5e0]"></a>TimerValueGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerValueGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ede8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
</UL>

<P><STRONG><a name="[107ffc0]"></a>UARTCharPutNonBlocking</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.UARTCharPutNonBlocking), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5f6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>

<P><STRONG><a name="[107fee8]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[107fee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[107fee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[107fc60]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[107fc18]"></a>UARTIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b5f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
</UL>

<P><STRONG><a name="[107fbd0]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
</UL>

<P><STRONG><a name="[107fb40]"></a>UARTIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[107a1b8]"></a>__0printf_1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf_1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[107a170]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
</UL>

<P><STRONG><a name="[1070bd0]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[107d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[1070b88]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[106fd00]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[106fcb8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[106fc70]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1072b40]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[1072af8]"></a>malloc</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5f4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b63678]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b63678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[b63678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63630]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b63630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[b63630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b635e8]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b61350]"></a>DisplayIntStatus</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DisplayIntStatus &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
</UL>

<P><STRONG><a name="[b61308]"></a>Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[115fe98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
</UL>

<P><STRONG><a name="[b5be40]"></a>conn_err</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5acd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[b5adf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>

<P><STRONG><a name="[b5bdf8]"></a>close_conn</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[b5a8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[b5aa90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5ab20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[b5acd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[b5adf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[b5bdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5bdb0]"></a>send_data</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5ad60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[b5adf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[b5bdf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[b5bd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
<LI><a href="#[b5bd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[b5bd68]"></a>http_poll</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5abb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[b5bdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5bd20]"></a>http_sent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5bdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5bcd8]"></a>http_recv</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[b5a898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5ada8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5bdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[b5bdf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[107c0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[b5bc90]"></a>http_accept</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[b5a8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[b5a928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[b5aa48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[b5ab20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[b5ac88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>

<P><STRONG><a name="[b58fa8]"></a>tcp_new_port</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[b57d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5aad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[b58f18]"></a>tcp_recv_null</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5aa90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[b54138]"></a>dhcp_check</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f8d668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[b53b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[b53e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[b540f0]"></a>dhcp_option_trailer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b540a8]"></a>dhcp_option_long</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[b54060]"></a>dhcp_option_short</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b54018]"></a>dhcp_create_request</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = dhcp_create_request &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b53fd0]"></a>dhcp_select</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[b53cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b54018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b54060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b540a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[b540f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b558a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b53b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[b53e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[b53f88]"></a>dhcp_get_option_ptr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b53e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b53eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[b53f40]"></a>dhcp_rebind</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[b53cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b54018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b54060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b540f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b558a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b558e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b55978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b53b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f8d860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[b53ef8]"></a>dhcp_bind</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[f8d470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[f8d4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8d500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8d548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[b53b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[b53e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[b53eb0]"></a>dhcp_handle_ack</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[b53f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[b53e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[b53e68]"></a>dhcp_free_reply</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_free_reply &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b5acd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b53be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[f8d788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>

<P><STRONG><a name="[b53e20]"></a>dhcp_recv</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[b53c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[b53d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b53eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[b53ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b53f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b54138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[b53dd8]"></a>dhcp_discover</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dhcp_discover &rArr; udp_sendto &rArr; udp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b53c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[b53cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b54018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b54060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b540f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[b558a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b558e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b55978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b53b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[f8d740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[b53d90]"></a>dhcp_decline</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[b53cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b54018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b54060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b540a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[b540f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b558a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b558e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b55978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[b53d48]"></a>dhcp_set_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b53ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b54138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b53d00]"></a>dhcp_delete_request</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = dhcp_delete_request &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b53cb8]"></a>dhcp_option_byte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b53c70]"></a>dhcp_option</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b53c28]"></a>dhcp_get_option_long</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b53e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b53eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[b53be0]"></a>dhcp_unfold_reply</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[b5ac88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5acd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b53e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[b53b98]"></a>dhcp_timeout</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b53f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b54138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[f8d818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8d8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[f8c810]"></a>lwip_standard_chksum</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b556a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[f8c078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[f8c0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[f8b1b8]"></a>plug_holes</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[b5acd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8a990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>

<P><STRONG><a name="[f854b8]"></a>pbuf_pool_alloc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = pbuf_pool_alloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5db10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b554b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[f7f370]"></a>tcp_receive</STRONG> (Thumb, 1430 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_rexmit &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[b57fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f84b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[f84b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[f8d428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[fee818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f7f2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[f7f328]"></a>tcp_parseopt</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[b554f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[f7f298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f7f2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[f7f2e0]"></a>tcp_process</STRONG> (Thumb, 794 bytes, Stack size 48 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b57a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b57fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5abb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[f7f328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[f7f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f7f298]"></a>tcp_listen_input</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f7f328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[fee860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[fed498]"></a>tcp_output_segment</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b555d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b556a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[fec688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[fe2ed8]"></a>find_entry</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe2e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[fe2e90]"></a>update_arp_entry</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ac40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f84a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dequeue
<LI><a href="#[fe2ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[fe2080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe20c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
</UL>

<P><STRONG><a name="[fe00f0]"></a>enqueue_frame</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5db10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[103dff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
</UL>

<P><STRONG><a name="[1039ac8]"></a>lwip_display_address</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[103be20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[1032d20]"></a>eventRecv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1032c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQPut
</UL>

<P><STRONG><a name="[1032cd8]"></a>generalRecv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1032c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQPut
</UL>

<P><STRONG><a name="[1032c90]"></a>netQInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[1032c48]"></a>netQPut</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1032cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generalRecv
<LI><a href="#[1032d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventRecv
</UL>

<P><STRONG><a name="[1032c00]"></a>netQCheck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSelect
</UL>

<P><STRONG><a name="[fdd2c0]"></a>RITWriteCommand</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RITWriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[10ea1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[10ea268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[10f2630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5e7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[fdcb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4DisplayOff
<LI><a href="#[fdcb70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4DisplayOn
<LI><a href="#[fdcc48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4ImageDraw
</UL>

<P><STRONG><a name="[fdd278]"></a>RITWriteData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[10ea1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[10ea268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[10f2630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[fdcc48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4ImageDraw
</UL>

<P><STRONG><a name="[107a2d8]"></a>_printf_core</STRONG> (Thumb, 326 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10716f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[107a1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf_1
</UL>

<P><STRONG><a name="[1072760]"></a>_double_addcore</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10707e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1071200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[10713b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1072688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10726d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1072718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
