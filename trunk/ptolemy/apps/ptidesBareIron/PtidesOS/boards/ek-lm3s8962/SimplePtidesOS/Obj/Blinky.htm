<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.1 [Build 934]: Last Updated: Tue Nov 11 15:55:20 2008
<BR><P>
<H3>Maximum Stack Usage =        716 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; IEEE1588Init &rArr; lwip_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b63438]">Reset_Handler</a>
 <LI><a href="#[107dfe8]">CPUcpsid</a>
 <LI><a href="#[107dfa0]">CPUcpsie</a>
 <LI><a href="#[107df58]">CPUwfi</a>
 <LI><a href="#[b63678]">NmiSR</a>
 <LI><a href="#[b63630]">FaultISR</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10ea590]">SSIDataPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10ea590]">SSIDataPut</a><BR>
 <LI><a href="#[10ea620]">SSIDataGet</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10ea620]">SSIDataGet</a><BR>
 <LI><a href="#[f8d778]">netif_set_netmask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f8d778]">netif_set_netmask</a><BR>
 <LI><a href="#[f8d808]">netif_set_gw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f8d808]">netif_set_gw</a><BR>
 <LI><a href="#[1080280]">UARTConfigSetExpClk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1080280]">UARTConfigSetExpClk</a><BR>
 <LI><a href="#[11656b8]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11656b8]">SysCtlDelay</a><BR>
 <LI><a href="#[b63678]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63678]">NmiSR</a><BR>
 <LI><a href="#[b63630]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63630]">FaultISR</a><BR>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b635e8]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b63438]">Reset_Handler</a>
 <LI><a href="#[b63678]">NmiSR</a>
 <LI><a href="#[b63630]">FaultISR</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b632d0]">SysTickHandler</a>
 <LI><a href="#[b633a8]">IntGPIOa</a>
 <LI><a href="#[b63360]">IntGPIOb</a>
 <LI><a href="#[b63318]">IntGPIOc</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b631f8]">UARTIntHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b63288]">Timer0IntHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b63240]">Timer1IntHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[b635e8]">IntDefaultHandler</a>
 <LI><a href="#[fe5e70]">ip_input</a>
 <LI><a href="#[103e2b0]">ethernetif_init</a>
 <LI><a href="#[b5ed58]">main</a>
 <LI><a href="#[10723f0]">fputc</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b63438]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[107d798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[107d798]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, entry.o($$startup$$))
<BR><BR>[Calls]<UL><LI><a href="#[10729e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>
<BR>[Called By]<UL><LI><a href="#[b63438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[11656b8]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[11656b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1164f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[11656b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[1072a30]"></a>__call_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10729e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>

<P><STRONG><a name="[b5f580]"></a>itoa</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b632d0]"></a>SysTickHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63288]"></a>Timer0IntHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[115b9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63240]"></a>Timer1IntHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[115b9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b633a8]"></a>IntGPIOa</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IntGPIOa &rArr; DisplayIntStatus &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b611e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[b61230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f29c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63360]"></a>IntGPIOb</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IntGPIOb &rArr; DisplayIntStatus &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b611e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[b61230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f29c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63318]"></a>IntGPIOc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IntGPIOc &rArr; DisplayIntStatus &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b611e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[b61230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[10f29c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b5f538]"></a>UARTSend</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1080358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPutNonBlocking
</UL>

<P><STRONG><a name="[b5f4f0]"></a>setActuationInterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5f4a8]"></a>getCurrentPhysicalTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getCurrentPhysicalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[115fe50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSensor
<LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[b5f460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActuator
</UL>

<P><STRONG><a name="[b5f460]"></a>fireActuator</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
</UL>

<P><STRONG><a name="[b5f418]"></a>alreadyFiring</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5f3d0]"></a>die</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[b5f388]"></a>addEvent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSensor
<LI><a href="#[b5f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5f220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[b5f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
</UL>

<P><STRONG><a name="[b5f340]"></a>fireClock</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5f388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[10733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[107d0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[b5f2f8]"></a>newEvent</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = newEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSensor
<LI><a href="#[b5f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireModelDelay
<LI><a href="#[b5f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5f220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
</UL>

<P><STRONG><a name="[b5f2b0]"></a>initializeClock</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initializeClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5f388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5f268]"></a>currentlyFiring</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5f220]"></a>fireComputation</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5f388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[1072fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[b5f1d8]"></a>freeEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5f190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
</UL>

<P><STRONG><a name="[b5f190]"></a>removeEvent</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = removeEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[b5f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeEvent
<LI><a href="#[107bba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[b5f148]"></a>fireActor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fireActor &rArr; perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[107d3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeEvent
</UL>

<P><STRONG><a name="[b5f100]"></a>executeEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[107d3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[b5f0b8]"></a>fireMerge</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5f388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[107d0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b5f070]"></a>fireModelDelay</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5f388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
</UL>

<P><STRONG><a name="[b5f028]"></a>enableInterrupts</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = enableInterrupts &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[107ff68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[10ee258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10ee2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[b5efe0]"></a>setTimedInterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)

<P><STRONG><a name="[b5ef98]"></a>safeToProcess</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[b5ef50]"></a>disableInterrupts</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = disableInterrupts &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[107ffb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntDisable
<LI><a href="#[10ee2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[10ee330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[b5ef08]"></a>processEvents</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = processEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
<LI><a href="#[b5ef98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safeToProcess
<LI><a href="#[b5f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
<LI><a href="#[b5f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5f190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[1073410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[107d3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5eec0]"></a>processAvailableEvents</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
<LI><a href="#[b5ef98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safeToProcess
<LI><a href="#[b5f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
<LI><a href="#[b5f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5f190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
<LI><a href="#[b5f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[1073410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[b5ee78]"></a>initializeSensor</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initializeSensor &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5f388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[1072ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b631f8]"></a>UARTIntHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = UARTIntHandler &rArr; processAvailableEvents &rArr; fireClock &rArr; addEvent &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
<LI><a href="#[b5f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
<LI><a href="#[b5f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
<LI><a href="#[107fed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[107fff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b5ee30]"></a>initializeMemory</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5ede8]"></a>ptpd_systick_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ptpd_systick_init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[115fee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodGet
<LI><a href="#[115ffb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[1160048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[1164f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[b5eda0]"></a>IEEE1588Init</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = IEEE1588Init &rArr; lwip_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[b5dbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
<LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5ede8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
<LI><a href="#[fd38d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashUserGet
<LI><a href="#[fd8b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrSet
<LI><a href="#[107d3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
<LI><a href="#[10ee138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[10ee258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10f2f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10f3040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[115b6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerPrescaleSet
<LI><a href="#[115b7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[115ba18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[115bb80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlEvent
<LI><a href="#[115bbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[1164818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[11648a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5ed58]"></a>main</STRONG> (Thumb, 582 bytes, Stack size 376 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = main &rArr; IEEE1588Init &rArr; lwip_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5ee30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeMemory
<LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSensor
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClock
<LI><a href="#[107ff68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[1080280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[10ee258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[10ee2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[10f2a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[115b7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[115b940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[115ba18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[115bbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[115fe98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[1160048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[11648a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[1164f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[1164f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.text)
</UL>
<P><STRONG><a name="[b5ed10]"></a>setTime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[10365e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[1036b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
</UL>

<P><STRONG><a name="[b5ecc8]"></a>getTime</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115fe50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickValueGet
<LI><a href="#[115fee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
<LI><a href="#[10365e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[1036c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[1037090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[1037168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
</UL>

<P><STRONG><a name="[b5ec80]"></a>adjust_rx_timestamp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
</UL>

<P><STRONG><a name="[b5ec38]"></a>getRxTime</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_rx_timestamp
<LI><a href="#[b5ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[115b598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[103e460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[b5ebf0]"></a>ptpd_init</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5da80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[fd8b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrGet
<LI><a href="#[fd8e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigSet
<LI><a href="#[fd8e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigGet
<LI><a href="#[107cdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[b5eba8]"></a>ptpd_tick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5da38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[b5eb60]"></a>SysTickIntHandler</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerTick
<LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[b5eba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_tick
<LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[fd8c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntEnable
<LI><a href="#[10f29c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[115fe98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
</UL>

<P><STRONG><a name="[b5eb18]"></a>adjFreq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10365e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[1036ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>

<P><STRONG><a name="[b5ead0]"></a>getRand</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomSeed
<LI><a href="#[b5e4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomNumber
<LI><a href="#[b5e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomAddEntropy
</UL>
<BR>[Called By]<UL><LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[b5ea88]"></a>displayStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10365e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[b5dbe8]"></a>httpd_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, httpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = httpd_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[b5a8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[b5a9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[b5aa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[b57ed0]"></a>tcp_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b57e88]"></a>tcp_seg_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f7f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f7f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57e40]"></a>tcp_segs_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b5aa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[b57df8]"></a>tcp_pcb_purge</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[f7f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[b57db0]"></a>tcp_pcb_remove</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5aa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b5aa98]"></a>tcp_abort</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b57e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b57bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b57d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b5bc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
<LI><a href="#[f7f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f8d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[b57d68]"></a>tcp_slowtmr</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b579c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[b57a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b57e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5aa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b57cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[b57d20]"></a>tcp_fasttmr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b57cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[b57cd8]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[b57d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[b5a978]"></a>tcp_close</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[b57b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b58e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[b5bce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5a9c0]"></a>tcp_bind</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_bind &rArr; tcp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[b58e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5a8e8]"></a>tcp_listen</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tcp_listen &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5a780]"></a>tcp_recved</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[b57c90]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b57bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b57c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[b57c48]"></a>tcp_connect</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[b58e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[b5a6f0]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[b57c00]"></a>tcp_seg_copy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[b57ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[107d0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f7f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57bb8]"></a>tcp_alloc</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[b5aa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[107cdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[f7f5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[b5a8a0]"></a>tcp_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5aa08]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[b5bce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5a7c8]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[b5bce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5a738]"></a>tcp_sent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5bbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[b5bce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[b5a930]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[b5aa50]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[b5a810]"></a>tcp_poll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[b558f0]"></a>udp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b558a8]"></a>udp_input</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b555d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b55860]"></a>udp_bind</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b55788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[10369d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b55818]"></a>udp_send</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = udp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b55308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b554b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b55500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b55590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b55860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b557d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b557d0]"></a>udp_sendto</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = udp_sendto &rArr; udp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[1036868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[10368b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
</UL>

<P><STRONG><a name="[b55788]"></a>udp_connect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[b55860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[10369d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b55740]"></a>udp_disconnect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[10369d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b556f8]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[10369d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b556b0]"></a>udp_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = udp_remove &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8da48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[1036820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[10369d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[b55668]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[107cdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8da00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[10369d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[f8db68]"></a>dhcp_renew</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b53f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b53f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b53fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8e930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[f8db20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[f8e858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[f8db20]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[f8dad8]"></a>dhcp_release</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b53f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b53fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8d778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8d808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8d850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[f8e930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[f8e858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[f8da90]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8e858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[f8da48]"></a>dhcp_stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = dhcp_stop &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b53d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[b556b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5abb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f8da00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[f8da00]"></a>dhcp_start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto &rArr; udp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b55668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b5ab70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5abb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8da48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[107cdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f8d9b8]"></a>dhcp_inform</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b53f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b53fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b556b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b55788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b5ab70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5abb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8e930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[107cdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[f8d970]"></a>dhcp_arp_reply</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[fe2418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[b55620]"></a>htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b555d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b57978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f8d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe2388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe23d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe3228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe8a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fed830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[103e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[103e3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[b55590]"></a>inet_chksum_pseudo</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8cad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b558a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[fed830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f8c380]"></a>inet_chksum</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8cad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b55500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b555d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f8c338]"></a>inet_chksum_pbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8cad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[fe8a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[b57b70]"></a>htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b53d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[b53de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b53f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b57978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[f7f5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f7f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[fed830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[f8c2f0]"></a>inet_aton</STRONG> (Thumb, 252 bytes, Stack size 36 bytes, inet.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8c2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[10369d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[f8c2a8]"></a>inet_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inet.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8c2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
</UL>

<P><STRONG><a name="[f8c260]"></a>inet_ntoa</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, inet.o(.text), UNUSED)

<P><STRONG><a name="[b553e0]"></a>ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b555d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b558a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f7f630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[f7f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[fe23d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe8a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b55428]"></a>ntohl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inet.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b53de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b558a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b579c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f7f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f7f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f8d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe2388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe3228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe8a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[fed830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[feeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f8ac98]"></a>mem_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[107ce38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b5abb8]"></a>mem_free</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f8b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5ac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5acd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[b5bce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[b5bd28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_err
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8da00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[f8da48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f8e8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
</UL>

<P><STRONG><a name="[f8ac50]"></a>mem_realloc</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_realloc &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f8b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[b5ab70]"></a>mem_malloc</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b5ac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5bb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8da00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[f8e8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[103e2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[f88690]"></a>memp_init</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b57ae0]"></a>memp_malloc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = memp_malloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b57c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[b5a8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[f82b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>

<P><STRONG><a name="[b57b28]"></a>memp_free</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b556b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[b5a978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5aa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f82b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f8d808]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f8d808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[b53de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f86760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8d808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[f8d778]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f8d778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
</UL>
<BR>[Called By]<UL><LI><a href="#[b53de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f86760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8d778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[f8d7c0]"></a>netif_set_ipaddr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b5aa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b53de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[f86760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[f86760]"></a>netif_set_addr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8d778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8d808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[f86718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[f86718]"></a>netif_add</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f86760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f866d0]"></a>netif_remove</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[f86688]"></a>netif_find</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[f86640]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f8d730]"></a>netif_set_up</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f865f8]"></a>netif_is_up</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f8d850]"></a>netif_set_down</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[f865b0]"></a>netif_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[f84ec0]"></a>pbuf_init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b5ab28]"></a>pbuf_free</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5abb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[b5d9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b53be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b555d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b558a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b58e00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5bbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[f82c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[f84d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[f84d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8da48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[fe23d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe24f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[fe3228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe3270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe8a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1036820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[1036940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[1036988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
<LI><a href="#[10369d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[103e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[103e388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[103e3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[b55398]"></a>pbuf_alloc</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5ab70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[f857c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b53f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b555d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b57978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f82c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[f84d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[fe23d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[10369d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[103e460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[f8d6e8]"></a>pbuf_realloc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8ac50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f7f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1036868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[10368b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
</UL>

<P><STRONG><a name="[b55308]"></a>pbuf_header</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[b55500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b558a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[f7f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[f82c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[fe2388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe8a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[103e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[103e3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[f84e78]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57a98]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = pbuf_ref &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b55350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b57c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[f84de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_queue
<LI><a href="#[f8d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[f84e30]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[b55350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[f7f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b55350]"></a>pbuf_chain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b57a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[f84e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f82c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[f84de8]"></a>pbuf_queue</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>

<P><STRONG><a name="[f84da0]"></a>pbuf_dequeue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe3228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[f84d58]"></a>pbuf_take</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[f84d10]"></a>pbuf_dechain</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[f82d80]"></a>raw_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)

<P><STRONG><a name="[f82d38]"></a>raw_input</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Calls]<UL><LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f82cf0]"></a>raw_bind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f82cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[f82cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>

<P><STRONG><a name="[f82ca8]"></a>raw_connect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f82ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[f82ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
</UL>

<P><STRONG><a name="[f82c60]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)

<P><STRONG><a name="[f82c18]"></a>raw_sendto</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b554b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b55500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f82bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>

<P><STRONG><a name="[f82bd0]"></a>raw_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f82c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[f82b88]"></a>raw_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[f82b40]"></a>raw_new</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[107cdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[f81978]"></a>stats_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stats.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[107ce38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[feeb68]"></a>tcp_input</STRONG> (Thumb, 810 bytes, Stack size 40 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b57978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f7f5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f7f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>
<BR>[Called By]<UL><LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b57a50]"></a>tcp_enqueue</STRONG> (Thumb, 652 bytes, Stack size 64 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b55308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f84e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b57930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[b57c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[f7f5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[b57930]"></a>tcp_send_ctrl</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[b5a6a8]"></a>tcp_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5a858]"></a>tcp_output</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[feca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[fed830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[b579c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[b57c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b57d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[b57d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b57db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[b5a780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[b5a978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5bc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[f7f5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f7f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[f7f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[feeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b57978]"></a>tcp_rst</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[feca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5aa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[f7f5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f7f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[b579c0]"></a>tcp_rexmit_rto</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b57d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[feeb20]"></a>tcp_rexmit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[f7f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[b57a08]"></a>tcp_keepalive</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[feca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b57d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[fe8a18]"></a>icmp_input</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[b55548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8c338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b555d8]"></a>icmp_dest_unreach</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8c380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[feca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b558a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[fe5eb8]"></a>ip_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b554b8]"></a>ip_route</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f82c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[feca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[fed830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[fe5e70]"></a>ip_input</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b555d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b558a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[f865f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
<LI><a href="#[f8c380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[fe8a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_lwip.o(.text)
</UL>
<P><STRONG><a name="[b55500]"></a>ip_output_if</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[f8c380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[f82c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[fe8a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[feca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[feca20]"></a>ip_output</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b554b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b55500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[b555d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b57978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[fed830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[b55548]"></a>ip_addr_isbroadcast</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ip_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b558a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[f8d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe2388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[fe3228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[fe5e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe8a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[fe2538]"></a>etharp_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = etharp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[103e2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[fe24f0]"></a>etharp_tmr</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[103e2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[fe24a8]"></a>etharp_find_addr</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, etharp.o(.text), UNUSED)

<P><STRONG><a name="[fe2460]"></a>etharp_ip_input</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe3228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[103e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[103e3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[fe2418]"></a>etharp_arp_input</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8d970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[fe3228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
<LI><a href="#[103e3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[fe23d0]"></a>etharp_request</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[f8d928]"></a>etharp_query</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[f84d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[fe23d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe3270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[b54020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[fe2388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[fe2388]"></a>etharp_output</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[f8d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[103e418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_output
</UL>

<P><STRONG><a name="[103e4f0]"></a>low_level_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = low_level_init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fd8bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntStatus
<LI><a href="#[fd8c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntEnable
<LI><a href="#[fd8cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntDisable
<LI><a href="#[fd8d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntClear
<LI><a href="#[fd8d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetInitExpClk
<LI><a href="#[fd8da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetEnable
<LI><a href="#[fd8e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigSet
<LI><a href="#[10ee2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[1164f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[103e2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[103e4a8]"></a>low_level_output</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd88e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSpaceAvail
</UL>

<P><STRONG><a name="[103e460]"></a>low_level_input</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
</UL>
<BR>[Called By]<UL><LI><a href="#[103e388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[103e3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[103e418]"></a>ethernetif_output</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe2388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[103e3d0]"></a>ethernetif_input</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd8a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPacketAvail
<LI><a href="#[fe2418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe2460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[103e460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[b5d9a8]"></a>sys_arch_unprotect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[10ee258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b57a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[b57ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[f857c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
<LI><a href="#[fe0488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_frame
<LI><a href="#[103e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
</UL>

<P><STRONG><a name="[b5d9f0]"></a>sys_arch_protect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sys_arch_protect &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[10ee2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b57a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[b57ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[b57b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[f857c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_alloc
<LI><a href="#[fe0488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_frame
<LI><a href="#[103e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
</UL>

<P><STRONG><a name="[103e388]"></a>ethernetif_enqueue</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd8a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPacketAvail
<LI><a href="#[fe0488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_frame
<LI><a href="#[103e460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1038240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
</UL>

<P><STRONG><a name="[103e340]"></a>ethernetif_dequeue</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5d9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[fe2418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe2460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
</UL>
<BR>[Called By]<UL><LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[103e2f8]"></a>arp_timer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe24f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[103e2b0]"></a>ethernetif_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, luminaryif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethernetif_init &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5ab70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[fd8b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrGet
<LI><a href="#[fe2538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_init
<LI><a href="#[103e4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enet_lwip.o(.text)
</UL>
<P><STRONG><a name="[103c368]"></a>fs_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmi_fs.o(.text), UNUSED)

<P><STRONG><a name="[103c320]"></a>fs_tick</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmi_fs.o(.text), UNUSED)

<P><STRONG><a name="[b5ac90]"></a>fs_open</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lmi_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ab70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5abb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[107c468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[107c8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[b5acd8]"></a>fs_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lmi_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5abb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[b5bce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[b5bd28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_err
</UL>

<P><STRONG><a name="[b5ac48]"></a>fs_read</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, lmi_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103c1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[103c200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulocaltime
<LI><a href="#[107c468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[107c740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[107cb88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[1038240]"></a>EthernetIntHandler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd8bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntStatus
<LI><a href="#[fd8cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntDisable
<LI><a href="#[fd8d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntClear
<LI><a href="#[103e388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
</UL>

<P><STRONG><a name="[b5dba0]"></a>lwip_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, enet_lwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b558f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[f81978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[f84ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_init
<LI><a href="#[f865b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[f86640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[f86718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[f88690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[f8ac98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[f8d730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[f8da00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[fe2538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_init
<LI><a href="#[fe5eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[b5db58]"></a>lwip_tick</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[b57d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[f8d778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8d808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f8da48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f8da90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[f8db20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[fe24f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[1039e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_display_address
<LI><a href="#[103e340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[1037438]"></a>toState</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ea88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayStats
<LI><a href="#[b5ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
<LI><a href="#[1036670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStop
<LI><a href="#[10366b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStart
<LI><a href="#[1036ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b5da80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[1037000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
<LI><a href="#[1037048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[1037090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1037168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
<LI><a href="#[10371f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[1037240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[1037288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[10372d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
<LI><a href="#[1037318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[1037360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
<LI><a href="#[10373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
<LI><a href="#[10373f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[10373f0]"></a>doInit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netShutdown
<LI><a href="#[10369d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[1036ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackHeader
<LI><a href="#[1036e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[1036e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[1036e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initData
<LI><a href="#[1036ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[b5da38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_loop
<LI><a href="#[b5da80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[1037000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[10373a8]"></a>issueManagement</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[1036c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[1037360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[1037360]"></a>handleManagement</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum
<LI><a href="#[1036a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagement
<LI><a href="#[1036b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
<LI><a href="#[10373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[107c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1037318]"></a>handleDelayResp</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[1036628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[1036b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackDelayResp
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[107c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[10372d0]"></a>issueDelayResp</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[1036d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayResp
<LI><a href="#[1036f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[1037288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
</UL>

<P><STRONG><a name="[1037288]"></a>handleDelayReq</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[1036fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
<LI><a href="#[10372d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1037240]"></a>handleFollowUp</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[10365e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[1036628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[1036af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackFollowUp
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[107c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[10371f8]"></a>issueFollowup</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendGeneral
<LI><a href="#[1036ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackFollowUp
<LI><a href="#[1036f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[10371b0]"></a>addForeign</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackSync
<LI><a href="#[1036aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[107c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[1037168]"></a>issueDelayReq</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[10368b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
<LI><a href="#[1036d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayReq
<LI><a href="#[1036f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[1037120]"></a>handleSync</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
<LI><a href="#[1036550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[10365e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[1036628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[10366b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerStart
<LI><a href="#[10367d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[1036fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
<LI><a href="#[1037168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
<LI><a href="#[10371b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
<LI><a href="#[10371f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[107c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[10370d8]"></a>handle</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1036790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[10368f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSelect
<LI><a href="#[1036940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[1036988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
<LI><a href="#[1036aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[1036bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPeek
<LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1037240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[1037288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[1037318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[1037360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
<LI><a href="#[107c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1037048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[1037090]"></a>issueSync</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[10368b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSendEvent
<LI><a href="#[1036c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackSync
<LI><a href="#[1036f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[1037048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[1037048]"></a>doState</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerExpired
<LI><a href="#[1036e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[1036f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
<LI><a href="#[1037090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[b5da38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_loop
<LI><a href="#[b5da80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_first
<LI><a href="#[1037000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol
</UL>

<P><STRONG><a name="[b5da80]"></a>protocol_first</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1037048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[10373f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
</UL>

<P><STRONG><a name="[b5da38]"></a>protocol_loop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1037048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[10373f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_tick
</UL>

<P><STRONG><a name="[1037000]"></a>protocol</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1037048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[10373f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[1036e50]"></a>initTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10373f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[b5d960]"></a>timerTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[10354b8]"></a>timerUpdate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerExpired
</UL>

<P><STRONG><a name="[1036670]"></a>timerStop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[10366b8]"></a>timerStart</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[1036700]"></a>timerExpired</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ptpd_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10354b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1037048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[1036bc8]"></a>msgPeek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1036aa8]"></a>msgUnpackHeader</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[10371b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>

<P><STRONG><a name="[1036a18]"></a>msgUnpackSync</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10371b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>

<P><STRONG><a name="[10345a0]"></a>msgUnpackDelayReq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ptpd_msg.o(.text), UNUSED)

<P><STRONG><a name="[1036af0]"></a>msgUnpackFollowUp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1037240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[1036b38]"></a>msgUnpackDelayResp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1037318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[1036a60]"></a>msgUnpackManagement</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1037360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[1036b80]"></a>msgUnloadManagement</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[1036628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toInternalTime
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1037360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[1034558]"></a>msgUnpackManagementPayload</STRONG> (Thumb, 660 bytes, Stack size 32 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1036ca0]"></a>msgPackHeader</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10373f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[1036c10]"></a>msgPackSync</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1037090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
</UL>

<P><STRONG><a name="[1036d78]"></a>msgPackDelayReq</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1037168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
</UL>

<P><STRONG><a name="[1036ce8]"></a>msgPackFollowUp</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10371f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
</UL>

<P><STRONG><a name="[1036d30]"></a>msgPackDelayResp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10372d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
</UL>

<P><STRONG><a name="[1034510]"></a>msgPackManagement</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1036c58]"></a>msgPackManagementResponse</STRONG> (Thumb, 1122 bytes, Stack size 56 bytes, ptpd_msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1036f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fromInternalTime
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
</UL>

<P><STRONG><a name="[1031f48]"></a>netQGet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvGeneral
<LI><a href="#[1036988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netRecvEvent
</UL>

<P><STRONG><a name="[1031f00]"></a>lookupSubdomainAddress</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1031eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_algorithm
<LI><a href="#[107c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10369d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[10369d0]"></a>netInit</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b55668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b556b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b556f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[b55740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[b55788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8c2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[1031f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
<LI><a href="#[1033028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10373f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[1036820]"></a>netShutdown</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b556b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[b55740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10373f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[10368f8]"></a>netSelect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1032f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1036988]"></a>netRecvEvent</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1031f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1036940]"></a>netRecvGeneral</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1031f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[10368b0]"></a>netSendEvent</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b557d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1037090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[1037168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
</UL>

<P><STRONG><a name="[1036868]"></a>netSendGeneral</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b557d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10371f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[10372d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
<LI><a href="#[10373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueManagement
</UL>

<P><STRONG><a name="[1036ee0]"></a>initClock</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5eb18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10365e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[10373f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
<LI><a href="#[1037438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toState
</UL>

<P><STRONG><a name="[1036598]"></a>updateDelay</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[1036fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1037288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
<LI><a href="#[1037318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[1036550]"></a>updateOffset</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1036790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1037240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[10365e0]"></a>updateClock</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, ptpd_servo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ea88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayStats
<LI><a href="#[b5eb18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjFreq
<LI><a href="#[b5ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[b5ed10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime
<LI><a href="#[1036790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[1036ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1037240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
</UL>

<P><STRONG><a name="[1031eb8]"></a>crc_algorithm</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1031f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
</UL>

<P><STRONG><a name="[1036748]"></a>sum</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1037360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[1036f28]"></a>fromInternalTime</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[1037090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueSync
<LI><a href="#[1037168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayReq
<LI><a href="#[10371f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueFollowup
<LI><a href="#[10372d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;issueDelayResp
</UL>

<P><STRONG><a name="[1036628]"></a>toInternalTime</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
<LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1037240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[1037318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
</UL>

<P><STRONG><a name="[1030288]"></a>normalizeTime</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, arith.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1036790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTime
<LI><a href="#[1036fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTime
</UL>

<P><STRONG><a name="[1036fb8]"></a>addTime</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, arith.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1030288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1036598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[1037288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayReq
</UL>

<P><STRONG><a name="[1036790]"></a>subTime</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, arith.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1030288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalizeTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1036550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOffset
<LI><a href="#[1036598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateDelay
<LI><a href="#[10365e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateClock
<LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
</UL>

<P><STRONG><a name="[1036e98]"></a>initData</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10373f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[1036e08]"></a>m1</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102f360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[1036f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
<LI><a href="#[1037048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
<LI><a href="#[10373f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doInit
</UL>

<P><STRONG><a name="[10367d8]"></a>s1</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102f360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
</UL>

<P><STRONG><a name="[102f438]"></a>copyD0</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107d108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102f360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
</UL>

<P><STRONG><a name="[102f3f0]"></a>getIdentifierOrder</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[102f3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
</UL>

<P><STRONG><a name="[102f3a8]"></a>bmcDataSetComparison</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102f3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIdentifierOrder
<LI><a href="#[107c5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[102f360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[1036f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
</UL>

<P><STRONG><a name="[102f360]"></a>bmcStateDecision</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102f3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
<LI><a href="#[102f438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyD0
<LI><a href="#[10367d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[1036e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
</UL>
<BR>[Called By]<UL><LI><a href="#[1036f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmc
</UL>

<P><STRONG><a name="[1036f70]"></a>bmc</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, bmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102f360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcStateDecision
<LI><a href="#[102f3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
<LI><a href="#[1036e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
</UL>
<BR>[Called By]<UL><LI><a href="#[1037048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doState
</UL>

<P><STRONG><a name="[b5e530]"></a>RandomAddEntropy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, random.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[b5e4a0]"></a>RandomSeed</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, random.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[b5e4e8]"></a>RandomNumber</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, random.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ead0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRand
</UL>

<P><STRONG><a name="[fde660]"></a>uvsnprintf</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107ca18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fde618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
<LI><a href="#[103c1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>

<P><STRONG><a name="[103c1b8]"></a>usprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fde660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[1039e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_display_address
</UL>

<P><STRONG><a name="[fde618]"></a>usnprintf</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fde660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[103c200]"></a>ulocaltime</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, ustdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[fde5d0]"></a>ustrtoul</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, ustdlib.o(.text), UNUSED)

<P><STRONG><a name="[b5e608]"></a>RIT128x96x4Clear</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RIT128x96x4Clear &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[fdd610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[fdd658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b61230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
</UL>

<P><STRONG><a name="[b5e578]"></a>RIT128x96x4StringDraw</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[fdd610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[fdd658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
<LI><a href="#[b5dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSensor
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newEvent
<LI><a href="#[b5f388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addEvent
<LI><a href="#[b61230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIntStatus
<LI><a href="#[1039e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_display_address
</UL>

<P><STRONG><a name="[fdcfe0]"></a>RIT128x96x4ImageDraw</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fdd610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[fdd658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[fdcf98]"></a>RIT128x96x4Enable</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RIT128x96x4Enable &rArr; GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[10ea4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[10ea500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[10ea5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[10ea6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[10f2ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10f2f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[1164f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
</UL>

<P><STRONG><a name="[fdcf50]"></a>RIT128x96x4Disable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10ea500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[10ea5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
<LI><a href="#[10f29c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[10f2c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[10f2f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>

<P><STRONG><a name="[b5e5c0]"></a>RIT128x96x4Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RIT128x96x4Init &rArr; RIT128x96x4Enable &rArr; GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[fdcf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
<LI><a href="#[fdd658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
<LI><a href="#[10f29c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[10f2ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10f2c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[10f2f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[11648a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fdcf08]"></a>RIT128x96x4DisplayOn</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fdd658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[fdcec0]"></a>RIT128x96x4DisplayOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rit128x96x4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fdd658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[107dfe8]"></a>CPUcpsid</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10ee2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[107dfa0]"></a>CPUcpsie</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10ee258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[107df58]"></a>CPUwfi</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[107d3f0]"></a>perror</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, perror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[10714a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1071920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[10726d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b5f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeEvent
<LI><a href="#[b5f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireActor
<LI><a href="#[b5f3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>

<P><STRONG><a name="[107d108]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b555d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[b5ac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[f84d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[fe23d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[fe2418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[102f438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyD0
<LI><a href="#[1031f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
<LI><a href="#[1034510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagement
<LI><a href="#[1034558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagementPayload
<LI><a href="#[10367d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s1
<LI><a href="#[1036a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackSync
<LI><a href="#[1036a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackManagement
<LI><a href="#[1036aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackHeader
<LI><a href="#[1036b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnpackDelayResp
<LI><a href="#[1036b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgUnloadManagement
<LI><a href="#[1036c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackSync
<LI><a href="#[1036c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackManagementResponse
<LI><a href="#[1036ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackHeader
<LI><a href="#[1036d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayResp
<LI><a href="#[1036d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgPackDelayReq
<LI><a href="#[1036e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m1
<LI><a href="#[1036e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initData
<LI><a href="#[10371b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
</UL>

<P><STRONG><a name="[107d0c0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b57c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[b5f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireMerge
<LI><a href="#[b5f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
</UL>

<P><STRONG><a name="[107d078]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[107cf10]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107cd60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_wrapper
<LI><a href="#[107ce38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[107cec8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[107ce80]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[107ce38]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[107cf10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f81978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[f8ac98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[107cdf0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b55668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[b57bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[f82b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8da00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[107cda8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[107cd60]"></a>_memset_wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107cf10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[107cb88]"></a>strstr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, strstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[107ca18]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fde660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[107c8a8]"></a>strchr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strchr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[107c740]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[107c5d8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102f3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmcDataSetComparison
<LI><a href="#[102f3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIdentifierOrder
<LI><a href="#[1031f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupSubdomainAddress
<LI><a href="#[10370d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle
<LI><a href="#[1037120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSync
<LI><a href="#[10371b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addForeign
<LI><a href="#[1037240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleFollowUp
<LI><a href="#[1037318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleDelayResp
<LI><a href="#[1037360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleManagement
</UL>

<P><STRONG><a name="[107c468]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[b5ac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5bbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[1072fe8]"></a>__aeabi_dadd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1073030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
</UL>

<P><STRONG><a name="[1072fa0]"></a>__aeabi_dsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1073030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1072f58]"></a>__aeabi_drsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1073030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1072ca8]"></a>__aeabi_i2d</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dflt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10710b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ee78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSensor
</UL>

<P><STRONG><a name="[10729e8]"></a>__init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1072a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__call_main
</UL>
<BR>[Called By]<UL><LI><a href="#[107d798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[10729a0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10726d0]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[107d3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[10723f0]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fputc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf_bare)
</UL>
<P><STRONG><a name="[1071c80]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1073030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1071c38]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1071ad0]"></a>__aeabi_llsr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1073030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1071a88]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1071920]"></a>strerror</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107d3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[10710f8]"></a>_double_round</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10710b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[10710b0]"></a>_double_epilogue</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10710f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1072ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1073030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1070348]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1070300]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[fd8e80]"></a>EthernetConfigGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ethernet.o(i.EthernetConfigGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
</UL>

<P><STRONG><a name="[fd8e38]"></a>EthernetConfigSet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ethernet.o(i.EthernetConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[103e4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd8da8]"></a>EthernetEnable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ethernet.o(i.EthernetEnable))
<BR><BR>[Called By]<UL><LI><a href="#[103e4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd8d60]"></a>EthernetInitExpClk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernet.o(i.EthernetInitExpClk))
<BR><BR>[Called By]<UL><LI><a href="#[103e4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd8d18]"></a>EthernetIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[1038240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
<LI><a href="#[103e4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd8cd0]"></a>EthernetIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1038240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
<LI><a href="#[103e4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd8c88]"></a>EthernetIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[103e4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd8bf8]"></a>EthernetIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1038240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntHandler
<LI><a href="#[103e4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fd8b68]"></a>EthernetMACAddrGet</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, ethernet.o(i.EthernetMACAddrGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EthernetMACAddrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ebf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_init
<LI><a href="#[103e2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[fd8b20]"></a>EthernetMACAddrSet</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, ethernet.o(i.EthernetMACAddrSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EthernetMACAddrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[fd8a48]"></a>EthernetPacketAvail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernet.o(i.EthernetPacketAvail), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103e388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
<LI><a href="#[103e3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[fd88e0]"></a>EthernetSpaceAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet.o(i.EthernetSpaceAvail), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103e4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[fd38d8]"></a>FlashUserGet</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, flash.o(i.FlashUserGet))
<BR><BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[10f3040]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[10f2a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[10f2ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10f2c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>

<P><STRONG><a name="[10f2f20]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[fdcf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[fdcf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
<LI><a href="#[10f2a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[10f2ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[10f2c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>

<P><STRONG><a name="[10f2c50]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[10f2f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10f3040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[fdcf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
</UL>

<P><STRONG><a name="[10f2ae8]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[10f2f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10f3040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[fdcf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10f2a58]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[10f2f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[10f3040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f29c8]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
<LI><a href="#[fdcf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[fdd610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[fdd658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
</UL>

<P><STRONG><a name="[10ee330]"></a>IntDisable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
</UL>

<P><STRONG><a name="[10ee2e8]"></a>IntEnable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
<LI><a href="#[103e4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[10ee2a0]"></a>IntMasterDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[107dfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
</UL>

<P><STRONG><a name="[10ee258]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[107dfa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
<LI><a href="#[b5f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
</UL>

<P><STRONG><a name="[10ee138]"></a>IntPrioritySet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(i.IntPrioritySet))
<BR><BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[10ea6f8]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[fdcf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10ea620]"></a>SSIDataGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGet))
<BR><BR>[Calls]<UL><LI><a href="#[10ea620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[fdd610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[fdd658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
<LI><a href="#[10ea620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
</UL>

<P><STRONG><a name="[10ea5d8]"></a>SSIDataGetNonBlocking</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[fdcf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[fdcf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10ea590]"></a>SSIDataPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPut))
<BR><BR>[Calls]<UL><LI><a href="#[10ea590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[fdd610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteData
<LI><a href="#[fdd658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RITWriteCommand
<LI><a href="#[10ea590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>

<P><STRONG><a name="[10ea500]"></a>SSIDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIDisable))
<BR><BR>[Called By]<UL><LI><a href="#[fdcf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Disable
<LI><a href="#[fdcf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[10ea4b8]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[fdcf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
</UL>

<P><STRONG><a name="[1164f68]"></a>SysCtlClockGet</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5ede8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
<LI><a href="#[fdcf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Enable
<LI><a href="#[103e4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[1164f20]"></a>SysCtlClockSet</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[11656b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11648a8]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[1164818]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[1160048]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5ede8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
</UL>

<P><STRONG><a name="[115ffb8]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ede8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
</UL>

<P><STRONG><a name="[115fee0]"></a>SysTickPeriodGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodGet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[b5ede8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptpd_systick_init
</UL>

<P><STRONG><a name="[115fe98]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115fe50]"></a>SysTickValueGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systick.o(i.SysTickValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ecc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[b5f4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[b611e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[115bbc8]"></a>TimerConfigure</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115bb80]"></a>TimerControlEvent</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i.TimerControlEvent))
<BR><BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115ba18]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115b9d0]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntHandler
<LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0IntHandler
</UL>

<P><STRONG><a name="[115b940]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115b7d8]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115b6b8]"></a>TimerPrescaleSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerPrescaleSet))
<BR><BR>[Called By]<UL><LI><a href="#[b5eda0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEEE1588Init
</UL>

<P><STRONG><a name="[115b598]"></a>TimerValueGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerValueGet), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5ec38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxTime
</UL>

<P><STRONG><a name="[1080358]"></a>UARTCharPutNonBlocking</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.UARTCharPutNonBlocking), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5f538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>

<P><STRONG><a name="[1080280]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[1080280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1080280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[107fff8]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[107ffb0]"></a>UARTIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupts
</UL>

<P><STRONG><a name="[107ff68]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b5ed58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b5f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupts
</UL>

<P><STRONG><a name="[107fed8]"></a>UARTIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
</UL>

<P><STRONG><a name="[107bbf0]"></a>__0printf_bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf_bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107bd10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[107bba8]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf_bare))
<BR><BR>[Called By]<UL><LI><a href="#[b5f190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeEvent
</UL>

<P><STRONG><a name="[10714a0]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[107d3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[1071458]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[10705d0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1070588]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1070540]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1073410]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[b5eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processAvailableEvents
<LI><a href="#[b5ef08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[10733c8]"></a>malloc</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5f220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireComputation
<LI><a href="#[b5f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fireClock
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b63678]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b63678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[b63678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63630]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b63630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[b63630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b635e8]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b61230]"></a>DisplayIntStatus</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DisplayIntStatus &rArr; RIT128x96x4StringDraw &rArr; RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
</UL>

<P><STRONG><a name="[b611e8]"></a>Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[115fe50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOc
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOb
<LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGPIOa
</UL>

<P><STRONG><a name="[b5bd28]"></a>conn_err</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5abb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[b5acd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>

<P><STRONG><a name="[b5bce0]"></a>close_conn</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[b5a7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[b5a978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5aa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[b5abb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[b5acd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[b5bc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5bc98]"></a>send_data</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5ac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[b5acd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[b5bce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[b5bbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[b5bc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
<LI><a href="#[b5bc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[b5bc50]"></a>http_poll</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5aa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[b5bc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5bc08]"></a>http_sent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5bc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[b5bbc0]"></a>http_recv</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[b5a780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b5ac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[b5bc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[b5bce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[107c468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[b5bb78]"></a>http_accept</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, httpd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[b5a7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[b5a810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[b5a930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[b5aa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[b5ab70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>

<P><STRONG><a name="[b58e90]"></a>tcp_new_port</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[b57c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[b5a9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[b58e00]"></a>tcp_recv_null</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5a978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[b54020]"></a>dhcp_check</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f8d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f8e858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[b53fd8]"></a>dhcp_option_trailer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b53f90]"></a>dhcp_option_long</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>

<P><STRONG><a name="[b53f48]"></a>dhcp_option_short</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b53f00]"></a>dhcp_create_request</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = dhcp_create_request &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b53eb8]"></a>dhcp_select</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b53f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b53f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b53f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[b53fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b55818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b55860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8e930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f8e858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[b53e70]"></a>dhcp_get_option_ptr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b53d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b53d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[b53e28]"></a>dhcp_rebind</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b53f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b53f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b53fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b557d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b55860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8e930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[f8db20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[f8e858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[b53de0]"></a>dhcp_bind</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[f8d730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[f8d778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f8d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[f8d808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f8e858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[b53d98]"></a>dhcp_handle_ack</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[f8e8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[b53d50]"></a>dhcp_free_reply</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_free_reply &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b5abb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8da48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[f8e8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
</UL>

<P><STRONG><a name="[b53d08]"></a>dhcp_recv</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b53d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[b53de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b53e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b54020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f8e8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[f8e8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
</UL>

<P><STRONG><a name="[b53cc0]"></a>dhcp_discover</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dhcp_discover &rArr; udp_sendto &rArr; udp_send &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b53ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b53f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b53f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b53fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b556f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[b55788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b557d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b55860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8e930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[f8da00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[f8e858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[b53c78]"></a>dhcp_decline</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b53be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[b53c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b53f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[b53f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b53f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[b53fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[b557d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[b55860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8e930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[b53c30]"></a>dhcp_set_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b53de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b54020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b53be8]"></a>dhcp_delete_request</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = dhcp_delete_request &rArr; pbuf_free &rArr; memp_free &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b53ba0]"></a>dhcp_option_byte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[f8e930]"></a>dhcp_option</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[b53c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[f8e8e8]"></a>dhcp_get_option_long</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b53d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b53d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[f8e8a0]"></a>dhcp_unfold_reply</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[b5ab70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[b5abb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b53d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[f8e858]"></a>dhcp_timeout</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b53cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b53de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b53e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b53eb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[b54020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[f8dad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[f8db68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[f8da90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[f8cad0]"></a>lwip_standard_chksum</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, inet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b55590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[f8c338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[f8c380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[f8b478]"></a>plug_holes</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[b5abb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f8ac50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>

<P><STRONG><a name="[f857c0]"></a>pbuf_pool_alloc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = pbuf_pool_alloc &rArr; sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[b55398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[f7f678]"></a>tcp_receive</STRONG> (Thumb, 1430 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_rexmit &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[b57e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f84e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[f84e78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[f8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[feeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f7f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[f7f630]"></a>tcp_parseopt</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[b553e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[f7f5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[f7f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[f7f5e8]"></a>tcp_process</STRONG> (Thumb, 794 bytes, Stack size 48 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b57978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[b57e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[b5aa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[f7f630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[f7f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[f7f5a0]"></a>tcp_listen_input</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b57978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[b57a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[b57bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f7f630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[feeb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[fed830]"></a>tcp_output_segment</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b554b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[b55590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b57b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[feca20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[fe3270]"></a>find_entry</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[fe3228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[fe3228]"></a>update_arp_entry</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[b55548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[b55620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[b5ab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f84da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dequeue
<LI><a href="#[fe3270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[fe2418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[fe2460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
</UL>

<P><STRONG><a name="[fe0488]"></a>enqueue_frame</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, luminaryif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[b5d9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[103e388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_enqueue
</UL>

<P><STRONG><a name="[1039e60]"></a>lwip_display_address</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, enet_lwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[103c1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5db58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_tick
</UL>

<P><STRONG><a name="[10330b8]"></a>eventRecv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1032fe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQPut
</UL>

<P><STRONG><a name="[1033070]"></a>generalRecv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1032fe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netQPut
</UL>

<P><STRONG><a name="[1033028]"></a>netQInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10369d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[1032fe0]"></a>netQPut</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1033070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generalRecv
<LI><a href="#[10330b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventRecv
</UL>

<P><STRONG><a name="[1032f98]"></a>netQCheck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ptpd_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10368f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSelect
</UL>

<P><STRONG><a name="[fdd658]"></a>RITWriteCommand</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RITWriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[10ea590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[10ea620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[10f29c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Init
<LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[fdcec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4DisplayOff
<LI><a href="#[fdcf08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4DisplayOn
<LI><a href="#[fdcfe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4ImageDraw
</UL>

<P><STRONG><a name="[fdd610]"></a>RITWriteData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rit128x96x4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RITWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[10ea590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[10ea620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[10f29c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4StringDraw
<LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4Clear
<LI><a href="#[fdcfe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT128x96x4ImageDraw
</UL>

<P><STRONG><a name="[107bd10]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107bbf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf_bare
</UL>

<P><STRONG><a name="[1073030]"></a>_double_addcore</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10710b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1071ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1071c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1072f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1072fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1072fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
