<html>
<head>
<!-- $Id$ -->
</head>
<body>
<h1>Code Generation</h1>
<p>
Ptolemy II includes the very beginnings a code generation framework.
Currently, there are two levels of code generation, shallow and deep.
Shallow code generation converts a model that has been specified in
MoML (typically using Vergil) into a Java class definition.  This class
definition can be used in an applet, which results in faster download
times because less of the Ptolemy II infrastructure is required
to execute it. Shallow code generation uses components built into
the Ptolemy II tree.  Eventually, the process of creating an applet,
include packaging the requisite code in a jar file, will be more
automated.
<p>
Deep code generation parses the component definitions (which are
written in Java), and produces optimized code that does not require
code from the Ptolemy II tree.  Currently, this only works for some
models, and only in the SDF domain.  Also, the code generation process,
as currently implemented, requires vast amounts of memory, and thus
may not work at all on memory-limited platforms.
<p>
The implementation here should be viewed as highly preliminary.
<font color="red">It is likely to fail on all but a few simple test
cases.</font>  It is at the stage of being a concept demonstration
only.  We expect it to mature considerably in the near future.
<p>
Deep code generation parses Java component definitions, and provides
an API for accessing the abstract syntax tree.  It is possible,
in principle, to generate implementations in languages other than
Java from this AST.  Thus, we hope that in the future, we will have
code generators that produce C code for embedded processors,
or VHDL code for hardware design.
<p>
The code generation framework as it stands now was created by
Jeff Tsay (for the deep code generator) and Shuvra Bhattacharyya
(for the shallow code generator), with contributions from
Christopher Hylands and Edward A. Lee.
<p>
</body>
</html>
