/*
A C code generator for generating the c file containing the wrapper "main"
method. This simply does some initialization and calls the main method of
the class.

Copyright (c) 2002 The University of Maryland.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the above
copyright notice and the following two paragraphs appear in all copies
of this software.

IN NO EVENT SHALL THE UNIVERSITY OF MARYLAND BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF MARYLAND HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF MARYLAND SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
MARYLAND HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

                                        PT_COPYRIGHT_VERSION_2
                                        COPYRIGHTENDKEY

@ProposedRating Red (ankush@eng.umd.edu)
@AcceptedRating Red (ankush@eng.umd.edu)
*/

package ptolemy.copernicus.c;

import soot.SootClass;
import soot.SootMethod;

import java.util.Iterator;

/** A C code generator for generating the c file containing the wrapper "main"
    method. This simply does some initialization and calls the main method of
    the appropriate class, if such a method exists.

    @author Ankush Varma
    @version $Id$
    @since Ptolemy II 2.0
*/

public class MainFileGenerator extends CodeGenerator {

    /** Default constructor.
     */
    public MainFileGenerator()
    {
        super();
    }
    /////////////////////////////////////////////////////
    //////////        public methods      ///////////////

    /** Generate the code for a the wrapper "main" C function that calls
     *  the main method of the appropriate class. It also generates other
     *  functions required for correct initialization.
     *  @param source The main class.
     */
    public String generate(SootClass source) {
        // Initialize the structures.
        StringBuffer headerCode = new StringBuffer();
        StringBuffer bodyCode   = new StringBuffer();
        StringBuffer footerCode = new StringBuffer();



        boolean mainExists = source.declaresMethodByName("main");

        // Generate the head of the file, include the "#include"
        // preprocessor directives.
        headerCode.append("/* Automatically generated by the"
                + "Ptolemy C Code Generator. */\n\n");
        headerCode.append("/*Required include files. */\n");
        headerCode.append("#include <stdlib.h>\n");
        headerCode.append("#include \"name_defs.h\"\n");
        headerCode.append("#include \""
                + CNames.classNameToFileName(source.getName())
                + ".h\"\n");

        Iterator requiredClassesIter = RequiredFileGenerator
                .getRequiredClasses().iterator();

        // Call the Class Structure Initializations for all required
        // classes.
        while (requiredClassesIter.hasNext()){
            SootClass nextClass = (SootClass)requiredClassesIter.next();

            headerCode.append("/* " + nextClass.toString() + " */\n");

            headerCode.append("#include \"" 
                    + CNames.includeFileNameOf(nextClass)
                    + "\"\n");
        }
        headerCode.append("\n");

        headerCode.append("#ifndef A_DEF_iA1_i1195259493_String\n"
                + "#define A_DEF_iA1_i1195259493_String\n"
                + "typedef PCCG_ARRAY_INSTANCE_PTR iA1_i1195259493_String;\n"
                + "#endif\n");

        // Forward declaration of methods.
        headerCode.append("void classStructInit();\n");
        headerCode.append("void staticInit();\n");

        headerCode.append("\nvoid _INITIALIZE_SYSTEM_CLASS();\n");

        // Call the actual main method of the class, if it exists.
        if (mainExists){
            bodyCode.append(_generateMain(source) + "\n");
            bodyCode.append(_generateClassStructInit() + "\n");
            bodyCode.append(_generateStaticInit() + "\n");
        }

        return (headerCode.append(bodyCode.append(footerCode))).toString();
    }

    /** Generate the code for a the wrapper "main" C function that calls
     *  the main method of the appropriate class.
     *  @param source The main class.
     *  @return The code for the wrapper main method.
     */
    private String _generateMain(SootClass source) {
        StringBuffer bodyCode = new StringBuffer();
        String instanceName = CNames.instanceNameOf(source);
        // Function that initializes the class structure.
        String structInitFunction = CNames.initializerNameOf(source);
        SootMethod mainMethod = source.getMethodByName("main");

        // Generate the actual C "main" method.
        bodyCode.append("\nint main()\n{\n");
        bodyCode.append(_indent(1) + instanceName + " instance;\n");

        // String array for calling main with "String[] args".
        if (mainMethod.getParameterCount() == 1) {
            bodyCode.append(_indent(1)
                    + "iA1_i1195259493_String string_array;\n");
        }

        // Initialize required class structures.
        bodyCode.append("\n" + _indent(1) + "classStructInit();\n");

        // Call static initializers for required classes.
        // FIXME: This should be enabled.
        //bodyCode.append(_indent(1) + "staticInit();\n");

        // Initialize java.lang.System()
        bodyCode.append(_indent(1) + "_INITIALIZE_SYSTEM_CLASS();\n");

        // Initialize the instance of the source class.
        bodyCode.append("\n" + _indent(1)
                + "instance = malloc(sizeof(instance));\n");
        bodyCode.append(_indent(1) + "instance->class = &"
                + CNames.classStructureNameOf(source) + ";\n");
        bodyCode.append("\n");

        bodyCode.append(_indent(1) + structInitFunction
                + "(&" + CNames.classStructureNameOf(source)+ ");\n");


        // Call the main method for the source class with the appropriate
        // parameters.
        bodyCode.append(_indent(1)
                + CNames.functionNameOf(mainMethod) + "(" );
        // If the method is non-static, put the name of the instance as
        // the first argument.
        if (!mainMethod.isStatic()) {
            bodyCode.append("instance");
            if (mainMethod.getParameterCount() == 1) {
                // Assume that the only possible argument is String[]
                // args, or nothing.
                bodyCode.append(", string_array");
            }
        }
        else {
            if (mainMethod.getParameterCount() == 1) {
                // Assume that the only possible argument is String[]
                // args, or nothing.
                bodyCode.append("string_array");
            }
        }

        bodyCode.append(");\n");
        bodyCode.append(_indent(1) + "return(0);\n");
        bodyCode.append("}\n");

        return bodyCode.toString();
    }

    /** Generate a function that initializes the required class structures.
     *
     *  @return The code for the "classStructInit" method that initializes
     *  the class structures.
     */
    private String _generateClassStructInit() {
        StringBuffer code = new StringBuffer();

        // Generate the method header.
        code.append("void classStructInit()\n{\n");

        // Generate the method body
        code.append(_indent(1)
                + "/* Class Structure initializations*/\n");

        Iterator requiredClassesIter = RequiredFileGenerator
                .getRequiredClasses().iterator();

        // Call the Class Structure Initializations for all required
        // classes.
        while (requiredClassesIter.hasNext()){
            SootClass nextClass = (SootClass)requiredClassesIter.next();

            // FIXME: Does not initialize inner classes. Inner Classes have
            // a "$" in their name.
            if (nextClass.toString().indexOf("$") == -1) {
                code.append("\n" + _indent(1) + "/* " + nextClass.toString()
                        + " */\n");

                code.append(_indent(1) +  CNames.initializerNameOf(nextClass)
                        + "(&" + CNames.classStructureNameOf(nextClass)
                        + ");\n");
            }
        }

        code.append("}\n");
        return code.toString();
    }

    /** Generate a function that calls the static initialization methods
     * for all required classes.
     *
     * @return The code for the staticInit() method in the main file.
     */
    private String _generateStaticInit() {
        StringBuffer code = new StringBuffer();

        // Generate the method header.
        code.append("void staticInit()\n{\n");

        // Generate the method body
        code.append(_indent(1)
                + "/* Static initialization methods. */\n");

        Iterator requiredClassesIter = RequiredFileGenerator
                .getRequiredClasses().iterator();

        requiredClassesIter = RequiredFileGenerator.getRequiredClasses()
                .iterator();
        while (requiredClassesIter.hasNext()){
            // Invoke the static initializer method (clinit) for the class if it
            // exists.
            SootMethod initializer;
            SootClass nextClass = (SootClass)requiredClassesIter.next();

            // FIXME: Does not initialize inner classes. Inner Classes have
            // a "$" in their name.
            if (((initializer = MethodListGenerator
                        .getClassInitializer(nextClass))!= null) &&
                        (nextClass.toString().indexOf("$") == -1)){

                code.append("\n" + _indent(1)
                        + _comment("Static initializer method for "
                                + nextClass.toString()));

                code.append(_indent(1) +
                                CNames.functionNameOf(initializer) + "();\n");
            }
        }

        code.append("}\n");
        return code.toString();
    }

}
