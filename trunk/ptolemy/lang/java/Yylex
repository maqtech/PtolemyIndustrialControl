/* Lexical analyzer for Java, $Id$ */

/* Authors: Paul N. Hilfinger, Jeff Tsay */
/* Copyright (C) 1995, 1997 by Paul N. Hilfinger.  All rights reserved.	*/
/* Portions of this code were derived from sources developed under the
auspices of the Titanium project, under funding from the DARPA, DoE,
and Army Research Office.*/

package ptolemy.lang.java;

import ptolemy.lang.*;

%%

%integer
%full
%line
%notunix

%{
  public int lineNumber() { return yyline + 1; }

  public JavaParserval getParserVal() { return retval; }

  protected JavaParserval retval = new JavaParserval(0);
%}

HEX=[0-9A-Fa-f]
DEC=[0-9]
OCT=[0-7]

Letter=[a-zA-Z_]
AlphaNum=({Letter}|{DEC})

UnicodeChar=(\\u+{HEX}{HEX}{HEX}{HEX})
LiteralChar=(\\([btnfr\"'\\]|{OCT}{OCT}?|[0-3]{OCT}{OCT})|[^'\"\n]|{UnicodeChar})

C_StyleComment=("/*"([^*]|"*"+[^*/])*"*"+"/")
CPlusPlusStyleComment=("//".*[\n\r])

%%

[ \f\t\r\n]+           { }

{C_StyleComment} { }
{CPlusPlusStyleComment}	{ }

"abstract"	    {  return JavaParser.ABSTRACT; }
"boolean"	    {  return JavaParser.BOOLEAN; }
"break"	      {  return JavaParser.BREAK; }
"byte"	        {  return JavaParser.BYTE; }
"case"	        {  return JavaParser.CASE; }
"catch"	      {  return JavaParser.CATCH; }
"char"	        {  return JavaParser.CHAR; }
"class"	      {  return JavaParser.CLASS; }
"continue"	    {  return JavaParser.CONTINUE; }
"default"	    {  return JavaParser.DEFAULT; }
"do"		        {  return JavaParser.DO; }
"double"	      {  return JavaParser.DOUBLE; }
"else"	        {  return JavaParser.ELSE; }
"extends"	    {  return JavaParser.EXTENDS; }
"final"	      {  return JavaParser.FINAL; }
"finally"	    {  return JavaParser.FINALLY; }
"float"	      {  return JavaParser.FLOAT; }
"for"		      {  return JavaParser.FOR; }
"if"		        {  return JavaParser.IF; }
"implements"	  {  return JavaParser.IMPLEMENTS; }
"import"	      {  return JavaParser.IMPORT; }
"instanceof"	  {  return JavaParser.INSTANCEOF; }
"int"		      {  return JavaParser.INT; }
"interface"	  {  return JavaParser.INTERFACE; }
"long"	        {  return JavaParser.LONG; }
"native"	      {  return JavaParser.NATIVE; }
"new"		      {  return JavaParser.NEW; }
"null"	        {  return JavaParser._NULL; }
"package"	    {  return JavaParser.PACKAGE; }
"private"	    {  return JavaParser.PRIVATE; }
"protected"	  {  return JavaParser.PROTECTED; }
"public"	      {  return JavaParser.PUBLIC; }
"return"	      {  return JavaParser.RETURN; }
"short"	      {  return JavaParser.SHORT; }
"static"	      {  return JavaParser.STATIC; }
"super"	      {  return JavaParser.SUPER; }
"switch"	      {  return JavaParser.SWITCH; }
"synchronized"	{  return JavaParser.SYNCHRONIZED; }
"this"	        {  return JavaParser.THIS; }
"throw"	      {  return JavaParser.THROW; }
"throws"	      {  return JavaParser.THROWS; }
"transient"	  {  return JavaParser.TRANSIENT; }
"try"		      {  return JavaParser.TRY; }
"void"	        {  return JavaParser.VOID; }
"volatile"     {  return JavaParser.VOLATILE; }
"while"        {  return JavaParser.WHILE; }
"strictfp"     {  return JavaParser.STRICTFP; }

"const"|"goto"	{ throw new RuntimeException("reserved keyword " +
                  yytext() + " ignored"); }

"true"	 {  return JavaParser.TRUE; }
"false" {  return JavaParser.FALSE; }

{Letter}{AlphaNum}* {
           
     retval = new JavaParserval(0);
     retval.sval = yytext();
		  return JavaParser.IDENTIFIER;
		}

[1-9]{DEC}*	{
      
     retval = new JavaParserval(0);
     retval.sval = yytext();
		  return JavaParser.INT_LITERAL;
		}

0{OCT}*	{
      
     retval = new JavaParserval(0);
     retval.sval = yytext();
		  return JavaParser.INT_LITERAL;
		}

0[xX]{HEX}+	{
      
     retval = new JavaParserval(0);
     retval.sval = yytext();
		  return JavaParser.INT_LITERAL;
		}

[1-9]{DEC}*[lL]	{
      
     retval = new JavaParserval(0);
     String s = yytext();
     retval.sval = s.substring(0, s.length() - 1);
		  return JavaParser.LONG_LITERAL;
		}

0{OCT}*[lL]	{
      
     retval = new JavaParserval(0);
     String s = yytext();
     retval.sval = s.substring(0, s.length() - 1);
		  return JavaParser.LONG_LITERAL;
		}

0[xX]{HEX}+[lL]	{
      
     retval = new JavaParserval(0);
     String s = yytext();
     retval.sval = s.substring(0, s.length() - 1);
		  return JavaParser.LONG_LITERAL;
		}

{DEC}+"."{DEC}*([eE][-+]?{DEC}+)?[dD]?|"."{DEC}+([eE][-+]?{DEC}+)?[dD]?|{DEC}+([eE][-+]?{DEC}+)[dD]?|{DEC}+[dD]
   {
      
     retval = new JavaParserval(0);
		  retval.sval = yytext();
		  return JavaParser.DOUBLE_LITERAL;
		}

{DEC}+"."{DEC}*([eE][-+]?{DEC}+)?[fF]|"."{DEC}+([eE][-+]?{DEC}+)?[fF]|{DEC}+([eE][-+]?{DEC}+)[fF]|{DEC}+[fF]
   {
       
     retval = new JavaParserval(0);
		  retval.sval = yytext();
		  return JavaParser.FLOAT_LITERAL;
		}

'({LiteralChar}|\")'	{
      
     retval = new JavaParserval(0);
     String s = yytext();
     retval.sval = s.substring(1, s.length() - 1);
		  return JavaParser.CHARACTER_LITERAL;
		}

\"({LiteralChar}|"'")*\" {
      
     retval = new JavaParserval(0);
     String s = yytext();
     retval.sval = s.substring(1, s.length() - 1);
		  return JavaParser.STRING_LITERAL;
		}

["(){}];,."]	{  return yytext().charAt(0); }

"["([ \t\n]|{C_StyleComment}|{CPlusPlusStyleComment})*"]"?  {
      
     String s = yytext();

		  if (s.charAt(s.length() - 1) == ']') {
   		  return JavaParser.EMPTY_DIM;
		  } else {
		      return yytext().charAt(0);
     }
		}

["-=><!~?:+*/&|^%"]   {  return yytext().charAt(0); }

"&&"		{  return JavaParser.CAND; }
"||"		{  return JavaParser.COR; }
"=="		{  return JavaParser.EQ; }
"!="		{  return JavaParser.NE; }
"<="		{  return JavaParser.LE; }
">="		{  return JavaParser.GE; }
"<<"		{  return JavaParser.LSHIFTL; }
">>"		{  return JavaParser.ASHIFTR; }
">>>"	{  return JavaParser.LSHIFTR; }
"+="		{  return JavaParser.PLUS_ASG; }
"-="		{  return JavaParser.MINUS_ASG; }
"*="		{  return JavaParser.MULT_ASG; }
"/="		{  return JavaParser.DIV_ASG; }
"%="		{  return JavaParser.REM_ASG; }
"<<="	{  return JavaParser.LSHIFTL_ASG; }
">>="	{  return JavaParser.ASHIFTR_ASG; }
">>>="	{  return JavaParser.LSHIFTR_ASG; }
"&="		{  return JavaParser.AND_ASG; }
"^="		{  return JavaParser.XOR_ASG; }
"|="		{  return JavaParser.OR_ASG; }
"++"		{  return JavaParser.PLUSPLUS; }
"--"		{  return JavaParser.MINUSMINUS; }

.	{
      throw new RuntimeException("Lexical error : Line " + (1 + yyline) +
" Unmatched input: " + yytext());
		}

