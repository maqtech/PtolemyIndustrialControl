//### This file created by BYACC 1.8(/Java extension  0.92)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//### Please send bug reports to rjamison@lincom-asg.com
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



//#line 120 "jparser.y"
package ptolemy.lang.java;

import java.util.LinkedList;
import java.util.ListIterator;
import java.io.IOException;
import java.io.FileInputStream;

import ptolemy.lang.*;

//#line 20 "parser.java"




//#####################################################################
// class: parser
// does : encapsulates yacc() parser functionality in a Java
//        class for quick code development
//#####################################################################
public class parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[],stateptr;             //state stack
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
void state_push(int state)
{
  if (stateptr>=YYSTACKSIZE)         //overflowed?
    return;
  statestk[++stateptr]=state;
}
int state_pop()
{
  if (stateptr<0)                    //underflowed?
    return -1;
  return statestk[stateptr--];
}
void state_drop(int cnt)
{
int ptr;
  ptr=stateptr-cnt;
  if (ptr<0)
    return;
  stateptr = ptr;
}
int state_peek(int relative)
{
int ptr;
  ptr=stateptr-relative;
  if (ptr<0)
    return -1;
  return statestk[ptr];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
boolean init_stacks()
{
  statestk = new int[YYSTACKSIZE];
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class parsersemantic is defined in parserval.java


String   yytext;//user variable to return contextual strings
parserval yyval; //used to return semantic vals from action routines
parserval yylval;//the 'lval' (result) I got from yylex()
parserval valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new parserval[YYSTACKSIZE];
  yyval=new parserval(0);
  yylval=new parserval(0);
  valptr=-1;
}
void val_push(parserval val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
parserval val_pop()
{
  if (valptr<0)
    return new parserval(-1);
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
parserval val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new parserval(-1);
  return valstk[ptr];
}
//#### end semantic value section ####
public final static short ABSTRACT=257;
public final static short BOOLEAN=258;
public final static short BREAK=259;
public final static short BYTE=260;
public final static short CASE=261;
public final static short CATCH=262;
public final static short CHAR=263;
public final static short CLASS=264;
public final static short CONTINUE=265;
public final static short DEFAULT=266;
public final static short DO=267;
public final static short DOUBLE=268;
public final static short ELSE=269;
public final static short EXTENDS=270;
public final static short FINAL=271;
public final static short FINALLY=272;
public final static short FLOAT=273;
public final static short FOR=274;
public final static short IF=275;
public final static short IMPLEMENTS=276;
public final static short IMPORT=277;
public final static short INSTANCEOF=278;
public final static short INT=279;
public final static short INTERFACE=280;
public final static short LONG=281;
public final static short NATIVE=282;
public final static short NEW=283;
public final static short _NULL=284;
public final static short PACKAGE=285;
public final static short PRIVATE=286;
public final static short PROTECTED=287;
public final static short PUBLIC=288;
public final static short RETURN=289;
public final static short SHORT=290;
public final static short STATIC=291;
public final static short STRICTFP=292;
public final static short SUPER=293;
public final static short SWITCH=294;
public final static short SYNCHRONIZED=295;
public final static short THIS=296;
public final static short THROW=297;
public final static short THROWS=298;
public final static short TRANSIENT=299;
public final static short TRY=300;
public final static short VOID=301;
public final static short VOLATILE=302;
public final static short WHILE=303;
public final static short CONST=304;
public final static short GOTO=305;
public final static short TRUE=306;
public final static short FALSE=307;
public final static short IDENTIFIER=308;
public final static short INT_LITERAL=309;
public final static short LONG_LITERAL=310;
public final static short FLOAT_LITERAL=311;
public final static short DOUBLE_LITERAL=312;
public final static short CHARACTER_LITERAL=313;
public final static short STRING_LITERAL=314;
public final static short EMPTY_DIM=315;
public final static short CAND=316;
public final static short COR=317;
public final static short EQ=318;
public final static short NE=319;
public final static short LE=320;
public final static short GE=321;
public final static short LSHIFTL=322;
public final static short ASHIFTR=323;
public final static short LSHIFTR=324;
public final static short PLUS_ASG=325;
public final static short MINUS_ASG=326;
public final static short MULT_ASG=327;
public final static short DIV_ASG=328;
public final static short REM_ASG=329;
public final static short LSHIFTL_ASG=330;
public final static short ASHIFTR_ASG=331;
public final static short LSHIFTR_ASG=332;
public final static short AND_ASG=333;
public final static short XOR_ASG=334;
public final static short OR_ASG=335;
public final static short PLUSPLUS=336;
public final static short MINUSMINUS=337;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    4,    4,    4,    4,    4,    4,    4,    4,   32,
   32,   33,   33,   34,   34,   34,   34,   34,   34,   34,
   34,   35,   36,    1,   99,   99,   92,   92,   88,   88,
   88,   74,   74,   70,   70,   71,   72,   73,   38,   38,
   40,   40,   82,   83,   83,   84,   84,   85,   85,   85,
   85,   85,   85,   85,   86,   67,   67,   68,   68,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
  105,  105,  104,  104,   24,   24,   77,   77,   37,   89,
   89,   90,   90,   75,   41,   41,   42,   39,   39,   53,
   53,   79,   79,   55,   55,   78,   80,   76,   43,   43,
   44,   91,   94,   94,   93,   93,   93,   93,   87,   81,
   81,   25,   25,   25,   30,   30,   26,   26,   45,   57,
   57,   58,   58,   59,   59,   59,   61,   61,   46,   46,
   46,   46,   46,   46,   46,   46,   47,   48,   56,   56,
   56,   56,   56,   56,   56,   49,   49,   49,   60,   62,
   62,   62,   96,   96,   95,   95,   50,   50,   50,   50,
   63,   63,   66,   66,   64,   64,   65,   65,   51,   51,
   51,   51,   98,   98,   52,   52,   52,   52,  103,  103,
  102,   54,    5,    5,    5,    5,    5,    6,    6,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
  100,  100,   97,  101,    8,    8,   31,   31,    9,    9,
    9,   27,   27,   28,   28,   10,   10,   10,   10,   10,
   10,   10,   10,   29,   29,   23,    3,    3,    2,    2,
   11,   11,   11,   12,   13,   14,   14,   14,   14,   14,
   15,   16,   17,   17,   17,   17,   18,   18,   18,   19,
   19,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   22,  106,
};
final static short yylen[] = {                            2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    3,    3,    1,    1,    2,    1,    2,
    2,    1,    1,    1,    1,    3,    5,    6,    2,    1,
    2,    1,    3,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    2,    4,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    2,    4,    1,    1,    9,    9,    1,    1,
    1,    1,    3,    4,    1,    1,    2,    1,    3,    1,
    1,   10,    9,    5,    5,    2,    1,    5,    1,    1,
    2,    3,    1,    2,    1,    1,    1,    2,    4,    9,
    9,    3,    4,    2,    1,    3,    1,    1,    3,    1,
    1,    1,    2,    1,    1,    1,    4,    3,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    3,    1,    1,
    1,    1,    1,    1,    1,    5,    7,    5,    3,    1,
    3,    1,    1,    2,    3,    2,    5,    7,    8,    7,
    2,    1,    1,    1,    1,    1,    1,    3,    3,    3,
    3,    3,    1,    1,    5,    3,    3,    4,    1,    2,
    5,    2,    1,    1,    3,    3,    3,    1,    1,    1,
    1,    1,    3,    3,    1,    1,    1,    3,    3,    3,
    1,    1,    1,    3,    4,    4,    3,    3,    4,    4,
    6,    1,    1,    1,    3,    5,    6,    4,    4,    4,
    4,    7,    8,    1,    2,    3,    1,    1,    1,    2,
    1,    1,    1,    2,    2,    1,    1,    2,    2,    1,
    2,    2,    1,    2,    2,    1,    4,    4,    4,    1,
    1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    5,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    1,    0,
};
final static short yydefred[] = {                         0,
    0,    0,    1,    0,   26,  203,  201,    0,  202,    0,
    0,   34,   35,    0,   27,    0,   25,    0,   28,   65,
   64,   66,   62,   61,   60,   63,   70,   67,   68,   69,
    0,    0,    0,   58,   32,    0,   33,   24,    0,  204,
    0,   36,   31,    0,    0,   59,   30,    0,    0,    0,
   37,    0,    0,   40,    0,    0,   99,  100,   39,    0,
    0,    0,   42,    0,  101,    0,   98,   41,    0,   38,
    0,    0,    0,  106,  105,    0,    0,    0,    0,    0,
   97,    0,    0,   49,   51,   50,   52,    0,   44,    0,
   48,    0,   89,   14,   16,   15,   21,   19,   18,   20,
   17,   79,    0,   11,   10,   12,   13,    0,  108,  104,
  102,   96,    0,    0,    0,    0,    0,    0,  191,    0,
    0,    0,    0,  192,    0,    0,    0,    6,    7,    2,
    3,    4,    5,    8,    9,    0,  137,    0,    0,    0,
    0,    0,    0,  190,    0,  184,    0,  195,    0,    0,
    0,    0,    0,    0,    0,    0,  240,  246,  139,    0,
    0,    0,    0,    0,  136,  125,  129,  130,  132,  133,
  134,  135,    0,    0,    0,  122,  124,    0,    0,  126,
    0,    0,    0,    0,    0,    0,   54,   43,   47,   57,
   23,    0,   71,    0,    0,  173,    0,  174,    0,    0,
    0,    0,    0,    0,    0,    0,  197,  188,  232,  233,
    0,  236,  237,    0,    0,  274,    0,  251,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  245,  244,
  238,  239,  241,  242,    0,    0,  234,  235,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  131,  119,  123,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  229,
    0,    0,  228,    0,  109,    0,  169,  170,    0,    0,
  162,    0,    0,  165,    0,  166,    0,    0,    0,    0,
    0,    0,    0,    0,  171,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  208,    0,    0,  172,
    0,    0,  176,    0,    0,    0,  193,    0,    0,    0,
    0,  207,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  212,  213,  128,
  198,  200,  199,    0,    0,  138,    0,  185,  187,  186,
    0,    0,    0,    0,   80,    0,    0,   55,    0,    0,
  230,    0,   72,    0,    0,    0,    0,    0,  161,    0,
    0,    0,  221,  225,  220,    0,  219,  218,    0,    0,
    0,    0,    0,    0,  253,  254,    0,    0,    0,  255,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  182,  180,  178,    0,  248,  247,  249,    0,
  206,    0,  210,  127,  209,  205,    0,    0,    0,    0,
    0,    0,    0,    0,   74,   76,    0,    0,  168,  163,
    0,  164,    0,    0,  226,  114,    0,  118,  115,    0,
    0,    0,    0,  148,  175,    0,  157,    0,  215,    0,
    0,   83,    0,    0,   85,   86,    0,    0,    0,    0,
    0,    0,    0,    0,  112,    0,  217,    0,    0,    0,
    0,    0,    0,  150,    0,    0,  211,   84,   87,    0,
    0,    0,    0,    0,  158,  160,    0,  147,  113,  116,
    0,    0,  156,  149,  154,    0,  181,    0,    0,    0,
    0,    0,    0,    0,  110,  111,  159,  155,  151,    0,
  223,    0,    0,    0,   93,   91,   90,   77,   78,    0,
    0,   92,    0,    0,   95,   94,
};
final static short yydgoto[] = {                          2,
    3,  271,  272,  144,  145,  146,  147,  148,  207,  208,
  151,  209,  210,  211,  212,  213,  157,  158,  214,  346,
  216,  502,  290,  435,  448,  449,  347,  348,  291,  450,
  160,  201,  104,  162,  106,  163,  164,   53,   65,   62,
  464,  465,   56,   57,  165,  166,  167,  168,  169,  170,
  171,  172,  528,  323,  511,  173,  174,  175,  176,  454,
  177,  481,  282,  283,  440,  441,  362,   33,   34,   11,
   12,   13,   35,   36,  363,   37,   84,   85,   86,   87,
   74,   70,   88,   89,   90,   91,   75,   38,  364,  365,
   67,   14,   76,   77,  482,  483,  217,  197,    4,  182,
    9,  324,  325,  193,  194,  273,
};
final static short yysindex[] = {                      -200,
 -209,    0,    0, -142,    0,    0,    0,  179,    0, -209,
 -142,    0,    0, 2608,    0, -139,    0,  189,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2608, -110, 4905,    0,    0, 2608,    0,    0,    0,    0,
    2,    0,    0, -209, -209,    0,    0,  140,  -19,  -17,
    0, -209,  -65,    0, -209,  132,    0,    0,    0,  181,
 -209,  145,    0,  227,    0, 4905,    0,    0, 2669,    0,
 -209, 2994,  223,    0,    0, 4905,  171,    0,  177, 1193,
    0, 4873,  242,    0,    0,    0,    0,  187,    0, 2669,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -54,    0,    0,    0,    0, -209,    0,    0,
    0,    0, -209, -209, 1385,  273,  281,   79,    0, 1886,
  276,  283,  284,    0, 1886,  177,  287,    0,    0,    0,
    0,    0,    0,    0,    0, 1886,    0, 1886, 1886, 1886,
 1886, 1886, 1886,    0,  282,    0,  238,    0,    0,    0,
  -61,    0,    0,  460,    0,    0,    0,    0,    0,  293,
  -54,  290,  292,  297,    0,    0,    0,    0,    0,    0,
    0,    0,  285,  226, 1193,    0,    0,   84, 4830,    0,
   92,   42,    0,  316,  -54, -209,    0,    0,    0,    0,
    0,  -31,    0,   49,  323,    0,  306,    0,  307,  284,
   56,   71, 1480, 1886,  -57,  -20,    0,    0,    0,    0,
  460,    0,    0,  320, 4124,    0,  340,    0, -209, 1886,
 1886, 2882,  -71, 1886, 3592,  341,  195,   18,    0,    0,
    0,    0,    0,    0, -207, 1886,    0,    0, 1886, 1886,
 1886, 1886, 1886, 1886, 1886, 1886, 1886, 1886, 1886, 1886,
 1886,   66,   78,  122,  125,  135,    0,    0,    0,  -54,
 1886, 1385, 1886,   38, 4905,  -29,  139,  350, 4905,    0,
   81,  342,    0, -209,    0, 4905,    0,    0,  361,  364,
    0, 1766,  357,    0, 4830,    0, 3625, 1886,  291,  333,
   66, 1886,  291,   66,    0,   79, 1886, 1886, 1886, 1886,
 1886, 1886, 1886, 1886, 1886, 1886, 1886, 1886, 1886, 1886,
 1886, 1886, 1886, 1886, 1886, 1886,    0, 3652, 3685,    0,
  387,  177,    0,  167,  163, 3745,    0, 4605, 1886, 4605,
 -209,    0, 3795, 4124, 4124, 4124, 4124, 4124, 4124, 4124,
 4124, 4124, 4124, 4124, 4124, 3890,  395,    0,    0,    0,
    0,    0,    0,  156,  399,    0, 3917,    0,    0,    0,
  405,   79,  402,  409,    0,    0, 4905,    0, 4905,  411,
    0, 1826,    0,  414, 1886, 1886, 1886, 3953,    0, 1385,
 3982, 1577,    0,    0,    0,  417,    0,    0,    0,   -7,
   -7, 4041,  200,  200,    0,    0, 4012, 2871, 3325,    0,
 2517, 4185,  647,  647,   -7,   -7,  355,  355,  355,  343,
 1385, 4905,    0,    0,    0, 1385,    0,    0,    0,  423,
    0, 1886,    0,    0,    0,    0, 1886,  -54, 4905,  178,
  428,  437,   66, 4124,    0,    0,   66, 4091,    0,    0,
  438,    0, 1886,  211,    0,    0, 4124,    0,    0,   -1,
  145, 1886,    8,    0,    0,  440,    0, 1886,    0,  444,
   66,    0, -209,  367,    0,    0,   66,   66,  178,  178,
  436, 1385,  456, 1385,    0, 1672,    0, 4124, 1886,  442,
  376,    8, 1193,    0,  177,  470,    0,    0,    0, 1291,
  178,  178,  454,  455,    0,    0, 1385,    0,    0,    0,
 4124,  458,    0,    0,    0, 1001,    0,  145,  126,  482,
 1193,  400,    6,    6,    0,    0,    0,    0,    0,    0,
    0, 1886, 1886,  401,    0,    0,    0,    0,    0,  486,
  489,    0,  473,  474,    0,    0,
};
final static short yyrindex[] = {                       646,
    0,    0,    0, 1944,    0,    0,    0,    0,    0,    0,
 1944,    0,    0,   14,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   14,    0, 4887,    0,    0,   14,    0,    0,   17,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -82,  415,
    0,    0,  415,    0,    0,    0,    0,    0,    0, 3435,
    0,    0,    0,   24,    0,  641,    0,    0,  641,    0,
    0,    0, 4715,    0,    0,  641,    0, 3096, 4431,  -86,
    0,    0, 4663,    0,    0,    0,    0,    0,    0, 4501,
    0, 4762,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  475,  475,    0,    0,    0,    0,    0,  475,
    0,    0, 4787,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3188,    0, 2787,    0, 1570, 2107,
 3256, 1398, 2010,    0, 1212, 2144,    0,    0,    0, 2364,
    0,  -43,  -16,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -62,    0,    0,    0,  275,    0,
 2172, 2665,  -59,   10,    0,    0,    0,    0,    0,    0,
    0,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  475,    0,  415,  415,    0,    0,    0,    0,
 3557,    0,    0,    0,  490,    0, 2207,    0,    0,    0,
    0,    0,    0,    0,    0,  233,  239, 1959,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  512,   35,    0,    0,    0,    0,    0,    0,    0,    0,
  512,    0,    0,    0,  104,   35,    0,    0,  104,    0,
 2327,  164,    0,    0,    0,  104,    0,    0,    0,  105,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2692,
 3008,  512,    0, 3008,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  715,  804,    0,    0,    0,    0, 2760,
    0,    0,    0,   97,  546,  548,  677, 1769, 1902, 1930,
 1972, 1999, 2084, 2258, 2322,  514,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2267,    0,  520,    0,    0,  412,  104,    0,  104,    0,
    0,    0,    0,    0,    0,    0,  512,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3503, 4436,
 4495,    0, 4064, 4332,    0,    0, 2719, 3736, 3676,    0,
  500,  718,  539, 2828, 4518, 4541, 4224, 4359, 4427,    0,
    0, 1573,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  512,    0, 1573,  415,
    0,    0,  -41,  173,    0,    0,  -41,    0,    0,    0,
    0,    0,  512,  907,    0,    0,    9,    0,    0,    0,
 3093,    0,  439,    0,    0,    0,    0,  512,    0,    0,
   69,    0,    0,    0,    0,    0,  -11,  -11,  475,  475,
    0,    0,    0,    0,    0,    0,    0, 2335,    0,    0,
    0, 1099,  -52,    0,    0,    0,    0,    0,    0,  -86,
   28,   28,    0,    0,    0,    0,    0,    0,    0,    0,
  508,    0,    0,    0,    0,  -86,    0, 3120,    0, 2287,
  -86,    0,    0,    0,    0,    0,    0,    0,    0,  -50,
    0,  512,  512,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0, 1240,    0,    0,    0,    0,    0,  -23,   88,
    0,  129,  170,   46,  234,  240, -153,    0,    0,  579,
  362,    0,    0,    0, -215,   91, -118,  146, -154,    0,
    0,  -72, -103,  -56,  155,  -51,  161,    0,  -42,    0,
 -273,    0,    0,    0,  -66, -113,    0,    0,    0,    0,
    0,    0,   55,  245,    0, -117, -372,   93, -171,    0,
  371,   73,    0,    0, -181,  141,   -8,  -73,   -6,    0,
    0,    0,    4,   29,  176,    0,    0,    0,    0,    0,
    0, -404,    0,  485,    0,    0,    0,  252, -227,  153,
    0,  580,    0,  519,    0,  114,   45,  494,    0,  110,
    0,    0,  298,  326, -116,    1,
};
final static int YYTABLESIZE=5207;
final static short yytable[] = {                        103,
    5,  202,   81,  259,   15,   32,  179,  161,  269,  185,
  367,   15,  112,  288,   39,  105,   29,  288,   68,  292,
  107,  284,   32,   81,   13,  105,   46,   32,   93,  307,
  107,   39,  226,  288,  302,  300,   39,  301,  288,  303,
  288,  370,  476,   48,  253,    7,  477,  288,  374,   54,
   58,  294,  117,   63,    7,  203,  149,   72,  330,  223,
   82,  205,  120,  264,  526,  121,   78,   72,  267,   92,
  288,  178,  152,  383,  150,  331,   78,  387,  288,  227,
  183,   82,   88,  180,    1,  280,  288,  264,   49,   50,
  190,  149,  274,  288,   73,  288,    7,   83,    6,    7,
    6,  179,  161,  521,   73,    7,  260,  275,  263,  288,
    8,  288,  288,  198,  198,    7,    7,  512,   83,   18,
  218,  274,  105,  475,  181,  154,    7,  107,   80,  285,
  161,  261,  263,  117,   10,  384,  350,  275,  524,  431,
  275,  432,  355,  354,  288,  167,   88,  192,  356,  262,
  288,  149,  195,   44,  275,  275,  436,  196,  196,  181,
  154,   60,    7,  167,   60,  522,  178,  150,   40,   45,
   60,  219,   46,  386,  417,  190,  419,  288,  180,  149,
   60,   60,  274,  229,  230,  231,  232,  233,  234,  275,
  321,   60,  389,  288,  439,  493,  494,  368,   51,  274,
  322,  288,  150,  286,   57,  252,   59,   73,  152,   64,
   61,  288,  260,   57,  424,   64,   75,  513,  514,  181,
  154,  275,   73,    7,   16,   64,   16,   60,  105,  266,
  268,   75,  108,  107,   41,  329,  307,   17,  149,  105,
  254,  302,  186,  152,  107,  228,  303,   42,  154,  153,
   52,  349,   55,    6,   66,  413,  288,  270,  280,  280,
  191,  349,  150,  317,   10,  366,  444,   69,  479,  366,
   71,   10,  206,  480,  237,  238,  366,  288,   46,  332,
   57,  109,   43,  270,  153,  270,  288,   47,   60,  428,
  150,   13,  349,  288,  270,  111,   57,  455,   13,   80,
  187,  358,  457,  152,  252,  105,  181,  154,  460,   40,
  107,  188,  203,  155,  314,  315,  316,  203,  252,  156,
  204,  219,  220,  221,  203,  280,  224,  235,  236,    7,
  359,  152,  251,  360,  259,  254,   94,  255,   95,  486,
    7,   96,  256,  257,  153,  361,   97,   44,  155,  150,
  258,   98,  149,  149,  156,  265,  149,   99,  496,  100,
  498,  288,  276,  288,  277,  278,  288,  366,  101,  366,
  191,  288,  153,  279,  418,    7,  288,  442,  295,  261,
  270,  328,  288,  517,  288,  351,    6,  149,  352,  369,
  152,  307,  149,  288,   60,  371,  302,  300,  353,  301,
  375,  303,  372,  530,  531,   60,    7,  376,  155,  179,
  161,  288,  190,  382,  156,  379,  179,  161,  507,  149,
  489,  154,  154,  288,  181,  154,  412,  349,  321,  190,
  466,  153,  179,  161,  322,  423,  155,  179,  161,  425,
   60,  159,  156,  442,  427,  429,  527,  527,  149,  430,
  149,  433,   81,  484,  437,  181,  154,  451,  349,  149,
  181,  154,  458,  150,  150,  453,  149,  150,  467,  466,
  466,   60,  461,  149,  178,  463,  159,  468,  472,  474,
  485,  178,  149,  190,  487,  420,  180,  149,  154,  490,
  183,  466,  466,  180,  495,  155,  497,  178,  150,  503,
  504,  156,  178,  150,  152,  152,  520,    7,  152,  180,
  508,  183,  515,  516,  180,  518,  181,  154,  181,  154,
  239,  523,  349,  349,  525,  532,  533,  181,  154,  534,
  150,  535,  536,  288,  181,  154,  159,  288,   56,  152,
  271,  181,  154,  271,  152,  153,  153,   11,  250,  153,
  181,  154,  288,   10,  214,  181,  154,  271,  271,  150,
   82,  150,  271,  288,  159,  287,  500,  459,  529,  415,
  150,  152,   60,  281,  189,  506,  266,  150,  519,  266,
  153,  462,  266,  473,  150,  153,  279,  456,  280,  279,
   19,  280,  271,  150,  110,  505,  266,  266,  150,  373,
  152,  266,  152,  279,  279,  280,  280,  199,    0,  155,
  155,  152,  153,  155,    0,  156,  156,   64,  152,  156,
    0,  414,    0,  159,  271,  152,    0,    0,    0,    0,
    0,  266,  266,    0,  152,    0,    0,    0,  279,  152,
  280,  153,    0,  153,  155,  288,    0,    0,    0,  155,
  156,    0,  153,    0,    0,  156,    0,    0,    0,  153,
    0,    0,  266,  266,    0,    0,  153,    0,    0,   57,
  279,   57,  280,    0,   57,  153,  155,    0,    0,   57,
  153,    0,  156,  307,   57,    0,    0,    0,  302,  300,
   57,  301,   57,  303,    0,    0,    0,    0,  215,    0,
    0,   57,    0,  222,  288,  155,  298,  155,  297,    0,
    0,  156,    0,  156,  225,    0,  155,  276,    0,   57,
  276,    0,  156,  155,    0,    0,    0,    0,    0,  156,
  155,    0,    0,    0,  276,  276,  156,  159,  159,  155,
    0,  159,    0,    0,  155,  156,    0,  179,    0,    0,
  156,    0,    0,    0,  179,    0,    0,  179,  272,  179,
    0,  272,    0,    0,    0,  288,    0,    0,    0,  276,
    0,    0,  159,  179,    0,  272,  272,  159,    0,    0,
  272,    0,  287,    0,  240,  241,  242,  243,  244,  245,
  246,  247,  248,  249,  250,    0,    0,    0,  318,  319,
    0,  276,  326,    0,  159,    0,    0,    0,    0,    0,
  272,    0,    0,    0,  333,  271,  271,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,    0,
    0,    0,    0,  159,    0,  159,  177,  179,    0,  179,
  179,  357,  272,  177,  159,    0,  177,    0,  177,    0,
    0,  159,    0,    0,  266,  266,  266,  266,  159,    0,
  378,    0,  177,    0,    0,    0,  381,  159,    0,    0,
    0,    0,  159,    0,    0,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,    0,    0,    0,  288,    0,
  288,    0,  288,  288,  288,    0,    0,    0,  288,  288,
    0,    0,    0,  288,    0,    0,  288,    0,    0,  288,
  288,  288,  288,    0,  296,  288,  177,  288,  177,  177,
  288,  288,  288,  288,    0,    0,  288,  288,    0,  146,
  288,  288,    0,    0,  288,    0,  146,  288,  288,  146,
  434,  146,    0,  438,    0,    0,    0,    0,    0,    0,
  447,    0,    0,    0,    0,  146,  312,  313,  314,  315,
  316,  179,  179,  179,  179,  179,    0,  179,  179,  179,
  179,  179,  179,  179,    0,  179,  179,  179,  179,  179,
    0,    0,    0,  179,    0,  179,  179,  179,  179,    0,
  179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
  179,  179,    0,  179,  179,  179,  179,  179,    0,    0,
  179,  179,  179,  179,  179,  179,  179,  179,  179,  146,
  478,  146,  146,  138,  272,    0,    0,    0,    0,    0,
  136,    0,    0,  140,    0,  141,    0,    0,    0,    0,
  179,  179,    0,    0,  447,    0,    0,  501,    0,  137,
  177,  177,  177,  177,  177,    0,  177,  177,  177,  177,
  177,  177,  177,    0,  177,    0,  177,  177,  177,    0,
    0,    0,  177,    0,  177,  177,  177,  177,    0,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
  177,    0,  177,  177,  177,  177,  177,    0,    0,  177,
  177,  177,  177,  177,  177,  177,  177,  177,    0,    0,
    0,    0,    0,   80,    0,    0,  139,    0,    0,    0,
    0,  153,    0,    0,    0,    0,    0,    0,  153,  177,
  177,  153,    0,  153,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  153,    0,    0,
    0,    0,    0,  146,  146,  146,  146,  146,    0,  146,
  146,  146,  146,  146,  146,    0,    0,  146,    0,  146,
  146,  146,    0,    0,    0,  146,    0,  146,  146,  146,
  146,    0,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,    0,  146,  146,  146,  146,  146,
    0,    0,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  153,    0,  153,  153,  138,    0,    0,    0,    0,
    0,    0,  136,    0,    0,  140,    0,  141,    0,    0,
    0,    0,  146,  146,    0,    0,    0,    0,    0,    0,
    0,  137,  140,    0,    0,  140,    0,   20,   94,  113,
   95,  479,    0,   96,    0,  114,  480,  115,   97,    0,
  140,   21,  236,   98,  116,  117,    0,    0,    0,   99,
    0,  100,   22,  118,  119,    0,   23,   24,   25,  120,
  101,   26,   27,  121,  122,  123,  124,  125,    0,   29,
  126,  102,   30,  127,    0,    0,  128,  129,    6,  130,
  131,  132,  133,  134,  135,   80,    0,    0,  139,    0,
    0,    0,    0,  138,    0,    0,    0,    0,    0,    0,
  136,    0,    0,  140,    0,  141,  142,  143,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  137,
    0,    0,    0,    0,    0,  153,  153,  153,  153,    0,
    0,  153,  153,  153,    0,  153,  153,    0,    0,  153,
    0,  153,  153,  153,    0,    0,    0,  153,    0,  153,
  153,  153,  153,    0,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,    0,  153,  153,  153,
  153,  153,    0,    0,  153,  153,  153,  153,  153,  153,
  153,  153,  153,   80,    0,    0,  139,  138,    0,    0,
    0,    0,    0,    0,  136,    0,    0,  140,    0,  141,
    0,    0,    0,    0,  153,  153,    0,    0,  142,    0,
    0,  142,    0,  137,  289,  293,    0,    0,    0,   20,
   94,  113,   95,    0,    0,   96,  142,  114,  232,  115,
   97,    0,    0,   21,    0,   98,  116,  117,    0,    0,
    0,   99,    0,  100,   22,  118,  119,    0,   23,   24,
   25,  120,  101,   26,   27,  121,  122,  123,  124,  125,
    0,   29,  126,  102,   30,  127,    0,    0,  128,  129,
    6,  130,  131,  132,  133,  134,  135,   80,    0,    0,
  139,    0,  138,    0,    0,    0,    0,    0,    0,  136,
    0,    0,  140,    0,  141,    0,    0,    0,  142,  143,
  385,    0,    0,  388,    0,    0,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,   20,   94,  113,
   95,    0,    0,   96,    0,  114,    0,  115,   97,    0,
    0,   21,    0,   98,  116,  117,    0,    0,    0,   99,
    0,  100,   22,  118,  119,    0,   23,   24,   25,  120,
  101,   26,   27,  509,  122,  123,  510,  125,    0,   29,
  126,  102,   30,  127,    0,    0,  128,  129,    6,  130,
  131,  132,  133,  134,  135,  139,    0,    0,    0,  138,
  144,    0,    0,  144,    0,  197,  136,    0,    0,  140,
    0,  141,    0,    0,    0,    0,  142,  143,  144,    0,
  197,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   94,  113,   95,    0,    0,   96,    0,  114,
    0,  115,   97,    0,    0,    0,    0,   98,  116,  117,
  197,    0,    0,   99,    0,  100,    0,  118,  119,    0,
    0,    0,  469,  120,  101,    0,  470,  121,  122,  200,
  124,  125,    0,    0,  126,  102,    0,  127,    0,    0,
  128,  129,    6,  130,  131,  132,  133,  134,  135,  382,
  488,  446,  139,    0,  138,    0,  491,  492,    0,    0,
    0,  136,    0,    0,  140,    0,  141,    0,    0,    0,
  142,  143,  232,  232,  232,  232,  232,  232,  232,  232,
  232,  232,  232,  232,  232,    0,   20,   94,    0,   95,
    0,    0,   96,    0,    0,    0,    0,   97,    0,    0,
   21,    0,   98,    0,    0,    0,    0,    0,   99,    0,
  100,   22,  118,  119,    0,   23,   24,   25,    0,  101,
   26,   27,  121,    0,   28,  124,    0,    0,   29,    0,
  102,   30,    0,    0,    0,  128,  129,    6,  130,  131,
  132,  133,  134,  135,  382,    0,  499,  139,  138,    0,
    0,    0,    0,    0,    0,  136,    0,    0,  140,  277,
  141,    0,  277,    0,    0,  142,  143,    0,    0,    0,
    0,    0,    0,    0,  377,    0,  277,  277,    0,    0,
  288,    0,  288,    0,   94,  288,   95,    0,    0,   96,
  288,    0,    0,    0,   97,  288,    0,    0,    0,   98,
    0,  288,    0,  288,    0,   99,    0,  100,  138,  118,
  119,  277,  288,    0,    0,  136,  101,    0,  140,  121,
  141,    0,  124,    0,    0,    0,    0,  102,    0,    0,
  288,    0,  128,  129,    6,  130,  131,  132,  133,  134,
  135,  139,    0,  277,  197,  197,  197,  197,  197,  197,
  197,  197,  197,  197,  197,  197,  197,    0,    0,    0,
    0,    0,  142,  143,    0,    0,    0,    0,  138,    0,
    0,    0,    0,    0,    0,  136,    0,    0,  140,   94,
  141,   95,    0,    0,   96,    0,    0,    0,    0,   97,
    0,    0,  278,  288,   98,  278,    0,    0,  382,    0,
   99,  139,  100,    0,  118,  119,    0,    0,    0,  278,
  278,  101,    0,    0,  121,    0,    0,  124,    0,    0,
  281,    0,  102,  281,    0,    0,    0,  128,  129,    6,
  130,  131,  132,  133,  134,  135,    0,  281,  281,    0,
    0,    0,    0,    0,  278,  183,  183,    0,    0,    0,
  183,  183,  288,  183,    0,  183,    0,  142,  143,    0,
    0,  139,  283,    0,    0,  283,    0,    0,  183,  183,
  183,  183,  281,   94,    0,   95,  278,    0,   96,  283,
  283,    0,    0,   97,    0,    0,    0,    0,   98,  282,
    0,    0,  282,    0,   99,    0,  100,    0,  118,  119,
  143,    0,  183,  143,  281,  101,  282,  282,  121,    0,
    0,  124,    0,    0,  283,    0,  102,    0,  143,    0,
  233,  128,  129,    6,  130,  131,  132,  133,  134,  135,
    0,    0,  183,   94,    0,   95,    0,    0,   96,    0,
    0,  282,    0,   97,    0,    0,  283,    0,   98,    0,
    0,  142,  143,    0,   99,    0,  100,    0,  118,  119,
    0,    0,    0,    0,    0,  101,    0,    0,  121,    0,
    0,  124,    0,  282,  284,    0,  102,  284,    0,    0,
    0,  128,  129,    6,  130,  131,  132,  133,  134,  135,
    0,  284,  284,   94,    0,   95,    0,  145,   96,    0,
  145,    0,  188,   97,    0,    0,    0,    0,   98,    0,
    0,  142,  143,    0,   99,  145,  100,  188,  118,  119,
    0,    0,    0,    0,    0,  101,  284,    0,  121,    0,
    0,  124,    0,    0,  141,    0,  102,  141,    0,    0,
    0,  128,  129,    6,  130,  131,  132,  133,  134,  135,
  288,    0,  141,    0,  237,    0,    0,  288,  284,    0,
    0,    0,    0,    0,  288,    0,    0,  201,    0,    0,
    0,  142,  143,  288,    0,  288,    0,    0,    0,  288,
  288,  288,  201,    0,  288,  288,  183,    0,  288,    0,
    0,    0,  288,  201,  201,  288,    0,  201,  201,  201,
  201,  201,  201,  201,    0,    0,    0,    0,    0,    0,
    0,    0,  201,    0,  201,  201,  201,  201,  201,  201,
    0,    0,    0,   22,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,    0,  201,  285,  201,
  201,  285,    0,  204,  204,    0,    0,  204,  204,  204,
  204,  204,  204,  204,    0,  285,  285,    0,    0,    0,
    0,    0,    0,    0,  204,  204,  204,  204,  204,  204,
  201,  201,  192,    0,  233,  233,  233,  233,  233,  233,
  233,  233,  233,  233,  233,  233,  233,  192,    0,    0,
  285,    0,    0,    0,    0,    0,    0,  204,    0,  204,
  204,    0,  286,  227,  227,  286,    0,  227,  227,  227,
  227,  227,  227,  227,    0,  273,    0,  192,  273,  286,
  286,    0,  285,    0,  227,  227,  227,  227,  227,  227,
  204,  204,  273,  273,    0,    0,    0,    0,    0,    0,
  196,  196,    0,    0,  196,  196,  196,  196,  196,  196,
  196,    0,    0,    0,  286,    0,    0,    0,    0,  227,
  227,  196,  196,  196,  196,  196,  196,  273,    0,    0,
    0,  188,  188,  188,  188,  188,  188,  188,  188,  188,
  188,  188,  188,  188,    0,    0,  286,    0,    0,  227,
  227,  227,    0,    0,  196,    0,  196,  196,    0,  273,
    0,    0,    0,    0,    0,    0,    0,    0,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  201,
    0,    0,    0,    0,  201,    0,  201,  196,  196,    0,
    0,    0,    0,    0,    0,    0,  201,  201,  201,  201,
  201,  201,  201,  201,  201,  201,  201,  201,  201,    0,
    0,    0,    0,    0,  201,    0,    0,    0,    0,    0,
    0,  201,  201,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  201,  201,  204,    0,    0,    0,    0,    0,
    0,    0,    0,  307,  304,    0,    0,    0,  302,  300,
    0,  301,    0,  303,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  204,    0,  298,    0,  297,    0,
    0,  204,  204,  204,  204,  204,  204,  204,  204,  204,
  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
  204,  204,  204,  204,  227,    0,    0,    0,    0,    0,
  306,  192,  192,  192,  192,  192,  192,  192,  192,  192,
  192,  192,  192,  192,  227,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  305,  196,  227,  227,  227,  227,  227,  227,  227,  227,
  227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
  227,  227,  227,  227,    0,    0,   31,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  196,
  196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
  196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
  196,  183,  183,    0,    0,  183,  183,  183,  183,  183,
    0,  183,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  183,  183,  183,  183,  183,  183,  224,  224,
    0,    0,  224,  224,  224,  224,  224,  224,  224,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  224,
  224,  224,  224,  224,  224,    0,  268,  183,  183,  268,
    0,    0,  268,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  268,  268,    0,    0,
    0,  268,    0,    0,  224,  224,    0,    0,  183,  183,
    0,   80,    0,    0,  296,    0,  194,  194,    0,    0,
  194,  194,  194,  194,  194,  194,  194,    0,    0,    0,
    0,  268,  268,    0,    0,  224,  224,  194,  194,  194,
  194,  194,  194,  189,  189,    0,    0,  189,  189,  189,
  189,  189,  189,  189,  310,  311,  312,  313,  314,  315,
  316,    0,  268,  268,  189,  189,  189,  189,  189,  189,
  194,    0,  194,  194,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   20,  267,    0,    0,  267,    0,
    0,  267,    0,    0,    0,    0,    0,    0,   21,  189,
  189,    0,    0,  194,  194,  267,  267,    0,    0,   22,
  267,    0,    0,   23,   24,   25,    0,    0,   26,   27,
    0,    0,   28,    0,    0,    0,   29,  307,  304,   30,
  189,  189,  302,  300,    0,  301,    0,  303,  307,  304,
  267,  267,    0,  302,  300,   20,  301,    0,  303,    0,
  298,    0,  297,    0,    0,    0,    0,    0,    0,   21,
  320,  298,  183,  297,  299,    0,    0,    0,    0,    0,
   22,  267,  267,    0,   23,   24,   25,    0,    0,   79,
   27,    0,    0,   28,  306,    0,    0,   29,    0,  224,
   30,    0,   22,    0,    0,  306,    0,    0,    0,   22,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,    0,    0,    0,  305,  224,  224,  224,  224,
  224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
  224,  224,  224,  224,  224,  224,  224,  224,  224,    0,
    0,    0,    0,    0,  268,  268,    0,  194,    0,    0,
    0,    0,    0,    0,  288,  288,    0,    0,  288,  288,
  288,  288,  288,  288,  288,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  189,  288,  288,  288,  288,  288,
  288,    0,    0,    0,    0,  194,  194,  194,  194,  194,
  194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
  194,  194,  194,  194,  194,  194,  194,    0,    0,    0,
  288,  288,  189,  189,  189,  189,  189,  189,  189,  189,
  189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
  189,  189,  189,  189,    0,    0,    0,    0,    0,  216,
  216,  288,  288,  216,  216,  216,  216,  216,  216,  216,
    0,    0,    0,  267,  267,  267,  267,    0,  296,    0,
  216,  216,  216,  216,  216,  216,  222,  222,    0,  296,
  222,  222,  222,  222,  222,  222,  222,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  222,  222,  222,
  222,  222,  222,    0,    0,  216,  216,    0,  310,  311,
  312,  313,  314,  315,  316,    0,    0,  308,  309,  310,
  311,  312,  313,  314,  315,  316,    0,    0,    0,    0,
    0,    0,  222,  222,    0,    0,  216,  216,    0,    0,
  103,    0,    0,    0,  231,  231,    0,    0,  231,  231,
  231,  231,  231,    0,  231,    0,    0,    0,    0,    0,
    0,    0,    0,  222,  222,  231,  231,  231,  231,  231,
  231,   94,    0,   95,    0,    0,   96,   44,    0,    0,
    0,   97,    0,    0,    0,    0,   98,    0,    0,    0,
    0,    0,   99,   45,  100,    0,    0,    0,    0,    0,
  231,  231,    0,  101,    0,  288,    0,    0,    0,    0,
    0,    0,  243,  243,  102,    0,  243,  243,  243,  243,
  243,    6,  243,    0,    0,    0,    0,    0,    0,    0,
    0,  231,  231,  243,  243,  243,  243,  243,  243,    0,
    0,    0,    0,  288,  288,  288,  288,  288,  288,  288,
  288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
  288,  288,  288,  288,  288,    0,    0,    0,  243,  243,
    0,    0,    0,   57,    0,   57,    0,    0,   57,   57,
    0,  307,  304,   57,    0,    0,  302,  300,   57,  301,
  216,  303,    0,    0,   57,   57,   57,    0,    0,  243,
  243,    0,    0,    0,  298,   57,  297,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   57,  222,    0,    0,
    0,    0,    0,   57,    0,    0,    0,    0,  216,  216,
  216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
  216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
    0,    0,    0,    0,    0,  222,  222,  222,  222,  222,
  222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
  222,  222,  222,  222,  222,  222,  222,    0,    0,    0,
    0,    0,    0,    0,    0,  231,    0,    0,    0,    0,
    0,   22,   22,    0,   22,   22,   22,   22,   22,   22,
    0,   22,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   22,   22,   22,    0,   22,   22,    0,    0,
    0,    0,    0,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,   22,    0,   22,   22,    0,
    0,    0,    0,  243,    0,    0,    0,    0,    0,  265,
  265,    0,    0,  265,  265,  265,  265,  265,    0,  265,
    0,    0,    0,    0,    0,    0,    0,   22,   22,   22,
  265,  265,  265,    0,  265,  265,    0,    0,    0,    0,
    0,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
  243,    0,    0,  252,  252,  265,  265,  252,  252,  252,
  252,  252,  296,  252,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  252,  252,  252,    0,  252,  252,
    0,    0,    0,    0,    0,    0,  265,  265,  307,  304,
    0,    0,  327,  302,  300,    0,  301,    0,  303,    0,
    0,    0,  310,  311,  312,  313,  314,  315,  316,  252,
  252,  298,    0,  297,  299,    0,    0,    0,    0,    0,
    0,  307,  304,    0,    0,  380,  302,  300,    0,  301,
    0,  303,    0,    0,    0,    0,    0,    0,    0,    0,
  252,  252,    0,    0,  298,  306,  297,  299,  307,  304,
    0,    0,  410,  302,  300,    0,  301,    0,  303,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   22,  298,   22,  297,  299,  305,  270,    0,  306,  270,
    0,  307,  304,    0,    0,  411,  302,  300,    0,  301,
    0,  303,    0,  270,  270,    0,    0,    0,  270,    0,
    0,    0,   22,    0,  298,  306,  297,  299,  305,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  270,  270,
    0,    0,    0,    0,    0,  305,  269,    0,  306,  269,
  265,  307,  304,    0,    0,  416,  302,  300,    0,  301,
    0,  303,    0,  269,  269,    0,    0,    0,  269,  270,
  270,    0,    0,    0,  298,    0,  297,  299,  305,    0,
    0,    0,    0,    0,    0,    0,    0,   11,  265,  265,
  265,  265,  265,  265,  265,  265,  265,    0,  269,    0,
    0,  307,  304,    0,  252,    0,  302,  300,  306,  301,
    0,  303,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  298,    0,  297,  299,    0,  269,
  269,    0,    0,    0,    0,    0,    0,    0,  305,  296,
    0,    0,  252,  252,  252,  252,  252,  252,  252,  252,
  252,    0,    0,    0,    0,    0,    0,  421,  306,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  296,    0,    0,    0,    0,  308,  309,  310,
  311,  312,  313,  314,  315,  316,    0,    0,  305,    0,
    0,    0,    0,    0,    0,    0,  307,  304,    0,  296,
    0,  302,  300,  422,  301,    0,  303,    0,    0,    0,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  298,
    0,  297,  299,  307,  304,    0,    0,    0,  302,  300,
    0,  301,  296,  303,    0,    0,    0,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  298,    0,  297,  299,
    0,    0,    0,  306,    0,    0,    0,    0,    0,  307,
  304,  270,  270,    0,  302,  300,    0,  301,    0,  303,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  426,
  306,  443,  298,  305,  297,  299,    0,    0,  307,  304,
    0,    0,  296,  302,  300,    0,  301,    0,  303,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  305,  298,    0,  297,  299,    0,  306,    0,  307,    0,
    0,  269,  269,  302,  300,    0,  301,    0,  303,    0,
  308,  309,  310,  311,  312,  313,  314,  315,  316,    0,
    0,  298,  296,  297,  445,  306,  305,  307,  304,    0,
    0,    0,  302,  300,    0,  301,    0,  303,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  452,    0,
  298,  256,  297,  299,  256,  305,  256,  256,  256,    0,
  308,  309,  310,  311,  312,  313,  314,  315,  316,    0,
    0,  256,  256,  256,    0,  256,  256,  307,  304,    0,
    0,  471,  302,  300,  306,  301,    0,  303,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  298,    0,  297,  299,    0,    0,  256,  256,    0,    0,
  307,  304,    0,    0,  305,  302,  300,  296,  301,    0,
  303,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  298,  306,  297,  299,  256,  256,    0,
    0,    0,    0,    0,  296,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  305,    0,    0,  306,    0,    0,
    0,  307,  304,    0,    0,    0,  302,  300,    0,  301,
  296,  303,  308,  309,  310,  311,  312,  313,  314,  315,
  316,    0,    0,    0,  298,    0,  297,  305,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  296,
    0,  258,    0,    0,  258,    0,    0,  258,  308,  309,
  310,  311,  312,  313,  314,  315,  316,    0,  306,    0,
    0,  258,  258,  258,    0,  258,  258,    0,    0,  296,
    0,    0,    0,    0,    0,    0,    0,  308,  309,  310,
  311,  312,  313,  314,  315,  316,    0,    0,  305,    0,
    0,    0,    0,    0,    0,    0,  258,  258,  296,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  310,
  311,  312,  313,  314,  315,  316,    0,    0,    0,    0,
    0,  256,    0,    0,    0,    0,    0,  258,  258,    0,
    0,    0,    0,    0,    0,    0,  308,  309,  310,  311,
  312,  313,  314,  315,  316,    0,    0,    0,  296,  257,
    0,    0,  257,    0,  257,  257,  257,    0,    0,  256,
  256,  256,  256,  256,  256,  256,  256,  256,    0,  257,
  257,  257,    0,  257,  257,    0,  260,    0,    0,  260,
    0,  296,  260,    0,    0,    0,  308,  309,  310,  311,
  312,  313,  314,  315,  316,    0,  260,  260,  260,    0,
  260,  260,    0,    0,  257,  257,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  308,
  309,  310,  311,  312,  313,  314,  315,  316,    0,    0,
    0,  260,  260,    0,    0,  257,  257,    0,    0,    0,
    0,    0,  296,    0,  259,    0,    0,  259,    0,    0,
  259,    0,    0,  262,    0,    0,  262,    0,    0,  262,
    0,    0,  260,  260,  259,  259,  259,    0,  259,  259,
    0,    0,    0,  262,  262,  262,    0,  262,  262,    0,
  308,  258,  310,  311,  312,  313,  314,  315,  316,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  259,
  259,    0,    0,    0,    0,    0,    0,    0,  262,  262,
    0,    0,  261,    0,    0,  261,    0,    0,  261,  258,
  258,  258,  258,  258,  258,  258,  258,  258,    0,    0,
  259,  259,  261,  261,  261,  263,  261,  261,  263,  262,
  262,  263,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  263,  263,  263,  264,  263,
  263,  264,    0,    0,  264,    0,    0,  261,  261,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  264,  264,
  264,    0,  264,  264,    0,    0,    0,    0,    0,  257,
  263,  263,    0,    0,    0,    0,    0,    0,  261,  261,
    0,    0,    0,    0,    0,   46,    0,    0,    0,    0,
    0,    0,    0,  264,  264,    0,  260,  138,    0,    0,
    0,  263,  263,    0,  136,    0,    0,  257,  257,  257,
  257,  257,  257,  257,  257,  257,    0,    0,    0,    0,
    0,    0,    0,    0,  264,  264,    0,    0,    0,    0,
    0,    0,    0,    0,  260,  260,  260,  260,  260,  260,
  260,  260,  260,    0,    0,    0,    0,   63,   63,    0,
   63,    0,    0,   63,   63,    0,    0,    0,   63,    0,
    0,   63,    0,   63,  259,    0,    0,    0,    0,   63,
   63,   63,   63,  262,    0,    0,   63,   63,   63,    0,
   63,   63,   63,    0,    0,   63,    0,    0,    0,   63,
  139,   63,   63,    0,    0,    0,    0,    0,   63,    0,
    0,    0,  259,  259,  259,  259,  259,  259,  259,  259,
  259,  262,  262,  262,  262,  262,  262,    0,  288,    0,
  288,    0,    0,  288,  288,    0,    0,    0,  288,    0,
    0,    0,  261,  288,    0,    0,    0,    0,    0,  288,
  288,  288,    0,    0,    0,   53,    0,   53,    0,    0,
  288,    0,    0,    0,    0,  263,    0,    0,    0,    0,
    0,  288,    0,    0,    0,    0,    0,    0,  288,    0,
  261,  261,  261,  261,  261,  261,    0,    0,  264,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  263,  263,  263,  263,  263,  263,  107,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  264,  264,  264,  264,
  264,  264,   94,    0,   95,    0,    0,   96,    0,    0,
    0,    0,   97,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,   99,    0,  100,   45,  118,  119,    0,
    0,    0,    0,    0,  101,    0,    0,  121,    0,    0,
  124,    0,    0,    0,    0,  102,    0,    0,    0,    0,
  128,  129,    6,  130,  131,  132,  133,  134,  135,   53,
   53,    0,   53,    0,    0,   53,   53,    0,    0,    0,
   53,    0,    0,   53,    0,   53,    0,    0,    0,    0,
    0,   53,   53,   53,   53,    0,    0,    0,   53,   53,
   53,    0,   53,   53,   53,    0,    0,   53,    0,    0,
    0,   53,    0,   53,   53,    0,    0,    0,    0,    0,
   53,  107,  107,    0,  107,    0,    0,  107,  107,    0,
    0,    0,  107,    0,    0,  107,    0,  107,    0,    0,
    0,    0,    0,  107,  107,  107,  107,    0,    0,    0,
  107,  107,  107,    0,  107,  107,  107,    0,    0,  107,
    0,    0,    0,  107,    0,  107,  107,    0,    0,   57,
    0,   57,  107,    0,   57,   57,    0,    0,    0,   57,
    0,    0,    0,    0,   57,    0,    0,    0,    0,    0,
   57,   57,   57,   67,   67,    0,   67,    0,    0,   67,
   67,   57,    0,    0,   67,    0,    0,   67,    0,   67,
    0,    0,   57,    0,    0,   67,    0,   67,   67,   57,
    0,    0,   67,   67,   67,    0,   67,   67,   67,    0,
    0,   67,    0,    0,    0,   67,   20,   94,   67,   95,
    0,    0,   96,    0,   67,    0,    0,   97,    0,    0,
   21,    0,   98,    0,    0,    0,    0,    0,   99,    0,
  100,   22,    0,    0,    0,   23,   24,   25,    0,  101,
   26,   27,    0,    0,   28,    0,    0,    0,   29,    0,
   94,   30,   95,    0,    0,   96,   44,    6,    0,    0,
   97,    0,    0,    0,   56,   98,   56,    0,    0,   56,
   56,   99,   45,  100,   56,    0,    0,    0,    0,   56,
    0,   20,  101,    0,    0,   56,   56,   56,    0,    0,
    0,    0,    0,  102,    0,   21,   56,    0,    0,    0,
  184,    0,    0,    0,    0,    0,   22,   56,    0,    0,
   23,   24,   25,    0,   56,   26,   27,    0,    0,   28,
    0,    0,    0,   29,    0,    0,   30,
};
final static short yycheck[] = {                         72,
    0,  115,   69,  175,    4,   14,   80,   80,   40,   82,
   40,   11,   79,    0,   14,   72,    0,   59,   61,   40,
   72,  203,   31,   90,   41,   82,   33,   36,   71,   37,
   82,   31,  136,   91,   42,   43,   36,   45,  125,   47,
  123,  269,   44,   42,  161,    1,  451,   59,  276,   49,
   50,  206,   44,   53,   10,   46,   80,   66,   41,  126,
   69,  118,  125,   46,   59,  125,   66,   76,  185,   69,
   91,   80,  125,  289,  125,  283,   76,  293,   44,  136,
   80,   90,   59,   80,  285,  203,   59,   46,   44,   45,
   90,  115,   44,   59,   66,   61,   52,   69,  308,   55,
  308,  175,  175,  508,   76,   61,  179,   59,   91,   41,
    1,  123,   44,  113,  114,   71,   72,  490,   90,   10,
  120,   44,  179,  125,   80,   80,   82,  179,  123,  203,
  203,   40,   91,  125,  277,  290,   59,   41,  511,  367,
   44,  369,  261,  260,   41,   41,  123,  103,  262,   58,
  123,  175,  108,  264,   58,   59,  372,  113,  114,  115,
  115,   52,  118,   59,   55,   40,  175,   80,  308,  280,
   61,   46,  179,  292,  328,  175,  330,  264,  175,  203,
   71,   72,   44,  138,  139,  140,  141,  142,  143,   93,
  262,   82,  296,  276,  376,  469,  470,   59,   59,   44,
  272,  264,  115,  203,  264,  161,   52,   44,   80,   55,
  276,  264,  285,  264,   59,   61,   44,  491,  492,  175,
  175,  125,   59,  179,   46,   71,   46,  118,  285,  185,
  186,   59,   72,  285,   46,   41,   37,   59,  262,  296,
   46,   42,   82,  115,  296,  136,   47,   59,  203,   80,
  270,  251,  270,  308,  123,  322,  298,  315,  376,  377,
  315,  261,  175,  219,  308,  265,  380,  123,  261,  269,
   44,  315,  118,  266,  336,  337,  276,  264,  285,  235,
  264,   59,   31,  315,  115,  315,  298,   36,  179,  362,
  203,  308,  292,  280,  315,  125,  280,  411,  315,  123,
   59,  264,  416,  175,  260,  362,  262,  262,  427,  308,
  362,  125,   40,   80,  322,  323,  324,  308,  274,   80,
   40,   46,   40,   40,  315,  443,   40,   46,   91,  285,
  293,  203,   40,  296,  506,   46,  258,   46,  260,  458,
  296,  263,   46,   59,  175,  308,  268,  264,  115,  262,
  125,  273,  376,  377,  115,   40,  380,  279,  472,  281,
  474,  258,   40,  260,   59,   59,  263,  367,  290,  369,
  315,  268,  203,  303,  329,  331,  273,  377,   59,   40,
  315,   41,  279,  497,  281,  264,  308,  411,  264,   40,
  262,   37,  416,  290,  285,  315,   42,   43,  264,   45,
   40,   47,   61,  522,  523,  296,  362,   44,  175,  483,
  483,  308,  412,  123,  175,   59,  490,  490,  485,  443,
  463,  376,  377,   91,  380,  380,   40,  427,  262,  429,
  430,  262,  506,  506,  272,   41,  203,  511,  511,   41,
  331,   80,  203,  443,   40,   44,  513,  514,  472,   41,
  474,   41,   41,  453,   41,  411,  411,   41,  458,  483,
  416,  416,   40,  376,  377,  123,  490,  380,   41,  469,
  470,  362,  428,  497,  483,  298,  115,   41,   41,  269,
   41,  490,  506,  483,   41,  331,  483,  511,  443,  123,
  490,  491,  492,  490,   59,  262,   41,  506,  411,   58,
  125,  262,  511,  416,  376,  377,  506,  463,  380,  506,
   41,  511,   59,   59,  511,   58,  472,  472,  474,  474,
   61,   40,  522,  523,  125,  125,   41,  483,  483,   41,
  443,   59,   59,   59,  490,  490,  175,  123,  264,  411,
   41,  497,  497,   44,  416,  376,  377,  315,   59,  380,
  506,  506,   41,  315,   41,  511,  511,   58,   59,  472,
   41,  474,   63,  125,  203,   58,  476,  422,  514,  325,
  483,  443,  463,  203,   90,  483,   38,  490,  506,   41,
  411,  429,   44,  443,  497,  416,   41,  412,   41,   44,
   11,   44,   93,  506,   76,  482,   58,   59,  511,  274,
  472,   63,  474,   58,   59,   58,   59,  114,   -1,  376,
  377,  483,  443,  380,   -1,  376,  377,  463,  490,  380,
   -1,  324,   -1,  262,  125,  497,   -1,   -1,   -1,   -1,
   -1,   93,   94,   -1,  506,   -1,   -1,   -1,   93,  511,
   93,  472,   -1,  474,  411,    0,   -1,   -1,   -1,  416,
  411,   -1,  483,   -1,   -1,  416,   -1,   -1,   -1,  490,
   -1,   -1,  124,  125,   -1,   -1,  497,   -1,   -1,  258,
  125,  260,  125,   -1,  263,  506,  443,   -1,   -1,  268,
  511,   -1,  443,   37,  273,   -1,   -1,   -1,   42,   43,
  279,   45,  281,   47,   -1,   -1,   -1,   -1,  120,   -1,
   -1,  290,   -1,  125,   59,  472,   60,  474,   62,   -1,
   -1,  472,   -1,  474,  136,   -1,  483,   41,   -1,  308,
   44,   -1,  483,  490,   -1,   -1,   -1,   -1,   -1,  490,
  497,   -1,   -1,   -1,   58,   59,  497,  376,  377,  506,
   -1,  380,   -1,   -1,  511,  506,   -1,   33,   -1,   -1,
  511,   -1,   -1,   -1,   40,   -1,   -1,   43,   41,   45,
   -1,   44,   -1,   -1,   -1,  125,   -1,   -1,   -1,   93,
   -1,   -1,  411,   59,   -1,   58,   59,  416,   -1,   -1,
   63,   -1,  204,   -1,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,   -1,   -1,  220,  221,
   -1,  125,  224,   -1,  443,   -1,   -1,   -1,   -1,   -1,
   93,   -1,   -1,   -1,  236,  316,  317,  239,  240,  241,
  242,  243,  244,  245,  246,  247,  248,  249,  250,   -1,
   -1,   -1,   -1,  472,   -1,  474,   33,  123,   -1,  125,
  126,  263,  125,   40,  483,   -1,   43,   -1,   45,   -1,
   -1,  490,   -1,   -1,  316,  317,  318,  319,  497,   -1,
  282,   -1,   59,   -1,   -1,   -1,  288,  506,   -1,   -1,
   -1,   -1,  511,   -1,   -1,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,   -1,   -1,   -1,  258,   -1,
  260,   -1,  257,  263,  264,   -1,   -1,   -1,  268,  264,
   -1,   -1,   -1,  273,   -1,   -1,  271,   -1,   -1,  279,
  280,  281,  277,   -1,  278,  280,  123,  282,  125,  126,
  290,  286,  287,  288,   -1,   -1,  291,  292,   -1,   33,
  295,  301,   -1,   -1,  299,   -1,   40,  302,  308,   43,
  372,   45,   -1,  375,   -1,   -1,   -1,   -1,   -1,   -1,
  382,   -1,   -1,   -1,   -1,   59,  320,  321,  322,  323,
  324,  257,  258,  259,  260,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,   -1,  271,  272,  273,  274,  275,
   -1,   -1,   -1,  279,   -1,  281,  282,  283,  284,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,   -1,  299,  300,  301,  302,  303,   -1,   -1,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  123,
  452,  125,  126,   33,  317,   -1,   -1,   -1,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,
  336,  337,   -1,   -1,  476,   -1,   -1,  479,   -1,   59,
  257,  258,  259,  260,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,   -1,  271,   -1,  273,  274,  275,   -1,
   -1,   -1,  279,   -1,  281,  282,  283,  284,   -1,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,   -1,  299,  300,  301,  302,  303,   -1,   -1,  306,
  307,  308,  309,  310,  311,  312,  313,  314,   -1,   -1,
   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,   40,  336,
  337,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,   -1,  263,
  264,  265,  266,  267,  268,   -1,   -1,  271,   -1,  273,
  274,  275,   -1,   -1,   -1,  279,   -1,  281,  282,  283,
  284,   -1,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,   -1,  299,  300,  301,  302,  303,
   -1,   -1,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  123,   -1,  125,  126,   33,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
   -1,   -1,  336,  337,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   41,   -1,   -1,   44,   -1,  257,  258,  259,
  260,  261,   -1,  263,   -1,  265,  266,  267,  268,   -1,
   59,  271,   61,  273,  274,  275,   -1,   -1,   -1,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,   -1,  299,
  300,  301,  302,  303,   -1,   -1,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  123,   -1,   -1,  126,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,  336,  337,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
   -1,  263,  264,  265,   -1,  267,  268,   -1,   -1,  271,
   -1,  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,
  282,  283,  284,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,   -1,  299,  300,  301,
  302,  303,   -1,   -1,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  123,   -1,   -1,  126,   33,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,
   -1,   -1,   -1,   -1,  336,  337,   -1,   -1,   41,   -1,
   -1,   44,   -1,   59,  205,  206,   -1,   -1,   -1,  257,
  258,  259,  260,   -1,   -1,  263,   59,  265,   61,  267,
  268,   -1,   -1,  271,   -1,  273,  274,  275,   -1,   -1,
   -1,  279,   -1,  281,  282,  283,  284,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
   -1,  299,  300,  301,  302,  303,   -1,   -1,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  123,   -1,   -1,
  126,   -1,   33,   -1,   -1,   -1,   -1,   -1,   -1,   40,
   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,  336,  337,
  291,   -1,   -1,  294,   -1,   -1,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  257,  258,  259,
  260,   -1,   -1,  263,   -1,  265,   -1,  267,  268,   -1,
   -1,  271,   -1,  273,  274,  275,   -1,   -1,   -1,  279,
   -1,  281,  282,  283,  284,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,   -1,  299,
  300,  301,  302,  303,   -1,   -1,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  126,   -1,   -1,   -1,   33,
   41,   -1,   -1,   44,   -1,   46,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,  336,  337,   59,   -1,
   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  258,  259,  260,   -1,   -1,  263,   -1,  265,
   -1,  267,  268,   -1,   -1,   -1,   -1,  273,  274,  275,
   91,   -1,   -1,  279,   -1,  281,   -1,  283,  284,   -1,
   -1,   -1,  433,  289,  290,   -1,  437,  293,  294,  295,
  296,  297,   -1,   -1,  300,  301,   -1,  303,   -1,   -1,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  123,
  461,  125,  126,   -1,   33,   -1,  467,  468,   -1,   -1,
   -1,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
  336,  337,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,   -1,  257,  258,   -1,  260,
   -1,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,
  271,   -1,  273,   -1,   -1,   -1,   -1,   -1,  279,   -1,
  281,  282,  283,  284,   -1,  286,  287,  288,   -1,  290,
  291,  292,  293,   -1,  295,  296,   -1,   -1,  299,   -1,
  301,  302,   -1,   -1,   -1,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  123,   -1,  125,  126,   33,   -1,
   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,   41,
   45,   -1,   44,   -1,   -1,  336,  337,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   58,   59,   -1,   -1,
  258,   -1,  260,   -1,  258,  263,  260,   -1,   -1,  263,
  268,   -1,   -1,   -1,  268,  273,   -1,   -1,   -1,  273,
   -1,  279,   -1,  281,   -1,  279,   -1,  281,   33,  283,
  284,   93,  290,   -1,   -1,   40,  290,   -1,   43,  293,
   45,   -1,  296,   -1,   -1,   -1,   -1,  301,   -1,   -1,
  308,   -1,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  126,   -1,  125,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,   -1,   -1,   -1,
   -1,   -1,  336,  337,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,  258,
   45,  260,   -1,   -1,  263,   -1,   -1,   -1,   -1,  268,
   -1,   -1,   41,    0,  273,   44,   -1,   -1,  123,   -1,
  279,  126,  281,   -1,  283,  284,   -1,   -1,   -1,   58,
   59,  290,   -1,   -1,  293,   -1,   -1,  296,   -1,   -1,
   41,   -1,  301,   44,   -1,   -1,   -1,  306,  307,  308,
  309,  310,  311,  312,  313,  314,   -1,   58,   59,   -1,
   -1,   -1,   -1,   -1,   93,   37,   38,   -1,   -1,   -1,
   42,   43,   59,   45,   -1,   47,   -1,  336,  337,   -1,
   -1,  126,   41,   -1,   -1,   44,   -1,   -1,   60,   61,
   62,   63,   93,  258,   -1,  260,  125,   -1,  263,   58,
   59,   -1,   -1,  268,   -1,   -1,   -1,   -1,  273,   41,
   -1,   -1,   44,   -1,  279,   -1,  281,   -1,  283,  284,
   41,   -1,   94,   44,  125,  290,   58,   59,  293,   -1,
   -1,  296,   -1,   -1,   93,   -1,  301,   -1,   59,   -1,
   61,  306,  307,  308,  309,  310,  311,  312,  313,  314,
   -1,   -1,  124,  258,   -1,  260,   -1,   -1,  263,   -1,
   -1,   93,   -1,  268,   -1,   -1,  125,   -1,  273,   -1,
   -1,  336,  337,   -1,  279,   -1,  281,   -1,  283,  284,
   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,  293,   -1,
   -1,  296,   -1,  125,   41,   -1,  301,   44,   -1,   -1,
   -1,  306,  307,  308,  309,  310,  311,  312,  313,  314,
   -1,   58,   59,  258,   -1,  260,   -1,   41,  263,   -1,
   44,   -1,   46,  268,   -1,   -1,   -1,   -1,  273,   -1,
   -1,  336,  337,   -1,  279,   59,  281,   61,  283,  284,
   -1,   -1,   -1,   -1,   -1,  290,   93,   -1,  293,   -1,
   -1,  296,   -1,   -1,   41,   -1,  301,   44,   -1,   -1,
   -1,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  257,   -1,   59,   -1,   61,   -1,   -1,  264,  125,   -1,
   -1,   -1,   -1,   -1,  271,   -1,   -1,   46,   -1,   -1,
   -1,  336,  337,  280,   -1,  282,   -1,   -1,   -1,  286,
  287,  288,   61,   -1,  291,  292,  278,   -1,  295,   -1,
   -1,   -1,  299,   37,   38,  302,   -1,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   58,   59,   60,   61,   62,   63,
   -1,   -1,   -1,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  337,   -1,   91,   41,   93,
   94,   44,   -1,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   46,   47,   -1,   58,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,
  124,  125,   46,   -1,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,   61,   -1,   -1,
   93,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   94,   -1,   41,   37,   38,   44,   -1,   41,   42,   43,
   44,   45,   46,   47,   -1,   41,   -1,   91,   44,   58,
   59,   -1,  125,   -1,   58,   59,   60,   61,   62,   63,
  124,  125,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   93,
   94,   58,   59,   60,   61,   62,   63,   93,   -1,   -1,
   -1,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,   -1,   -1,  125,   -1,   -1,  123,
  124,  125,   -1,   -1,   91,   -1,   93,   94,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  308,
   -1,   -1,   -1,   -1,  278,   -1,  315,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,   -1,
   -1,   -1,   -1,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  278,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,
   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  308,   -1,   60,   -1,   62,   -1,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  278,   -1,   -1,   -1,   -1,   -1,
   94,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  278,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  337,   37,   38,   -1,   -1,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,   61,   62,   63,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   61,   62,   63,   -1,   38,   93,   94,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,   -1,   93,   94,   -1,   -1,  124,  125,
   -1,  123,   -1,   -1,  278,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   93,   94,   -1,   -1,  124,  125,   58,   59,   60,
   61,   62,   63,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   46,   47,  318,  319,  320,  321,  322,  323,
  324,   -1,  124,  125,   58,   59,   60,   61,   62,   63,
   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   38,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,  271,   93,
   94,   -1,   -1,  124,  125,   58,   59,   -1,   -1,  282,
   63,   -1,   -1,  286,  287,  288,   -1,   -1,  291,  292,
   -1,   -1,  295,   -1,   -1,   -1,  299,   37,   38,  302,
  124,  125,   42,   43,   -1,   45,   -1,   47,   37,   38,
   93,   94,   -1,   42,   43,  257,   45,   -1,   47,   -1,
   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,  271,
   59,   60,  278,   62,   63,   -1,   -1,   -1,   -1,   -1,
  282,  124,  125,   -1,  286,  287,  288,   -1,   -1,  291,
  292,   -1,   -1,  295,   94,   -1,   -1,  299,   -1,  278,
  302,   -1,  308,   -1,   -1,   94,   -1,   -1,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  337,   -1,   -1,   -1,  124,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  337,   -1,
   -1,   -1,   -1,   -1,  316,  317,   -1,  278,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  278,   58,   59,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,   -1,   -1,   -1,
   93,   94,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  337,   -1,   -1,   -1,   -1,   -1,   37,
   38,  124,  125,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,  316,  317,  318,  319,   -1,  278,   -1,
   58,   59,   60,   61,   62,   63,   37,   38,   -1,  278,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,
   61,   62,   63,   -1,   -1,   93,   94,   -1,  318,  319,
  320,  321,  322,  323,  324,   -1,   -1,  316,  317,  318,
  319,  320,  321,  322,  323,  324,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   94,   -1,   -1,  124,  125,   -1,   -1,
  125,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,  125,   58,   59,   60,   61,   62,
   63,  258,   -1,  260,   -1,   -1,  263,  264,   -1,   -1,
   -1,  268,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,
   -1,   -1,  279,  280,  281,   -1,   -1,   -1,   -1,   -1,
   93,   94,   -1,  290,   -1,  278,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,  301,   -1,   41,   42,   43,   44,
   45,  308,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,   58,   59,   60,   61,   62,   63,   -1,
   -1,   -1,   -1,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,  258,   -1,  260,   -1,   -1,  263,  264,
   -1,   37,   38,  268,   -1,   -1,   42,   43,  273,   45,
  278,   47,   -1,   -1,  279,  280,  281,   -1,   -1,  124,
  125,   -1,   -1,   -1,   60,  290,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  301,  278,   -1,   -1,
   -1,   -1,   -1,  308,   -1,   -1,   -1,   -1,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
   -1,   -1,   -1,   -1,   -1,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  337,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   -1,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  337,   91,   -1,   93,   94,   -1,
   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,
   58,   59,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,
   -1,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,   -1,   37,   38,   93,   94,   41,   42,   43,
   44,   45,  278,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   37,   38,
   -1,   -1,   41,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,   -1,  318,  319,  320,  321,  322,  323,  324,   93,
   94,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   -1,   41,   42,   43,   -1,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  125,   -1,   -1,   60,   94,   62,   63,   37,   38,
   -1,   -1,   41,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  276,   60,  278,   62,   63,  124,   41,   -1,   94,   44,
   -1,   37,   38,   -1,   -1,   41,   42,   43,   -1,   45,
   -1,   47,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,   -1,  308,   -1,   60,   94,   62,   63,  124,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,  124,   41,   -1,   94,   44,
  278,   37,   38,   -1,   -1,   41,   42,   43,   -1,   45,
   -1,   47,   -1,   58,   59,   -1,   -1,   -1,   63,  124,
  125,   -1,   -1,   -1,   60,   -1,   62,   63,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,   -1,   93,   -1,
   -1,   37,   38,   -1,  278,   -1,   42,   43,   94,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   63,   -1,  124,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  278,
   -1,   -1,  316,  317,  318,  319,  320,  321,  322,  323,
  324,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   -1,  316,  317,  318,
  319,  320,  321,  322,  323,  324,   -1,   -1,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,  278,
   -1,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
  316,  317,  318,  319,  320,  321,  322,  323,  324,   60,
   -1,   62,   63,   37,   38,   -1,   -1,   -1,   42,   43,
   -1,   45,  278,   47,   -1,   -1,   -1,  316,  317,  318,
  319,  320,  321,  322,  323,  324,   60,   -1,   62,   63,
   -1,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   37,
   38,  316,  317,   -1,   42,   43,   -1,   45,   -1,   47,
  316,  317,  318,  319,  320,  321,  322,  323,  324,   93,
   94,   59,   60,  124,   62,   63,   -1,   -1,   37,   38,
   -1,   -1,  278,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   60,   -1,   62,   63,   -1,   94,   -1,   37,   -1,
   -1,  316,  317,   42,   43,   -1,   45,   -1,   47,   -1,
  316,  317,  318,  319,  320,  321,  322,  323,  324,   -1,
   -1,   60,  278,   62,   93,   94,  124,   37,   38,   -1,
   -1,   -1,   42,   43,   -1,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,
   60,   38,   62,   63,   41,  124,   43,   44,   45,   -1,
  316,  317,  318,  319,  320,  321,  322,  323,  324,   -1,
   -1,   58,   59,   60,   -1,   62,   63,   37,   38,   -1,
   -1,   41,   42,   43,   94,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   -1,   62,   63,   -1,   -1,   93,   94,   -1,   -1,
   37,   38,   -1,   -1,  124,   42,   43,  278,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   94,   62,   63,  124,  125,   -1,
   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  124,   -1,   -1,   94,   -1,   -1,
   -1,   37,   38,   -1,   -1,   -1,   42,   43,   -1,   45,
  278,   47,  316,  317,  318,  319,  320,  321,  322,  323,
  324,   -1,   -1,   -1,   60,   -1,   62,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   38,   -1,   -1,   41,   -1,   -1,   44,  316,  317,
  318,  319,  320,  321,  322,  323,  324,   -1,   94,   -1,
   -1,   58,   59,   60,   -1,   62,   63,   -1,   -1,  278,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,  317,  318,
  319,  320,  321,  322,  323,  324,   -1,   -1,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,  278,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  318,
  319,  320,  321,  322,  323,  324,   -1,   -1,   -1,   -1,
   -1,  278,   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,  317,  318,  319,
  320,  321,  322,  323,  324,   -1,   -1,   -1,  278,   38,
   -1,   -1,   41,   -1,   43,   44,   45,   -1,   -1,  316,
  317,  318,  319,  320,  321,  322,  323,  324,   -1,   58,
   59,   60,   -1,   62,   63,   -1,   38,   -1,   -1,   41,
   -1,  278,   44,   -1,   -1,   -1,  316,  317,  318,  319,
  320,  321,  322,  323,  324,   -1,   58,   59,   60,   -1,
   62,   63,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
  317,  318,  319,  320,  321,  322,  323,  324,   -1,   -1,
   -1,   93,   94,   -1,   -1,  124,  125,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   38,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,  124,  125,   58,   59,   60,   -1,   62,   63,
   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,
  316,  278,  318,  319,  320,  321,  322,  323,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,  316,
  317,  318,  319,  320,  321,  322,  323,  324,   -1,   -1,
  124,  125,   58,   59,   60,   38,   62,   63,   41,  124,
  125,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   38,   62,
   63,   41,   -1,   -1,   44,   -1,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,  278,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   94,   -1,  278,   33,   -1,   -1,
   -1,  124,  125,   -1,   40,   -1,   -1,  316,  317,  318,
  319,  320,  321,  322,  323,  324,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,  317,  318,  319,  320,  321,
  322,  323,  324,   -1,   -1,   -1,   -1,  257,  258,   -1,
  260,   -1,   -1,  263,  264,   -1,   -1,   -1,  268,   -1,
   -1,  271,   -1,  273,  278,   -1,   -1,   -1,   -1,  279,
  280,  281,  282,  278,   -1,   -1,  286,  287,  288,   -1,
  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,
  126,  301,  302,   -1,   -1,   -1,   -1,   -1,  308,   -1,
   -1,   -1,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  316,  317,  318,  319,  320,  321,   -1,  258,   -1,
  260,   -1,   -1,  263,  264,   -1,   -1,   -1,  268,   -1,
   -1,   -1,  278,  273,   -1,   -1,   -1,   -1,   -1,  279,
  280,  281,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,
  290,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
   -1,  301,   -1,   -1,   -1,   -1,   -1,   -1,  308,   -1,
  316,  317,  318,  319,  320,  321,   -1,   -1,  278,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,  317,  318,  319,  320,  321,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,  317,  318,  319,
  320,  321,  258,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,   -1,   -1,  273,   -1,   -1,
   -1,   -1,   -1,  279,   -1,  281,  125,  283,  284,   -1,
   -1,   -1,   -1,   -1,  290,   -1,   -1,  293,   -1,   -1,
  296,   -1,   -1,   -1,   -1,  301,   -1,   -1,   -1,   -1,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  257,
  258,   -1,  260,   -1,   -1,  263,  264,   -1,   -1,   -1,
  268,   -1,   -1,  271,   -1,  273,   -1,   -1,   -1,   -1,
   -1,  279,  280,  281,  282,   -1,   -1,   -1,  286,  287,
  288,   -1,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,   -1,  301,  302,   -1,   -1,   -1,   -1,   -1,
  308,  257,  258,   -1,  260,   -1,   -1,  263,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,  273,   -1,   -1,
   -1,   -1,   -1,  279,  280,  281,  282,   -1,   -1,   -1,
  286,  287,  288,   -1,  290,  291,  292,   -1,   -1,  295,
   -1,   -1,   -1,  299,   -1,  301,  302,   -1,   -1,  258,
   -1,  260,  308,   -1,  263,  264,   -1,   -1,   -1,  268,
   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,   -1,
  279,  280,  281,  257,  258,   -1,  260,   -1,   -1,  263,
  264,  290,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,
   -1,   -1,  301,   -1,   -1,  279,   -1,  281,  282,  308,
   -1,   -1,  286,  287,  288,   -1,  290,  291,  292,   -1,
   -1,  295,   -1,   -1,   -1,  299,  257,  258,  302,  260,
   -1,   -1,  263,   -1,  308,   -1,   -1,  268,   -1,   -1,
  271,   -1,  273,   -1,   -1,   -1,   -1,   -1,  279,   -1,
  281,  282,   -1,   -1,   -1,  286,  287,  288,   -1,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,   -1,
  258,  302,  260,   -1,   -1,  263,  264,  308,   -1,   -1,
  268,   -1,   -1,   -1,  258,  273,  260,   -1,   -1,  263,
  264,  279,  280,  281,  268,   -1,   -1,   -1,   -1,  273,
   -1,  257,  290,   -1,   -1,  279,  280,  281,   -1,   -1,
   -1,   -1,   -1,  301,   -1,  271,  290,   -1,   -1,   -1,
  308,   -1,   -1,   -1,   -1,   -1,  282,  301,   -1,   -1,
  286,  287,  288,   -1,  308,  291,  292,   -1,   -1,  295,
   -1,   -1,   -1,  299,   -1,   -1,  302,
};
final static short YYFINAL=2;
final static short YYMAXTOKEN=337;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'","'&'",null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'","'?'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'","'^'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'","'|'","'}'","'~'",null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"ABSTRACT","BOOLEAN","BREAK",
"BYTE","CASE","CATCH","CHAR","CLASS","CONTINUE","DEFAULT","DO","DOUBLE","ELSE",
"EXTENDS","FINAL","FINALLY","FLOAT","FOR","IF","IMPLEMENTS","IMPORT",
"INSTANCEOF","INT","INTERFACE","LONG","NATIVE","NEW","_NULL","PACKAGE",
"PRIVATE","PROTECTED","PUBLIC","RETURN","SHORT","STATIC","STRICTFP","SUPER",
"SWITCH","SYNCHRONIZED","THIS","THROW","THROWS","TRANSIENT","TRY","VOID",
"VOLATILE","WHILE","CONST","GOTO","TRUE","FALSE","IDENTIFIER","INT_LITERAL",
"LONG_LITERAL","FLOAT_LITERAL","DOUBLE_LITERAL","CHARACTER_LITERAL",
"STRING_LITERAL","EMPTY_DIM","CAND","COR","EQ","NE","LE","GE","LSHIFTL",
"ASHIFTR","LSHIFTR","PLUS_ASG","MINUS_ASG","MULT_ASG","DIV_ASG","REM_ASG",
"LSHIFTL_ASG","ASHIFTR_ASG","LSHIFTR_ASG","AND_ASG","XOR_ASG","OR_ASG",
"PLUSPLUS","MINUSMINUS",
};
final static String yyrule[] = {
"$accept : Start",
"Start : CompilationUnit",
"Literal : INT_LITERAL",
"Literal : LONG_LITERAL",
"Literal : FLOAT_LITERAL",
"Literal : DOUBLE_LITERAL",
"Literal : TRUE",
"Literal : FALSE",
"Literal : CHARACTER_LITERAL",
"Literal : STRING_LITERAL",
"Type : PrimitiveType",
"Type : ReferenceType",
"ReferenceType : ClassOrInterfaceType",
"ReferenceType : ArrayType",
"PrimitiveType : BOOLEAN",
"PrimitiveType : CHAR",
"PrimitiveType : BYTE",
"PrimitiveType : SHORT",
"PrimitiveType : INT",
"PrimitiveType : FLOAT",
"PrimitiveType : LONG",
"PrimitiveType : DOUBLE",
"ClassOrInterfaceType : Name",
"ArrayType : Type EMPTY_DIM",
"CompilationUnit : PackageDeclarationOpt ImportStatementsOpt TypeDeclarationsOpt",
"PackageDeclarationOpt : PACKAGE Name ';'",
"PackageDeclarationOpt : empty",
"ImportStatementsOpt : empty",
"ImportStatementsOpt : ImportStatement ImportStatementsOpt",
"TypeDeclarationsOpt : empty",
"TypeDeclarationsOpt : TypeDeclaration TypeDeclarationsOpt",
"TypeDeclarationsOpt : ';' TypeDeclarationsOpt",
"TypeDeclaration : ClassDeclaration",
"TypeDeclaration : InterfaceDeclaration",
"ImportStatement : TypeImportStatement",
"ImportStatement : TypeImportOnDemandStatement",
"TypeImportStatement : IMPORT Name ';'",
"TypeImportOnDemandStatement : IMPORT Name '.' '*' ';'",
"ClassDeclaration : FieldModifiersOpt CLASS SimpleName SuperOpt InterfacesOpt ClassBody",
"SuperOpt : EXTENDS ClassOrInterfaceType",
"SuperOpt : empty",
"InterfacesOpt : IMPLEMENTS TypeNameList",
"InterfacesOpt : empty",
"ClassBody : '{' FieldDeclarationsOpt '}'",
"FieldDeclarationsOpt : FieldDeclarations",
"FieldDeclarationsOpt : empty",
"FieldDeclarations : FieldDeclaration",
"FieldDeclarations : FieldDeclaration FieldDeclarations",
"FieldDeclaration : FieldVariableDeclaration",
"FieldDeclaration : MethodDeclaration",
"FieldDeclaration : ConstructorDeclaration",
"FieldDeclaration : StaticInitializer",
"FieldDeclaration : InstanceInitializer",
"FieldDeclaration : TypeDeclaration",
"FieldDeclaration : TypeDeclaration ';'",
"FieldVariableDeclaration : FieldModifiersOpt Type VariableDeclarators ';'",
"FieldModifiersOpt : FieldModifiers",
"FieldModifiersOpt : empty",
"FieldModifiers : FieldModifier",
"FieldModifiers : FieldModifiers FieldModifier",
"FieldModifier : PUBLIC",
"FieldModifier : PROTECTED",
"FieldModifier : PRIVATE",
"FieldModifier : STATIC",
"FieldModifier : FINAL",
"FieldModifier : ABSTRACT",
"FieldModifier : NATIVE",
"FieldModifier : SYNCHRONIZED",
"FieldModifier : TRANSIENT",
"FieldModifier : VOLATILE",
"FieldModifier : STRICTFP",
"VariableDeclarators : VariableDeclarator",
"VariableDeclarators : VariableDeclarators ',' VariableDeclarator",
"VariableDeclarator : SimpleName DimsOpt",
"VariableDeclarator : SimpleName DimsOpt '=' VariableInitializer",
"VariableInitializer : Expression",
"VariableInitializer : ArrayInitializer",
"MethodDeclaration : FieldModifiersOpt Type SimpleName '(' ParameterListOpt ')' DimsOpt ThrowsOpt MethodBody",
"MethodDeclaration : FieldModifiersOpt Void SimpleName '(' ParameterListOpt ')' DimsOpt ThrowsOpt MethodBody",
"Void : VOID",
"ParameterListOpt : ParameterList",
"ParameterListOpt : empty",
"ParameterList : Parameter",
"ParameterList : Parameter ',' ParameterList",
"Parameter : FieldModifiersOpt Type SimpleName DimsOpt",
"ThrowsOpt : Throws",
"ThrowsOpt : empty",
"Throws : THROWS TypeNameList",
"TypeNameList : ClassOrInterfaceType",
"TypeNameList : ClassOrInterfaceType ',' TypeNameList",
"MethodBody : Block",
"MethodBody : ';'",
"ConstructorDeclaration : FieldModifiersOpt IDENTIFIER '(' ParameterListOpt ')' ThrowsOpt '{' ExplicitConstructorCallStatement BlockStatementsOpt '}'",
"ConstructorDeclaration : FieldModifiersOpt IDENTIFIER '(' ParameterListOpt ')' ThrowsOpt '{' BlockStatementsOpt '}'",
"ExplicitConstructorCallStatement : THIS '(' ArgumentListOpt ')' ';'",
"ExplicitConstructorCallStatement : SUPER '(' ArgumentListOpt ')' ';'",
"StaticInitializer : STATIC Block",
"InstanceInitializer : Block",
"InterfaceDeclaration : FieldModifiersOpt INTERFACE SimpleName ExtendsInterfacesOpt InterfaceBody",
"ExtendsInterfacesOpt : ExtendsInterfaces",
"ExtendsInterfacesOpt : empty",
"ExtendsInterfaces : EXTENDS TypeNameList",
"InterfaceBody : '{' InterfaceMemberDeclarationsOpt '}'",
"InterfaceMemberDeclarationsOpt : empty",
"InterfaceMemberDeclarationsOpt : InterfaceMemberDeclaration InterfaceMemberDeclarationsOpt",
"InterfaceMemberDeclaration : ConstantFieldDeclaration",
"InterfaceMemberDeclaration : MethodSignatureDeclaration",
"InterfaceMemberDeclaration : TypeDeclaration",
"InterfaceMemberDeclaration : TypeDeclaration ';'",
"ConstantFieldDeclaration : FieldModifiersOpt Type VariableDeclarators ';'",
"MethodSignatureDeclaration : FieldModifiersOpt Type SimpleName '(' ParameterListOpt ')' DimsOpt ThrowsOpt ';'",
"MethodSignatureDeclaration : FieldModifiersOpt Void SimpleName '(' ParameterListOpt ')' DimsOpt ThrowsOpt ';'",
"ArrayInitializer : '{' ElementInitializers '}'",
"ArrayInitializer : '{' ElementInitializers ',' '}'",
"ArrayInitializer : '{' '}'",
"ElementInitializers : Element",
"ElementInitializers : ElementInitializers ',' Element",
"Element : Expression",
"Element : ArrayInitializer",
"Block : '{' BlockStatementsOpt '}'",
"BlockStatementsOpt : BlockStatements",
"BlockStatementsOpt : empty",
"BlockStatements : BlockStatement",
"BlockStatements : BlockStatements BlockStatement",
"BlockStatement : LocalVariableDeclarationStatement",
"BlockStatement : Statement",
"BlockStatement : ClassDeclaration",
"LocalVariableDeclarationStatement : FieldModifiers Type VariableDeclarators ';'",
"LocalVariableDeclarationStatement : Type VariableDeclarators ';'",
"Statement : EmptyStatement",
"Statement : LabeledStatement",
"Statement : ExpressionStatement ';'",
"Statement : SelectionStatement",
"Statement : IterationStatement",
"Statement : JumpStatement",
"Statement : GuardingStatement",
"Statement : Block",
"EmptyStatement : ';'",
"LabeledStatement : SimpleName ':' Statement",
"ExpressionStatement : Assignment",
"ExpressionStatement : PreIncrement",
"ExpressionStatement : PreDecrement",
"ExpressionStatement : PostIncrement",
"ExpressionStatement : PostDecrement",
"ExpressionStatement : MethodCall",
"ExpressionStatement : AllocationExpression",
"SelectionStatement : IF '(' Expression ')' Statement",
"SelectionStatement : IF '(' Expression ')' Statement ELSE Statement",
"SelectionStatement : SWITCH '(' Expression ')' SwitchBlock",
"SwitchBlock : '{' SwitchBlockStatementsOpt '}'",
"SwitchBlockStatementsOpt : empty",
"SwitchBlockStatementsOpt : SwitchLabels BlockStatements SwitchBlockStatementsOpt",
"SwitchBlockStatementsOpt : SwitchLabels",
"SwitchLabels : SwitchLabel",
"SwitchLabels : SwitchLabel SwitchLabels",
"SwitchLabel : CASE ConstantExpression ':'",
"SwitchLabel : DEFAULT ':'",
"IterationStatement : WHILE '(' Expression ')' Statement",
"IterationStatement : DO Statement WHILE '(' Expression ')' ';'",
"IterationStatement : FOR '(' ForInit Expression ';' ForUpdateOpt ')' Statement",
"IterationStatement : FOR '(' ForInit ';' ForUpdateOpt ')' Statement",
"ForInit : ExpressionStatementsOpt ';'",
"ForInit : LocalVariableDeclarationStatement",
"ForUpdateOpt : ExpressionStatements",
"ForUpdateOpt : empty",
"ExpressionStatementsOpt : ExpressionStatements",
"ExpressionStatementsOpt : empty",
"ExpressionStatements : ExpressionStatement",
"ExpressionStatements : ExpressionStatement ',' ExpressionStatements",
"JumpStatement : BREAK LabelOpt ';'",
"JumpStatement : CONTINUE LabelOpt ';'",
"JumpStatement : RETURN ExpressionOpt ';'",
"JumpStatement : THROW Expression ';'",
"LabelOpt : SimpleName",
"LabelOpt : empty",
"GuardingStatement : SYNCHRONIZED '(' Expression ')' Statement",
"GuardingStatement : TRY Block Finally",
"GuardingStatement : TRY Block Catches",
"GuardingStatement : TRY Block Catches Finally",
"Catches : Catch",
"Catches : Catch Catches",
"Catch : CATCH '(' Parameter ')' Block",
"Finally : FINALLY Block",
"PrimaryExpression : Name",
"PrimaryExpression : NotJustName",
"PrimaryExpression : Name '.' CLASS",
"PrimaryExpression : Name '.' THIS",
"PrimaryExpression : Name '.' SUPER",
"NotJustName : AllocationExpression",
"NotJustName : ComplexPrimary",
"ComplexPrimary : Literal",
"ComplexPrimary : _NULL",
"ComplexPrimary : THIS",
"ComplexPrimary : '(' Expression ')'",
"ComplexPrimary : '(' Name ')'",
"ComplexPrimary : ArrayAccess",
"ComplexPrimary : FieldAccess",
"ComplexPrimary : MethodCall",
"ComplexPrimary : PrimitiveType '.' CLASS",
"ComplexPrimary : Void '.' CLASS",
"ComplexPrimary : ArrayType '.' CLASS",
"Name : SimpleName",
"Name : QualifiedName",
"SimpleName : IDENTIFIER",
"QualifiedName : Name '.' IDENTIFIER",
"ArrayAccess : Name '[' Expression ']'",
"ArrayAccess : ComplexPrimary '[' Expression ']'",
"FieldAccess : PrimaryExpression '.' SimpleName",
"FieldAccess : SUPER '.' SimpleName",
"MethodCall : SimpleName '(' ArgumentListOpt ')'",
"MethodCall : FieldAccess '(' ArgumentListOpt ')'",
"MethodCall : Name '.' IDENTIFIER '(' ArgumentListOpt ')'",
"ArgumentListOpt : ArgumentList",
"ArgumentListOpt : empty",
"ArgumentList : Expression",
"ArgumentList : Expression ',' ArgumentList",
"AllocationExpression : NEW ClassOrInterfaceType '(' ArgumentListOpt ')'",
"AllocationExpression : NEW ClassOrInterfaceType '(' ArgumentListOpt ')' ClassBody",
"AllocationExpression : NEW ClassOrInterfaceType DimExprs DimsOpt",
"AllocationExpression : NEW ClassOrInterfaceType DimsOpt ArrayInitializer",
"AllocationExpression : NEW PrimitiveType DimExprs DimsOpt",
"AllocationExpression : NEW PrimitiveType DimsOpt ArrayInitializer",
"AllocationExpression : PrimaryExpression '.' NEW ClassOrInterfaceType '(' ArgumentListOpt ')'",
"AllocationExpression : PrimaryExpression '.' NEW ClassOrInterfaceType '(' ArgumentListOpt ')' ClassBody",
"DimExprs : DimExpr",
"DimExprs : DimExpr DimExprs",
"DimExpr : '[' Expression ']'",
"DimsOpt : Dims",
"DimsOpt : empty",
"Dims : EMPTY_DIM",
"Dims : Dims EMPTY_DIM",
"PostfixExpression : PrimaryExpression",
"PostfixExpression : PostIncrement",
"PostfixExpression : PostDecrement",
"PostIncrement : PostfixExpression PLUSPLUS",
"PostDecrement : PostfixExpression MINUSMINUS",
"UnaryExpression : PreIncrement",
"UnaryExpression : PreDecrement",
"UnaryExpression : '+' UnaryExpression",
"UnaryExpression : '-' UnaryExpression",
"UnaryExpression : UnaryExpressionNotPlusMinus",
"PreIncrement : PLUSPLUS UnaryExpression",
"PreDecrement : MINUSMINUS UnaryExpression",
"UnaryExpressionNotPlusMinus : PostfixExpression",
"UnaryExpressionNotPlusMinus : '~' UnaryExpression",
"UnaryExpressionNotPlusMinus : '!' UnaryExpression",
"UnaryExpressionNotPlusMinus : CastExpression",
"CastExpression : '(' PrimitiveType ')' UnaryExpression",
"CastExpression : '(' ReferenceType ')' UnaryExpressionNotPlusMinus",
"CastExpression : '(' Name ')' UnaryExpressionNotPlusMinus",
"ExpressionOpt : Expression",
"ExpressionOpt : empty",
"Expression : UnaryExpression",
"Expression : Expression '*' Expression",
"Expression : Expression '/' Expression",
"Expression : Expression '%' Expression",
"Expression : Expression '+' Expression",
"Expression : Expression '-' Expression",
"Expression : Expression LSHIFTL Expression",
"Expression : Expression LSHIFTR Expression",
"Expression : Expression ASHIFTR Expression",
"Expression : Expression '<' Expression",
"Expression : Expression '>' Expression",
"Expression : Expression LE Expression",
"Expression : Expression GE Expression",
"Expression : Expression INSTANCEOF ReferenceType",
"Expression : Expression EQ Expression",
"Expression : Expression NE Expression",
"Expression : Expression '&' Expression",
"Expression : Expression '|' Expression",
"Expression : Expression '^' Expression",
"Expression : Expression CAND Expression",
"Expression : Expression COR Expression",
"Expression : Expression '?' Expression ':' Expression",
"Expression : Assignment",
"Assignment : UnaryExpression '=' Expression",
"Assignment : UnaryExpression MULT_ASG Expression",
"Assignment : UnaryExpression DIV_ASG Expression",
"Assignment : UnaryExpression REM_ASG Expression",
"Assignment : UnaryExpression PLUS_ASG Expression",
"Assignment : UnaryExpression MINUS_ASG Expression",
"Assignment : UnaryExpression LSHIFTL_ASG Expression",
"Assignment : UnaryExpression LSHIFTR_ASG Expression",
"Assignment : UnaryExpression ASHIFTR_ASG Expression",
"Assignment : UnaryExpression AND_ASG Expression",
"Assignment : UnaryExpression XOR_ASG Expression",
"Assignment : UnaryExpression OR_ASG Expression",
"ConstantExpression : Expression",
"empty :",
};

//#line 1365 "jparser.y"

protected void init(String filename) throws IOException {
  _filename = filename;
  _lexer = new Yylex(new FileInputStream(_filename));
}

protected int yylex()
{
  int retval;

  try {
    retval = _lexer.yylex();

    yylval = _lexer.getParserVal();

  } catch (IOException e) {

    throw new RuntimeException("lexical error");
  }

  return retval;
}

protected static final LinkedList cons(Object obj)
{
  return cons(obj, new LinkedList());
}

protected static final LinkedList cons(Object obj, LinkedList list)
{
  if ((obj != null) && (obj != AbsentTreeNode.instance)) {
     list.addFirst(obj);
  }

  return list;
}

protected static final LinkedList append(LinkedList list, Object obj)
{
  list.addLast(obj);

  return list;
}


protected static final Object appendLists(LinkedList list1, LinkedList list2)
{
  list1.addAll(list2);

  return list1;
}

/** Place to put the finished AST. */
protected CompileUnitNode _theAST;

public CompileUnitNode getAST() { return _theAST; }

protected void yyerror(String msg)
{
  throw new RuntimeException("parse error for " + _filename + ": " + msg);
}

/** An array type with given ELEMENTTYPE and DIMS dimensions.  When
 *  DIMS=0, equals ELEMENTTYPE.
 */
protected static TypeNode makeArrayType(TypeNode elementType, int dims)
{
  while (dims > 0) {
	   elementType = new ArrayTypeNode(elementType);
	   dims -= 1;
  }
  return elementType;
}

protected String _filename = null;
protected Yylex _lexer = null;
//#line 1887 "parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}



//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  char:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]+"");
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 202 "jparser.y"
{ _theAST = (CompileUnitNode) val_peek(0).obj; }
break;
case 2:
//#line 208 "jparser.y"
{ yyval.obj = new IntLitNode(val_peek(0).sval); }
break;
case 3:
//#line 210 "jparser.y"
{ yyval.obj = new LongLitNode(val_peek(0).sval); }
break;
case 4:
//#line 212 "jparser.y"
{ yyval.obj = new FloatLitNode(val_peek(0).sval); }
break;
case 5:
//#line 214 "jparser.y"
{ yyval.obj = new DoubleLitNode(val_peek(0).sval); }
break;
case 6:
//#line 216 "jparser.y"
{ yyval.obj = new BoolLitNode("true"); }
break;
case 7:
//#line 218 "jparser.y"
{ yyval.obj = new BoolLitNode("false"); }
break;
case 8:
//#line 220 "jparser.y"
{ yyval.obj = new CharLitNode(val_peek(0).sval); }
break;
case 9:
//#line 222 "jparser.y"
{ yyval.obj = new StringLitNode(val_peek(0).sval); }
break;
case 14:
//#line 243 "jparser.y"
{ yyval.obj = BoolTypeNode.instance; }
break;
case 15:
//#line 245 "jparser.y"
{ yyval.obj = CharTypeNode.instance; }
break;
case 16:
//#line 247 "jparser.y"
{ yyval.obj = ByteTypeNode.instance; }
break;
case 17:
//#line 249 "jparser.y"
{ yyval.obj = ShortTypeNode.instance; }
break;
case 18:
//#line 251 "jparser.y"
{ yyval.obj = IntTypeNode.instance; }
break;
case 19:
//#line 253 "jparser.y"
{ yyval.obj = FloatTypeNode.instance; }
break;
case 20:
//#line 255 "jparser.y"
{ yyval.obj = LongTypeNode.instance; }
break;
case 21:
//#line 257 "jparser.y"
{ yyval.obj = DoubleTypeNode.instance; }
break;
case 22:
//#line 265 "jparser.y"
{ yyval.obj = new TypeNameNode((NameNode) val_peek(0).obj); }
break;
case 23:
//#line 270 "jparser.y"
{ yyval.obj = new ArrayTypeNode((TypeNode) val_peek(1).obj); }
break;
case 24:
//#line 279 "jparser.y"
{ yyval.obj = new CompileUnitNode((TreeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj);  }
break;
case 25:
//#line 284 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 26:
//#line 286 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 27:
//#line 291 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 28:
//#line 293 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 29:
//#line 299 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 30:
//#line 301 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 31:
//#line 303 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 36:
//#line 321 "jparser.y"
{ yyval.obj = new ImportNode((NameNode) val_peek(1).obj); }
break;
case 37:
//#line 326 "jparser.y"
{ yyval.obj = new ImportOnDemandNode((NameNode) val_peek(3).obj); }
break;
case 38:
//#line 338 "jparser.y"
{ yyval.obj = new ClassDeclNode(val_peek(5).ival, (NameNode) val_peek(3).obj, (TreeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj,
           (LinkedList) val_peek(0).obj); }
break;
case 39:
//#line 353 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 40:
//#line 355 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 41:
//#line 363 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 42:
//#line 365 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 43:
//#line 374 "jparser.y"
{
     yyval.obj = val_peek(1).obj; /* in the original, an ABSENT tree is added*/
   }
break;
case 44:
//#line 380 "jparser.y"
{ }
break;
case 45:
//#line 382 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 47:
//#line 388 "jparser.y"
{ yyval.obj = appendLists((LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 49:
//#line 397 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 50:
//#line 399 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 51:
//#line 401 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 52:
//#line 404 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 53:
//#line 410 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 54:
//#line 412 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj); }
break;
case 55:
//#line 420 "jparser.y"
{
      Modifier.checkFieldModifiers(val_peek(3).ival);
	     LinkedList result = new LinkedList();

      LinkedList varDecls = (LinkedList) val_peek(1).obj;
      ListIterator itr = varDecls.listIterator(0);

	     while (itr.hasNext()) {
		     DeclaratorNode decl = (DeclaratorNode) itr.next();
		     result = cons(new FieldDeclNode(val_peek(3).ival,
						            makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
						            decl.getName(), decl.getInitExpr()),
				               result);
		   }

      yyval.obj = result;
   }
break;
case 56:
//#line 446 "jparser.y"
{ }
break;
case 57:
//#line 448 "jparser.y"
{ yyval.ival = Modifier.NO_MOD; }
break;
case 58:
//#line 452 "jparser.y"
{ yyval.ival = val_peek(0).ival; }
break;
case 59:
//#line 454 "jparser.y"
{
     yyval.ival = (val_peek(1).ival | val_peek(0).ival);
		  if ((val_peek(1).ival & val_peek(0).ival) != 0) {
		     yyerror("repeated modifier");
     }
   }
break;
case 60:
//#line 465 "jparser.y"
{ yyval.ival = Modifier.PUBLIC_MOD; }
break;
case 61:
//#line 467 "jparser.y"
{ yyval.ival = Modifier.PROTECTED_MOD;  }
break;
case 62:
//#line 469 "jparser.y"
{ yyval.ival = Modifier.PRIVATE_MOD;  }
break;
case 63:
//#line 472 "jparser.y"
{ yyval.ival = Modifier.STATIC_MOD;  }
break;
case 64:
//#line 474 "jparser.y"
{ yyval.ival = Modifier.FINAL_MOD;  }
break;
case 65:
//#line 477 "jparser.y"
{ yyval.ival = Modifier.ABSTRACT_MOD;  }
break;
case 66:
//#line 479 "jparser.y"
{ yyval.ival = Modifier.NATIVE_MOD;  }
break;
case 67:
//#line 481 "jparser.y"
{ yyval.ival = Modifier.SYNCHRONIZED_MOD;  }
break;
case 68:
//#line 484 "jparser.y"
{ yyval.ival = Modifier.TRANSIENT_MOD;  }
break;
case 69:
//#line 486 "jparser.y"
{ yyval.ival = Modifier.VOLATILE_MOD;  }
break;
case 70:
//#line 488 "jparser.y"
{ yyval.ival = Modifier.STRICTFP_MOD; }
break;
case 71:
//#line 499 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 72:
//#line 501 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj, (LinkedList) val_peek(2).obj); }
break;
case 73:
//#line 506 "jparser.y"
{ yyval.obj = new DeclaratorNode(val_peek(0).ival, (NameNode) val_peek(1).obj, AbsentTreeNode.instance); }
break;
case 74:
//#line 508 "jparser.y"
{ yyval.obj = new DeclaratorNode(val_peek(2).ival, (NameNode) val_peek(3).obj, (ExprNode) val_peek(0).obj); }
break;
case 77:
//#line 524 "jparser.y"
{
     Modifier.checkMethodModifiers(val_peek(8).ival);
	    yyval.obj = new MethodDeclNode(val_peek(8).ival, (LinkedList) val_peek(4).obj, makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival),
			                        (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj, (TreeNode) val_peek(0).obj); }
break;
case 78:
//#line 530 "jparser.y"
{
     Modifier.checkMethodModifiers(val_peek(8).ival);
	    yyval.obj = new MethodDeclNode(val_peek(8).ival, (LinkedList) val_peek(4).obj, makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival),
                             (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj, (TreeNode) val_peek(0).obj);
   }
break;
case 79:
//#line 539 "jparser.y"
{ yyval.obj = VoidTypeNode.instance; }
break;
case 80:
//#line 547 "jparser.y"
{ }
break;
case 81:
//#line 549 "jparser.y"
{ yyval.obj = new LinkedList();  }
break;
case 82:
//#line 554 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 83:
//#line 556 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 84:
//#line 561 "jparser.y"
{
     Modifiers.checkParameterModifiers(val_peek(3).ival); 
     yyval.obj = new ParameterNode(val_peek(3).ival, makeArrayType((TypeNode) val_peek(2).obj, val_peek(0).ival),
          (NameNode) val_peek(1).obj);
   }
break;
case 85:
//#line 572 "jparser.y"
{ }
break;
case 86:
//#line 574 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 87:
//#line 579 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 88:
//#line 584 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 89:
//#line 586 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 91:
//#line 595 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 92:
//#line 604 "jparser.y"
{
      Modifier.checkConstructorModifiers(val_peek(9).ival);
	     yyval.obj = new ConstructorDeclNode(val_peek(9).ival, val_peek(8).sval, (LinkedList) val_peek(6).obj, (LinkedList) val_peek(4).obj,
            (TreeNode) val_peek(2).obj, new BlockNode((LinkedList) val_peek(1).obj));
   }
break;
case 93:
//#line 611 "jparser.y"
{
     Modifier.checkConstructorModifiers(val_peek(8).ival);
	    yyval.obj = new ConstructorDeclNode(val_peek(8).ival, val_peek(7).sval, (LinkedList) val_peek(5).obj, (LinkedList) val_peek(3).obj,
					    new SuperConstructorCallNode(new LinkedList()),
					    new BlockNode((LinkedList) val_peek(1).obj));
	  }
break;
case 94:
//#line 625 "jparser.y"
{ yyval.obj = new ThisConstructorCallNode((LinkedList) val_peek(2).obj); }
break;
case 95:
//#line 627 "jparser.y"
{ yyval.obj = new SuperConstructorCallNode((LinkedList) val_peek(2).obj); }
break;
case 96:
//#line 635 "jparser.y"
{ yyval.obj = new StaticInitNode((BlockNode) val_peek(0).obj); }
break;
case 97:
//#line 640 "jparser.y"
{ yyval.obj = new InstanceInitNode((BlockNode) val_peek(0).obj); }
break;
case 98:
//#line 648 "jparser.y"
{
     Modifier.checkInterfaceModifiers(val_peek(4).ival);
     yyval.obj = new InterfaceDeclNode(val_peek(4).ival, (NameNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj);
   }
break;
case 99:
//#line 663 "jparser.y"
{ }
break;
case 100:
//#line 665 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 101:
//#line 670 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 102:
//#line 677 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 103:
//#line 682 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 104:
//#line 684 "jparser.y"
{ yyval.obj = appendLists((LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 106:
//#line 690 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 107:
//#line 692 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 108:
//#line 694 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj); }
break;
case 109:
//#line 699 "jparser.y"
{
     int modifiers = val_peek(3).ival;
     modifiers |= (Modifier.STATIC_MOD | Modifier.FINAL_MOD);

     Modifier.checkConstantFieldModifiers(modifiers);
     LinkedList varDecls = (LinkedList) val_peek(1).obj;
     ListIterator itr = varDecls.listIterator(0);

	    LinkedList result = new LinkedList();

	    while (itr.hasNext()) {
		    DeclaratorNode decl = (DeclaratorNode) itr.next();
		    result = cons(new FieldDeclNode(modifiers,
                     makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
						          decl.getName(), decl.getInitExpr()), result);
		  }

	    yyval.obj = result;
	  }
break;
case 110:
//#line 723 "jparser.y"
{ Modifier.checkMethodSignatureModifiers(val_peek(8).ival);
	      yyval.obj = new MethodDeclNode(val_peek(8).ival | Modifier.ABSTRACT_MOD, (LinkedList) val_peek(4).obj,
				       makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival),
				       (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj, AbsentTreeNode.instance);
     }
break;
case 111:
//#line 730 "jparser.y"
{
        Modifier.checkMethodSignatureModifiers(val_peek(8).ival);
	      yyval.obj = new MethodDeclNode(val_peek(8).ival | Modifier.ABSTRACT_MOD, (LinkedList) val_peek(4).obj,
				       makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival), (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj,
              AbsentTreeNode.instance);
     }
break;
case 112:
//#line 744 "jparser.y"
{ yyval.obj = new ArrayInitNode((LinkedList) val_peek(1).obj); }
break;
case 113:
//#line 746 "jparser.y"
{ yyval.obj = new ArrayInitNode((LinkedList) val_peek(2).obj); }
break;
case 114:
//#line 748 "jparser.y"
{ yyval.obj = new ArrayInitNode(new LinkedList()); }
break;
case 115:
//#line 754 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 116:
//#line 756 "jparser.y"
{ yyval.obj = append((LinkedList) val_peek(2).obj, val_peek(0).obj); }
break;
case 119:
//#line 771 "jparser.y"
{ yyval.obj = new BlockNode((LinkedList) val_peek(1).obj); }
break;
case 120:
//#line 775 "jparser.y"
{ }
break;
case 121:
//#line 777 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 122:
//#line 782 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 123:
//#line 784 "jparser.y"
{ yyval.obj = appendLists((LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 124:
//#line 789 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 125:
//#line 791 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 126:
//#line 793 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 127:
//#line 801 "jparser.y"
{
     Modifier.checkLocalVariableModifiers(val_peek(3).ival);

     LinkedList varDecls = (LinkedList) val_peek(1).obj;
     LinkedList result = new LinkedList();

     ListIterator itr = varDecls.listIterator();

	    while (itr.hasNext()) {
		    DeclaratorNode decl = (DeclaratorNode) itr.next();
		    result = cons(new VarDeclNode(val_peek(3).ival,
                     makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
                     decl.getName(), decl.getInitExpr()), result);
     }
     yyval.obj = result;
   }
break;
case 128:
//#line 819 "jparser.y"
{
     LinkedList varDecls = (LinkedList) val_peek(1).obj;
     LinkedList result = new LinkedList();

     ListIterator itr = varDecls.listIterator();

	    while (itr.hasNext()) {
		    DeclaratorNode decl = (DeclaratorNode) itr.next();
  	    result = cons(new VarDeclNode(Modifier.NO_MOD,
                     makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
                     decl.getName(), decl.getInitExpr()), result);
     }
     yyval.obj = result;
   }
break;
case 131:
//#line 841 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 137:
//#line 853 "jparser.y"
{ yyval.obj = new EmptyStmtNode(); }
break;
case 138:
//#line 861 "jparser.y"
{ yyval.obj = new LabeledStmtNode((NameNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 139:
//#line 869 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 140:
//#line 871 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 141:
//#line 873 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 142:
//#line 875 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 143:
//#line 877 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 144:
//#line 879 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 145:
//#line 881 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 146:
//#line 889 "jparser.y"
{ yyval.obj = new IfStmtNode((ExprNode) val_peek(2).obj, (TreeNode) val_peek(0).obj, AbsentTreeNode.instance); }
break;
case 147:
//#line 891 "jparser.y"
{ yyval.obj = new IfStmtNode((ExprNode) val_peek(4).obj, (TreeNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 148:
//#line 893 "jparser.y"
{ yyval.obj = new SwitchNode((ExprNode) val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 149:
//#line 898 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 150:
//#line 903 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 151:
//#line 905 "jparser.y"
{
     yyval.obj = cons(new SwitchBranchNode((LinkedList) val_peek(2).obj, (LinkedList) val_peek(1).obj),
               (LinkedList) val_peek(0).obj);
   }
break;
case 152:
//#line 911 "jparser.y"
{ yyval.obj = cons(new SwitchBranchNode((LinkedList) val_peek(0).obj, new LinkedList()); }
break;
case 153:
//#line 916 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 154:
//#line 918 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 155:
//#line 923 "jparser.y"
{ yyval.obj = new CaseNode((TreeNode) val_peek(1).obj); }
break;
case 156:
//#line 925 "jparser.y"
{ yyval.obj = new CaseNode(AbsentTreeNode.instance); }
break;
case 157:
//#line 932 "jparser.y"
{ yyval.obj = new LoopNode(new EmptyStmtNode(), (ExprNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 158:
//#line 934 "jparser.y"
{ yyval.obj = new LoopNode((TreeNode) val_peek(5).obj, (ExprNode) val_peek(2).obj, new EmptyStmtNode()); }
break;
case 159:
//#line 936 "jparser.y"
{ yyval.obj = new ForNode((LinkedList) val_peek(5).obj, (ExprNode) val_peek(4).obj,
      (LinkedList) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 160:
//#line 939 "jparser.y"
{ yyval.obj = new ForNode((LinkedList) val_peek(4).obj, new BoolLitNode("true"), (LinkedList) val_peek(2).obj,
      (TreeNode) val_peek(0).obj); }
break;
case 161:
//#line 945 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 162:
//#line 947 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 163:
//#line 951 "jparser.y"
{ }
break;
case 164:
//#line 953 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 165:
//#line 957 "jparser.y"
{ }
break;
case 166:
//#line 959 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 167:
//#line 964 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 168:
//#line 966 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 169:
//#line 974 "jparser.y"
{ yyval.obj = new BreakNode((TreeNode) val_peek(1).obj); }
break;
case 170:
//#line 976 "jparser.y"
{ yyval.obj = new ContinueNode((TreeNode) val_peek(1).obj); }
break;
case 171:
//#line 978 "jparser.y"
{ yyval.obj = new ReturnNode((TreeNode) val_peek(1).obj); }
break;
case 172:
//#line 980 "jparser.y"
{ yyval.obj = new ThrowNode((ExprNode) val_peek(1).obj); }
break;
case 173:
//#line 985 "jparser.y"
{ }
break;
case 174:
//#line 987 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 175:
//#line 995 "jparser.y"
{ yyval.obj = new SynchronizedNode((ExprNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 176:
//#line 997 "jparser.y"
{ yyval.obj = new TryNode((BlockNode) val_peek(1).obj, new LinkedList(), (TreeNode) val_peek(0).obj); }
break;
case 177:
//#line 999 "jparser.y"
{ yyval.obj = new TryNode((BlockNode) val_peek(1).obj, (LinkedList) val_peek(0).obj, AbsentTreeNode.instance); }
break;
case 178:
//#line 1001 "jparser.y"
{ yyval.obj = new TryNode((BlockNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, (TreeNode) val_peek(0).obj); }
break;
case 179:
//#line 1006 "jparser.y"
{ yyval.obj = cons (val_peek(0).obj); }
break;
case 180:
//#line 1008 "jparser.y"
{ yyval.obj = cons (val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 181:
//#line 1013 "jparser.y"
{ yyval.obj = new CatchNode((ParameterNode) val_peek(2).obj, (BlockNode) val_peek(0).obj); }
break;
case 182:
//#line 1018 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 183:
//#line 1029 "jparser.y"
{ yyval.obj = new ObjectNode((NameNode) val_peek(0).obj); }
break;
case 185:
//#line 1032 "jparser.y"
{ yyval.obj = new TypeClassAccessNode(new TypeNameNode((NameNode) val_peek(2).obj)); }
break;
case 186:
//#line 1034 "jparser.y"
{ yyval.obj = new OuterThisAccessNode(new TypeNameNode((NameNode) val_peek(2).obj)); }
break;
case 187:
//#line 1036 "jparser.y"
{ yyval.obj = new OuterSuperAccessNode(new TypeNameNode((NameNode) val_peek(2).obj)); }
break;
case 191:
//#line 1047 "jparser.y"
{ yyval.obj = new NullPntrNode(); }
break;
case 192:
//#line 1049 "jparser.y"
{ yyval.obj = new ThisNode(); }
break;
case 193:
//#line 1051 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 194:
//#line 1053 "jparser.y"
{ yyval.obj = new ObjectNode((NameNode) val_peek(1).obj); }
break;
case 196:
//#line 1056 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 198:
//#line 1060 "jparser.y"
{ yyval.obj = new TypeClassAccessNode((TypeNode) val_peek(2).obj); }
break;
case 199:
//#line 1062 "jparser.y"
{ yyval.obj = new TypeClassAccessNode((TypeNode) val_peek(2).obj); }
break;
case 200:
//#line 1064 "jparser.y"
{ yyval.obj = new TypeClassAccessNode((TypeNode) val_peek(2).obj); }
break;
case 201:
//#line 1073 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 203:
//#line 1079 "jparser.y"
{ yyval.obj = new NameNode(AbsentTreeNode.instance, val_peek(0).sval); }
break;
case 204:
//#line 1084 "jparser.y"
{ yyval.obj = new NameNode((NameNode) val_peek(2).obj, val_peek(0).sval); }
break;
case 205:
//#line 1091 "jparser.y"
{ yyval.obj = new ArrayAccessNode(new ObjectNode((NameNode) val_peek(3).obj), (ExprNode) val_peek(1).obj); }
break;
case 206:
//#line 1093 "jparser.y"
{ yyval.obj = new ArrayAccessNode((ExprNode) val_peek(3).obj, (ExprNode) val_peek(1).obj); }
break;
case 207:
//#line 1102 "jparser.y"
{ yyval.obj = new ObjectFieldAccessNode((TreeNode) val_peek(2).obj, (NameNode) val_peek(0).obj); }
break;
case 208:
//#line 1104 "jparser.y"
{ yyval.obj = new SuperFieldAccessNode((NameNode) val_peek(0).obj); }
break;
case 209:
//#line 1112 "jparser.y"
{ yyval.obj = new MethodCallNode((NameNode) val_peek(3).obj, (LinkedList) val_peek(1).obj); }
break;
case 210:
//#line 1114 "jparser.y"
{ yyval.obj = new MethodCallNode((TreeNode) val_peek(3).obj, (LinkedList) val_peek(1).obj); }
break;
case 211:
//#line 1117 "jparser.y"
{ yyval.obj = new MethodCallNode(new NameNode((NameNode) val_peek(5).obj, val_peek(3).sval), (LinkedList) val_peek(1).obj); }
break;
case 212:
//#line 1121 "jparser.y"
{  }
break;
case 213:
//#line 1123 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 214:
//#line 1128 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 215:
//#line 1130 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 216:
//#line 1138 "jparser.y"
{ yyval.obj = new AllocateNode((TypeNode) val_peek(3).obj, (LinkedList) val_peek(1).obj); }
break;
case 217:
//#line 1141 "jparser.y"
{
     yyval.obj = new AllocateAnonymousClassNode((TypeNode) val_peek(4).obj,
               (LinkedList) val_peek(2).obj, (LinkedList) val_peek(0).obj);
   }
break;
case 218:
//#line 1146 "jparser.y"
{
     yyval.obj = new AllocateArrayNode((TypeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, val_peek(0).ival,
           AbsentTreeNode.instance);
   }
break;
case 219:
//#line 1152 "jparser.y"
{
     yyval.obj = new AllocateArrayNode((TypeNode) val_peek(2).obj, new LinkedList(), val_peek(1).ival,
          (TreeNode) val_peek(0).obj);
   }
break;
case 220:
//#line 1157 "jparser.y"
{
     yyval.obj = new AllocateArrayNode((TypeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, val_peek(0).ival,
           AbsentTreeNode.instance);
   }
break;
case 221:
//#line 1163 "jparser.y"
{
     yyval.obj = new AllocateArrayNode((TypeNode) val_peek(2).obj, new LinkedList(), val_peek(1).ival,
           (TreeNode) val_peek(0).obj);
   }
break;
case 222:
//#line 1168 "jparser.y"
{
     yyval.obj = AbsentTreeNode.instance; /* FIXME*/
   }
break;
case 223:
//#line 1172 "jparser.y"
{
     yyval.obj = AbsentTreeNode.instance; /* FIXME*/
   }
break;
case 224:
//#line 1179 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 225:
//#line 1181 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 226:
//#line 1186 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 227:
//#line 1190 "jparser.y"
{ }
break;
case 228:
//#line 1192 "jparser.y"
{ yyval.ival = 0; }
break;
case 229:
//#line 1197 "jparser.y"
{ yyval.ival = 1; }
break;
case 230:
//#line 1199 "jparser.y"
{ yyval.ival = val_peek(1).ival + 1; }
break;
case 234:
//#line 1213 "jparser.y"
{ yyval.obj = new PostIncrNode((ExprNode) val_peek(1).obj); }
break;
case 235:
//#line 1218 "jparser.y"
{ yyval.obj = new PostDecrNode((ExprNode) val_peek(1).obj); }
break;
case 238:
//#line 1228 "jparser.y"
{ yyval.obj = new UnaryPlusNode((ExprNode) val_peek(0).obj); }
break;
case 239:
//#line 1230 "jparser.y"
{ yyval.obj = new UnaryMinusNode((ExprNode) val_peek(0).obj); }
break;
case 241:
//#line 1236 "jparser.y"
{ yyval.obj = new PreIncrNode((ExprNode) val_peek(0).obj); }
break;
case 242:
//#line 1241 "jparser.y"
{ yyval.obj = new PreDecrNode((ExprNode) val_peek(0).obj); }
break;
case 244:
//#line 1247 "jparser.y"
{ yyval.obj = new ComplementNode((ExprNode) val_peek(0).obj); }
break;
case 245:
//#line 1249 "jparser.y"
{ yyval.obj = new NotNode((ExprNode) val_peek(0).obj); }
break;
case 247:
//#line 1255 "jparser.y"
{ yyval.obj = new CastNode((TypeNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 248:
//#line 1257 "jparser.y"
{ yyval.obj = new CastNode((TypeNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 249:
//#line 1259 "jparser.y"
{ yyval.obj = new CastNode(new TypeNameNode((NameNode) val_peek(2).obj), (ExprNode) val_peek(0).obj); }
break;
case 250:
//#line 1270 "jparser.y"
{ }
break;
case 251:
//#line 1272 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 253:
//#line 1278 "jparser.y"
{ yyval.obj = new MultNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 254:
//#line 1280 "jparser.y"
{ yyval.obj = new DivNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 255:
//#line 1282 "jparser.y"
{ yyval.obj = new RemNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 256:
//#line 1284 "jparser.y"
{ yyval.obj = new PlusNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 257:
//#line 1286 "jparser.y"
{ yyval.obj = new MinusNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 258:
//#line 1288 "jparser.y"
{ yyval.obj = new LeftShiftLogNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 259:
//#line 1290 "jparser.y"
{ yyval.obj = new RightShiftLogNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 260:
//#line 1292 "jparser.y"
{ yyval.obj = new RightShiftArithNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 261:
//#line 1294 "jparser.y"
{ yyval.obj = new LTNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 262:
//#line 1296 "jparser.y"
{ yyval.obj = new GTNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 263:
//#line 1298 "jparser.y"
{ yyval.obj = new LENode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 264:
//#line 1300 "jparser.y"
{ yyval.obj = new GENode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 265:
//#line 1302 "jparser.y"
{ yyval.obj = new InstanceOfNode((ExprNode) val_peek(2).obj, (TypeNode) val_peek(0).obj); }
break;
case 266:
//#line 1304 "jparser.y"
{ yyval.obj = new EQNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 267:
//#line 1306 "jparser.y"
{ yyval.obj = new NENode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 268:
//#line 1308 "jparser.y"
{ yyval.obj = new BitAndNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 269:
//#line 1310 "jparser.y"
{ yyval.obj = new BitOrNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 270:
//#line 1312 "jparser.y"
{ yyval.obj = new BitXorNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 271:
//#line 1314 "jparser.y"
{ yyval.obj = new CandNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 272:
//#line 1316 "jparser.y"
{ yyval.obj = new CorNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 273:
//#line 1318 "jparser.y"
{ yyval.obj = new IfExprNode((ExprNode) val_peek(4).obj, (ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 275:
//#line 1327 "jparser.y"
{ yyval.obj = new AssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 276:
//#line 1329 "jparser.y"
{ yyval.obj = new MultAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 277:
//#line 1331 "jparser.y"
{ yyval.obj = new DivAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 278:
//#line 1333 "jparser.y"
{ yyval.obj = new RemAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 279:
//#line 1335 "jparser.y"
{ yyval.obj = new PlusAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 280:
//#line 1337 "jparser.y"
{ yyval.obj = new MinusAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 281:
//#line 1339 "jparser.y"
{ yyval.obj = new LeftShiftLogAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 282:
//#line 1341 "jparser.y"
{ yyval.obj = new RightShiftLogAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 283:
//#line 1343 "jparser.y"
{ yyval.obj = new RightShiftArithAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 284:
//#line 1345 "jparser.y"
{ yyval.obj = new BitAndAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 285:
//#line 1347 "jparser.y"
{ yyval.obj = new BitXorAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 286:
//#line 1349 "jparser.y"
{ yyval.obj = new BitOrAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
//#line 3140 "parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



}
//################### END OF CLASS yaccpar ######################
