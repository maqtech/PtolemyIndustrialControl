//### This file created by BYACC 1.8(/Java extension  0.92)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//### Please send bug reports to rjamison@lincom-asg.com
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



//#line 120 "jparser.y"
package ptolemy.lang.java;

import java.util.LinkedList;
import java.util.ListIterator;
import java.io.IOException;
import java.io.FileInputStream;

import ptolemy.lang.*;

//#line 20 "parser.java"




//#####################################################################
// class: parser
// does : encapsulates yacc() parser functionality in a Java
//        class for quick code development
//#####################################################################
public class parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[],stateptr;             //state stack
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
void state_push(int state)
{
  if (stateptr>=YYSTACKSIZE)         //overflowed?
    return;
  statestk[++stateptr]=state;
}
int state_pop()
{
  if (stateptr<0)                    //underflowed?
    return -1;
  return statestk[stateptr--];
}
void state_drop(int cnt)
{
int ptr;
  ptr=stateptr-cnt;
  if (ptr<0)
    return;
  stateptr = ptr;
}
int state_peek(int relative)
{
int ptr;
  ptr=stateptr-relative;
  if (ptr<0)
    return -1;
  return statestk[ptr];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
boolean init_stacks()
{
  statestk = new int[YYSTACKSIZE];
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class parsersemantic is defined in parserval.java


String   yytext;//user variable to return contextual strings
parserval yyval; //used to return semantic vals from action routines
parserval yylval;//the 'lval' (result) I got from yylex()
parserval valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new parserval[YYSTACKSIZE];
  yyval=new parserval(0);
  yylval=new parserval(0);
  valptr=-1;
}
void val_push(parserval val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
parserval val_pop()
{
  if (valptr<0)
    return new parserval(-1);
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
parserval val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new parserval(-1);
  return valstk[ptr];
}
//#### end semantic value section ####
public final static short ABSTRACT=257;
public final static short BOOLEAN=258;
public final static short BREAK=259;
public final static short BYTE=260;
public final static short CASE=261;
public final static short CATCH=262;
public final static short CHAR=263;
public final static short CLASS=264;
public final static short CONTINUE=265;
public final static short DEFAULT=266;
public final static short DO=267;
public final static short DOUBLE=268;
public final static short ELSE=269;
public final static short EXTENDS=270;
public final static short FINAL=271;
public final static short FINALLY=272;
public final static short FLOAT=273;
public final static short FOR=274;
public final static short IF=275;
public final static short IMPLEMENTS=276;
public final static short IMPORT=277;
public final static short INSTANCEOF=278;
public final static short INT=279;
public final static short INTERFACE=280;
public final static short LONG=281;
public final static short NATIVE=282;
public final static short NEW=283;
public final static short _NULL=284;
public final static short PACKAGE=285;
public final static short PRIVATE=286;
public final static short PROTECTED=287;
public final static short PUBLIC=288;
public final static short RETURN=289;
public final static short SHORT=290;
public final static short STATIC=291;
public final static short SUPER=292;
public final static short SWITCH=293;
public final static short SYNCHRONIZED=294;
public final static short THIS=295;
public final static short THROW=296;
public final static short THROWS=297;
public final static short TRANSIENT=298;
public final static short TRY=299;
public final static short VOID=300;
public final static short VOLATILE=301;
public final static short WHILE=302;
public final static short CONST=303;
public final static short GOTO=304;
public final static short TRUE=305;
public final static short FALSE=306;
public final static short IDENTIFIER=307;
public final static short INT_LITERAL=308;
public final static short LONG_LITERAL=309;
public final static short FLOAT_LITERAL=310;
public final static short DOUBLE_LITERAL=311;
public final static short CHARACTER_LITERAL=312;
public final static short STRING_LITERAL=313;
public final static short EMPTY_DIM=314;
public final static short CAND=315;
public final static short COR=316;
public final static short EQ=317;
public final static short NE=318;
public final static short LE=319;
public final static short GE=320;
public final static short LSHIFTL=321;
public final static short ASHIFTR=322;
public final static short LSHIFTR=323;
public final static short PLUS_ASG=324;
public final static short MINUS_ASG=325;
public final static short MULT_ASG=326;
public final static short DIV_ASG=327;
public final static short REM_ASG=328;
public final static short LSHIFTL_ASG=329;
public final static short ASHIFTR_ASG=330;
public final static short LSHIFTR_ASG=331;
public final static short AND_ASG=332;
public final static short XOR_ASG=333;
public final static short OR_ASG=334;
public final static short PLUSPLUS=335;
public final static short MINUSMINUS=336;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    4,    4,    4,    4,    4,    4,    4,    4,   32,
   32,   33,   33,   34,   34,   34,   34,   34,   34,   34,
   34,   35,   36,    1,   99,   99,   92,   92,   88,   88,
   88,   74,   74,   70,   70,   71,   72,   73,   38,   38,
   40,   40,   82,   83,   83,   84,   84,   85,   85,   85,
   85,   85,   85,   86,   67,   67,   68,   68,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,  106,  106,
  105,  105,  104,  104,   24,   24,   77,   77,   37,   89,
   89,   90,   90,   75,   41,   41,   42,   39,   39,   53,
   53,   79,   79,   55,   55,   78,   80,   76,   43,   43,
   44,   91,   94,   94,   93,   93,   87,   81,   81,   25,
   25,   25,   30,   30,   26,   26,   45,   57,   57,   58,
   58,   59,   59,   61,   61,   46,   46,   46,   46,   46,
   46,   46,   46,   47,   48,   56,   56,   56,   56,   56,
   56,   56,   49,   49,   49,   60,   62,   62,   96,   96,
   95,   95,   50,   50,   50,   50,   63,   63,   66,   66,
   64,   64,   65,   65,   51,   51,   51,   51,   98,   98,
   52,   52,   52,   52,  103,  103,  102,   54,    5,    5,
    6,    6,    7,    7,    7,    7,    7,    7,    7,    7,
  100,  100,   97,  101,    8,    8,   31,   31,    9,    9,
    9,   27,   27,   28,   28,   10,   10,   10,   29,   29,
   23,    3,    3,    2,    2,   11,   11,   11,   12,   13,
   14,   14,   14,   14,   14,   15,   16,   17,   17,   17,
   17,   18,   18,   18,   19,   19,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   22,  107,
};
final static short yylen[] = {                            2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    3,    3,    1,    1,    2,    1,    2,
    2,    1,    1,    1,    1,    3,    5,    6,    2,    1,
    2,    1,    3,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    4,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    3,    2,    4,    1,    1,    9,    9,    1,    1,
    1,    1,    3,    4,    1,    1,    2,    1,    3,    1,
    1,   10,    9,    5,    5,    2,    1,    5,    1,    1,
    2,    3,    1,    2,    1,    1,    4,    9,    9,    3,
    4,    2,    1,    3,    1,    1,    3,    1,    1,    1,
    2,    1,    1,    4,    3,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    1,    1,    1,    1,    1,
    1,    1,    5,    7,    5,    3,    1,    3,    1,    2,
    3,    2,    5,    7,    8,    7,    2,    1,    1,    1,
    1,    1,    1,    3,    3,    3,    3,    3,    1,    1,
    5,    3,    3,    4,    1,    2,    5,    2,    1,    1,
    1,    1,    1,    1,    1,    3,    3,    1,    1,    1,
    1,    1,    1,    3,    4,    4,    3,    3,    4,    4,
    6,    1,    1,    1,    3,    5,    4,    4,    1,    2,
    3,    1,    1,    1,    2,    1,    1,    1,    2,    2,
    1,    1,    2,    2,    1,    2,    2,    1,    2,    2,
    1,    4,    4,    4,    1,    1,    1,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    5,    1,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    0,
};
final static short yydefred[] = {                         0,
    0,    0,    1,    0,   26,  193,  191,    0,  192,    0,
    0,   34,   35,    0,   27,    0,   25,    0,   28,   64,
   63,   65,   61,   60,   59,   62,   66,   67,   68,    0,
    0,    0,   57,   32,    0,   33,   24,    0,  194,    0,
   36,   31,    0,    0,   58,   30,    0,    0,    0,   37,
    0,    0,   40,    0,    0,   99,  100,   39,    0,    0,
    0,   42,    0,  101,    0,   98,   41,    0,   38,    0,
    0,  106,  105,    0,    0,    0,    0,    0,   97,    0,
   53,   49,   51,   50,   52,    0,   44,    0,   48,    0,
   89,   14,   16,   15,   21,   19,   18,   20,   17,   79,
    0,   11,   10,   12,   13,    0,  104,  102,   96,    0,
    0,    0,    0,    0,    0,    0,  184,    0,    0,    0,
    0,  185,    0,    0,    0,    6,    7,    2,    3,    4,
    5,    8,    9,    0,  134,    0,    0,    0,    0,    0,
    0,  183,    0,  180,    0,  188,    0,    0,    0,    0,
    0,    0,    0,    0,  225,  231,  136,    0,    0,  133,
  123,  126,  127,  129,  130,  131,  132,    0,    0,    0,
  120,  122,    0,    0,  119,    0,    0,    0,   43,   47,
   56,   23,    0,   71,    0,    0,  169,    0,  170,    0,
    0,    0,    0,    0,    0,    0,    0,  190,  181,  217,
  218,    0,  221,  222,    0,    0,  259,    0,  236,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  230,  229,  223,  224,  226,  227,    0,    0,  219,  220,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  128,  117,  121,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  214,    0,    0,
  213,    0,  107,    0,  165,  166,    0,    0,    0,  158,
    0,    0,  161,  162,    0,    0,    0,    0,    0,    0,
  167,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  198,    0,    0,  168,    0,    0,  172,    0,
    0,    0,  186,    0,    0,    0,  197,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  202,  203,  125,    0,  135,    0,    0,   69,
    0,    0,   80,    0,    0,    0,   54,    0,    0,  215,
    0,   72,    0,    0,  124,    0,    0,    0,  157,    0,
    0,  210,  208,    0,  207,    0,    0,    0,    0,    0,
    0,  238,  239,    0,    0,    0,  240,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  178,
  176,  174,    0,  233,  232,  234,  196,    0,  200,  199,
  195,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   74,   76,    0,    0,  164,  159,    0,  160,    0,    0,
  211,  206,    0,    0,  145,  171,    0,   70,  153,  205,
    0,   83,    0,    0,   85,   86,    0,    0,    0,    0,
  112,    0,  116,  113,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  147,    0,  201,   87,
    0,   84,    0,    0,    0,  110,    0,    0,  154,  156,
    0,  144,    0,    0,  152,  146,  150,    0,  177,    0,
    0,    0,    0,    0,    0,  108,  111,  114,  109,  155,
  151,  148,    0,    0,    0,   93,   91,   90,   77,   78,
    0,    0,   92,    0,    0,   95,   94,
};
final static short yydgoto[] = {                          2,
    3,  259,  260,  142,  143,  144,  145,  146,  198,  199,
  149,  200,  201,  202,  203,  204,  155,  156,  205,  331,
  207,  474,  277,  411,  443,  444,  332,  333,  278,  445,
  158,  159,  102,  103,  104,  105,  106,   52,   64,   61,
  434,  435,   55,   56,  160,  161,  162,  163,  164,  165,
  166,  167,  499,  309,  482,  168,  169,  170,  171,  425,
  172,  454,  271,  272,  416,  417,   31,   32,   33,   11,
   12,   13,   34,   35,  341,   36,   82,   83,   84,   85,
   72,   69,   86,   87,   88,   89,   73,   37,  342,  343,
   66,   14,   74,   75,  455,  456,  208,  188,    4,  192,
    9,  310,  311,  184,  185,  344,  261,
};
final static short yysindex[] = {                      -229,
 -247,    0,    0, -183,    0,    0,    0,   13,    0, -247,
 -183,    0,    0, 2243,    0, -187,    0,   78,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2243,
 -209, 3667,    0,    0, 2243,    0,    0,    0,    0,   -9,
    0,    0, -247, -247,    0,    0,   77, -126, -109,    0,
 -247,  -87,    0, -247,   81,    0,    0,    0,  166, -247,
   91,    0,  171,    0, 3667,    0,    0, 2303,    0, -247,
 4302,    0,    0, 3667,   93,    0,  103, 1129,    0, 4290,
    0,    0,    0,    0,    0,   96,    0, 2303,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -160,    0,    0,    0,    0, -247,    0,    0,    0, -247,
 -247, 1442, 1221,  188,  194, 1221,    0,  725,  184,  195,
  196,    0,  725,  103,  207,    0,    0,    0,    0,    0,
    0,    0,    0, 1645,    0,  725,  725,  725,  725,  725,
  725,    0,  213,    0,  169,    0,    0,    0, -129,    0,
    0,  719,    0,    0,    0,    0,    0,  222, -160,    0,
    0,    0,    0,    0,    0,    0,    0,  212,  147, 1129,
    0,    0,   60,   -7,    0,  235, -160, -247,    0,    0,
    0,    0,  -38,    0,   72,  249,    0,  234,    0,  236,
   -2,   -7, -160, 1541,  725,  215,   18,    0,    0,    0,
    0,  719,    0,    0,  238, 3625,    0,  263,    0, -247,
  725,  725, 3048, -179,  725, 3084,    7,  266,  268,    5,
    0,    0,    0,    0,    0,    0, -247,  725,    0,    0,
  725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
  725,  725,  725,    8,   98,    0,    0,    0,  725, 1442,
  725,   16,   41,  -18,  133,  274,   41,    0,   12,  279,
    0, -247,    0,   41,    0,    0,  287,  134,  298,    0,
 1161,  284,    0,    0, 3096,  725,  215,    8,  725,    8,
    0, 1221,  725,  725,  725,  725,  725,  725,  725,  725,
  725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
  725,  725,    0, 3169, 3180,    0,  308,  103,    0,   82,
   83, 3234,    0,  903,  725,  903,    0, 3297, 3625, 3625,
 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625,
 3386,  318,    0,    0,    0,  319,    0, 3414,  323,    0,
  320,  325,    0, 1221,    0,   41,    0,   41,  327,    0,
 1481,    0,  329,  725,    0,  725,  725, 3477,    0, 1442,
 3531,    0,    0,  330,    0,    0,   -5,   -5, 3542,  304,
  304,    0,    0, 3243, 3679, 1874,    0, 3653,  577,  206,
  206,   -5,   -5,  182,  182,  182,  246, 1442,   41,    0,
    0,    0, 1442,    0,    0,    0,    0,  725,    0,    0,
    0,  725,   41,   79, -160,  331,  333,    8, 1225, 3625,
    0,    0,    8, 3590,    0,    0,  334,    0,  725,  108,
    0,    0,  725,  -79,    0,    0,  337,    0,    0,    0,
  339,    0, -247,  259,    0,    0,    8,    8,    8,   79,
    0, 3625,    0,    0,  -26,   79,  324, 1442,  350, 1442,
 3625,  725,  335,  271,  -79, 1129,    0,  103,    0,    0,
 1283,    0,   79,   79,  338,    0, 1329,  340,    0,    0,
 1442,    0, 3625,  342,    0,    0,    0, 1025,    0,  110,
  361, 1129,  283,  -33,  -33,    0,    0,    0,    0,    0,
    0,    0,  725,  725,  285,    0,    0,    0,    0,    0,
  373,  375,    0,  358,  359,    0,    0,
};
final static short yyrindex[] = {                      1598,
    0,    0,    0, 1702,    0,    0,    0,    0,    0,    0,
 1702,    0,    0,   14,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
    0, 3480,    0,    0,   14,    0,    0,   28,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -116,  299,    0,
    0,  299,    0,    0,    0,    0,    0,    0, 2879,    0,
    0,    0,  -32,    0, 4183,    0,    0, 1772,    0,    0,
    0,    0,    0, 4183,    0, 4214, 4245,  296,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4020,    0, 4154,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  365,
  365,    0,    0,    0,    0,    0,    0,  365,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2573,    0, 2446,    0, 1767, 1886, 2750, 1829,
 1924,    0,    4, 1987,    0,    0,    0, 2141,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  301,
    0,    0, 2535,  489,    0,  -40,    0,    0,    0,    0,
    0,    0,  104,    0,    0,    0,    0,    0,    0,    0,
    0, 2632,    0,  365,    0,    0,    0,    0,    0,    0,
    0, 2995,    0,    0,    0,  368,    0, 1964,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  115,  116, 2691,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  390,  104,    0,    0,    0,    0,  390,    0,
    0,    0,  190,  104,    0,    0,  190,    0, 2082,  140,
    0,    0,    0,  190,    0,    0,    0,    0,    3,    0,
    0,    0,    0,    0,    0,    0, 2327, 2505,  390, 2505,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  686,
  848,    0,    0,    0,    0, 2387,    0,    0,  127,  496,
  503,  532,  585,  702, 1253, 1308, 1324, 1419, 1615, 1670,
  391,    0,    0,    0,    0,    0,    0,    0, 2023,    0,
  392,    0,    0,    0, 2902,  190,    0,  190,    0,    0,
    0,    0,    0,    0,    0,    0,  390,    0,    0,    0,
    0,    0,    0,    0,    0, 2937, 4040, 4068,    0, 3745,
 3773,    0,    0, 3110,  139, 2182,    0,  524,   69,  624,
 3922, 4091, 4150, 3858, 3946, 4014,    0,    0, 3938,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  390, 3938,  299,    0,    0,    0,  -42,    0,  152,
    0,    0,  -42,    0,    0,    0,    0,    0,  390,  967,
    0,    0,    0,  296,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   51,  -55,  -55,  365,
    0,  -20,    0,    0,    0,  365,    0,    0,    0,    0,
 1739,    0,    0,    0, 1387,    0,    0,    0,    0,    0,
  296,    0,  -25,  -25,    0,    0,    0,    0,    0,    0,
    0,    0,  376,    0,    0,    0,    0,  296,    0,    0,
  747,  296,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  390,  390,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0, -200,    0,    0,    0,    0,    0,  -69,   -4,
    0,  192,  242,  145,  316,  328, -113,    0,    0,  633,
  381,    0,    0,    0,   88,  -24, -192,   37, -174,    0,
    0,   17, -123,    6,  -35,    0,  369,    0,  -60,    0,
 -325,    0,    0,    0,  -47,  -83,    0,    0,    0,    0,
    0,    0,  -19,  150,    0, -140, -400,  -11, -167,    0,
  276,   -6,    0,    0, -186,   54,   84,    0,  443,    0,
    0,    0,  -21,    0,   87,    0,    0,    0,    0,    0,
    0,    0,    0,  389,    0,    0,    0,  170, -244,   85,
    0,  470,    0,  408,    0,   30,   63,  378,    0,   75,
    0,    0,  177,  228, -107,    0,    1,
};
final static int YYTABLESIZE=4609;
final static short yytable[] = {                         67,
    5,  257,  248,  273,   15,  193,  273,  273,  147,   91,
  218,   15,  349,  273,   38,   58,  273,  467,   63,  353,
   79,  346,  280,  115,   63,  497,   88,   29,  191,  109,
   38,  293,   47,  273,   63,   38,  288,  286,  252,  287,
   79,  289,  147,  163,  137,  316,   81,  137,   53,   57,
  252,  245,   62,  269,   43,    1,  336,  279,   16,    6,
  483,  163,  137,    7,  221,   76,   81,  273,   90,  255,
   44,   17,    7,  148,   76,    8,  214,  363,  175,  365,
  197,  495,  307,  251,   18,  268,  364,  101,  181,   78,
   88,  273,  308,   10,  273,  251,  177,  273,  466,  249,
  147,  406,  362,  407,  115,   48,   49,  148,  276,  257,
  189,  189,  257,    7,  465,  262,    7,  250,  209,   39,
  468,  196,    7,   40,  147,   59,  257,  257,   59,  193,
  263,  257,    7,    7,   59,   50,   41,  484,  485,  219,
  173,  262,    7,   51,   59,   59,    6,  273,   71,  493,
  217,   80,  174,  182,   59,  210,  335,   71,  366,  273,
   54,  257,  273,  183,  273,  148,  337,  260,  186,  415,
  260,   80,  187,  187,  173,    7,  262,  262,    7,  254,
  147,  452,  254,   73,  260,  260,  453,   59,   60,  148,
   59,  347,  355,  257,  274,   75,  254,  254,   73,   42,
  394,  254,  396,   65,   46,  229,  230,  440,  220,  431,
   75,   16,  446,   68,   70,  269,  269,  108,  293,  260,
  179,  244,  152,  288,  286,   78,  287,  194,  289,  210,
  273,  254,  173,  195,  211,  212,  462,  463,  464,  254,
  256,  273,  293,  334,  174,  148,  215,  288,  286,  334,
  287,  260,  289,  345,  273,  244,  152,  345,  227,  228,
  390,  243,  254,  254,  345,  284,  193,  283,  174,  150,
  246,  247,  303,  193,  253,  258,  420,  273,  269,  334,
  221,  222,  223,  224,  225,  226,  147,  147,  264,  317,
  147,   56,  265,  273,  266,  258,  281,   39,  217,  267,
  501,  502,  249,  150,  426,  276,  314,   56,  315,  429,
  248,  340,  173,  348,  152,  300,  301,  302,  147,  151,
  182,  258,  339,  147,  244,  350,  354,  221,  221,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  152,  351,
  293,  356,  359,  307,    7,  288,  345,  389,  345,  147,
  289,  148,  148,  151,  308,  148,   59,  418,  399,  400,
  405,  150,  402,  403,  470,  404,  472,  408,  424,  413,
  422,  438,  460,  439,  448,  433,  450,  458,  147,  459,
  147,  461,  469,  148,  257,  150,  147,  490,  148,  428,
  471,  147,  475,  153,  152,  476,  486,   63,  489,  491,
  494,  147,  334,  428,  436,  154,    7,  496,  147,  503,
  479,  151,  147,  504,  148,  505,  506,  507,   59,  418,
  273,  273,  173,  273,  457,  118,  235,  153,   11,   10,
  273,  204,   82,  272,  430,  151,  498,  498,  412,  154,
  436,  150,  488,  148,  478,  148,  436,  273,  178,  273,
  173,  148,  273,  254,  254,  173,  148,  273,  157,  395,
  392,  175,  273,  436,  436,  500,  148,  437,  273,  270,
  273,  492,  449,  148,   45,  427,  180,  148,  457,  273,
   19,  107,  175,  282,  477,  153,  391,  432,  190,  352,
    0,  151,  157,  334,  334,    7,  273,  154,    0,    0,
  152,  152,    0,    0,  152,    0,    0,   59,    0,  153,
  173,    0,  173,    0,    0,    0,    0,    0,  173,    0,
    0,  154,    0,  173,  298,  299,  300,  301,  302,    0,
  174,    0,  152,  173,    0,  174,  264,  152,    0,  264,
  173,    0,    0,  265,  173,    0,  265,  150,  150,  179,
  157,  150,  174,  264,  264,    0,  174,    0,    0,    0,
  265,  265,    0,  152,  256,  153,    0,  256,    0,    0,
    0,    0,  261,    0,  157,  261,    0,  154,    0,  150,
    0,  256,  256,    0,  150,    0,  256,    0,  264,  261,
  261,    0,  152,    0,  152,  265,    0,  151,  151,    0,
  152,  151,    0,    0,    0,  152,    0,    0,    0,    0,
  150,    0,    0,  293,  290,  152,  256,    0,  288,  286,
  264,  287,  152,  289,  261,  262,  152,  265,  262,  151,
  157,    0,    0,    0,  151,    0,  284,    0,  283,  150,
    0,  150,  262,  262,    0,    0,    0,  150,  256,    0,
    0,    0,  150,    0,    0,    0,  261,    0,    0,    0,
  151,  251,  150,    0,  251,    0,    0,  251,    0,  150,
  292,  153,  153,  150,    0,  153,    0,  262,    0,    0,
    0,  251,  251,  154,  154,    0,  251,  154,    0,  151,
    0,  151,    0,    0,    0,    0,    0,  151,    0,    0,
  291,    0,  151,  153,    0,    0,    0,    0,  153,  262,
    0,    0,  151,    0,    0,  154,  251,  251,  175,  151,
  154,    0,    0,  151,    0,  175,    0,    0,  175,    0,
  175,    0,    0,    0,  153,    0,  157,  157,    0,    0,
  157,    0,  263,    0,  175,  263,  154,  251,  251,    0,
  206,    0,    0,    0,    0,  213,    0,  136,    0,  263,
  263,    0,    0,  153,  134,  153,  216,  138,  157,  139,
    0,  153,    0,  157,    0,  154,  153,  154,    0,  231,
    0,    0,    0,  154,    0,    0,  153,    0,  154,    0,
    0,    0,  185,  153,  263,   22,    0,  153,  154,  157,
    0,    0,   22,    0,    0,  154,    0,  185,  175,  154,
  175,  175,  179,  179,  179,  179,  179,  179,  179,  179,
  179,  179,  179,  179,  179,    0,  263,  275,  157,    0,
  157,    0,    0,    0,    0,    0,  157,  185,  256,  256,
    0,  157,    0,  304,  305,    0,    0,  312,    0,    0,
  137,  157,    0,    0,  282,    0,    0,    0,  157,    0,
  318,    0,  157,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,    0,    0,    0,    0,    0,
  173,    0,    0,  338,    0,    0,    0,  173,    0,    0,
  173,  294,  173,  296,  297,  298,  299,  300,  301,  302,
    0,    0,    0,  358,    0,    0,  173,    0,  361,    0,
    0,    0,    0,    0,    0,  367,  368,  369,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  379,  380,  381,
  382,  383,  384,  385,  386,  136,    0,    0,  251,  251,
  251,  251,  134,  175,  175,  175,  175,    0,  175,    0,
  175,  175,  175,  175,  175,    0,  175,  175,  175,  175,
  175,    0,    0,    0,  175,    0,  175,    0,  175,  175,
  173,    0,  173,  173,  175,  175,    0,  175,  175,  175,
  175,  175,    0,  410,  175,    0,  414,  175,    0,    0,
  175,  175,  175,  175,  175,  175,  175,  175,  175,  143,
    0,    0,    0,    0,    0,    0,  143,  116,  117,  143,
    0,  143,    0,    0,    0,    0,  119,    0,    0,  122,
  175,  175,    0,    0,    0,  143,    0,    0,  137,  126,
  127,    6,  128,  129,  130,  131,  132,  133,    0,    0,
    0,  442,  232,  233,  234,  235,  236,  237,  238,  239,
  240,  241,  242,    0,    0,  451,    0,  136,    0,  140,
  141,    0,    0,    0,  134,    0,    0,  138,    0,  139,
  185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
  185,  185,  185,  135,  473,    0,    0,    0,    0,  143,
    0,  143,  143,    0,    0,    0,    0,    0,    0,  442,
    0,    0,    0,    0,    0,  173,  173,  173,  173,    0,
  173,    0,  173,  173,  173,  173,  173,    0,  173,    0,
  173,  173,  173,    0,    0,    0,  173,    0,  173,    0,
  173,  173,    0,    0,    0,    0,  173,  173,    0,  173,
  173,  173,  173,  173,    0,    0,  173,   78,    0,  173,
  137,    0,  173,  173,  173,  173,  173,  173,  173,  173,
  173,  136,    0,    0,    0,    0,    0,    0,  134,    0,
    0,  138,    0,  139,    0,    0,    0,    0,    0,    0,
    0,    0,  173,  173,    0,  116,  117,  135,    0,    0,
    0,    0,    0,  136,  119,    0,    0,  122,    0,    0,
  134,    0,    0,  138,    0,  139,    0,  126,  127,    6,
  128,  129,  130,  131,  132,  133,    0,    0,    0,  357,
    0,    0,    0,    0,  143,  143,  143,  143,    0,  143,
    0,  143,  143,  143,  143,    0,    0,  143,    0,  143,
  143,  143,    0,    0,    0,  143,    0,  143,    0,  143,
  143,   78,    0,    0,  137,  143,  143,  136,  143,  143,
  143,  143,  143,    0,  134,  143,    0,  138,  143,  139,
    0,  143,  143,  143,  143,  143,  143,  143,  143,  143,
    0,    0,   92,  110,   93,  452,  137,   94,    0,  111,
  453,  112,   95,  266,    0,  113,  266,   96,  114,  115,
    0,  143,  143,   97,    0,   98,    0,  116,  117,    0,
  266,  266,    0,  118,   99,  136,  119,  120,  121,  122,
  123,    0,  134,  124,    0,  138,  125,  139,    0,  126,
  127,    6,  128,  129,  130,  131,  132,  133,    0,    0,
    0,  135,    0,    0,    0,  266,    0,  409,  268,  441,
  137,  268,    0,    0,    0,    0,    0,    0,    0,  140,
  141,  136,    0,    0,  267,  268,  268,  267,  134,    0,
    0,  138,    0,  139,    0,    0,    0,  266,    0,    0,
    0,  267,  267,    0,    0,    0,   92,  110,   93,    0,
    0,   94,    0,  111,    0,  112,   95,    0,    0,  113,
  268,   96,  114,  115,    0,   78,    0,   97,  137,   98,
    0,  116,  117,    0,    0,    0,  267,  118,   99,  149,
  119,  120,  121,  122,  123,    0,  149,  124,    0,  149,
  125,  149,  268,  126,  127,    6,  128,  129,  130,  131,
  132,  133,    0,  116,  117,  149,    0,    0,  267,    0,
    0,  409,  119,  487,  137,  122,    0,    0,    0,  269,
    0,    0,  269,  140,  141,  126,  127,    6,  128,  129,
  130,  131,  132,  133,  136,    0,  269,  269,   92,    0,
   93,  134,    0,   94,  138,    0,  139,    0,   95,    0,
    0,    0,    0,   96,    0,  140,  141,    0,    0,   97,
  135,   98,    0,    0,    0,    0,    0,  116,  117,  149,
   99,  269,  149,  136,    0,    0,  119,    0,    0,  122,
  134,    0,    0,  138,    0,  139,    0,    6,    0,  126,
  127,    6,  128,  129,  130,  131,  132,  133,    0,    0,
   92,  110,   93,  269,    0,   94,    0,  111,    0,  112,
   95,    0,    0,  113,    0,   96,  114,  115,    0,  140,
  141,   97,    0,   98,   78,  116,  117,  137,    0,    0,
    0,  118,   99,  136,  480,  120,  121,  481,  123,    0,
  134,  124,    0,  138,  125,  139,    0,  126,  127,    6,
  128,  129,  130,  131,  132,  133,    0,  273,    0,    0,
    0,    0,    0,  409,    0,    0,  137,    0,    0,    0,
    0,  116,  117,    0,    0,    0,    0,  140,  141,    0,
  119,    0,    0,  122,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  126,  127,    6,  128,  129,  130,  131,
  132,  133,    0,    0,  149,  149,  149,    0,    0,  149,
    0,  149,    0,  149,  149,  270,  273,  149,  270,  149,
  149,  149,    0,  140,  141,  149,  137,  149,    0,  149,
  149,    0,  270,  270,    0,  149,  149,  136,  149,  149,
  149,  149,  149,    0,  134,  149,    0,  138,  149,  139,
    0,  149,  149,  149,  149,  149,  149,  149,  149,  149,
  110,  273,    0,    0,    0,    0,  111,  270,  112,    0,
  271,    0,    0,  271,    0,  114,  115,    0,    0,    0,
    0,  149,  149,    0,  116,  117,    0,  271,  271,    0,
  118,    0,    0,  119,  120,  121,  122,  123,    0,  270,
  124,    0,    0,  125,    0,    0,  126,  127,    6,  128,
  129,  130,  131,  132,  133,    0,    0,    0,    0,    0,
  273,    0,  271,  116,  117,    0,    0,    0,    0,    0,
  137,    0,  119,    0,    0,  122,  140,  141,    0,  258,
    0,    0,  258,    0,    0,  126,  127,    6,  128,  129,
  130,  131,  132,  133,  271,    0,  258,  258,   92,    0,
   93,    0,    0,   94,    0,    0,    0,  141,   95,    0,
  141,  113,  190,   96,    0,  140,  141,    0,    0,   97,
    0,   98,    0,  116,  117,  141,    0,  190,    0,    0,
   99,  258,  119,    0,    0,  122,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  126,  127,    6,  128,  129,
  130,  131,  132,  133,  273,    0,    0,  190,    0,    0,
    0,  273,    0,  258,    0,    0,    0,    0,  273,  139,
    0,    0,  139,    0,  273,  140,  141,  273,    0,  273,
    0,    0,    0,  273,  273,  273,    0,  139,  273,  217,
    0,  273,    0,    0,    0,  273,  273,    0,  273,    0,
    0,    0,   92,    0,   93,    0,    0,   94,    0,    0,
  293,  290,   95,    0,    0,  288,  286,   96,  287,    0,
  289,    0,    0,   97,    0,   98,  142,  116,  117,  142,
    0,  181,    0,  284,   99,  283,  119,    0,    0,  122,
    0,    0,    0,    0,  142,    0,  181,    0,    0,  126,
  127,    6,  128,  129,  130,  131,  132,  133,  273,    0,
    0,    0,    0,    0,  140,  273,    0,  140,    0,    0,
    0,    0,  273,    0,    0,    0,    0,    0,    0,  140,
  141,  273,  140,  273,  218,    0,    0,  273,  273,  273,
    0,    0,  273,    0,    0,  273,    0,    0,    0,  273,
  191,  191,  273,    0,  191,  191,  191,  191,  191,  191,
  191,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  191,  191,  191,  191,  191,  191,  138,    0,  273,
  138,  273,    0,    0,  273,  273,    0,    0,    0,  273,
    0,    0,    0,    0,  273,  138,    0,  222,    0,    0,
  273,    0,  273,    0,  191,    0,  191,  191,    0,  194,
  194,  273,    0,  194,  194,  194,  194,  194,  194,  194,
    0,  273,    0,    0,    0,    0,    0,    0,  273,    0,
  194,  194,  194,  194,  194,  194,    0,  191,  191,    0,
  190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
  190,  190,  190,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  194,    0,  194,  194,    0,  212,  212,
    0,    0,  212,  212,  212,  212,  212,  212,  212,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  212,
  212,  212,  212,  212,  212,    0,  194,  194,    0,    0,
    0,  282,  217,  217,  217,  217,  217,  217,  217,  217,
  217,  217,  217,  217,  217,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  212,  212,    0,  189,  189,    0,
    0,  189,  189,  189,  189,  189,  189,  189,    0,    0,
  296,  297,  298,  299,  300,  301,  302,    0,  189,  189,
  189,  189,  189,  189,  212,  212,  212,    0,    0,  181,
  181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
  181,  181,  255,    0,    0,  255,    0,    0,    0,    0,
    0,  189,    0,  189,  189,    0,    0,    0,    0,  255,
  255,  191,    0,    0,  255,    0,    0,  218,  218,  218,
  218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
    0,    0,    0,    0,  189,  189,    0,    0,    0,    0,
  191,    0,    0,    0,  255,  255,    0,  191,  191,  191,
  191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
  191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
  194,   30,    0,    0,    0,  255,  255,    0,    0,    0,
  222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
  222,    0,    0,    0,    0,    0,    0,    0,    0,  194,
    0,    0,    0,    0,    0,    0,  194,  194,  194,  194,
  194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
  194,  194,  194,  194,  194,  194,  194,  194,  194,  212,
    0,    0,    0,  209,  209,    0,    0,  209,  209,  209,
  209,  209,  209,  209,    0,    0,    0,    0,  212,    0,
    0,    0,    0,    0,  209,  209,  209,  209,  209,  209,
    0,    0,    0,    0,    0,    0,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  189,  209,
  209,    0,    0,  187,  187,   78,    0,  187,  187,  187,
  187,  187,  187,  187,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  187,  187,  187,  187,  187,  187,
  209,  209,    0,    0,    0,  189,  189,  189,  189,  189,
  189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
  189,  189,  189,  189,  189,  189,  189,  187,    0,  187,
  187,    0,  182,  182,    0,    0,  182,  182,  182,  182,
  182,  182,  182,    0,    0,    0,  255,  255,    0,   20,
    0,    0,    0,  182,  182,  182,  182,  182,  182,    0,
  187,  187,    0,   21,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   22,    0,    0,    0,   23,   24,
   25,    0,    0,   26,    0,    0,   27,    0,  182,  182,
   28,  273,  273,   29,    0,  273,  273,  273,  273,  273,
  273,  273,    0,    0,    0,    0,    0,    0,    0,   20,
    0,    0,  273,  273,  273,  273,  273,  273,    0,  182,
  182,    0,    0,   21,    0,    0,    0,    0,    0,    0,
  191,    0,    0,    0,   22,    0,    0,    0,   23,   24,
   25,    0,    0,   77,    0,  191,   27,  273,  273,    0,
   28,    0,    0,   29,  209,    0,    0,    0,    0,  216,
  216,    0,    0,  216,  216,  216,  216,  216,    0,  216,
    0,    0,    0,    0,    0,  191,    0,    0,  273,  273,
  216,  216,  216,  216,  216,  216,    0,    0,    0,    0,
  209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
  209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
  209,  209,  209,    0,  187,  216,  216,    0,  179,  179,
    0,    0,  179,  179,  179,  179,  179,    0,  179,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  179,
  179,  179,  179,  179,  179,    0,  216,  216,    0,    0,
    0,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  182,  179,  179,    0,  179,  179,    0,
    0,    0,  179,  179,    0,  179,    0,  179,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  179,  179,  179,  179,    0,  179,  179,    0,    0,    0,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  273,    0,  179,    0,  228,  228,    0,    0,
  228,  228,  228,  228,  228,    0,  228,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  228,  228,  228,
  228,  228,  228,    0,  179,    0,    0,    0,    0,  273,
  273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
  273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
  273,  191,  228,  228,    0,    0,    0,    0,  191,    0,
  216,    0,    0,    0,    0,    0,    0,    0,  191,  191,
  191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
  191,    0,    0,  228,  228,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  216,  216,  216,
  216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
  216,  216,  216,  216,  216,  216,  216,  216,  216,  179,
    0,    0,    0,    0,    0,   22,   22,    0,   22,   22,
   22,   22,   22,   22,    0,   22,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   22,   22,   22,    0,
   22,   22,   81,    0,    0,    0,  179,  179,  179,  179,
  179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
  179,  179,  179,  179,  179,  179,  179,  179,  179,   22,
    0,   22,   22,  250,  250,    0,    0,  250,  250,  250,
  250,  250,    0,  250,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  250,  250,  250,    0,  250,  250,
    0,   22,   22,   22,   22,  179,  179,  179,  179,  179,
  179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
  179,  179,  179,  179,  179,  179,  179,  228,    0,  250,
  250,  237,  237,    0,    0,  237,  237,  237,  237,  237,
    0,  237,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  237,  237,  237,    0,  237,  237,    0,    0,
  250,  250,    0,    0,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  293,  290,    0,  237,  237,  288,
  286,    0,  287,    0,  289,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  306,  284,    0,  283,
  285,    0,    0,    0,    0,    0,    0,    0,  237,  237,
  293,  290,    0,    0,  313,  288,  286,    0,  287,    0,
  289,    0,  293,  290,    0,    0,  360,  288,  286,    0,
  287,  292,  289,  284,    0,  283,  285,  253,    0,    0,
  253,    0,    0,  253,   22,  284,   22,  283,  285,   70,
    0,   70,    0,    0,   70,    0,    0,  253,  253,   70,
    0,  291,  253,    0,   70,    0,    0,  292,    0,    0,
   70,    0,   70,    0,    0,   22,    0,    0,    0,  292,
    0,   70,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,  253,  253,    0,  293,  290,  291,   70,  387,
  288,  286,    0,  287,  250,  289,  293,  290,    0,  291,
  388,  288,  286,    0,  287,    0,  289,    0,  284,    0,
  283,  285,    0,  253,  253,    0,    0,    0,    0,  284,
    0,  283,  285,    0,    0,    0,    0,    0,    0,    0,
   11,  250,  250,  250,  250,  250,  250,  250,  250,  250,
    0,    0,  292,    0,    0,    0,    0,    0,    0,    0,
  293,  290,  237,  292,  393,  288,  286,    0,  287,  293,
  289,    0,    0,    0,  288,  286,    0,  287,    0,  289,
    0,    0,  291,  284,    0,  283,  285,    0,    0,    0,
    0,    0,  284,  291,  283,    0,    0,    0,    0,  237,
  237,  237,  237,  237,  237,  237,  237,  237,    0,    0,
    0,    0,    0,    0,    0,  282,    0,  292,    0,    0,
    0,    0,    0,  293,  290,    0,    0,    0,  288,  286,
    0,  287,    0,  289,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  284,  291,  283,  285,
    0,  282,  294,  295,  296,  297,  298,  299,  300,  301,
  302,    0,    0,  282,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  397,
  292,    0,    0,    0,    0,    0,    0,    0,  294,  295,
  296,  297,  298,  299,  300,  301,  302,    0,    0,    0,
  294,  295,  296,  297,  298,  299,  300,  301,  302,    0,
  291,    0,  293,  290,  253,  253,    0,  288,  286,  398,
  287,    0,  289,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  284,  282,  283,  285,    0,
  293,  290,    0,    0,    0,  288,  286,  282,  287,    0,
  289,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  284,    0,  283,  285,    0,    0,  292,
    0,    0,    0,  294,  295,  296,  297,  298,  299,  300,
  301,  302,    0,    0,  294,  295,  296,  297,  298,  299,
  300,  301,  302,    0,    0,    0,  401,  292,    0,  291,
    0,  282,    0,  293,  290,    0,    0,    0,  288,  286,
  282,  287,    0,  289,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  419,  284,  291,  283,  285,
    0,    0,    0,    0,    0,    0,    0,    0,  294,  295,
  296,  297,  298,  299,  300,  301,  302,    0,    0,  296,
  297,  298,  299,  300,  301,  302,    0,  293,  290,    0,
  292,    0,  288,  286,  282,  287,    0,  289,  293,  290,
    0,    0,    0,  288,  286,    0,  287,    0,  289,    0,
  284,    0,  283,  285,    0,    0,    0,    0,    0,  423,
  291,  284,    0,  283,  285,    0,    0,    0,    0,    0,
    0,  294,  295,  296,  297,  298,  299,  300,  301,  302,
    0,    0,    0,  421,  292,    0,  293,  290,    0,    0,
  447,  288,  286,    0,  287,  292,  289,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  284,
    0,  283,  285,    0,  291,    0,    0,    0,    0,    0,
    0,  293,  290,  282,    0,  291,  288,  286,    0,  287,
    0,  289,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  292,  284,    0,  283,  285,    0,  293,
  290,  282,    0,    0,  288,  286,    0,  287,    0,  289,
  294,  295,  296,  297,  298,  299,  300,  301,  302,    0,
    0,    0,  284,  291,  283,  293,  290,    0,  292,    0,
  288,  286,    0,  287,    0,  289,    0,    0,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   55,  284,   55,
  283,    0,   55,   55,    0,    0,  292,   55,  291,    0,
    0,    0,   55,    0,  282,    0,    0,    0,   55,   55,
   55,    0,    0,    0,    0,    0,    0,    0,    0,   55,
    0,    0,  292,    0,    0,    0,  291,    0,    0,   55,
    0,    0,  241,    0,    0,  241,   55,  241,  241,  241,
    0,  294,  295,  296,  297,  298,  299,  300,  301,  302,
    0,    0,  241,  241,  241,    0,  241,  241,  282,    0,
  242,    0,    0,  242,    0,  242,  242,  242,    0,  282,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  242,  242,  242,    0,  242,  242,    0,  241,  241,    0,
    0,    0,    0,    0,    0,  294,  295,  296,  297,  298,
  299,  300,  301,  302,    0,    0,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  242,  242,  282,  241,  241,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  243,  242,  242,  243,    0,
    0,  243,  282,    0,  294,  295,  296,  297,  298,  299,
  300,  301,  302,    0,    0,  243,  243,  243,    0,  243,
  243,    0,    0,   20,    0,    0,    0,    0,    0,    0,
  282,    0,    0,    0,    0,    0,    0,   21,    0,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   22,    0,
  243,  243,   23,   24,   25,    0,  282,   26,    0,  252,
   27,    0,  252,    0,   28,  252,    0,   29,    0,  296,
  297,  298,  299,  300,  301,  302,    0,    0,    0,  252,
  252,  243,  243,  245,  252,    0,  245,    0,    0,  245,
    0,    0,    0,    0,    0,  296,  297,  298,  299,  300,
  301,  302,    0,  245,  245,  245,    0,  245,  245,    0,
    0,    0,    0,    0,  252,  252,    0,    0,    0,    0,
    0,    0,  241,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  245,  245,
    0,    0,    0,    0,    0,  252,  252,    0,    0,    0,
  242,  244,    0,    0,  244,    0,    0,  244,    0,  241,
  241,  241,  241,  241,  241,  241,  241,  241,    0,  245,
  245,  244,  244,  244,    0,  244,  244,  247,    0,    0,
  247,    0,    0,  247,    0,    0,    0,  242,  242,  242,
  242,  242,  242,  242,  242,  242,    0,  247,  247,  247,
    0,  247,  247,    0,    0,  246,  244,  244,  246,    0,
    0,  246,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  246,  246,  246,  248,  246,
  246,  248,  247,  247,  248,  243,    0,  244,  244,    0,
    0,    0,    0,    0,   46,    0,    0,    0,  248,  248,
  248,    0,  248,  248,    0,    0,    0,    0,    0,    0,
  246,  246,    0,  247,  247,    0,    0,    0,    0,    0,
    0,    0,  243,  243,  243,  243,  243,  243,  243,  243,
  243,    0,    0,  248,  248,    0,    0,  249,    0,    0,
  249,  246,  246,  249,    0,  273,    0,  273,    0,    0,
  273,    0,    0,    0,    0,  273,    0,  249,  249,  249,
  273,  249,  249,    0,  248,  248,  273,    0,  273,    0,
    0,    0,    0,  245,    0,    0,    0,  273,    0,    0,
    0,    0,    0,    0,    0,    0,  252,  252,  252,  252,
    0,    0,  249,  249,  273,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  245,  245,  245,  245,  245,  245,  245,  245,  245,    0,
    0,    0,    0,  249,  249,    0,    0,  273,   45,  273,
    0,    0,  273,  273,    0,    0,    0,  273,    0,    0,
    0,  244,  273,    0,    0,    0,    0,    0,  273,    0,
  273,    0,    0,    0,    0,    0,    0,  273,    0,  273,
    0,    0,    0,    0,    0,    0,    0,  247,    0,  273,
    0,    0,    0,    0,    0,    0,  273,    0,  244,  244,
  244,  244,  244,  244,  244,  244,  244,    0,  103,    0,
    0,    0,    0,    0,    0,  246,    0,    0,    0,    0,
    0,    0,    0,    0,  247,  247,  247,  247,  247,  247,
    0,    0,    0,    0,    0,    0,    0,    0,  248,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  246,  246,  246,  246,  246,  246,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  248,  248,  248,  248,  248,
  248,   56,    0,   56,    0,    0,   56,   56,    0,    0,
    0,   56,    0,    0,    0,    0,   56,  249,    0,    0,
    0,    0,   56,    0,   56,    0,    0,    0,    0,    0,
  273,    0,  273,   56,    0,  273,    0,    0,    0,    0,
  273,    0,    0,   56,    0,  273,    0,    0,    0,    0,
   56,  273,    0,  273,  249,  249,  249,  249,  249,  249,
    0,   56,  273,   56,    0,    0,   56,    0,    0,    0,
    0,   56,  273,    0,    0,    0,   56,    0,    0,  273,
    0,    0,   56,    0,   56,    0,    0,    0,    0,    0,
    0,   62,   62,   56,   62,    0,    0,   62,   62,    0,
    0,    0,   62,   56,    0,   62,    0,   62,    0,    0,
   56,    0,    0,   62,    0,   62,   62,    0,    0,    0,
   62,   62,   62,    0,   62,   62,    0,    0,   62,    0,
    0,    0,   62,    0,   62,   62,    0,   92,    0,   93,
    0,   62,   94,   43,    0,    0,    0,   95,    0,   92,
    0,   93,   96,    0,   94,    0,    0,    0,   97,   95,
   98,    0,    0,    0,   96,    0,    0,    0,    0,   99,
   97,    0,   98,    0,    0,    0,    0,    0,    0,  100,
    0,   99,    0,    0,    0,    0,  176,    0,    0,    0,
    0,  100,    0,    0,    0,    0,    0,    0,    6,
};
final static short yycheck[] = {                         60,
    0,   40,  170,   59,    4,   46,  123,  194,   78,   70,
  134,   11,  257,    0,   14,   51,   59,   44,   54,  264,
   68,   40,  197,   44,   60,   59,   59,    0,  112,   77,
   30,   37,   42,   59,   70,   35,   42,   43,   46,   45,
   88,   47,  112,   41,   41,   41,   68,   44,   48,   49,
   46,  159,   52,  194,  264,  285,  249,   40,   46,  307,
  461,   59,   59,    1,   61,   65,   88,  123,   68,  177,
  280,   59,   10,   78,   74,    1,  124,  278,   78,  280,
  116,  482,  262,   91,   10,  193,  279,   71,   88,  123,
  123,   41,  272,  277,   44,   91,   80,  123,  125,   40,
  170,  346,  277,  348,  125,   43,   44,  112,   91,   41,
  110,  111,   44,   51,  440,   44,   54,   58,  118,  307,
  446,  116,   60,   46,  194,   51,   58,   59,   54,  113,
   59,   63,   70,   71,   60,   59,   59,  463,  464,  134,
   78,   44,   80,  270,   70,   71,  307,   44,   65,   40,
  134,   68,   78,  314,   80,   46,   59,   74,  282,  276,
  270,   93,   59,  101,   61,  170,  250,   41,  106,  356,
   44,   88,  110,  111,  112,  113,   44,   44,  116,   41,
  250,  261,   44,   44,   58,   59,  266,  113,  276,  194,
  116,   59,   59,  125,  194,   44,   58,   59,   59,   30,
  314,   63,  316,  123,   35,  335,  336,  408,  134,  402,
   59,   46,  413,  123,   44,  356,  357,  125,   37,   93,
  125,  159,   78,   42,   43,  123,   45,   40,   47,   46,
   41,   93,  170,   40,   40,   40,  437,  438,  439,  177,
  178,  297,   37,  243,  170,  250,   40,   42,   43,  249,
   45,  125,   47,  253,  297,  193,  112,  257,   46,   91,
  308,   40,  124,  125,  264,   60,  307,   62,  194,   78,
   59,  125,  210,  314,   40,  314,  360,  264,  419,  279,
  136,  137,  138,  139,  140,  141,  356,  357,   40,  227,
  360,  264,   59,  280,   59,  314,   59,  307,  282,  302,
  493,  494,   40,  112,  388,   91,   41,  280,   41,  393,
  478,  271,  250,   40,  170,  321,  322,  323,  388,   78,
  314,  314,  307,  393,  262,  314,   40,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  194,   61,
   37,   44,   59,  262,  282,   42,  346,   40,  348,  419,
   47,  356,  357,  112,  272,  360,  282,  357,   41,   41,
  344,  170,   40,   44,  448,   41,  450,   41,  123,   41,
   41,   41,  433,   41,   41,  297,  269,   41,  448,   41,
  450,  123,   59,  388,  316,  194,  456,  471,  393,  389,
   41,  461,   58,   78,  250,  125,   59,  433,   59,   58,
   40,  471,  402,  403,  404,   78,  344,  125,  478,  125,
  458,  170,  482,   41,  419,   41,   59,   59,  344,  419,
  125,  123,  360,   59,  424,  125,   59,  112,  314,  314,
   41,   41,   41,   58,  398,  194,  484,  485,  351,  112,
  440,  250,  467,  448,  456,  450,  446,  258,   80,  260,
  388,  456,  263,  315,  316,  393,  461,  268,   78,  315,
  311,  461,  273,  463,  464,  485,  471,  405,  279,  194,
  281,  478,  419,  478,   32,  389,   88,  482,  478,  290,
   11,   74,  482,  278,  455,  170,  310,  403,  111,  262,
   -1,  250,  112,  493,  494,  433,  307,  170,   -1,   -1,
  356,  357,   -1,   -1,  360,   -1,   -1,  433,   -1,  194,
  448,   -1,  450,   -1,   -1,   -1,   -1,   -1,  456,   -1,
   -1,  194,   -1,  461,  319,  320,  321,  322,  323,   -1,
  456,   -1,  388,  471,   -1,  461,   41,  393,   -1,   44,
  478,   -1,   -1,   41,  482,   -1,   44,  356,  357,   61,
  170,  360,  478,   58,   59,   -1,  482,   -1,   -1,   -1,
   58,   59,   -1,  419,   41,  250,   -1,   44,   -1,   -1,
   -1,   -1,   41,   -1,  194,   44,   -1,  250,   -1,  388,
   -1,   58,   59,   -1,  393,   -1,   63,   -1,   93,   58,
   59,   -1,  448,   -1,  450,   93,   -1,  356,  357,   -1,
  456,  360,   -1,   -1,   -1,  461,   -1,   -1,   -1,   -1,
  419,   -1,   -1,   37,   38,  471,   93,   -1,   42,   43,
  125,   45,  478,   47,   93,   41,  482,  125,   44,  388,
  250,   -1,   -1,   -1,  393,   -1,   60,   -1,   62,  448,
   -1,  450,   58,   59,   -1,   -1,   -1,  456,  125,   -1,
   -1,   -1,  461,   -1,   -1,   -1,  125,   -1,   -1,   -1,
  419,   38,  471,   -1,   41,   -1,   -1,   44,   -1,  478,
   94,  356,  357,  482,   -1,  360,   -1,   93,   -1,   -1,
   -1,   58,   59,  356,  357,   -1,   63,  360,   -1,  448,
   -1,  450,   -1,   -1,   -1,   -1,   -1,  456,   -1,   -1,
  124,   -1,  461,  388,   -1,   -1,   -1,   -1,  393,  125,
   -1,   -1,  471,   -1,   -1,  388,   93,   94,   33,  478,
  393,   -1,   -1,  482,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,   -1,  419,   -1,  356,  357,   -1,   -1,
  360,   -1,   41,   -1,   59,   44,  419,  124,  125,   -1,
  118,   -1,   -1,   -1,   -1,  123,   -1,   33,   -1,   58,
   59,   -1,   -1,  448,   40,  450,  134,   43,  388,   45,
   -1,  456,   -1,  393,   -1,  448,  461,  450,   -1,   61,
   -1,   -1,   -1,  456,   -1,   -1,  471,   -1,  461,   -1,
   -1,   -1,   46,  478,   93,  307,   -1,  482,  471,  419,
   -1,   -1,  314,   -1,   -1,  478,   -1,   61,  123,  482,
  125,  126,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,   -1,  125,  195,  448,   -1,
  450,   -1,   -1,   -1,   -1,   -1,  456,   91,  315,  316,
   -1,  461,   -1,  211,  212,   -1,   -1,  215,   -1,   -1,
  126,  471,   -1,   -1,  278,   -1,   -1,   -1,  478,   -1,
  228,   -1,  482,  231,  232,  233,  234,  235,  236,  237,
  238,  239,  240,  241,  242,   -1,   -1,   -1,   -1,   -1,
   33,   -1,   -1,  251,   -1,   -1,   -1,   40,   -1,   -1,
   43,  315,   45,  317,  318,  319,  320,  321,  322,  323,
   -1,   -1,   -1,  271,   -1,   -1,   59,   -1,  276,   -1,
   -1,   -1,   -1,   -1,   -1,  283,  284,  285,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,   33,   -1,   -1,  315,  316,
  317,  318,   40,  258,  259,  260,  261,   -1,  263,   -1,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
  275,   -1,   -1,   -1,  279,   -1,  281,   -1,  283,  284,
  123,   -1,  125,  126,  289,  290,   -1,  292,  293,  294,
  295,  296,   -1,  351,  299,   -1,  354,  302,   -1,   -1,
  305,  306,  307,  308,  309,  310,  311,  312,  313,   33,
   -1,   -1,   -1,   -1,   -1,   -1,   40,  283,  284,   43,
   -1,   45,   -1,   -1,   -1,   -1,  292,   -1,   -1,  295,
  335,  336,   -1,   -1,   -1,   59,   -1,   -1,  126,  305,
  306,  307,  308,  309,  310,  311,  312,  313,   -1,   -1,
   -1,  409,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,   -1,   -1,  423,   -1,   33,   -1,  335,
  336,   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,   59,  452,   -1,   -1,   -1,   -1,  123,
   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,  467,
   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,
  263,   -1,  265,  266,  267,  268,  269,   -1,  271,   -1,
  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,   -1,
  283,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,  292,
  293,  294,  295,  296,   -1,   -1,  299,  123,   -1,  302,
  126,   -1,  305,  306,  307,  308,  309,  310,  311,  312,
  313,   33,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  335,  336,   -1,  283,  284,   59,   -1,   -1,
   -1,   -1,   -1,   33,  292,   -1,   -1,  295,   -1,   -1,
   40,   -1,   -1,   43,   -1,   45,   -1,  305,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,
   -1,  265,  266,  267,  268,   -1,   -1,  271,   -1,  273,
  274,  275,   -1,   -1,   -1,  279,   -1,  281,   -1,  283,
  284,  123,   -1,   -1,  126,  289,  290,   33,  292,  293,
  294,  295,  296,   -1,   40,  299,   -1,   43,  302,   45,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,   -1,  258,  259,  260,  261,  126,  263,   -1,  265,
  266,  267,  268,   41,   -1,  271,   44,  273,  274,  275,
   -1,  335,  336,  279,   -1,  281,   -1,  283,  284,   -1,
   58,   59,   -1,  289,  290,   33,  292,  293,  294,  295,
  296,   -1,   40,  299,   -1,   43,  302,   45,   -1,  305,
  306,  307,  308,  309,  310,  311,  312,  313,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   93,   -1,  123,   41,  125,
  126,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,
  336,   33,   -1,   -1,   41,   58,   59,   44,   40,   -1,
   -1,   43,   -1,   45,   -1,   -1,   -1,  125,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,  258,  259,  260,   -1,
   -1,  263,   -1,  265,   -1,  267,  268,   -1,   -1,  271,
   93,  273,  274,  275,   -1,  123,   -1,  279,  126,  281,
   -1,  283,  284,   -1,   -1,   -1,   93,  289,  290,   33,
  292,  293,  294,  295,  296,   -1,   40,  299,   -1,   43,
  302,   45,  125,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  283,  284,   59,   -1,   -1,  125,   -1,
   -1,  123,  292,  125,  126,  295,   -1,   -1,   -1,   41,
   -1,   -1,   44,  335,  336,  305,  306,  307,  308,  309,
  310,  311,  312,  313,   33,   -1,   58,   59,  258,   -1,
  260,   40,   -1,  263,   43,   -1,   45,   -1,  268,   -1,
   -1,   -1,   -1,  273,   -1,  335,  336,   -1,   -1,  279,
   59,  281,   -1,   -1,   -1,   -1,   -1,  283,  284,  123,
  290,   93,  126,   33,   -1,   -1,  292,   -1,   -1,  295,
   40,   -1,   -1,   43,   -1,   45,   -1,  307,   -1,  305,
  306,  307,  308,  309,  310,  311,  312,  313,   -1,   -1,
  258,  259,  260,  125,   -1,  263,   -1,  265,   -1,  267,
  268,   -1,   -1,  271,   -1,  273,  274,  275,   -1,  335,
  336,  279,   -1,  281,  123,  283,  284,  126,   -1,   -1,
   -1,  289,  290,   33,  292,  293,  294,  295,  296,   -1,
   40,  299,   -1,   43,  302,   45,   -1,  305,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,    0,   -1,   -1,
   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,   -1,
   -1,  283,  284,   -1,   -1,   -1,   -1,  335,  336,   -1,
  292,   -1,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,   -1,  258,  259,  260,   -1,   -1,  263,
   -1,  265,   -1,  267,  268,   41,   59,  271,   44,  273,
  274,  275,   -1,  335,  336,  279,  126,  281,   -1,  283,
  284,   -1,   58,   59,   -1,  289,  290,   33,  292,  293,
  294,  295,  296,   -1,   40,  299,   -1,   43,  302,   45,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  259,    0,   -1,   -1,   -1,   -1,  265,   93,  267,   -1,
   41,   -1,   -1,   44,   -1,  274,  275,   -1,   -1,   -1,
   -1,  335,  336,   -1,  283,  284,   -1,   58,   59,   -1,
  289,   -1,   -1,  292,  293,  294,  295,  296,   -1,  125,
  299,   -1,   -1,  302,   -1,   -1,  305,  306,  307,  308,
  309,  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   93,  283,  284,   -1,   -1,   -1,   -1,   -1,
  126,   -1,  292,   -1,   -1,  295,  335,  336,   -1,   41,
   -1,   -1,   44,   -1,   -1,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  125,   -1,   58,   59,  258,   -1,
  260,   -1,   -1,  263,   -1,   -1,   -1,   41,  268,   -1,
   44,  271,   46,  273,   -1,  335,  336,   -1,   -1,  279,
   -1,  281,   -1,  283,  284,   59,   -1,   61,   -1,   -1,
  290,   93,  292,   -1,   -1,  295,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  257,   -1,   -1,   91,   -1,   -1,
   -1,  264,   -1,  125,   -1,   -1,   -1,   -1,  271,   41,
   -1,   -1,   44,   -1,  277,  335,  336,  280,   -1,  282,
   -1,   -1,   -1,  286,  287,  288,   -1,   59,  291,   61,
   -1,  294,   -1,   -1,   -1,  298,  125,   -1,  301,   -1,
   -1,   -1,  258,   -1,  260,   -1,   -1,  263,   -1,   -1,
   37,   38,  268,   -1,   -1,   42,   43,  273,   45,   -1,
   47,   -1,   -1,  279,   -1,  281,   41,  283,  284,   44,
   -1,   46,   -1,   60,  290,   62,  292,   -1,   -1,  295,
   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,   -1,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  257,   -1,
   -1,   -1,   -1,   -1,   41,  264,   -1,   44,   -1,   -1,
   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,   -1,  335,
  336,  280,   59,  282,   61,   -1,   -1,  286,  287,  288,
   -1,   -1,  291,   -1,   -1,  294,   -1,   -1,   -1,  298,
   37,   38,  301,   -1,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   61,   62,   63,   41,   -1,  258,
   44,  260,   -1,   -1,  263,  264,   -1,   -1,   -1,  268,
   -1,   -1,   -1,   -1,  273,   59,   -1,   61,   -1,   -1,
  279,   -1,  281,   -1,   91,   -1,   93,   94,   -1,   37,
   38,  290,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,  300,   -1,   -1,   -1,   -1,   -1,   -1,  307,   -1,
   58,   59,   60,   61,   62,   63,   -1,  124,  125,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   61,   62,   63,   -1,  124,  125,   -1,   -1,
   -1,  278,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   94,   -1,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
  317,  318,  319,  320,  321,  322,  323,   -1,   58,   59,
   60,   61,   62,   63,  123,  124,  125,   -1,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   58,
   59,  278,   -1,   -1,   63,   -1,   -1,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,
  307,   -1,   -1,   -1,   93,   94,   -1,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  278,   59,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  307,
   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  278,
   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  278,   93,
   94,   -1,   -1,   37,   38,  123,   -1,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,
  124,  125,   -1,   -1,   -1,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,   91,   -1,   93,
   94,   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,  315,  316,   -1,  257,
   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,   -1,
  124,  125,   -1,  271,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,  286,  287,
  288,   -1,   -1,  291,   -1,   -1,  294,   -1,   93,   94,
  298,   37,   38,  301,   -1,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   58,   59,   60,   61,   62,   63,   -1,  124,
  125,   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,   -1,
   46,   -1,   -1,   -1,  282,   -1,   -1,   -1,  286,  287,
  288,   -1,   -1,  291,   -1,   61,  294,   93,   94,   -1,
  298,   -1,   -1,  301,  278,   -1,   -1,   -1,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,  124,  125,
   58,   59,   60,   61,   62,   63,   -1,   -1,   -1,   -1,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,   -1,  278,   93,   94,   -1,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   61,   62,   63,   -1,  124,  125,   -1,   -1,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  278,   93,   94,   -1,   37,   38,   -1,
   -1,   -1,   42,   43,   -1,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   63,   -1,  124,  125,   -1,   -1,   -1,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  278,   -1,   94,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,
   61,   62,   63,   -1,  124,   -1,   -1,   -1,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  307,   93,   94,   -1,   -1,   -1,   -1,  314,   -1,
  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  278,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   -1,
   62,   63,   41,   -1,   -1,   -1,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  278,   91,
   -1,   93,   94,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,
   -1,  123,  124,  125,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  278,   -1,   93,
   94,   37,   38,   -1,   -1,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,   -1,
  124,  125,   -1,   -1,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,   37,   38,   -1,   93,   94,   42,
   43,   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   -1,   62,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
   37,   38,   -1,   -1,   41,   42,   43,   -1,   45,   -1,
   47,   -1,   37,   38,   -1,   -1,   41,   42,   43,   -1,
   45,   94,   47,   60,   -1,   62,   63,   38,   -1,   -1,
   41,   -1,   -1,   44,  276,   60,  278,   62,   63,  258,
   -1,  260,   -1,   -1,  263,   -1,   -1,   58,   59,  268,
   -1,  124,   63,   -1,  273,   -1,   -1,   94,   -1,   -1,
  279,   -1,  281,   -1,   -1,  307,   -1,   -1,   -1,   94,
   -1,  290,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,   93,   94,   -1,   37,   38,  124,  307,   41,
   42,   43,   -1,   45,  278,   47,   37,   38,   -1,  124,
   41,   42,   43,   -1,   45,   -1,   47,   -1,   60,   -1,
   62,   63,   -1,  124,  125,   -1,   -1,   -1,   -1,   60,
   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,  278,   94,   41,   42,   43,   -1,   45,   37,
   47,   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,
   -1,   -1,  124,   60,   -1,   62,   63,   -1,   -1,   -1,
   -1,   -1,   60,  124,   62,   -1,   -1,   -1,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,
   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,  124,   62,   63,
   -1,  278,  315,  316,  317,  318,  319,  320,  321,  322,
  323,   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,
  317,  318,  319,  320,  321,  322,  323,   -1,   -1,   -1,
  315,  316,  317,  318,  319,  320,  321,  322,  323,   -1,
  124,   -1,   37,   38,  315,  316,   -1,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,  278,   62,   63,   -1,
   37,   38,   -1,   -1,   -1,   42,   43,  278,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   62,   63,   -1,   -1,   94,
   -1,   -1,   -1,  315,  316,  317,  318,  319,  320,  321,
  322,  323,   -1,   -1,  315,  316,  317,  318,  319,  320,
  321,  322,  323,   -1,   -1,   -1,   93,   94,   -1,  124,
   -1,  278,   -1,   37,   38,   -1,   -1,   -1,   42,   43,
  278,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,  124,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,
  317,  318,  319,  320,  321,  322,  323,   -1,   -1,  317,
  318,  319,  320,  321,  322,  323,   -1,   37,   38,   -1,
   94,   -1,   42,   43,  278,   45,   -1,   47,   37,   38,
   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,   -1,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   58,
  124,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
   -1,   -1,   -1,   93,   94,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   -1,   45,   94,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   -1,   62,   63,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,  278,   -1,  124,   42,   43,   -1,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   94,   60,   -1,   62,   63,   -1,   37,
   38,  278,   -1,   -1,   42,   43,   -1,   45,   -1,   47,
  315,  316,  317,  318,  319,  320,  321,  322,  323,   -1,
   -1,   -1,   60,  124,   62,   37,   38,   -1,   94,   -1,
   42,   43,   -1,   45,   -1,   47,   -1,   -1,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  258,   60,  260,
   62,   -1,  263,  264,   -1,   -1,   94,  268,  124,   -1,
   -1,   -1,  273,   -1,  278,   -1,   -1,   -1,  279,  280,
  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,
   -1,   -1,   94,   -1,   -1,   -1,  124,   -1,   -1,  300,
   -1,   -1,   38,   -1,   -1,   41,  307,   43,   44,   45,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
   -1,   -1,   58,   59,   60,   -1,   62,   63,  278,   -1,
   38,   -1,   -1,   41,   -1,   43,   44,   45,   -1,  278,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   60,   -1,   62,   63,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,  315,  316,  317,  318,  319,
  320,  321,  322,  323,   -1,   -1,  315,  316,  317,  318,
  319,  320,  321,  322,  323,   93,   94,  278,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   38,  124,  125,   41,   -1,
   -1,   44,  278,   -1,  315,  316,  317,  318,  319,  320,
  321,  322,  323,   -1,   -1,   58,   59,   60,   -1,   62,
   63,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  282,   -1,
   93,   94,  286,  287,  288,   -1,  278,  291,   -1,   38,
  294,   -1,   41,   -1,  298,   44,   -1,  301,   -1,  317,
  318,  319,  320,  321,  322,  323,   -1,   -1,   -1,   58,
   59,  124,  125,   38,   63,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,  317,  318,  319,  320,  321,
  322,  323,   -1,   58,   59,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
  278,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,   -1,  124,
  125,   58,   59,   60,   -1,   62,   63,   38,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,  315,  316,  317,
  318,  319,  320,  321,  322,  323,   -1,   58,   59,   60,
   -1,   62,   63,   -1,   -1,   38,   93,   94,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   38,   62,
   63,   41,   93,   94,   44,  278,   -1,  124,  125,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   58,   59,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   94,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,  316,  317,  318,  319,  320,  321,  322,
  323,   -1,   -1,   93,   94,   -1,   -1,   38,   -1,   -1,
   41,  124,  125,   44,   -1,  258,   -1,  260,   -1,   -1,
  263,   -1,   -1,   -1,   -1,  268,   -1,   58,   59,   60,
  273,   62,   63,   -1,  124,  125,  279,   -1,  281,   -1,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  290,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,  317,  318,
   -1,   -1,   93,   94,  307,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,  316,  317,  318,  319,  320,  321,  322,  323,   -1,
   -1,   -1,   -1,  124,  125,   -1,   -1,  258,  125,  260,
   -1,   -1,  263,  264,   -1,   -1,   -1,  268,   -1,   -1,
   -1,  278,  273,   -1,   -1,   -1,   -1,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,  290,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,  300,
   -1,   -1,   -1,   -1,   -1,   -1,  307,   -1,  315,  316,
  317,  318,  319,  320,  321,  322,  323,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  315,  316,  317,  318,  319,  320,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,  316,  317,  318,  319,  320,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  315,  316,  317,  318,  319,
  320,  258,   -1,  260,   -1,   -1,  263,  264,   -1,   -1,
   -1,  268,   -1,   -1,   -1,   -1,  273,  278,   -1,   -1,
   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,
  258,   -1,  260,  290,   -1,  263,   -1,   -1,   -1,   -1,
  268,   -1,   -1,  300,   -1,  273,   -1,   -1,   -1,   -1,
  307,  279,   -1,  281,  315,  316,  317,  318,  319,  320,
   -1,  258,  290,  260,   -1,   -1,  263,   -1,   -1,   -1,
   -1,  268,  300,   -1,   -1,   -1,  273,   -1,   -1,  307,
   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  290,  260,   -1,   -1,  263,  264,   -1,
   -1,   -1,  268,  300,   -1,  271,   -1,  273,   -1,   -1,
  307,   -1,   -1,  279,   -1,  281,  282,   -1,   -1,   -1,
  286,  287,  288,   -1,  290,  291,   -1,   -1,  294,   -1,
   -1,   -1,  298,   -1,  300,  301,   -1,  258,   -1,  260,
   -1,  307,  263,  264,   -1,   -1,   -1,  268,   -1,  258,
   -1,  260,  273,   -1,  263,   -1,   -1,   -1,  279,  268,
  281,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,  290,
  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,  300,
   -1,  290,   -1,   -1,   -1,   -1,  307,   -1,   -1,   -1,
   -1,  300,   -1,   -1,   -1,   -1,   -1,   -1,  307,
};
final static short YYFINAL=2;
final static short YYMAXTOKEN=336;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'","'&'",null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'","'?'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'","'^'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'","'|'","'}'","'~'",null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"ABSTRACT","BOOLEAN","BREAK",
"BYTE","CASE","CATCH","CHAR","CLASS","CONTINUE","DEFAULT","DO","DOUBLE","ELSE",
"EXTENDS","FINAL","FINALLY","FLOAT","FOR","IF","IMPLEMENTS","IMPORT",
"INSTANCEOF","INT","INTERFACE","LONG","NATIVE","NEW","_NULL","PACKAGE",
"PRIVATE","PROTECTED","PUBLIC","RETURN","SHORT","STATIC","SUPER","SWITCH",
"SYNCHRONIZED","THIS","THROW","THROWS","TRANSIENT","TRY","VOID","VOLATILE",
"WHILE","CONST","GOTO","TRUE","FALSE","IDENTIFIER","INT_LITERAL","LONG_LITERAL",
"FLOAT_LITERAL","DOUBLE_LITERAL","CHARACTER_LITERAL","STRING_LITERAL",
"EMPTY_DIM","CAND","COR","EQ","NE","LE","GE","LSHIFTL","ASHIFTR","LSHIFTR",
"PLUS_ASG","MINUS_ASG","MULT_ASG","DIV_ASG","REM_ASG","LSHIFTL_ASG",
"ASHIFTR_ASG","LSHIFTR_ASG","AND_ASG","XOR_ASG","OR_ASG","PLUSPLUS",
"MINUSMINUS",
};
final static String yyrule[] = null;
//#line 1301 "jparser.y"

protected void init(String filename) throws IOException {
  _filename = filename;
  _lexer = new Yylex(new FileInputStream(_filename));
}

protected int yylex()
{
  int retval;

  try {
    retval = _lexer.yylex();

    yylval = _lexer.getParserVal();

  } catch (IOException e) {

    throw new RuntimeException("lexical error");
  }

  return retval;
}

protected static final LinkedList cons(Object obj)
{
  return cons(obj, new LinkedList());
}

protected static final LinkedList cons(Object obj, LinkedList list)
{
  if ((obj != null) && (obj != AbsentTreeNode.instance)) {
     list.addFirst(obj);
  }

  return list;
}

protected static final LinkedList append(LinkedList list, Object obj)
{
  list.addLast(obj);

  return list;
}


protected static final Object appendLists(LinkedList list1, LinkedList list2)
{
  list1.addAll(list2);

  return list1;
}

/** Place to put the finished AST. */
protected CompileUnitNode _theAST;

public CompileUnitNode getAST() { return _theAST; }

protected void yyerror(String msg)
{
  throw new RuntimeException("parse error for " + _filename + ": " + msg);
}

/** An array type with given ELEMENTTYPE and DIMS dimensions.  When
 *  DIMS=0, equals ELEMENTTYPE.
 */
protected static TypeNode makeArrayType(TypeNode elementType, int dims)
{
  while (dims > 0) {
	   elementType = new ArrayTypeNode(elementType);
	   dims -= 1;
  }
  return elementType;
}

protected String _filename = null;
protected Yylex _lexer = null;
//#line 1740 "parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}



//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  char:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]+"");
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0) {
      try {
         yyval = (parserval) (val_peek(yym-1).clone());
      } catch (CloneNotSupportedException e) {
         yyerror("clone not supported");
      }
    } else {
      yyval = new parserval(0);
    }
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 204 "jparser.y"
{ _theAST = (CompileUnitNode) val_peek(0).obj; }
break;
case 2:
//#line 210 "jparser.y"
{ yyval.obj = new IntLitNode(val_peek(0).sval); }
break;
case 3:
//#line 212 "jparser.y"
{ yyval.obj = new LongLitNode(val_peek(0).sval); }
break;
case 4:
//#line 214 "jparser.y"
{ yyval.obj = new FloatLitNode(val_peek(0).sval); }
break;
case 5:
//#line 216 "jparser.y"
{ yyval.obj = new DoubleLitNode(val_peek(0).sval); }
break;
case 6:
//#line 218 "jparser.y"
{ yyval.obj = new BoolLitNode("true"); }
break;
case 7:
//#line 220 "jparser.y"
{ yyval.obj = new BoolLitNode("false"); }
break;
case 8:
//#line 222 "jparser.y"
{ yyval.obj = new CharLitNode(val_peek(0).sval); }
break;
case 9:
//#line 224 "jparser.y"
{ yyval.obj = new StringLitNode(val_peek(0).sval); }
break;
case 14:
//#line 245 "jparser.y"
{ yyval.obj = BoolTypeNode.instance; }
break;
case 15:
//#line 247 "jparser.y"
{ yyval.obj = CharTypeNode.instance; }
break;
case 16:
//#line 249 "jparser.y"
{ yyval.obj = ByteTypeNode.instance; }
break;
case 17:
//#line 251 "jparser.y"
{ yyval.obj = ShortTypeNode.instance; }
break;
case 18:
//#line 253 "jparser.y"
{ yyval.obj = IntTypeNode.instance; }
break;
case 19:
//#line 255 "jparser.y"
{ yyval.obj = FloatTypeNode.instance; }
break;
case 20:
//#line 257 "jparser.y"
{ yyval.obj = LongTypeNode.instance; }
break;
case 21:
//#line 259 "jparser.y"
{ yyval.obj = DoubleTypeNode.instance; }
break;
case 22:
//#line 267 "jparser.y"
{ yyval.obj = new TypeNameNode((NameNode) val_peek(0).obj); }
break;
case 23:
//#line 272 "jparser.y"
{ yyval.obj = new ArrayTypeNode((TypeNode) val_peek(1).obj); }
break;
case 24:
//#line 281 "jparser.y"
{ yyval.obj = new CompileUnitNode((TreeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj);  }
break;
case 25:
//#line 286 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 26:
//#line 288 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 27:
//#line 293 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 28:
//#line 295 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 29:
//#line 301 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 30:
//#line 303 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 31:
//#line 305 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 36:
//#line 323 "jparser.y"
{ yyval.obj = new ImportNode((NameNode) val_peek(1).obj); }
break;
case 37:
//#line 328 "jparser.y"
{ yyval.obj = new ImportOnDemandNode((NameNode) val_peek(3).obj); }
break;
case 38:
//#line 340 "jparser.y"
{ yyval.obj = new ClassDeclNode(val_peek(5).ival, (NameNode) val_peek(3).obj, (TreeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj,
         (LinkedList) val_peek(0).obj); }
break;
case 39:
//#line 355 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 40:
//#line 357 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 41:
//#line 365 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 42:
//#line 367 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 43:
//#line 376 "jparser.y"
{
     yyval.obj = val_peek(1).obj; /* in the original, an ABSENT tree is added*/
   }
break;
case 44:
//#line 382 "jparser.y"
{ }
break;
case 45:
//#line 384 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 47:
//#line 390 "jparser.y"
{ yyval.obj = appendLists((LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 49:
//#line 399 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 50:
//#line 401 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 51:
//#line 403 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 52:
//#line 406 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 53:
//#line 409 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 54:
//#line 417 "jparser.y"
{
      Modifier.checkFieldModifiers(val_peek(3).ival);
	     LinkedList result = new LinkedList();

      LinkedList varDecls = (LinkedList) val_peek(1).obj;
      ListIterator itr = varDecls.listIterator(0);

	     while (itr.hasNext()) {
		     DeclaratorNode decl = (DeclaratorNode) itr.next();
		     result = cons(new FieldDeclNode(val_peek(3).ival,
						            makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
						            decl.getName(), decl.getInitExpr()),
				               result);
		   }

      yyval.obj = result;
   }
break;
case 55:
//#line 443 "jparser.y"
{ }
break;
case 56:
//#line 445 "jparser.y"
{ yyval.ival = Modifier.NO_MOD; }
break;
case 57:
//#line 449 "jparser.y"
{ yyval.ival = val_peek(0).ival; }
break;
case 58:
//#line 451 "jparser.y"
{
     yyval.ival = (val_peek(1).ival | val_peek(0).ival);
		  if ((val_peek(1).ival & val_peek(0).ival) != 0) {
		     yyerror("repeated modifier");
     }
   }
break;
case 59:
//#line 462 "jparser.y"
{ yyval.ival = Modifier.PUBLIC_MOD; }
break;
case 60:
//#line 464 "jparser.y"
{ yyval.ival = Modifier.PROTECTED_MOD;  }
break;
case 61:
//#line 466 "jparser.y"
{ yyval.ival = Modifier.PRIVATE_MOD;  }
break;
case 62:
//#line 469 "jparser.y"
{ yyval.ival = Modifier.STATIC_MOD;  }
break;
case 63:
//#line 471 "jparser.y"
{ yyval.ival = Modifier.FINAL_MOD;  }
break;
case 64:
//#line 474 "jparser.y"
{ yyval.ival = Modifier.ABSTRACT_MOD;  }
break;
case 65:
//#line 476 "jparser.y"
{ yyval.ival = Modifier.NATIVE_MOD;  }
break;
case 66:
//#line 478 "jparser.y"
{ yyval.ival = Modifier.SYNCHRONIZED_MOD;  }
break;
case 67:
//#line 481 "jparser.y"
{ yyval.ival = Modifier.TRANSIENT_MOD;  }
break;
case 68:
//#line 483 "jparser.y"
{ yyval.ival = Modifier.VOLATILE_MOD;  }
break;
case 69:
//#line 489 "jparser.y"
{ yyval.ival = Modifier.FINAL_MOD;  }
break;
case 70:
//#line 491 "jparser.y"
{ yyval.ival = Modifier.NO_MOD;  }
break;
case 71:
//#line 502 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 72:
//#line 504 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj, (LinkedList) val_peek(2).obj); }
break;
case 73:
//#line 509 "jparser.y"
{ yyval.obj = new DeclaratorNode(val_peek(0).ival, (NameNode) val_peek(1).obj, AbsentTreeNode.instance); }
break;
case 74:
//#line 511 "jparser.y"
{ yyval.obj = new DeclaratorNode(val_peek(2).ival, (NameNode) val_peek(3).obj, (ExprNode) val_peek(0).obj); }
break;
case 77:
//#line 527 "jparser.y"
{
     Modifier.checkMethodModifiers(val_peek(8).ival);
	    yyval.obj = new MethodDeclNode(val_peek(8).ival, (LinkedList) val_peek(4).obj, makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival),
			                        (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj, (TreeNode) val_peek(0).obj); }
break;
case 78:
//#line 533 "jparser.y"
{
     Modifier.checkMethodModifiers(val_peek(8).ival);
	    yyval.obj = new MethodDeclNode(val_peek(8).ival, (LinkedList) val_peek(4).obj, makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival),
                             (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj, (TreeNode) val_peek(0).obj);
   }
break;
case 79:
//#line 542 "jparser.y"
{ yyval.obj = VoidTypeNode.instance; }
break;
case 80:
//#line 550 "jparser.y"
{ }
break;
case 81:
//#line 552 "jparser.y"
{ yyval.obj = new LinkedList();  }
break;
case 82:
//#line 557 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 83:
//#line 559 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 84:
//#line 564 "jparser.y"
{
       yyval.obj = new ParameterNode(val_peek(3).ival, makeArrayType((TypeNode) val_peek(2).obj, val_peek(0).ival),
             (NameNode) val_peek(1).obj);
     }
break;
case 85:
//#line 574 "jparser.y"
{ }
break;
case 86:
//#line 576 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 87:
//#line 581 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 88:
//#line 586 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 89:
//#line 588 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 91:
//#line 597 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 92:
//#line 606 "jparser.y"
{
       Modifier.checkConstructorModifiers(val_peek(9).ival);
	      yyval.obj = new ConstructorDeclNode(val_peek(9).ival, val_peek(8).sval, (LinkedList) val_peek(6).obj, (LinkedList) val_peek(4).obj,
             (TreeNode) val_peek(2).obj, new BlockNode((LinkedList) val_peek(1).obj));
     }
break;
case 93:
//#line 613 "jparser.y"
{
       Modifier.checkConstructorModifiers(val_peek(8).ival);
	      yyval.obj = new ConstructorDeclNode(val_peek(8).ival, val_peek(7).sval, (LinkedList) val_peek(5).obj, (LinkedList) val_peek(3).obj,
					    new SuperConstructorCallNode(new LinkedList()),
					    new BlockNode((LinkedList) val_peek(1).obj));
	    }
break;
case 94:
//#line 627 "jparser.y"
{ yyval.obj = new ThisConstructorCallNode((LinkedList) val_peek(2).obj); }
break;
case 95:
//#line 629 "jparser.y"
{ yyval.obj = new SuperConstructorCallNode((LinkedList) val_peek(2).obj); }
break;
case 96:
//#line 637 "jparser.y"
{ yyval.obj = new StaticInitNode((BlockNode) val_peek(0).obj); }
break;
case 97:
//#line 642 "jparser.y"
{ yyval.obj = new InstanceInitNode((BlockNode) val_peek(0).obj); }
break;
case 98:
//#line 650 "jparser.y"
{ yyval.obj = new InterfaceDeclNode(val_peek(4).ival, (NameNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 99:
//#line 662 "jparser.y"
{ }
break;
case 100:
//#line 664 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 101:
//#line 669 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 102:
//#line 676 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 103:
//#line 681 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 104:
//#line 683 "jparser.y"
{ yyval.obj = appendLists((LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 106:
//#line 689 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 107:
//#line 694 "jparser.y"
{
     Modifier.checkConstantFieldModifiers(val_peek(3).ival);
     LinkedList varDecls = (LinkedList) val_peek(1).obj;
     ListIterator itr = varDecls.listIterator(0);

	    LinkedList result = new LinkedList();

	    while (itr.hasNext()) {
		    DeclaratorNode decl = (DeclaratorNode) itr.next();
		    result = cons(new FieldDeclNode(val_peek(3).ival, makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
						           decl.getName(), decl.getInitExpr()),
				              result);
		  }

	    yyval.obj = result;
	  }
break;
case 108:
//#line 715 "jparser.y"
{ Modifier.checkMethodSignatureModifiers(val_peek(8).ival);
	      yyval.obj = new MethodDeclNode(val_peek(8).ival | Modifier.ABSTRACT_MOD, (LinkedList) val_peek(4).obj,
				       makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival),
				       (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj, AbsentTreeNode.instance); }
break;
case 109:
//#line 721 "jparser.y"
{
        Modifier.checkMethodSignatureModifiers(val_peek(8).ival);
	      yyval.obj = new MethodDeclNode(val_peek(8).ival | Modifier.ABSTRACT_MOD, (LinkedList) val_peek(4).obj,
				       makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival), (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj,
              AbsentTreeNode.instance); }
break;
case 110:
//#line 734 "jparser.y"
{ yyval.obj = new ArrayInitNode((LinkedList) val_peek(1).obj); }
break;
case 111:
//#line 736 "jparser.y"
{ yyval.obj = new ArrayInitNode((LinkedList) val_peek(2).obj); }
break;
case 112:
//#line 738 "jparser.y"
{ yyval.obj = new ArrayInitNode(new LinkedList()); }
break;
case 113:
//#line 744 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 114:
//#line 746 "jparser.y"
{ yyval.obj = append((LinkedList) val_peek(2).obj, val_peek(0).obj); }
break;
case 117:
//#line 761 "jparser.y"
{ yyval.obj = new BlockNode((LinkedList) val_peek(1).obj); }
break;
case 118:
//#line 765 "jparser.y"
{ }
break;
case 119:
//#line 767 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 120:
//#line 772 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 121:
//#line 774 "jparser.y"
{ yyval.obj = appendLists((LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 122:
//#line 779 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 123:
//#line 781 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 124:
//#line 790 "jparser.y"
{
       LinkedList varDecls = (LinkedList) val_peek(1).obj;
       LinkedList result = new LinkedList();

       ListIterator itr = varDecls.listIterator();

	    while (itr.hasNext()) {
		  DeclaratorNode decl = (DeclaratorNode) itr.next();
		  result = cons(new VarDeclNode(Modifier.FINAL_MOD,
                       makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
                       decl.getName(), decl.getInitExpr()), result);
       }
       yyval.obj = result;
     }
break;
case 125:
//#line 805 "jparser.y"
{
       LinkedList varDecls = (LinkedList) val_peek(1).obj;
       LinkedList result = new LinkedList();

       ListIterator itr = varDecls.listIterator();

	    while (itr.hasNext()) {
		  DeclaratorNode decl = (DeclaratorNode) itr.next();
		  result = cons(new VarDeclNode(Modifier.NO_MOD,
                       makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
                       decl.getName(), decl.getInitExpr()), result);
		}
       yyval.obj = result;
     }
break;
case 128:
//#line 827 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 134:
//#line 839 "jparser.y"
{ yyval.obj = new EmptyStmtNode(); }
break;
case 135:
//#line 847 "jparser.y"
{ yyval.obj = new LabeledStmtNode((NameNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 136:
//#line 855 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 137:
//#line 857 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 138:
//#line 859 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 139:
//#line 861 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 140:
//#line 863 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 141:
//#line 865 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 142:
//#line 867 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 143:
//#line 875 "jparser.y"
{ yyval.obj = new IfStmtNode((ExprNode) val_peek(2).obj, (TreeNode) val_peek(0).obj, AbsentTreeNode.instance); }
break;
case 144:
//#line 877 "jparser.y"
{ yyval.obj = new IfStmtNode((ExprNode) val_peek(4).obj, (TreeNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 145:
//#line 879 "jparser.y"
{ yyval.obj = new SwitchNode((ExprNode) val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 146:
//#line 884 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 147:
//#line 888 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 148:
//#line 890 "jparser.y"
{ yyval.obj = cons(new SwitchBranchNode((LinkedList) val_peek(2).obj, (LinkedList) val_peek(1).obj),
               (LinkedList) val_peek(0).obj); }
break;
case 149:
//#line 896 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 150:
//#line 898 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 151:
//#line 903 "jparser.y"
{ yyval.obj = new CaseNode((TreeNode) val_peek(1).obj); }
break;
case 152:
//#line 905 "jparser.y"
{ yyval.obj = new CaseNode(AbsentTreeNode.instance); }
break;
case 153:
//#line 912 "jparser.y"
{ yyval.obj = new LoopNode(new EmptyStmtNode(), (ExprNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 154:
//#line 914 "jparser.y"
{ yyval.obj = new LoopNode((TreeNode) val_peek(5).obj, (ExprNode) val_peek(2).obj, new EmptyStmtNode()); }
break;
case 155:
//#line 916 "jparser.y"
{ yyval.obj = new ForNode((LinkedList) val_peek(5).obj, (ExprNode) val_peek(4).obj,
      (LinkedList) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 156:
//#line 919 "jparser.y"
{ yyval.obj = new ForNode((LinkedList) val_peek(4).obj, new BoolLitNode("true"), (LinkedList) val_peek(2).obj,
      (TreeNode) val_peek(0).obj); }
break;
case 157:
//#line 925 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 158:
//#line 927 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 159:
//#line 931 "jparser.y"
{ }
break;
case 160:
//#line 933 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 161:
//#line 937 "jparser.y"
{ }
break;
case 162:
//#line 939 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 163:
//#line 944 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 164:
//#line 946 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 165:
//#line 954 "jparser.y"
{ yyval.obj = new BreakNode((TreeNode) val_peek(1).obj); }
break;
case 166:
//#line 956 "jparser.y"
{ yyval.obj = new ContinueNode((TreeNode) val_peek(1).obj); }
break;
case 167:
//#line 958 "jparser.y"
{ yyval.obj = new ReturnNode((TreeNode) val_peek(1).obj); }
break;
case 168:
//#line 960 "jparser.y"
{ yyval.obj = new ThrowNode((ExprNode) val_peek(1).obj); }
break;
case 169:
//#line 965 "jparser.y"
{ }
break;
case 170:
//#line 967 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 171:
//#line 975 "jparser.y"
{ yyval.obj = new SynchronizedNode((ExprNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 172:
//#line 977 "jparser.y"
{ yyval.obj = new TryNode((BlockNode) val_peek(1).obj, new LinkedList(), (TreeNode) val_peek(0).obj); }
break;
case 173:
//#line 979 "jparser.y"
{ yyval.obj = new TryNode((BlockNode) val_peek(1).obj, (LinkedList) val_peek(0).obj, AbsentTreeNode.instance); }
break;
case 174:
//#line 981 "jparser.y"
{ yyval.obj = new TryNode((BlockNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, (TreeNode) val_peek(0).obj); }
break;
case 175:
//#line 986 "jparser.y"
{ yyval.obj = cons (val_peek(0).obj); }
break;
case 176:
//#line 988 "jparser.y"
{ yyval.obj = cons (val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 177:
//#line 993 "jparser.y"
{ yyval.obj = new CatchNode((ParameterNode) val_peek(2).obj, (BlockNode) val_peek(0).obj); }
break;
case 178:
//#line 998 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 179:
//#line 1009 "jparser.y"
{ yyval.obj = new ObjectNode((NameNode) val_peek(0).obj); }
break;
case 184:
//#line 1021 "jparser.y"
{ yyval.obj = new NullPntrNode(); }
break;
case 185:
//#line 1023 "jparser.y"
{ yyval.obj = new ThisNode(); }
break;
case 186:
//#line 1025 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 187:
//#line 1027 "jparser.y"
{ yyval.obj = new ObjectNode((NameNode) val_peek(1).obj); }
break;
case 189:
//#line 1030 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 191:
//#line 1040 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 193:
//#line 1046 "jparser.y"
{ yyval.obj = new NameNode(AbsentTreeNode.instance, val_peek(0).sval); }
break;
case 194:
//#line 1051 "jparser.y"
{ yyval.obj = new NameNode((NameNode) val_peek(2).obj, val_peek(0).sval); }
break;
case 195:
//#line 1059 "jparser.y"
{ yyval.obj = new ArrayAccessNode(new ObjectNode((NameNode) val_peek(3).obj), (ExprNode) val_peek(1).obj); }
break;
case 196:
//#line 1061 "jparser.y"
{ yyval.obj = new ArrayAccessNode((ExprNode) val_peek(3).obj, (ExprNode) val_peek(1).obj); }
break;
case 197:
//#line 1070 "jparser.y"
{ yyval.obj = new ObjectFieldAccessNode((TreeNode) val_peek(2).obj, (NameNode) val_peek(0).obj); }
break;
case 198:
//#line 1072 "jparser.y"
{ yyval.obj = new SuperFieldAccessNode((NameNode) val_peek(0).obj); }
break;
case 199:
//#line 1080 "jparser.y"
{ yyval.obj = new MethodCallNode((NameNode) val_peek(3).obj, (LinkedList) val_peek(1).obj); }
break;
case 200:
//#line 1082 "jparser.y"
{ yyval.obj = new MethodCallNode((TreeNode) val_peek(3).obj, (LinkedList) val_peek(1).obj); }
break;
case 201:
//#line 1085 "jparser.y"
{ yyval.obj = new MethodCallNode(new NameNode((NameNode) val_peek(5).obj, val_peek(3).sval), (LinkedList) val_peek(1).obj); }
break;
case 202:
//#line 1089 "jparser.y"
{  }
break;
case 203:
//#line 1091 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 204:
//#line 1096 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 205:
//#line 1098 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 206:
//#line 1106 "jparser.y"
{ yyval.obj = new AllocateNode((TypeNode) val_peek(3).obj, (LinkedList) val_peek(1).obj); }
break;
case 207:
//#line 1108 "jparser.y"
{ yyval.obj = new AllocateArrayNode((TypeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, val_peek(0).ival); }
break;
case 208:
//#line 1110 "jparser.y"
{ yyval.obj = new AllocateArrayNode((TypeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, val_peek(0).ival); }
break;
case 209:
//#line 1115 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 210:
//#line 1117 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 211:
//#line 1122 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 212:
//#line 1126 "jparser.y"
{ }
break;
case 213:
//#line 1128 "jparser.y"
{ yyval.ival = 0; }
break;
case 214:
//#line 1133 "jparser.y"
{ yyval.ival = 1; }
break;
case 215:
//#line 1135 "jparser.y"
{ yyval.ival = val_peek(1).ival + 1; }
break;
case 219:
//#line 1149 "jparser.y"
{ yyval.obj = new PostIncrNode((ExprNode) val_peek(1).obj); }
break;
case 220:
//#line 1154 "jparser.y"
{ yyval.obj = new PostDecrNode((ExprNode) val_peek(1).obj); }
break;
case 223:
//#line 1164 "jparser.y"
{ yyval.obj = new UnaryPlusNode((ExprNode) val_peek(0).obj); }
break;
case 224:
//#line 1166 "jparser.y"
{ yyval.obj = new UnaryMinusNode((ExprNode) val_peek(0).obj); }
break;
case 226:
//#line 1172 "jparser.y"
{ yyval.obj = new PreIncrNode((ExprNode) val_peek(0).obj); }
break;
case 227:
//#line 1177 "jparser.y"
{ yyval.obj = new PreDecrNode((ExprNode) val_peek(0).obj); }
break;
case 229:
//#line 1183 "jparser.y"
{ yyval.obj = new ComplementNode((ExprNode) val_peek(0).obj); }
break;
case 230:
//#line 1185 "jparser.y"
{ yyval.obj = new NotNode((ExprNode) val_peek(0).obj); }
break;
case 232:
//#line 1191 "jparser.y"
{ yyval.obj = new CastNode((TypeNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 233:
//#line 1193 "jparser.y"
{ yyval.obj = new CastNode((TypeNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 234:
//#line 1195 "jparser.y"
{ yyval.obj = new CastNode(new TypeNameNode((NameNode) val_peek(2).obj), (ExprNode) val_peek(0).obj); }
break;
case 235:
//#line 1206 "jparser.y"
{ }
break;
case 236:
//#line 1208 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 238:
//#line 1214 "jparser.y"
{ yyval.obj = new MultNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 239:
//#line 1216 "jparser.y"
{ yyval.obj = new DivNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 240:
//#line 1218 "jparser.y"
{ yyval.obj = new RemNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 241:
//#line 1220 "jparser.y"
{ yyval.obj = new PlusNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 242:
//#line 1222 "jparser.y"
{ yyval.obj = new MinusNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 243:
//#line 1224 "jparser.y"
{ yyval.obj = new LeftShiftLogNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 244:
//#line 1226 "jparser.y"
{ yyval.obj = new RightShiftLogNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 245:
//#line 1228 "jparser.y"
{ yyval.obj = new RightShiftArithNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 246:
//#line 1230 "jparser.y"
{ yyval.obj = new LTNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 247:
//#line 1232 "jparser.y"
{ yyval.obj = new GTNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 248:
//#line 1234 "jparser.y"
{ yyval.obj = new LENode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 249:
//#line 1236 "jparser.y"
{ yyval.obj = new GENode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 250:
//#line 1238 "jparser.y"
{ yyval.obj = new InstanceOfNode((ExprNode) val_peek(2).obj, (TypeNode) val_peek(0).obj); }
break;
case 251:
//#line 1240 "jparser.y"
{ yyval.obj = new EQNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 252:
//#line 1242 "jparser.y"
{ yyval.obj = new NENode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 253:
//#line 1244 "jparser.y"
{ yyval.obj = new BitAndNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 254:
//#line 1246 "jparser.y"
{ yyval.obj = new BitOrNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 255:
//#line 1248 "jparser.y"
{ yyval.obj = new BitXorNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 256:
//#line 1250 "jparser.y"
{ yyval.obj = new CandNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 257:
//#line 1252 "jparser.y"
{ yyval.obj = new CorNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 258:
//#line 1254 "jparser.y"
{ yyval.obj = new IfExprNode((ExprNode) val_peek(4).obj, (ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 260:
//#line 1263 "jparser.y"
{ yyval.obj = new AssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 261:
//#line 1265 "jparser.y"
{ yyval.obj = new MultAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 262:
//#line 1267 "jparser.y"
{ yyval.obj = new DivAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 263:
//#line 1269 "jparser.y"
{ yyval.obj = new RemAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 264:
//#line 1271 "jparser.y"
{ yyval.obj = new PlusAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 265:
//#line 1273 "jparser.y"
{ yyval.obj = new MinusAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 266:
//#line 1275 "jparser.y"
{ yyval.obj = new LeftShiftLogAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 267:
//#line 1277 "jparser.y"
{ yyval.obj = new RightShiftLogAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 268:
//#line 1279 "jparser.y"
{ yyval.obj = new RightShiftArithAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 269:
//#line 1281 "jparser.y"
{ yyval.obj = new BitAndAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 270:
//#line 1283 "jparser.y"
{ yyval.obj = new BitXorAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 271:
//#line 1285 "jparser.y"
{ yyval.obj = new BitOrAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
//#line 2901 "parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



}
//################### END OF CLASS yaccpar ######################
