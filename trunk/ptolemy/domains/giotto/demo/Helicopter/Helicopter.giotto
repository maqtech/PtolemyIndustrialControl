sensor 	// Sensor ports	
	c_int initDir uses initDir_impl;      // initial direction of uav
	gps_msg_t gps uses gps_impl;          // most recent GPS message
	ins_msg_t ins uses ins_impl;          // most recent INS message
	c_bool isEnabled uses isEnabled_impl; // boolean port true iff control is enabled(1:actuate mode, 0:estimate mode)
	waypoint_t waypoint uses waypoint_impl;// double[4] most recent waypoint(x,y,z and heading)

actuator // Actuator port
	controls_t servos uses servos_impl;	// servomotor (main collective and cyclic,tail collective)
	controls_t servosDirect uses servosDirect_impl;

output 	// Task output ports
	position_t position := init_position;	// double[6] position estimate(x,y,x and Euler angles)
	position_t firstpos := init_position;	// double[6] first position used in control task 
	controls_t controls := init_controls;	// double[4] results of control law, used to update 'servos'

	//Task declarations
task	systemup(c_int initDir_insysup) output() state()
	{
		schedule systemup_impl(initDir_insysup)
	}

task	filter(gps_msg_t gps_infltr, ins_msg_t ins_infltr, position_t position_infltr) output(position, firstpos) state()
	{
		schedule filter_impl(gps_infltr, ins_infltr, position_infltr, position, firstpos)
	}

task	control(gps_msg_t gps_inctrl, ins_msg_t ins_inctrl, position_t position_inctrl, waypoint_t waypoint_inctrl, position_t firstpos_inctrl) output(position, controls) state()
	{
		schedule control_impl(gps_inctrl, ins_inctrl, position_inctrl, waypoint_inctrl, firstpos_inctrl, position, controls)
	}

task	tcpFilter(gps_msg_t gps_intcp, ins_msg_t ins_intcp, position_t position_intcp, c_bool isEnabled_intcp) output() state()
	{
		schedule tcpFilter_impl(gps_intcp, ins_intcp, position_intcp, isEnabled_intcp)
	}

task	tcpControl(gps_msg_t gps_intcp, ins_msg_t ins_intcp, position_t position_intcp, waypoint_t waypoint_intcp, position_t firstpos_intcp, controls_t controls_intcp, c_bool isEnabled_intcp) output() state()
	{
		schedule tcpControl_impl(gps_intcp, ins_intcp, position_intcp, waypoint_intcp, firstpos_intcp, controls_intcp, isEnabled_intcp)
	}

	// Driver declarations
	// Input driver for systemup task
driver	systemup_driver(initDir) output(c_int initDir_insysup)
	{
		if c_true() then systemup_driver_impl(initDir, initDir_insysup)
	}

	// Input driver for filter task
driver	filter_driver(gps, ins, position) output(gps_msg_t gps_infltr, ins_msg_t ins_infltr, position_t position_infltr)
	{
		if c_true() then filter_driver_impl(gps, ins, position, gps_infltr, ins_infltr, position_infltr)
	}

	// Input driver for control task
driver  control_driver(gps, ins, position, waypoint, firstpos) output(gps_msg_t gps_inctrl, ins_msg_t ins_inctrl, position_t position_inctrl, waypoint_t waypoint_inctrl, position_t firstpos_inctrl)
	{
		if c_true() then control_driver_impl(gps, ins, position, waypoint, firstpos, gps_inctrl, ins_inctrl, position_inctrl, waypoint_inctrl, firstpos_inctrl)
	}

	// Input driver for tcpFilter task
driver	tcpFilter_driver(gps, ins, position, isEnabled) output(gps_msg_t gps_intcp, ins_msg_t ins_intcp, position_t position_intcp, c_bool isEnabled_intcp)
	{
		if c_true() then tcpFilter_driver_impl(gps, ins, position, isEnabled, gps_intcp, ins_intcp, position_intcp, isEnabled_intcp)
	}

	// Input driver for tcpControl task
driver	tcpControl_driver(gps, ins, position, waypoint, firstpos, controls, isEnabled) output(gps_msg_t gps_intcp, ins_msg_t ins_intcp, position_t position_intcp, waypoint_t waypoint_intcp, position_t firstpos_intcp, controls_t controls_intcp, c_bool isEnabled_intcp)
	{
		if c_true() then tcpControl_driver_impl(gps, ins, position, waypoint, firstpos, controls, isEnabled, gps_intcp, ins_intcp, position_intcp, waypoint_intcp, firstpos_intcp, controls_intcp, isEnabled_intcp)
	}

	// Actuator driver
driver	servos_driver(controls) output(controls_t controls_inservos) 
	{
		if c_true() then servos_driver_impl(controls, controls_inservos)
	}

	// Mode switch driver
driver	init_switch() output()
	{
		if c_init_true() then init_switch_impl()
	}

driver	actuate_switch(isEnabled) output() 
	{
		if c_Enabled_true(isEnabled) then actuate_switch_impl()
	}

driver	estimate_switch(isEnabled) output()
	{
		if c_Enabled_false(isEnabled) then estimate_switch_impl()
	}

	// Mode declarations
start	initialize
	{
		mode initialize() period 1000
		{
			exitfreq 1 do estimate(init_switch);
			taskfreq 1 do systemup(systemup_driver);
		}
		mode estimate() period 1000
		{
			actfreq 50 do servosDirect(servos_driver);
			exitfreq 1 do actuate(actuate_switch);
			taskfreq 100 do filter(filter_driver);
			taskfreq 5 do tcpFilter(tcpFilter_driver);
		}
		mode actuate() period 1000 
		{
			actfreq 50 do servos(servos_driver);
			exitfreq 1 do estimate(estimate_switch);
			taskfreq 100 do control(control_driver);
			taskfreq 5 do tcpControl(tcpControl_driver);
		}
	}
