<!-- $Id$ -->
<!-- Important README: If this file has a suffix of .html then do >
<!-- not edit. Instead, edit the corresponding .txt file and run >
<!-- the JDK1.2 HTML converter                                    >
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title><I>Add your own title, removing the &lt;I&gt; ... &lt;/I&gt; </I></title>
<!-- fix this path, then remove this comment -->
<link href="../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<H1><I>CSP Hardware Bus Contention Demo </I></H1>
<P>
The following applet uses the Ptolemy II CSP domain to model resource
contention. The model serves as an example of how the CSP model of
computation can deal with determinacy using time.
<P>
The applet consists of a controller, three processors and a memory block. 
At randomly selected points in time, each processor can request permission 
from the controller to access the memory. The processors each have priorities 
associated with them and in cases where there is a simultaneous memory 
access request, the controller grants permission to the processor with the 
highest priority. 
<P>
All communication between actors in a CSP model of computation occurs via
<I>rendezvous</I>. Rendezvous is an atomic form of communication. Because 
of the atomic nature of rendezvous, it is impossible for the controller in
this demo to check priorities of incoming requests at the same time that 
requests are occuring. To overcome this difficulty, an alarm is employed. 
The alarm is started by the controller immediately following the first 
request for memory access. It is awakened when a delay block occurs to 
indicate to the controller that no more memory requests will occur at the 
given point in time. Hence, the alarm uses CSP's notion of centralized time 
to make deterministic an inherently non-deterministic activity. 
<P>
In the applet below, each of the initially blue processors (the circular 
nodes) can be in one of three states. The color yellow indicates that a 
processor is in state 1 and is awaiting the controller to give it permission 
to access memory. The color green indicates that a processor has been granted 
permission to access memory. The color red indicates that the processor has
been denied memory access. 
<P>
 <!-- All of the controls of the applet should be visible when the
applet is displayed on a XGA screen-->
<center>
<applet name="BusContentionApplet"
   archive="ptolemy/domains/csp/guidemo/BusContentionDemo.jar, diva/diva.jar,
	ptolemy/domains/csp/csp.jar, ptolemy/ptsupport.jar"
   code=ptolemy.domains.csp.guidemo.BusContentionApplet.class
   codebase=../../../..
   width=500 height=100>
<param name="background" value="#faf0e6">
<I>If you were able to run applets, you would have a demo here.</I>
</applet>
</center>
<P>
This applet consists of four types of actors:
<UL>
    <LI><A HREF="../lib/CSPMemory.java">CSPMemory.java</A>
    <LI><A HREF="../lib/CSPProcessor.java">CSPProcessor.java</A>
    <LI><A HREF="../lib/CSPController.java">CSPController.java</A>
    <LI><A HREF="../lib/CSPContentionAlarm.java">CSPContentionAlarm.java</A>
</UL>
The applet code is implemented via two classes:
<UL>
    <LI>
    <A HREF="./BusContentionApplet.java">BusContentionApplet.java</A>
    <LI>
    <A HREF="./BusContentionApplication.java">BusContentionApplication.java</A>
</UL>

<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
</body>
</html>
