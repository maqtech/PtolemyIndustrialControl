Synchronization Notes:
This domain observes a hierarchy of synchronization locks. When multiple 
synchronization locks are required, they must be obtained in an order that 
is consistent with this hierarchy. Adherence to this hierarchical ordering
ensures that deadlock can not occur due to circular lock dependencies.

The following synchronization hierarchy is utilized: 

	1. read/write access on the workspace 
        2. synchronization on the receiver 
        3. synchronization on the director 
        4. synchronization on the actor
        5. (other) synchronization on the workspace
        
We say that lock #1 is at the highest level in the hierarchy and lock #5
is at the lowest level.

As an example, a method that synchronizes on a receiver can not contain 
read/write access on the workspace; such accesses must occur outside of 
the receiver synchronization. Similarly, a method which synchronizes on a 
director must not synchronize on the receiver or contain read/write 
accesses on the workspace; it can contain synchronizations on actors or
the workspace. 

The justification of the chosen ordering of this hierarchy is based on
the access a method has to the fields of its object versus the fields of
other objects. The more (less) a method focuses on the internal state of 
its object and non-synchronized methods of external objects, the lower 
(higher) the method is placed in the synchronization hierarchy. In the 
case of read/write access on the workspace, the corresponding methods, 
i.e, getReadAccess() and getWriteAccess(), access the current thread 
running in the JVM. This external access deems these methods as being at 
the top of the hierarchy. All other synchronizations on the workspace only 
focus on the internal state of the workspace and hence are at the bottom 
of the synchronization hierarchy.
