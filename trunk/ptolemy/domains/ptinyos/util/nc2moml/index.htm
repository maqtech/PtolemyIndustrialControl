<!-- $Id$ -->
<html>
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
    <title>nc2moml</title>
  </head>
  <body>
    <h1>nc2moml</h1> 

    <p> <a href="http://www.tinyos.net#in_browser" target="_top">TinyOS</a> is an
    event-driven operating system designed for sensor network nodes
    that have very limited resources (e.g., 8K bytes of program
    memory, 512 bytes of RAM).  TinyOS, is used, for example, on the
    Berkeley MICA motes, which are small wireless sensor nodes.  <a
    href="httP://nescc.sourceforge.net#in_browser" target="_top">nesC</a> is an
    extension to the C programming language designed to embody the
    structuring concepts and execution model of TinyOS.

    <p>nc2moml is used to convert nesC files (.nc) into <a
    href="http://ptolemy.eecs.berkeley.edu/publications/papers/00/moml#in_browser" target="_top">MoML</a>
    (.moml) files.  This will create the Ptolemy II libraries of
    components that are used to assemble models.  TinyOS provides a
    rich library of nesC components. If you install TinyOS 1.x in
    <code>$PTII/vendors/ptinyos/tinyos-1.x</code> , then the Ptolemy
    II configure script will find it and automatically make the TinyOS
    libraries available.

    <h2>Installation notes</h2>

    These installation instructions assume that you already have
    Ptolemy II installed, and that if you are running on Windows, you
    already have Cygwin installed.  These instructions also assume
    that you have neither the nesC compiler nor TinyOS installed
    already.  If you wish to use pre-existing installations, please
    set up the environment variables described in the steps below to
    point to the proper directories.

    <BLOCKQUOTE>

      <h3>Using preexisting installations of TinyOS 1.x and nesC (v1.2.2 or later)</h3>
      <ol>
        <li>If you already have TinyOS 1.x and nesC (version 1.2.2 or
        later, from CVS or a .tar.gz distribution) and the AVR tools
        installed, try:

          <pre>
cd $PTII
mkdir -p vendors/ptinyos
cd $PTII/vendors/ptinyos
ln -s <I>location_of_your_tinyos-1.x_tree</I> tinyos-1.x
ln -s <I>location_of_your_nesc_tree</I> nesc
          </pre>
        </li>
        
        <li>Proceed to the step to <a href="#environmentVariables">Set up the
        necessary environment variables</a> below.

        <li>You may skip the step for configuring and installing the
        TinyOS nesC tools.

        <li>Proceed to the step to <a href="#unzip">Run the script
        that will unzip the file that contains additional compiler
        flags</a> and follow the rest of the instuctions to running
        <CODE>nc2moml</CODE>.
      </ol>

    </BLOCKQUOTE>

    <h2>How to install nc2moml</h2>
    
    <ol>
      <li>You must install the following AVR tools:
        <ul>
          <li> avarice
          <li> avr-binutils
          <li> avr-gcc
          <li> avr-insight
          <li> avr-libc
        </ul>
        <p>

          Note: If the files below do not work for you, you can try
          using the latest files (although these have not been tested
          with Viptos yet): <a
          href="http://www.tinyos.net/dist-1.2.0/tools"
          target="_top"><code>
          http://www.tinyos.net/dist-1.2.0/tools</code></a>.


        <p>
        Choose and follow the appropriate directions for your operating system:
        <ul>
          <li> If you are running Windows XP or Windows 2000, you can either:
            <ul>
              <li> Download WinAVR
   	       <ol> 
                  <li>Go to 
                    <a href="http://sourceforge.net/project/showfiles.php?group_id=68108#in_browser" target="_top"><code>http://sourceforge.net/project/showfiles.php?group_id=68108</code></a>              
                  <li>Download
<a href="http://prdownloads.sourceforge.net/winavr/WinAVR-20040404-bin-install.exe?download" target="_top"><code>WinAVR-20040404-bin-install.exe</code></a>
                  <br><b>Note:</b> Do <b>not</b> install 
		  <code>WinAVR-20050214-install.exe</code>, as of 10/05,
		  it will not work.  When converting .nc files to .moml files,
		  you will see messages about avr-gcc not being able to find
		  cc1.  Instead, install
		  <code>WinAVR-20040404-bin-install.exe</code>.
                  <li>Install Winavr in any directory, <code>C:\WinAVR</code>
		  is preferred.
                    <i>FIXME: Directories with spaces in the pathname might not work?</i>
                  <li>Under Windows with WinAVR-20040404, we had to copy 
		  <code>c:/cygwin/usr/local/lib/ncc/</code> to
		  <code>c:/usr/local/lib/ncc/</code>:
		  <pre>
		  mkdir -p c:/usr/local/lib
		  cd c:/usr/local/lib
		  cp -r /usr/local/lib/ncc .
		  </pre>
		  The reason is that Cygwin mounts directories under
		  </code>c:/cygwin</code> and the WinAVR binaries don't
		  know how to handle that.
                </ol>
            </ul>
            Or
            <ul>

              <li> Download the <a
              href="http://webs.cs.berkeley.edu/tos/dist-1.1.0/tinyos/windows/tinyos-1.1.0-1is.exe">TinyOS
              Installshield Wizard</a>.  Run the wizard, and choose
              "Custom" install.  Install only the AVR tools.  This
              will install all of the rpms below for you. <b>Do not
              choose the "cygwin" install option (it will overwrite
              and corrupt your current cygwin installation) or the
              "TinyOS" install option (you will install this later
              from CVS as a separate step).</b> You may choose to
              install the other remaining options if you do not
              already have them installed on your system.  The wizard
              will install all of the selected rpms for you.  JavaCOMM
              is not needed if you are not planning on using the
              TinyOS java tools (these are not needed for Viptos).
            </ul>
            Or
            <ul>
              <li> <b>If your Cygwin is installed so your 'Default
              Text File Type' is Unix</b>, download the following rpms
              to an empty directory:

	      <br><b>Note</b>: If your Cygwin installation has
	      'Default Text File Type' of Unix instead of DOS, then
	      you will likely have 
	      <a href="http://www.gigascale.org/softdevel/faq/23.html#in_browser"
	      target="_top">Cygwin CR/NL problems</a> with CVS.
	
             <p><B>Installing the rpms under Cygwin is not recommended</B>,
		it causes include file problems later.
	      <li> FIXME the list below is old, we should try:
	      <a href="http://www.tinyos.net/dist-1.2.0/tools/"><code>http://www.tinyos.net/dist-1.2.0/tools/</code></a>

             <ul>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avarice-2.0.20030825cvs-1w.cygwin.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avarice-2.0.20030825cvs-1w.cygwin.i386.rpm</a>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-binutils-2.13.2.1-1w.cygwin.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-binutils-2.13.2.1-1w.cygwin.i386.rpm</a>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-gcc-3.3tinyos-1w.cygwin.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-gcc-3.3tinyos-1w.cygwin.i386.rpm</a>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-insight-pre6.0cvs.tinyos-1w.cygwin.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-insight-pre6.0cvs.tinyos-1w.cygwin.i386.rpm</a>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-libc-20030512cvs-1w.cygwin.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-libc-20030512cvs-1w.cygwin.i386.rpm</a>
                </ul>
                and install them on the cygwin command line by typing:
                
                <pre>rpm --ignoreos -ivh *.rpm</pre> 

                in the directory where you saved the files.
		
		 <p>If you get a message about checksum errors, complain
		to the TinyOS authors and then reinstall Cygwin with 
		<CODE>Unix</CODE> line endings.
 <p><I>Note to tinyos developers:  Unix line endings are not the right choice for naive Windows users.  </I>

		 <p>If you get
		<pre>
		bash-3.00$ rpm --ignoreos -ivh *.rpm
		error: Failed dependencies:
		/bin/sh is needed by make-3.80tinyos-1
		/bin/sh is needed by mspgcc-win32tinyos-20041204-2
	        bash-3.00$
		</pre>
		Then try 
		<pre>
		rpm --ignoreos --nodeps -ivh *.rpm
		</pre>

</I>
</BLOCKQUOTE>


                <p>
                  The rpms are also available
                  <a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/#in_browser" target="_top">here</a>.  
            </ul>

          <li> If you are running Linux (Redhat 9), download the rpms from
          <a
          href="http://webs.cs.berkeley.edu/tos/dist-1.1.0/tools/linux#in_browser" target="_top">here</a>.  More convenient links are included here:
            <ul>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/linux/avarice-2.0.20030825cvs-1.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/linux/avarice-2.0.20030825cvs-1.i386.rpm</a>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/linux/avr-binutils-2.13.2.1-1.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/linux/avr-binutils-2.13.2.1-1.i386.rpm</a>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/linux/avr-gcc-3.3tinyos-1.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/linux/avr-gcc-3.3tinyos-1.i386.rpm</a>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/linux/avr-insight-pre6.0cvs.tinyos-1.3.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/linux/avr-insight-pre6.0cvs.tinyos-1.3.i386.rpm</a>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/linux/avr-libc-20030512cvs-1.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/linux/avr-libc-20030512cvs-1.i386.rpm</a>
            </ul>
            and install them on the cygwin command line with 
            <pre>rpm -ivh *.rpm</pre> 
            in the directory where you saved the files.
        </ul>

        (The directions above were modified from the
	 <a href="http://webs.cs.berkeley.edu/tos/download.html#in_browser" target="_top">original TinyOS installation directions</a>).



      <li>Make a directory into which to store the source code for
      TinyOS and nesC, for example:
        <pre>
    mkdir -p $PTII/vendors/ptinyos
        </pre>
	Note that <CODE>$PTII</CODE> should not have spaces in it.
        
      <li> You can either get nesC <a href="#nesCfromtargz">from the .tar.gz distribution (v1.2.2 or later)</a> or <a href="#nesCfromCVS">from CVS</a>.

    <h3><a name="nesCfromtargz">Getting nesC from a .tar.gz distribution</a></h3>
    <ol> 
      <li>Download the <a href="http://prdownloads.sourceforge.net/nescc/nesc-1.2.2.tar.gz?download#in_browser">nesc-1.2.2.tar.gz</a> or later version.
        
      <li> Unzip and untar the nesc .tar.gz file:
        <pre>
cd $PTII/vendors/ptinyos
gunzip nesc-1.2.2.tar.gz
tar xvf nesc-1.2.2.tar  
        </pre>
        This should create a directory called <code>nesc</code>.

      <li><a href="#configurenesC">Skip ahead</a> to the step to configure nesC.
    </ol>


    <h3><a name="nesCfromCVS">Getting nesC from CVS</a></h3>

    The nesC compiler can be downloaded and compiled from source,
    which requires an impressive suite of tools.  These instructions
    ask you to first verify that you have the necessary programs
    installed, then to install the AVR tools, followed by TinyOS, then
    nesC.

    <p>Under Linux or Cygwin, you must have the following programs
      installed on your system:

    <ul> 
      <li> autoconf 2.50 or later 
      <li> bison 
      <li> emacs 
      <li> emacs-el 
      <li> gperf 
      <li> perl 
      <li> rpm 
    </ul>
        
    <p>For help with how to install these in Cygwin, see the <a
    href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/install.htm#cygwin">Ptolemy
    II Cygwin Instructions</a>.  Note that most installations will not
    have gperf on them, at least, so you will likely need to install
    at least that.</p>

    <ol>
      <li> Get the nesC CVS Tree, see <a
          href="http://sourceforge.net/cvs/?group_id=56288#in_browser" target="_top"><CODE>http://sourceforge.net/cvs/?group_id=56288</CODE></a>

        <pre>
cd $PTII/vendors/ptinyos
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/nescc login
<i>Hit Enter when prompted for a password</i>
cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/nescc co nesc
        </pre>

      <li> Boostrap nesC 
        <pre>
cd $PTII/vendors/ptinyos/nesc
./Bootstrap
        </pre>
    </ol>


    <li><a name="configurenesC">Configure nesc:</a>
      <pre>
./configure
      </pre>

      By default, this configuration will cause nesC to be installed
      in <code>/usr/local</code>.  We assume that
      <code>/usr/local/bin</code> is in your path.  If you wish to
      install in a different directory, run <code>./configure
      --prefix=&lt;MYDIR&gt;</code> instead and add the
      <code>bin</code> directory to your path.
    </li>

    <li>Install nesc:
      <pre>
make
make install
      </pre>
      
    </li>
      
    <li>If you have mote hardware, you can also install the
    appropriate cross compiler tools (AVR for mica), though this step
    is not necessary if you are only planning on running in
    simulation: <a href="http://www.tinyos.net/dist-1.2.0/tools#in_browser"
    target="_top"><code>
    http://www.tinyos.net/dist-1.2.0/tools</code></a>.
    </li>

    <li> We have put into the TinyOS makefiles a rule that you can run
    to create all the TinyOS libraries in one step. To use this, as of
    this writing, you need to get TinyOS from the CVS repository
    rather than getting the packaged install version. To do this,
    type:
      
      <pre>
cd $PTII/vendors/ptinyos
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/tinyos login
<i>Hit Enter when prompted for a password</i>
cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/tinyos co tinyos-1.x
      </pre>

      <p><I>Note to tinyos developers: why is this download so large?  Perhaps there should be a core cvs module and then a contrib module?</I>

        This will create a directory <code>tinyos-1.x</code>.  For more
        information, see <a
        href="http://sourceforge.net/cvs/?group_id=28656#in_browser"><code>http://sourceforge.net/cvs/?group_id=28656</code></a>.
    </li>

    <li> <a name="environmentVariables">Set up the necessary
    environment variables.</a> TOSROOT sets the location of the TinyOS
    source tree.  TOSDIR sets the subdirectory in the TinyOS source
    tree.  PTINYOS_MOMLROOT sets the MoML output directory.

      <ul>
        <li>Under bash, type: 
          <pre>
export TOSROOT=$PTII/vendors/ptinyos/tinyos-1.x
export TOSDIR=$TOSROOT/tos
export PTINYOS_MOMLROOT=$PTII/vendors/ptinyos/moml
          </pre>

        <li>Under csh or tcsh:
          <pre>
setenv TOSROOT $PTII/vendors/ptinyos/tinyos-1.x
setenv TOSDIR $TOSROOT/tos
setenv PTINYOS_MOMLROOT $PTII/vendors/ptinyos/moml
          </pre>

        <li>Under Windows with Cygwin, you can permanently set
        environment variables from the System control panel. (For
        details, see <a
        href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII4.0/ptII/doc/install.htm#settingptII">Set
        the value of the PTII environment variable</a>).

          <p>
            Go to Start Menu -> Settings -> Control Panels -> System -> Advanced -> Environment Variables.
            <br>
            Set <code>TOSROOT</code> to <code>%PTII%/vendors/ptinyos/tinyos-1.x</code>
            <br>
            Set <code>TOSDIR</code> to <code>%PTII%/vendors/ptinyos/tinyos-1.x/tos</code>
            <br>
            Set <code>PTINYOS_MOMLROOT</code> to <code>%PTII%/vendors/ptinyos/moml</code>

          <p> FIXME: Necessary? If you are using Cygwin, and configure
          has trouble finding <code>TOSROOT</code> or
          <code>TOSDIR</code>, try expanding your <code>$PTII</code>
          environment variable to <code>/cygdrive/c/ptII</code> or
          something similar.  Also try expanding the
          <code>TOSROOT</code> and <code>TOSDIR</code> environment
          variables if you still have problems.

      </ul>

      <li> Configure and install the TinyOS nesC tools
        <pre>
cd $TOSROOT/tools/src/ncc
./Bootstrap
./configure
        </pre>
        By default, this configuration will cause the tools to be
        installed in <code>/usr/local</code>.  We assume that
        <code>/usr/local/bin</code> is in your path.  If you wish to
        install in a different directory, run <code>./configure
        --prefix=&lt;MYDIR&gt;</code> instead and add the
        <code>bin</code> directory to your path.

	<pre>
make
make install

	</pre>

      </li>

      <li><a name="unzip">Run the script</a> that will unzip the file
      that contains additional compiler flags.  It will place "opts"
      files into various directories in your tinyos-1.x tree.  The
      script assumes that you have placed your tinyos-1.x tree as
      indicated in the instructions above.
        <pre>
cd $PTII/ptolemy/domains/ptinyos/util
./unzip-opts.sh
        </pre>

        <p>
          If the executable permissions are not set correctly, run:
        <pre>
chmod a+x unzip-opts.sh
        </pre>
        then try the step above again.
      </li>
      
      <li> Run the script to generate the .moml files from the .nc files.
        <pre>
cd $PTII/ptolemy/domains/ptinyos/util/nc2moml
./nc2moml
        </pre>

          If the executable permissions are not set correctly, run:
        <pre>
chmod a+x nc2moml*
        </pre>
        then try the step above again.

	The <CODE>nc2moml</CODE> command will take 10-30 minutes to complete.

        <p> Note: The nc2moml tool requires that you build the tools in <CODE>$PTII/bin</CODE>.  Do the following and rerun the script above if they are missing:
        <pre>
cd $PTII/bin
make
        </pre>
      </li>

      <li> See if it worked:
        <ol> 
          <li> You should see some valid MoML code in:
            <pre>$PTII/vendors/ptinyos/moml</pre>
            <br>
            The directory structure should reflect that of the TinyOS
            directory structure.

          <li> 
            <ol>
              <li>Try running Viptos:
                <pre>$PTII/bin/vergil -viptos</pre>

              <li>Create a new PtinyOS Graph Editor from the File |
              New menu.

              <li>Click in the left hand pane under Actors to see the
              newly generated directory structure.
            </ol>
        </ol>
    </ol>


</body>
</html>
