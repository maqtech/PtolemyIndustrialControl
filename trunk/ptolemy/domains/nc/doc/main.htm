<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II</title>
<link href="../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>Ptolemy II Network Embedded Systems C (NC) Domain</h1> 

<p>The Ptolemy II Network Embedded Systems C (NC) domain supports the
construction of programs in nesC, from <a
href="http://nescc.sourceforge.net#in_browser">http://nescc.sourceforge.net</a>. That
web page describes nesC as &quot;an extension to the C programming
language designed to embody the structuring concepts and execution
model of TinyOS. TinyOS is an event-driven operating system designed
for sensor network nodes that have very limited resources (e.g., 8K
bytes of program memory, 512 bytes of RAM).&quot; TinyOS, described at
<a
href="http://webs.cs.berkeley.edu/tos/">http://webs.cs.berkeley.edu/tos/</a>,
is used, for example, on the Berkeley MICA &quot;motes,&quot; which
are small wireless sensor nodes.</p>

<p>The domain leverages existing nesC libraries, using a tool called
nc2momllib to create the Ptolemy II libraries of components that are
used to assemble models. Models are converted into nesC code by the
NCCodeGenerator component. TinyOS provides a rich library of nesC
components. If you install TinyOS in $PTII/vendors/ptinyos (FIXME:
<code>/tinyos-1.x</code>?), then the Ptolemy II configure script will
find it and automatically make the TinyOS libraries available.</p>

<p>FIXME: Explain how to install TinyOS and use the included nesC
compiler to compile generated code. Provide a built-in small library
so that this can be used right away.</p>

<p>In order to leverage another existing library of nesC components,
you have to run nc2momllib on that library.</p> 

<p>FIXME: Instructions here for just obtaining the binary, which since
it's GPL'd, presumably has to include source code, but doesn't require
building, and hence doesn't require the following nightmare.</p>

<p>Below are the detailed instructions for:</p>

    <ul>
      <li>Running simple code generation demos using built-in demo nesC libraries.</li>
      <li>Installing TinyOS and making its nesC libraries visible in Ptolemy II.</li>
      <li>Installing nc2momllib source code and compiling that source code.</li>
    </ul>

<h2>Running simple code generation demos</h2>

<p>FIXME</p>

<h2>Installing TinyOS and making its nesC libraries visible in Ptolemy II</h2>

<p>FIXME</p>

<h2>How to install nc2momllib and build from source</h2>
    
    <p>You can also download the nc2momllib source code and build
    it. It is based on the nesC compiler, which requires an impressive
    suite of tools. Under Linux or Cygwin, you need the following
    programs:</p>

    <menu> 
      <li> autoconf 2.50 or later 
      <li> bison 
      <li> emacs 
      <li> emacs-el 
      <li> gperf 
      <li> perl 
      <li> rpm 
    </menu>

    <p>For help with how to install these in Cygwin, see the <a
    href="../../../doc/install.htm#cygwin">Ptolemy II Cygwin
    Instructions</a>. Note that most installations will not have gperf
    on them, at least, so you will likely need to install at least
    that. These instructions assume you have installed TinyOS as
    described above.</p>

    <ol>
      <li>You must install the following AVR tools:
        <ul>
          <li> avarice
          <li> avr-binutils
          <li> avr-gcc
          <li> avr-insight
          <li> avr-libc
        </ul>
        Follow the appropriate directions for your operating system:
        <ul>
          <li> If you are running Windows 2000/XP, you can either:
            <ul>
              
              <li> Download the <a
              href="http://webs.cs.berkeley.edu/tos/dist-1.1.0/tinyos/windows/tinyos-1.1.0-1is.exe">TinyOS
              Installshield Wizard</a>.  Run the wizard, and choose
              "Custom" install.  Install only the AVR tools.  <b>Do
              not choose the cygwin install option (it will overwrite
              and corrupt your current cygwin installation) or the
              TinyOS install option (you will install this later from
              CVS as a separate step).</b> This will install all of
              the above rpms for you.

              <li> Download the rpms separately from <a
              href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/">here</a>.  More convenient links are included here:
                <ul>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avarice-2.0.20030825cvs-1w.cygwin.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avarice-2.0.20030825cvs-1w.cygwin.i386.rpm</a>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-binutils-2.13.2.1-1w.cygwin.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-binutils-2.13.2.1-1w.cygwin.i386.rpm</a>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-gcc-3.3tinyos-1w.cygwin.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-gcc-3.3tinyos-1w.cygwin.i386.rpm</a>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-insight-pre6.0cvs.tinyos-1w.cygwin.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-insight-pre6.0cvs.tinyos-1w.cygwin.i386.rpm</a>
<li><a href="http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-libc-20030512cvs-1w.cygwin.i386.rpm">http://today.cs.berkeley.edu/tos/dist-1.1.0/tools/windows/avr-libc-20030512cvs-1w.cygwin.i386.rpm</a>
                </ul>
              and install them on the cygwin command line with
              <pre>rpm --ignoreos -ivh *.rpm</pre> in the directory
              where you saved the files.
            </ul>

          <li> If you are running Linux (Redhat 9), download the rpm's
          <a
          href="http://webs.cs.berkeley.edu/tos/dist-1.1.0/tools/linux">here</a>
          and install them with <pre>rpm -ivh *.rpm</pre> in the
          directory where you saved the files.

        </ul>

        (The directions above were modified from the <a href="http://webs.cs.berkeley.edu/tos/download.html">original TinyOS installation directions</a>).

      <li>Make a directory into which to store the source code, for
      example:
        <pre>
    mkdir -p $PTII/vendors/ptinyos
        </pre>

      <li> We have put into the TinyOS makefiles a rule that you can
      run to create all the TinyOS libraries in one step. To use this,
      as of this writing, you need to get TinyOS from the CVS
      repository rather than getting the packaged install version. To
      do this, type:</p>

        <pre>
cd $PTII/vendors/ptinyos
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/tinyos login
<i>Hit Enter when prompted for a password</i>
cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/tinyos co tinyos-1.x
        </pre>

        For details, see <a
        href="http://sourceforge.net/cvs/?group_id=28656"><code>http://sourceforge.net/cvs/?group_id=28656</code></a>. This
        will create a directory tinyos-1.x.

      <li> Set TOSROOT to the location of the TinyOS source tree, and also set TOSDIR. 
        <ul>
          <li>Under bash, type: 
            <pre>
export TOSROOT=$PTII/vendors/ptinyos/tinyos-1.x
export TOSDIR=$TOSROOT/tos
            </pre>
          <li>Under Windows with Cygwin, you can permanently set
          environment variables from the System control panel. For
          details, see <a
          href="../../../doc/install.htm#settingptII">Set the value of
          the PTII environment variable</a>. While you are setting
          environment variables in Windows, you may want to set <a
          href="#NC2MOMLLIB_NESC">NC2MOMLLIB_NESC</a>. <li>Under csh
          or tcsh:
            <pre>
setenv TOSROOT $PTII/vendors/ptinyos/tinyos-1.x
setenv TOSDIR $TOSROOT/tos
            </pre>
        </ul>

      <li> Get the nesC CVS Tree, see <a
      href="http://sourceforge.net/cvs/?group_id=56288"><CODE>http://sourceforge.net/cvs/?group_id=56288</CODE></a>

        <pre>
cd $PTII/vendors/ptinyos
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/nescc login
<i>Hit Enter when prompted for a password</i>
cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/nescc co -r nc2momllib nesc
        </pre>

      <li> Boostrap nesC 
        <pre>
cd $PTII/vendors/ptinyos/nesc
./Bootstrap
        </pre>
        
      <li> Run configure for nesc 
        <pre>
./configure --prefix=$PTII/vendors/ptinyos
        </pre>

      <li> Install nesc 
        <pre>
make
make install
        </pre>

      <li> <a name="NC2MOMLLIB_NESC">Set another variable</a> that
      points to the nesc installation.

        <ul>
          <li> Under bash, type:
            <pre>
export NC2MOMLLIB_NESC=$PTII/vendors/ptinyos
            </pre>
            
          <li>Under csh or tcsh 
            <pre>
setenv NC2MOMLLIB_NESC $PTII/vendors/ptinyos
            </pre>
        </ul>

      <li> Run the example 
        <pre>
cd $TOSROOT/contrib/momllib
make momllib mica
        </pre>

      <li> See if the examples worked: 
        <menu> 
          <li> You should see some valid MoML code in
          <CODE>$TOSROOT/contrib/momllib/build/momllib/Counters.xml</CODE>

          <li> It should correspond to the contents of
          <CODE>$TOSDIR/lib/Counters</CODE>
        </menu>
    </ol>


</body>
</html>
