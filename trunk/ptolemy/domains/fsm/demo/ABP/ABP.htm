<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Protocol Modeling with Hierarchical FSM's and Discrete Events</tile>
</title>
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>Protocol Modeling with Hierarchical FSM's and Discrete Events</h1>

<center>
<!-- The HTML below is for the Java Plugin.  The first 
     section is for IE, the second is for Netscape
 -->
<OBJECT classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93"
 NAME="ABPApplet"
 WIDTH=600 HEIGHT=400
 codebase="http://java.sun.com/products/plugin/1.2/jinstall-12-win32.cab#Version=1,2,0,0">
<PARAM NAME=CODE VALUE=ptolemy.domains.fsm.demo.ABP.ABPApplet.class>
<PARAM NAME=CODEBASE VALUE=../../../../..>
<PARAM NAME=ARCHIVE VALUE="
	ptolemy/ptsupport.jar,
	ptolemy/domains/de/de.jar,
	ptolemy/domains/fsm/fsm.jar,
	ptolemy/domains/fsm/demo/ABP/ABP.jar">
<PARAM NAME=NAME VALUE="ABPApplet">
<PARAM NAME="type" VALUE="application/x-java-applet;version=1.2">
<PARAM NAME="background" VALUE="#faf0e6">
<COMMENT>
<EMBED type="application/x-java-applet;version=1.2"
 CODE=ptolemy.domains.fsm.demo.ABP.ABPApplet.class
 CODEBASE=../../../../..
 ARCHIVE="
	ptolemy/ptsupport.jar,
	ptolemy/domains/de/de.jar,
	ptolemy/domains/fsm/fsm.jar,
	ptolemy/domains/fsm/demo/ABP/ABP.jar"
 NAME="ABPApplet"
 WIDTH=600 HEIGHT=400
 background="#faf0e6"
 pluginspage="http://java.sun.com/products/plugin/1.2/plugin-install.html">
<NOEMBED></COMMENT>
<I>If you were able to run applets, you would have a demo here.</I>
</NOEMBED></EMBED>
</OBJECT>
</center>

The discrete event (DE) model of computation is very popular in modeling
distributed or parallel hardware and software and their communication infrastructure
[1]. An important special case is the modeling of communication protocols.
A hardware or software implementation of any practical communication protocol
will go through a large number of states during its execution, so its behavior
can be very well captured using hierarchical FSM's. The example presented
here demonstrates the use of discrete event model and hierarchical FSM's
to model the alternating bit protocol (ABP). See [2] for a detailed discussion
of the protocol.

<H2>The Model</H2>

<H3>Top level</H3>
The alternating bit protocol is used for reliable transmission of data
between a sender and a receiver over an unreliable channel. The top level
configuration of the model is shown below. This top level block diagram
executes under the DE semantics.
<CENTER>
<P><IMG SRC="img/ABPModel.gif" ></CENTER>

<BR>&nbsp;
<H3>The components</H3>
<B>Message source. </B>This is a DE atomic actor with a parameter <I>MaxDelay</I>.
After the simulation starts, it will wait for a random delay uniformly
distributed between <I>0</I> and <I>MaxDelay</I>, and then send a <I>request</I>
to the sender. When it receives a <I>next</I> from the sender, it will
again wait for a random delay uniformly distributed between <I>0</I> and
<I>MaxDelay</I>, and then send a new <I>msgIn</I> with sequence number
increased by <I>1</I> to the sender. In this demo, <I>MaxDelay</I> is set
to <I>0.5</I>.
<P><B>Timer. </B>The timer has an input <I>setTimer</I> of type DoubleToken.
The value of the input token gives the delay before the next timer expire.
The timer is reset every time it gets an input token.
<P><B>Channel. </B>The channel models an unreliable connection in a packet
switching network. It queues the input packets, drops and delays the packets
randomly. A channel has three parameters: <I>DropRate</I>, <I>MinDelay</I>
and <I>MaxDelay</I>. <I>DropRate</I> is the probability that an input packet
gets dropped. Packet delay in the channel is uniformly distributed between
<I>MinDelay</I> and <I>MaxDelay</I>.

<P><B>Plot. </B>The plot shows the result of data transmission. In the
plot, the red data gives the sequence number of the messages coming out
from the receiver. The blue data gives the sequence number of the messages
going to the sender. The third data is the "alternating bit" that the protocol
uses to number the packets going through the channel.
<P><B>Sender. </B>The sender implements the sending part of ABP and is
a hierarchical FSM as shown below.
<CENTER>
<P><IMG SRC="img/Sender.gif" ></CENTER>

<P><B>Receiver. </B>The receiver is a flat FSM as shown below.
<CENTER>
<P><IMG SRC="img/Receiver.gif" ></CENTER>

<H1>Run the Demo as a Java Application</H1>
<p>You can run the demo as a standalone Java application by executing the following sequence of commands:
<pre><code>
cd $PTII/ptolemy/domains/sc/demo/ABP
setenv CLASSPATH $PTII
java ptolemy.domains.sc.demo.ABP.ABP
</code>
</pre>

A sample result of running the demo is shown below.
<CENTER>
<P><IMG SRC="img/Sample.gif" ></CENTER>

The parameter setting is:
<CENTER>
<p>
Forward channel:
<I>DropRate = 0.3; MaxDelay = 5.0; MinDelay = 0.5</I>.
<p>Backward channel:
<I>DropRate = 0.2; MaxDelay = 2.0; MinDelay = 0.2</I>.</CENTER>

<H1>
Discussion</H1>
The purpose of this demo is to show:
<UL>
<LI>
Hierarchical FSM's can efficiently capture complex sequential control behavior.</LI>

<LI>
Embedding FSM's within other models of computation is a clean and flexible
way to model the concurrent execution of FSM's.</LI>
</UL>

<H1>
References</H1>

<OL>
<LI>
A. Girault, B. Lee, and E. A. Lee, ``<A HREF="http://ptolemy.eecs.berkeley.edu/papers/98/starcharts">Hierarchical
Finite State Machines with Multiple Concurrency Models</A>,'' April 13,
1998.</LI>

<LI>
J. Walrand, and P. Varaiya, ``High-Performance Communication Networks,''
pages 69-72, Morgan Kaufmann Publishers, Inc., 1996.</LI>
</OL>

<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
</body>
</html>
