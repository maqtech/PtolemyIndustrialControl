<!-- : $Id$
  @author: Steve Neuendorferr and Edward A. Lee
-->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>HTVQ</title>
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<H1>HTVQ Block Diagram</H1>
<P>
The HTVQ model can be created in the Ptolemy II schematic editor
called Vergil, as shown below:
<CENTER>
<P>
<OBJECT classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93"
    WIDTH = 650
    HEIGHT = 270
    NAME = "Vergil"
    codebase="http://java.sun.com/products/plugin/1.2.2/jinstall-1_2_2-win.cab#Version=1,2,2,0">
<PARAM NAME = CODE VALUE = ptolemy.vergil.MoMLViewerApplet>
<PARAM NAME = CODEBASE VALUE = ../../../../..>
<PARAM NAME=ARCHIVE VALUE="
	ptolemy/ptsupport.jar,
	ptolemy/domains/sdf/sdf.jar">
<PARAM NAME = NAME VALUE = "MoML" >
<PARAM NAME = "type" VALUE="application/x-java-applet;version=1.2.2">
<PARAM NAME = "background" VALUE = "#faf0e6">
<PARAM NAME = "modelURL" VALUE = "HTVQ.xml">
<COMMENT>
<EMBED type="application/x-java-applet;version=1.2.2"
 code="ptolemy.vergil.MoMLViewerApplet"
 codebase=../../../../..
 archive="
	ptolemy/ptsupport.jar,
	ptolemy/domains/sdf/sdf.jar"
 name = "Vergil"
 width = 650
 height = 270
 background="#faf0e6"
 modelURL="HTVQ.xml"
 pluginspage="http://java.sun.com/products/plugin/1.2.2/plugin-install.html">
</COMMENT>
<NOEMBED>
<a href="HTVQ.xml">MoML specification for this model.</a>
</NOEMBED>
</EMBED>
</OBJECT>
</CENTER>
<p>
Each frame is first subdivided into blocks of 4 pixels by 2 pixels.   Each block is then passed through a Vector Quantizer, which selects the best reconstruction block from a precomputed codebook.   The output of the Vector Quantizer is the codebook index of the reconstruction vector.   Each block is decompressed by indexing into the codebook, and then reassembled into the output image.   <p>
The Vector Quantizer in this implementation does not actually find the optimal reconstruction vector for each block.   Instead, the quantization is done using a series of 3 table lookups.  The resulting quantizer is very close to optimal and results in a significantly faster implementation.   This technique is known as Hierarchical Table-Lookup Vector Quantization (HTVQ).
<p>
This model uses a
<a href="HTVQApplet.java">custom applet</a> to achieve a
layout different from that provided by default.
</p>
<p></p>
</body>
</html>
