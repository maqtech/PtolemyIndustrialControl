/* Generated By:JJTree&JavaCC: Do not edit this line. PtParser.java */
/* 
 Copyright (c) 1998-1999 The Regents of the University of California.
 All rights reserved.
 Permission is hereby granted, without written agreement and without
 license or royalty fees, to use, copy, modify, and distribute this
 software and its documentation for any purpose, provided that the above
 copyright notice and the following two paragraphs appear in all copies
 of this software.

 IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
 ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

 THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
 PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
 CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 ENHANCEMENTS, OR MODIFICATIONS.
 
                                        PT_COPYRIGHT_VERSION_2
                                        COPYRIGHTENDKEY

@ProposedRating Yellow (nsmyth@eecs.berkeley.edu)
@AcceptedRating Yellow (yuhong@eecs.berkeley.edu)

Created : May 1998

*/

package ptolemy.data.expr;

import ptolemy.kernel.*;
import ptolemy.kernel.util.*;
import ptolemy.data.*;
import ptolemy.math.Complex;
import java.util.Hashtable;
import collections.LinkedList;

import java.io.*;

//////////////////////////////////////////////////////////////////////
//// PTParser.jjt
/** 
This file implements an expression parser for Ptolemy II using the 
JavaCC parser generator. It can handle all the basic arithmetic operators
(*, /, +, -,, %), relational operators (<, <=, >, >=, == !=), logical 
operators(&&, ||, !), bitwise operators (&, |, ^, ~)  and, using 
reflection, all of the functionality available in the java.lang.Math 
package. 
<p>
By editing the ASTFunctionNode file it is also relatively 
easy to allow references to other functions. This provides an easy mechanism 
to extend the range to the parser e.g. have a tcl(...) function 
that passes the string to a Tcl interpreter and retuns the result.
<p>
Functional if is supported via the following syntax:
        (boolean) ? (value1) : (value2)
<p>
Extensibility is also supported by allowing method calls on the Tokens,
the syntax is 
        (value1).method(comma separated arguments)
<p>
JavaCC by itself simply generates a file (and support files) that allow an 
input to be parsed, it does not return a parse tree. For the purposes of 
type checking we require a parse tree, and this is obtained using JJTree, a 
preprocesssor for JavaCC. 
<p>
JJtree operates by annotating the grammar file to support the generation
of the parse tree. Thus the process is
<p>
<center>X.jjt --> JJTREE --> X.jj --> JAVACC --> X.java + support files
<br>
</CENTER>
<p>
The parser can also be passed a symbol table of ptolemy.data.expr.Variables
which the expression to be parsed can reference.
<p>
Anything between quotes(") is taken to be one string.
<p>
The expressions recognized follow as close as possible the syntax of Java.
In particular the operator precedences implemented here follow exactly 
those in Java. Any type conversions that are performed are lossless. If 
the user wants lossy conversions, explicit casts will be necessary.
<p>
Complex number are specified by an i or j after the imaginary part 
of the number. Long numbers are specified by an l or L after an 
integer number.
<p>
Users can register constants with the parser and also register classes
where functions that may be called are defined. For a more 
thorough description of what the Parser is designed to do, 
please consult the Ptolemy II design document (or contact nsmyth@eecs)
<p>
@author Neil Smyth
@version $Id$

@see ptolemy.data.expr.ASTPtBitwiseNode
@see ptolemy.data.expr.ASTPtFunctionNode
@see ptolemy.data.expr.ASTPtFunctionalIfNode
@see ptolemy.data.expr.ASTPtLeafNode
@see ptolemy.data.expr.ASTPtLogicalNode
@see ptolemy.data.expr.ASTPtMethodCallNode
@see ptolemy.data.expr.ASTPtProductNode
@see ptolemy.data.expr.ASTPtRelationalNode
@see ptolemy.data.expr.ASTPtRootNode
@see ptolemy.data.expr.ASTPtSumNode
@see ptolemy.data.expr.ASTPtUnaryNode
@see ptolemy.data.Token 
*/
public class PtParser/*@bgen(jjtree)*/implements PtParserTreeConstants, PtParserConstants {/*@bgen(jjtree)*/
  protected JJTPtParserState jjtree = new JJTPtParserState();
    boolean debug = false;

    public PtParser(Variable owner) {
        this(new ByteArrayInputStream("a hack!!".getBytes()));
        _initialize();
        _owner = owner;
    }

    public PtParser() {
        this(new ByteArrayInputStream("a hack!!".getBytes()));
        _initialize();
    }


    /** Generates a parse tree from the given String. The root node is 
     *  returned. To evaluate the parse tree, the method evaluateParseTree()
     *  should be called on the rootNode
     *  @param stringIn The expression to be parsed
     *  @exception IllegalActionException If the parse fails.
     *  @return The root node of the parse tree.
     */
    public ASTPtRootNode generateParseTree(String stringIn)
            throws IllegalActionException {
        InputStream stream = new ByteArrayInputStream(stringIn.getBytes());
        _scope = null;
        this.ReInit(stream);
        //debug = true;
        String str = stringIn.replace('\n', ' ');
        try {
            // Parse the expression to obtain the parse tree
            ASTPtRootNode rootNode = start();
            if (debug) rootNode.displayParseTree(" ");
            return rootNode;
        } catch (ParseException x) {
            throw new IllegalActionException("Error parsing expression \""
                    + stringIn + "\":\n" + x.getMessage());
        }
    }

    /** Generates a parse tree from the given String. The root node is 
     *  returned. To evaluate the parse tree, the method evaluateParseTree()
     *  should be called on the rootNode
     *  @param stringIn The expression to be parsed.
     *  @param scope Variables to which the expression can refer.
     *  @exception IllegalActionException If the parse fails.
     *  @return The root node of the parse tree.
     */
    public ASTPtRootNode generateParseTree(String stringIn, NamedList scope)
            throws IllegalActionException {
        InputStream stream = new ByteArrayInputStream(stringIn.getBytes());
        _scope = scope;
        this.ReInit(stream);
        String str = stringIn.replace('\n', ' ');
        ASTPtRootNode rootNode;
        try {
            // Parse the expression to obtain the parse tree
            rootNode = start();
            if (debug) rootNode.displayParseTree(" ");
        } catch (ParseException x) {
            throw new IllegalActionException("Error parsing expression \""
                    + stringIn + "\":\n" + x.getMessage());
        }
        return rootNode;
    }

    /** Return the list of classes the parser searches 
     *  when a function call is encountered. 
     *  It is a static method. It stores the classes in a LinkedList. The 
     *  classes are searched in the same order that they were registered 
     *  with the parser, so the classes that are most likely to be 
     *  searched should be registered first.
     */
    public static LinkedList getRegisteredClasses() {
        if (_classesSearched == null) {
            _classesSearched = new LinkedList();
        }
        return _classesSearched;
    }

    /** Return the list of Variables that comprise the current scope.
     *  @return The current scope.
     */
     public NamedList getScope() {
        return _scope;
     }


    /** Add a constant to the list of constants that the parser recognizes.
     *  It is a static method. It stores the constant in a Hashtable, with 
     *  the corresponding entry for each name being a ptolemy.data.Token 
     *  of the appropriate type. The value for the constant can be given
     *  in a ptolemy.data.Token or in one of the data wrapper classes 
     *  in java.lang.
     *  @param name The string name that the parser will recognize.
     *  @param value An Object constraining the value associated with 
     *   the constant.
     *  @exception IllegalArgumentException If the constant cannot
     *   be registered with the parser.
     */
    public static void registerConstant(String name, Object value)
            throws IllegalArgumentException {
        if ( (value == null) || (name == null)) {
            throw new IllegalArgumentException("PtParser: cannot register " +
                    "a constant if either the name or value object is null.");
        }
        if (_constantsRecognized == null) {
            _constantsRecognized = new Hashtable();
        }
        ptolemy.data.Token tmp;
        if  (value instanceof ptolemy.data.Token) {
            tmp = (ptolemy.data.Token)value;
        } else if (value instanceof Integer) {
            tmp = new IntToken(((Integer)value).intValue());
        } else if (value instanceof Double) {
            tmp = new DoubleToken(((Double)value).doubleValue());
        } else if (value instanceof Long) {
            tmp = new LongToken(((Long)value).longValue());
        } else if (value instanceof String) {
            tmp = new StringToken((String)value);
        } else if (value instanceof Boolean) {
            tmp = new BooleanToken(((Boolean)value).booleanValue());
        } else if (value instanceof Complex) {
            tmp = new ComplexToken((Complex)value);
        } else {
            throw new IllegalArgumentException("PtParser: cannot register " +
                    name + "  as a constant of the parser.");
        }
        _constantsRecognized.put(name, tmp);
        return;
    }

    /** Add a class to the list of classes that the parser searches 
     *  when a function call is encountered. 
     *  It is a static method. It stores the classes in a LinkedList. The 
     *  classes are searched in the same order that they were registered 
     *  with the parser, so the classes that are most likely to be 
     *  searched should be registered first.
     *  @param newClassName The fully qualified name of the Class to 
     *   be added to the search path for functions.
     *  @exception IllegalArgumentException If the Class named by the 
     *   argument cannot not be found.
     */
    public static void registerFunctionClass(String newClassName)
            throws IllegalArgumentException {
        if (_classesSearched == null) {
            _classesSearched = new LinkedList();
        }
        try {
            Class newClass = Class.forName(newClassName);
            _classesSearched.insertLast(newClass);
        } catch (ClassNotFoundException ex) {
            throw new IllegalArgumentException("PtParser.registerClass: " +
                     "Could not find " + newClassName + ".");
        }
    }

    /*  The Variable creating the parser. 
     *  Each time another variable is referenced in the input expression, 
     *  this Variable is registered as a listener of that Variable. 
     *  If null, then no dependency is registered.
     */
    protected Variable _owner;

    /** Initialize the static variables containing the constants 
     *  recognized by the Parser and the classes searched by the parser 
     *  upon encountering a function call.
     */
    private void _initialize() {
        if (!_alreadyInitialized) {
            //System.out.println("Initializing...");
            _alreadyInitialized = true;
            registerConstant("PI", new DoubleToken(java.lang.Math.PI));
            registerConstant("pi", new DoubleToken(java.lang.Math.PI));
            registerConstant("E", new DoubleToken(java.lang.Math.E));
            registerConstant("e", new DoubleToken(java.lang.Math.E));
            Complex i = new Complex(0.0, 1.0);
            registerConstant("i", new ComplexToken(i));
            registerConstant("j", new ComplexToken(i));
            registerConstant("true", new BooleanToken(true));
            registerConstant("false", new BooleanToken(false));
            registerFunctionClass("java.lang.Math");
            registerFunctionClass("ptolemy.data.expr.UtilityFunctions");
        }
    }

    /* Return true if the id is a variable name in scope or a registered
     * constant.
     */
    private boolean _isKnownID(String id) {
        boolean result = false;
        if (_scope != null) {
            if (_scope.get(id) != null) {
                result = true;
            }
        }
        if (_constantsRecognized.containsKey(token.image)) {
            result = true;
        }
        return result;
    }

    /* Flag indicating if the default constants and classes searched 
     * by the parser have already been loaded.
     */
    private static boolean _alreadyInitialized = false;

    /*  Stores the classes that are searched by the parser when a 
     *  function call is parsed. It is static, and by default only 
     *  contains the java.lang.Math class.
     */
    private static LinkedList _classesSearched;

    /*  Stores the Tokens corresponding to constants that the parser
     *  recognizes. It stores them by name, with each name corresponding
     *  to a ptolemy.data.Token. It is static, and by default only 
     *  contains the java.lang.Math PI and E constants and the imaginary
     *  numbers i and j.
     */
    private static Hashtable _constantsRecognized;

    /*  Stores the variables to which the input expression can reference
     */
    private NamedList _scope;

  final public ASTPtRootNode start() throws ParseException {
 /*@bgen(jjtree) PtRootNode */
  ASTPtRootNode jjtn000 = new ASTPtRootNode(this, JJTPTROOTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      funcIf();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case EOL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          jj_consume_token(EOL);
          break;
        case 0:
          jj_consume_token(0);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void funcIf() throws ParseException {
     ASTPtFunctionalIfNode jjtn001 = new ASTPtFunctionalIfNode(this, JJTPTFUNCTIONALIFNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      logicalOr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        jj_consume_token(40);
        logicalOr();
        jj_consume_token(41);
        logicalOr();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
    }
  }

  final public void logicalOr() throws ParseException {
 Token x;
     ASTPtLogicalNode jjtn001 = new ASTPtLogicalNode(this, JJTPTLOGICALNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      logicalAnd();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COND_OR:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        x = jj_consume_token(COND_OR);
        logicalAnd();
                      jjtn001._lexicalTokens.insertLast(x);
      }
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
    }
  }

  final public void logicalAnd() throws ParseException {
 Token x;
     ASTPtLogicalNode jjtn001 = new ASTPtLogicalNode(this, JJTPTLOGICALNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      bitwiseOr();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COND_AND:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        x = jj_consume_token(COND_AND);
        bitwiseOr();
                      jjtn001._lexicalTokens.insertLast(x);
      }
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
    }
  }

  final public void bitwiseOr() throws ParseException {
 Token x;
     ASTPtBitwiseNode jjtn001 = new ASTPtBitwiseNode(this, JJTPTBITWISENODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      bitwiseXor();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        x = jj_consume_token(OR);
        bitwiseXor();
                      jjtn001._lexicalTokens.insertLast(x);
      }
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
    }
  }

  final public void bitwiseXor() throws ParseException {
 Token x;
     ASTPtBitwiseNode jjtn001 = new ASTPtBitwiseNode(this, JJTPTBITWISENODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      bitwiseAnd();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XOR:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        x = jj_consume_token(XOR);
        bitwiseAnd();
                      jjtn001._lexicalTokens.insertLast(x);
      }
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
    }
  }

  final public void bitwiseAnd() throws ParseException {
 Token x;
     ASTPtBitwiseNode jjtn001 = new ASTPtBitwiseNode(this, JJTPTBITWISENODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      logicalEquals();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        x = jj_consume_token(AND);
        logicalEquals();
                      jjtn001._lexicalTokens.insertLast(x);
      }
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
    }
  }

  final public void logicalEquals() throws ParseException {
 Token x;
     ASTPtRelationalNode jjtn001 = new ASTPtRelationalNode(this, JJTPTRELATIONALNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      relational();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOTEQUALS:
      case EQUALS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
          x = jj_consume_token(EQUALS);
          break;
        case NOTEQUALS:
          x = jj_consume_token(NOTEQUALS);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        relational();
                       jjtn001._lexicalTokens.insertLast(x);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
    }
  }

  final public void relational() throws ParseException {
 Token x;
     ASTPtRelationalNode jjtn001 = new ASTPtRelationalNode(this, JJTPTRELATIONALNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      sum();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case GTE:
      case LTE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
          x = jj_consume_token(GT);
          break;
        case GTE:
          x = jj_consume_token(GTE);
          break;
        case LT:
          x = jj_consume_token(LT);
          break;
        case LTE:
          x = jj_consume_token(LTE);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        sum();
                       jjtn001._lexicalTokens.insertLast(x);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
    }
  }

  final public void sum() throws ParseException {
 Token x;
     ASTPtSumNode jjtn001 = new ASTPtSumNode(this, JJTPTSUMNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      term();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          x = jj_consume_token(PLUS);
          break;
        case MINUS:
          x = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        term();
                       jjtn001._lexicalTokens.insertLast(x);
      }
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
    }
  }

  final public void term() throws ParseException {
 Token x;
     ASTPtProductNode jjtn001 = new ASTPtProductNode(this, JJTPTPRODUCTNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      unary();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case MODULO:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          x = jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          x = jj_consume_token(DIVIDE);
          break;
        case MODULO:
          x = jj_consume_token(MODULO);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        unary();
                       jjtn001._lexicalTokens.insertLast(x);
      }
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
    }
  }

  final public void unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
     ASTPtUnaryNode jjtn001 = new ASTPtUnaryNode(this, JJTPTUNARYNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(MINUS);
        element();
             jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
             jjtn001._isMinus = true;
      } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
      }
      break;
    case BOOL_NOT:
     ASTPtUnaryNode jjtn002 = new ASTPtUnaryNode(this, JJTPTUNARYNODE);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(BOOL_NOT);
        element();
             jjtree.closeNodeScope(jjtn002, true);
             jjtc002 = false;
             jjtn002._isNot = true;
      } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof ParseException) {
       {if (true) throw (ParseException)jjte002;}
     }
     if (jjte002 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte002;}
     }
     {if (true) throw (Error)jjte002;}
      } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
      }
      break;
    case BITWISE_NOT:
     ASTPtUnaryNode jjtn003 = new ASTPtUnaryNode(this, JJTPTUNARYNODE);
     boolean jjtc003 = true;
     jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(BITWISE_NOT);
        element();
             jjtree.closeNodeScope(jjtn003, true);
             jjtc003 = false;
             jjtn003._isBitwiseNot = true;
      } catch (Throwable jjte003) {
     if (jjtc003) {
       jjtree.clearNodeScope(jjtn003);
       jjtc003 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte003 instanceof ParseException) {
       {if (true) throw (ParseException)jjte003;}
     }
     if (jjte003 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte003;}
     }
     {if (true) throw (Error)jjte003;}
      } finally {
     if (jjtc003) {
       jjtree.closeNodeScope(jjtn003, true);
     }
      }
      break;
    case INTEGER:
    case DOUBLE:
    case COMPLEX:
    case BOOLEAN:
    case ID:
    case STRING:
    case 43:
    case 46:
      element();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void element() throws ParseException {
  boolean isMethodCall = false;
    ASTPtMethodCallNode jjtn001 = new ASTPtMethodCallNode(this, JJTPTMETHODCALLNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      primaryElement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        jj_consume_token(ID);
                jjtn001._methodName = token.image; isMethodCall = true;
        jj_consume_token(43);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case BOOL_NOT:
        case BITWISE_NOT:
        case INTEGER:
        case DOUBLE:
        case COMPLEX:
        case BOOLEAN:
        case ID:
        case STRING:
        case 43:
        case 46:
          funcIf();
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 44:
              ;
              break;
            default:
              jj_la1[17] = jj_gen;
              break label_8;
            }
            jj_consume_token(44);
            funcIf();
          }
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        jj_consume_token(45);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  isMethodCall);
    }
    }
  }

  final public void primaryElement() throws ParseException {
int len;
String tidied, x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPLEX:
     ASTPtLeafNode jjtn001 = new ASTPtLeafNode(this, JJTPTLEAFNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(COMPLEX);
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
            try
            {
                x = token.image.toLowerCase();
                len = x.length();
                Double imag = new Double(x.substring(0, len-1 ));
                Complex value = new Complex(0, imag.doubleValue());
                jjtn001._ptToken = new ComplexToken(value);
                jjtn001._isConstant = true;
            } catch (NumberFormatException ee) {
                {if (true) throw new ParseException(
                        "Unable to convert token " + token.image +
                        " to a complex number.");}
            }
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
      }
      break;
    case DOUBLE:
     ASTPtLeafNode jjtn002 = new ASTPtLeafNode(this, JJTPTLEAFNODE);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(DOUBLE);
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
            try
            {
                x = token.image.toLowerCase();
                len = x.length();
                if ( x.endsWith("d") || x.endsWith("f") ) {
                    // all floating point numbers are double
                    Double value = new Double(x.substring(0, len-1 ));
                    jjtn002._ptToken = new DoubleToken(value.doubleValue());
                } else {
                   Double value = new Double(x);
                   jjtn002._ptToken = new DoubleToken(value.doubleValue());
                }
                jjtn002._isConstant = true;
            } catch (NumberFormatException ee) {
                {if (true) throw new ParseException(
                        "Unable to convert token " + token.image +
                        " to an float or double");}
            }
      } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
      }
      break;
    case INTEGER:
     ASTPtLeafNode jjtn003 = new ASTPtLeafNode(this, JJTPTLEAFNODE);
     boolean jjtc003 = true;
     jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(INTEGER);
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
            try
            {
                x = token.image.toLowerCase();
                len = x.length();
                if ( x.endsWith("l") ) {
                    Long value = new Long(x.substring(0, len-1 ));
                    jjtn003._ptToken = new LongToken(value.longValue());
                } else {
                   Integer value = new Integer(x);
                   jjtn003._ptToken = new IntToken(value.intValue());
                }
                jjtn003._isConstant = true;
            } catch (NumberFormatException ee) {
                {if (true) throw new ParseException(
                        "Unable to convert token " + token.image +
                        " to an integer or long");}
            }
      } finally {
     if (jjtc003) {
       jjtree.closeNodeScope(jjtn003, true);
     }
      }
      break;
    case STRING:
     ASTPtLeafNode jjtn004 = new ASTPtLeafNode(this, JJTPTLEAFNODE);
     boolean jjtc004 = true;
     jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(STRING);
        jjtree.closeNodeScope(jjtn004, true);
        jjtc004 = false;
         // Now cut the " from each end of the string
        len = token.image.length();
        tidied = token.image.substring(1, (len -1));
        jjtn004._ptToken = new StringToken(tidied);
        jjtn004._isConstant = true;
      } finally {
     if (jjtc004) {
       jjtree.closeNodeScope(jjtn004, true);
     }
      }
      break;
    case BOOLEAN:
     ASTPtLeafNode jjtn005 = new ASTPtLeafNode(this, JJTPTLEAFNODE);
     boolean jjtc005 = true;
     jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(BOOLEAN);
        jjtree.closeNodeScope(jjtn005, true);
        jjtc005 = false;
          if (token.image.equalsIgnoreCase("TRUE")) {
              jjtn005._ptToken = new BooleanToken(true);
          } else if (token.image.equalsIgnoreCase("FALSE")) {
              jjtn005._ptToken = new BooleanToken(false);
          }
          jjtn005._isConstant = true;
      } finally {
     if (jjtc005) {
       jjtree.closeNodeScope(jjtn005, true);
     }
      }
      break;
    case 43:
      jj_consume_token(43);
      funcIf();
      jj_consume_token(45);
      break;
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_1(2147483647)) {
        function();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
     ASTPtLeafNode jjtn006 = new ASTPtLeafNode(this, JJTPTLEAFNODE);
     boolean jjtc006 = true;
     jjtree.openNodeScope(jjtn006);
          try {
            jj_consume_token(ID);
       jjtree.closeNodeScope(jjtn006, true);
       jjtc006 = false;
        Variable referredVar = null;
        if (_scope != null) {
           referredVar = (Variable)_scope.get(token.image);
        }
        if (referredVar != null) {
           // The Variable is stored in the node so that the tree 
           // does not have to be reparsed whenever the Token in 
           // the Variable changes.
           jjtn006._var   = referredVar;
           // Register the calling Variable as a listener
           // of the Variable this ID references.
           if (_owner != null) {
                referredVar._addValueDependent(_owner);
            }
        } else if (_constantsRecognized.containsKey(token.image)) {
            // constant is registered with the parser.
            Object tmp = _constantsRecognized.get(token.image);
            jjtn006._ptToken = (ptolemy.data.Token)tmp;
            jjtn006._isConstant = true;
        } else {
            if (true) {
                {if (true) throw new ParseException("The ID " + token.image +
                        " is undefined.");}}

        }
          } finally {
     if (jjtc006) {
       jjtree.closeNodeScope(jjtn006, true);
     }
          }
          break;
        default:
          jj_la1[21] = jj_gen;
          if (jj_2_2(2147483647)) {
            matrixConstruct();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void function() throws ParseException {
 /*@bgen(jjtree) PtFunctionNode */
  ASTPtFunctionNode jjtn000 = new ASTPtFunctionNode(this, JJTPTFUNCTIONNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token x = null;
  boolean isArrayRef = false;
    try {
      ASTPtLeafNode jjtn001 = new ASTPtLeafNode(this, JJTPTLEAFNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        x = jj_consume_token(ID);
        jjtree.closeNodeScope(jjtn001,  _isKnownID ( x . image ));
        jjtc001 = false;
        Variable referredVar = null;
        if (_scope != null) {
           referredVar = (Variable)_scope.get(x.image);
        }
        if (referredVar != null) {
          // The Parameter is stored in the node so that the tree 
          // does not have to be reparsed whenever the Token in 
          // the Parameter changes.
          jjtn001._var   = referredVar;
          // Register the calling parameter as a ParameterListener 
          // of this Parameter this ID references.
          if (_owner != null) {
            referredVar._addValueDependent(_owner);
          }
          isArrayRef = true;
        } else if (_constantsRecognized.containsKey(x.image)) {
          // constant is registered with the parser.
          Object tmp = _constantsRecognized.get(x.image);
          jjtn001._ptToken = (ptolemy.data.Token)tmp;
          jjtn001._isConstant = true;
          isArrayRef = true;
        }
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  _isKnownID ( x . image ));
      }
      }
      jjtn000._funcName = x.image;
      jjtn000._isArrayRef = isArrayRef;
      jj_consume_token(43);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case BOOL_NOT:
      case BITWISE_NOT:
      case INTEGER:
      case DOUBLE:
      case COMPLEX:
      case BOOLEAN:
      case ID:
      case STRING:
      case 43:
      case 46:
        funcIf();
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 44:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_9;
          }
          jj_consume_token(44);
          funcIf();
        }
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(45);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      int nch = jjtn000.jjtGetNumChildren();
      if (isArrayRef && !(nch == 2 || nch == 3)) {
        {if (true) throw new ParseException("PtParser: Parsed an array reference to "
                + x.image + " having " + (nch - 1) + " indices, "
                + "only reference to 1 and 2 dimensional arrays are supported.");}
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void matrixConstruct() throws ParseException {
 /*@bgen(jjtree) PtMatrixConstructNode */
  ASTPtMatrixConstructNode jjtn000 = new ASTPtMatrixConstructNode(this, JJTPTMATRIXCONSTRUCTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int i;
  int nRows = 0;
    try {
      jj_consume_token(46);
        ++jjtn000._nColumns; ++nRows;
      funcIf();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
      case 47:
      case 48:
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 44:
            ;
            break;
          default:
            jj_la1[24] = jj_gen;
            break label_10;
          }
          jj_consume_token(44);
            ++jjtn000._nColumns;
          funcIf();
        }
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 47:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_11;
          }
          jj_consume_token(47);
            ++nRows; i = 0;
          funcIf();
                                         ++i;
          label_12:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 44:
              ;
              break;
            default:
              jj_la1[26] = jj_gen;
              break label_12;
            }
            jj_consume_token(44);
            funcIf();
                     ++i;
          }
        /* Assert that the following rows have the same number of terms as the
         first row. */
        if ( i != jjtn000._nColumns ) {
          {if (true) throw new ParseException("PtParser: error parsing matrix construction, "
                  + "the " + nRows + "th row does not have the same number of "
                  + "terms as the first row.");}
        }
        }
        jj_consume_token(48);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000._form = 1; jjtn000._nRows = nRows;
        break;
      case 41:
        jj_consume_token(41);
        funcIf();
        jj_consume_token(41);
        funcIf();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 47:
            ;
            break;
          default:
            jj_la1[27] = jj_gen;
            break label_13;
          }
          jj_consume_token(47);
            ++nRows;
          funcIf();
          jj_consume_token(41);
          funcIf();
          jj_consume_token(41);
          funcIf();
        }
        jj_consume_token(48);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000._form = 2; jjtn000._nRows = nRows;
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(46)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(43)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  public PtParserTokenManager token_source;
  ASCII_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  final private int[] jj_la1_0 = {0x201,0x201,0x0,0x400000,0x200000,0x4000000,0x8000000,0x2000000,0x180000,0x180000,0x78000,0x78000,0xc00,0xc00,0x7000,0x7000,0x11800800,0x0,0x11800800,0x0,0x10000000,0x0,0x0,0x11800800,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_1 = {0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x485e,0x1000,0x485e,0x400,0x84e,0x10,0x1000,0x485e,0x1000,0x8000,0x1000,0x8000,0x19200,};
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PtParser(java.io.InputStream stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new PtParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PtParser(java.io.Reader stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new PtParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PtParser(PtParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PtParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
        int[] oldentry = (int[])(enum.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[49];
    for (int i = 0; i < 49; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
