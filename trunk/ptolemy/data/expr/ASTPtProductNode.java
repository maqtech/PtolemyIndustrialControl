/* Generated By:JJTree: Do not edit this line. ASTPtProductNode.java */

package pt.data.parser;

public class ASTPtProductNode extends ASTPtSimpleNode {
 java.util.LinkedList _tokenList = new java.util.LinkedList();

    protected void _resolveValue() throws Exception {
        if (getNumChildren() != ( _tokenList.size() +1) ) {
            throw new ParseException();
        }
        _ptToken = _ptToken.add(_ptToken, childTokens[0]);
        int size = _tokenList.size();
        for (int i=0; i<size; i++) {
            Token x = (Token)_tokenList.getFirst();
            if (x.kind == MULTIPLY) {
                _ptToken = _ptToken.multiply(_ptToken, childTokens[i+1]);
            } else if (x.kind == DIVIDE) {
                _ptToken = _ptToken.divide(_ptToken, childTokens[i+1]);
            } else {
                throw new Exception();
            }
        }
    }

  public ASTPtProductNode(int id) {
    super(id);
  }

  public ASTPtProductNode(PtParser p, int id) {
    super(p, id);
  }

  public static Node jjtCreate(int id) {
      return new ASTPtProductNode(id);
  }

  public static Node jjtCreate(PtParser p, int id) {
      return new ASTPtProductNode(p, id);
  }
}
