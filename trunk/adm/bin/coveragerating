#!/bin/sh
# -[Mon Mar 18 11:34:34 2002 by cxh]-
# Color the coverage file with the appropriate accepted ratings


progname=`basename $0`
if [ $# -ne 2 ]; then
	echo "$0: Usage: $progname ptIItreedirectory summaryhtmlfile"
	exit 3
fi

tree=$1
summaryfile=$2
#tree=/users/ptII/adm/dists/ptII1.0devel 
#summaryfile=/users/ptdesign/public_html/java/js/coverage.html

javafiles=/tmp/coveragerating.javafiles

ratingfile=/tmp/coveragerating.ratingfile

find /tmp -name "$ratingfile" -mtime +1 -exec rm {} \;

# Create a file that has two records on each line, one line
# being the file name, the other being the rating
#if [ ! -f $ratingfile ]; then
	echo "Regenerating $javafiles"
	find $tree -xdev -name adm -prune -o -name '*.java' -print > $javafiles

	echo "Regenerating $ratingfile"
	cat $javafiles | xargs grep AcceptedRating | 
		awk '{split($1,f,":"); print f[1], $2 }' |
		# Remove the leading part of the tree name
		sed -e "s=$tree==" \
			-e 's=/=.=g'> $ratingfile
#fi

# Read in the rating file, then the coverage file
awk '{if ($0 !~ /</) {
	# Reading in the rating file, which has no < chars
	# print $1,$2
	color = $2
	# If the color is yellow, then substitute in gold
        if (color ~ /ellow/) {
	    color = "#ffaa00"
	}
	rating[$1] = color
     } else {
	# Reading in the coverage html file
	if ($0 ~ />Package /) {
	    split($3,p,"<")
	    package=p[1]
	    printf("%s %s <a name=%c%s%c>%s</a></th></TR>\n", $1, $2, 34, package, 34, package)
	} else {
	    if ( $0 ~ /<TR><th align="center">/) {
		if ($0 !~ /TOTAL/) {
		    nf=split($2,f,"<")
		    nff=split(f[1],ff,">")	
		    file=package "." ff[2]
		    
		    # Reassemble the slashes in the filename
		    nfilearray=split(file,filearray,".")
		    filename=filearray[2]
		    for(i=3;i<nfilearray;i++) {
			filename = filename "/" filearray[i]
		    }

		    #print file, rating[file], filename
		    printf("%s ",$1)

		    printf("%s>",ff[1]);
		    
		    # 34 is double quote
		    printf("<a href=%c%s.html%c><font color=%s>%s</font></a><", 34, filename, 34, rating[file], ff[nff]);

		    for(i=3;i<nnf;i++) {
			printf("%s>",ff[i]);
		    }

		    printf("%s",ff[nnf]);

		    for(i=2;i<nf;i++) {
			printf("%s<",f[i])
		    }
		    printf("%s ",f[nf]);

		    for(i=3;i<NF;i++) {
			printf("%s ",$i)
		    }
		    printf("%s\n",$NF);

		} else {
		    print $0
		}
	    } else {
		print $0
	    }
	}
    }
}' $ratingfile $summaryfile |
awk '{
	if (sawheader==1) {
	    print $0
	} else {
	    if ($0 ~ /<H1> Package Coverage <\/H1>/) {
		sawheader=1
	    } 
	}
     }' > /tmp/coveragerating.out

# Create a TOC
awk ' BEGIN {
	print "<html><head>"
	print "<title>Ptolemy II Coverage Summary</title>"
	print "</head><body>"
	print "<h1>&nbsp;&nbsp;Package Coverage</h1>"
	print "<menu>"
    }
    { if (printedDate == 0) {
        printedDate = 1
	print date
      }
      if ($0 ~ />Package /) {
	split($4,p,"\"")
	package=p[2]
	printf("<li> <a href=%c#%s%c>%s</a>\n", 34, package, 34, package)
      }
    }
    END {
        print "</menu>" 
    }' date="foo" /tmp/coveragerating.out >/tmp/coveragerating.toc

cp $summaryfile $summaryfile.bak
cat /tmp/coveragerating.toc /tmp/coveragerating.out > $summaryfile

#rm -f /tmp/coveragerating.toc /tmp/coveragerating.out
