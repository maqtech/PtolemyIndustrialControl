#!/bin/sh
# This script reads in applets and updates the html to
# handle the latest version of the plugin
#
# $Id$
# Usage: fixapplets [-n] file.htm [...]

printOnly=no
if [ $1 = "-n" ]; then
    echo "$0: -n: Not updating files"
    printOnly=yes
    shift
fi

for file in $@
do
        # 1)Get the current parameters, create a new .htm file with
        # those parameters.
	awk '
 BEGIN {
	    # applet parameters that go inside <applet ... >
	    appletParamNames["codebase"] = 1
	    appletParamNames["code"] = 1
	    appletParamNames["archive"] = 1
	    appletParamNames["width"] = 1
	    appletParamNames["height"] = 1
	}
 $0 ~ /<!-- HTML CONVERTER -->/ { sawHTMLConverter = 1
                  stopPrinting = 1
                }
 $1 ~ /<OBJECT/ { stopPrinting = 1
                }
 $0 ~ /<SCRIPT LANGUAGE="JavaScript"><!--/ {stopPrinting = 1}
 stopPrinting == 0 { print $0 }
 $1 ~ /<EMBED/  { sawEmbed = 1
		  paramCount = 0
		  appletParamCount = 0
	        }
 $1 ~ /<NOEMBED/    {
			sawNoEmbed = 1
			alternateHTML = ""    
		    }
 sawEmbed == 1 && sawNoEmbed == 0 && $1 !~ /<EMBED/ { 
		    if ( $0 ~ /=/) {
			# Line like   background="#faf0e6"
		        # We call split twice so that we get the
		        # name that is in $1 without leading spaces
			split($1, n, "=")
			split($0, f, "=")

			# Look for applet parameters
			sawAppletParam = 0
                        if (substr(f[2], length(f[2]), 1) == "\\") {
                            # Strip off any trailing back slashes
                            f[2] = substr(f[2], 1, length(f[2]) - 1)
                        }

			for (appletParamName in appletParamNames) {
			    if (n[1] == appletParamName) {
			        if (n[1] == "code" \
				    && f[2] ~ /.class/ ) {
				    f[2] = substr(f[2], 0, length(f[2])- 7)
				}				
				sawAppletParam = 1
				appletParams[appletParamName] = f[2]
				lastAppletParam = appletParamName
			    }
			}
			if (sawAppletParam == 0 \
				    && n[1] != "type" \
				    && n[1] != "scriptable" \
				    && n[1] != "pluginspage") {
			    paramName[paramCount] = n[1]
			    paramValue[paramCount++] = f[2]
			}
		    } else {
			if ($1 !~ /</ && lastAppletParam == "archive") {
			    # continuation lines like: 
			    # archive="
			    #    ptolemy/ptsupport.jar,
			    #    ptolemy/domains/sdf/sdf.jar"
			    appletParams["archive"] = appletParams["archive"] "\n" $0
			}
		    }
		}
 sawNoEmbed == 1 && $1 !~ /NOEMBED>/   {
		    alternateHTML = alternateHTML "\n" $0
		    }
 $1 ~ /<\/NOEMBED/  { sawNoEmbed = 0 }
 $1 ~ /<\/EMBED/    { sawEmbed = 0}
 $1 ~ /<\/OBJECT>/  { if (sawHTMLConverter == 0) {
                         generateApplet = 1 
                         stopPrinting = 0
                      }
                    }

 $0 ~ /<!-- \/HTML CONVERTER -->/  {
                      sawHTMLConverter = 0
                      stopPrinting = 0
                      generateApplet = 1 
                    }

 generateApplet == 1 {
                    generateApplet = 0
		    print "<applet"

		    for (appletParam in appletParams) {
			if (appletParams[appletParam] != "") {
			    printf("\t%s = %s\n", appletParam, appletParams[appletParam])
			}
		    } 

		    print ">"
		    for (i = 0; i < paramCount; i++) {
			printf("        <param name = %s value = %s>\n", paramName[i], paramValue[i])
		    }
		    if (alternateHTML ~ /No JDK 1.3 support for applet!/) {_
			print "No Java Plug-in support for applet, see <a href=\"http://java.sun.com/products/plugin/\"><code>http://java.sun.com/products/plugin/</code></a>"
		    } else {
                        if (substr(alternateHTML,length(alternateHTML), 1) == "\\") {

                            print substr(alternateHTML, 1, length(alternateHTML)- 1)
                        } else {
			    print alternateHTML
                        }
		    }
		    print "</applet>"
               }		

 ' $file > fixapplets.htm

        # At this point, fixapplets.htm contains just the applet tag 
	
	# 2) Run the HTMLConverter that is part of the jdk on
	# the html file.

	# The HTMLConverter writes files to a temporary directory,
	# so we delete it and create it
	CURRENT_DIRECTORY=`pwd | sed 's@/cygdrive/\([a-z]\)@\1:@'`
	rm -rf htmlconverter_bak
	mkdir htmlconverter_bak

	$PTII/bin/htmlconverter \
	    -backup $CURRENT_DIRECTORY/htmlconverter_bak \
	    fixapplets.htm

	# 3) Add trailing back slashes

awk '$NF ~ /document.writeln/ {
      sawWriteln = 1
     }
$NF ~ /);$/ {
      sawWriteln = 0
     }

     {
      if (sawWriteln == 1) {
           if (substr($NF,length($NF), 1) == "\\") {
               print $0
           } else {
               if ( $0 ~ /^<PARAM/) {
                    print "	    " $0 " \\"
               } else {
                    print $0 " \\"
               }
           }
      } else {
           print $0
      }
    }
    ' fixapplets.htm |
    sed -e 's/CODEBASE/codebase/' \
	-e 's/CODE/code/' \
	-e 's/ARCHIVE/archive/' \
	-e 's/WIDTH/width/' \
	-e 's/HEIGHT/height/' \
	-e 's/VALUE  = /VALUE = /' \
	-e 's/VALUE=[^ ]/VALUE = /' \
	-e 's/VALUE = *\("[^"]*"\) *>/VALUE = \1 >/' \
	-e 's/<!--"CONVERTED_APPLET"-->//' \
	-e 's/<!--"END_CONVERTED_APPLET"-->//' \
	-e '# Split up lines that contain code ... codebase ...
            s/ code = \("[^"]*"\) codebase = \("[^"]*"\) archive = \("[^"]*"\) width = \("[^"]*"\) height = \("[^"]*"\)/code = \1 \\\
            codebase = \2 \\\
            archive = \3 \\\
            width = \4 \\\
            height = \5/' \
 	-e 's/width = \("[^"]*"\) height = \("[^"]*"\)/width = \1 \\\
            height = \2/' \
	-e 's/<PARAM NAME = code /<PARAM NAME = "code" \\\
                   /' \
	-e 's/<PARAM NAME = codebase /<PARAM NAME = "codebase"   /' \
	-e 's/<PARAM NAME = archive /<PARAM NAME = "archive" \\\
                   /' \
	-e 's/<PARAM NAME = background /<PARAM NAME = "background" /' \
	-e 's/background = */background = /' \
	 |
     grep -v '^ \\$' |
awk ' $0 == "<!--" { sawCommentStart = NF; sawAppletStart = 0} 
      { if (sawCommentStart == 0)  {
           print $0
        } else {
           if ($1 == "<APPLET" && NF == sawCommentStart + 1) {
              sawAppletStart = 1
           } 
           if (sawAppletStart != 0) {
              print $0
           }
        }
      }
      $0 == "-->" { sawCommentStart = 0; sawAppletStart = 0}
    ' | 
awk '
      { if ($0 !~ /<!-- HTML CONVERTER -->/ && $0 !~ /<!-- \/HTML CONVERTER -->/){
          if (skipNextLine > 0) {
	      skipNextLine--
          } else {
              if (NR > 1) {
	          print lastline
              }
          }
	  lastline = $0
       } else {
	  if ($0 ~ /<!-- HTML CONVERTER -->/) {
	      lastline = $0
          } else {
	      if ($0 ~ /<!-- \/HTML CONVERTER -->/) {
		 skipNextLine = 2      
		 print lastline
                 print $0
		 lastline = $0
	      }
          }
       }
     }
     END {print lastline}     
     ' > fixapplets2.htm
     diff $file fixapplets2.htm
     if [ "$printOnly" = "no" ]; then
	 mv fixapplets2.htm $file
     else 
	 tmpFile="`basename $file .htm`.htm"
	 if [ ! -f $tmpFile ]; then
	     mv fixapplets2.htm $tmpFile
	     echo "Your results are in $tmpFile"
	 else 
	     echo "Your results are in fixapplets2.htm"
	 fi    
     fi
     #rm -rf htmlconverter_bak fixapplets.htm	 

done


