<!-- DO NOT EDIT this file, it is created by running make.
     The file to edit is $PTII/doc/ptIIx.x.release.htm
     where x.x is the release number, then run 'make update'
     to update the derived files and check them in to cvs. -->
<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II 4.0-alpha Release Notes</title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#faf0e6">
<!--whatsnew-->
<h2>Major Features that are new in Ptolemy II 4.0 </h2>
Below are new features that were not present in Ptolemy II 3.x
<menu>


<li> Classes and inheritance at the block diagram level
(Edward A. Lee)

<li> Lifecycle management components
(Yang Zhao)

<li> Unit system rework
(Rowland Johnson)

<li> Updates to Vergil, the user interface for building models
(Steve Neuendorffer, Edward A. Lee)
	<menu>
	<li> Decorative elements in block diagrams (boxes, etc.)
        <li> Much smaller XML files
	<li> Icon editor (and animated icons)
	<li> Expert mode parameter editing
	<li><CODE>vergil -help</CODE> lists available configurations.
	<li> Full-screen mode for use in presentations.
        </menu>

<li> Single Window Mode
(J.  Blanc (Thales),  B. Masson (Thales))

</menu>

<h2>Other Features that are new in Ptolemy II 4.0</h2>

<menu>
<li> <I>TBA</I>
</menu>

<h3>New Demonstrations</h3>


<menu>
<li> <I>Domain</I>
	<menu>
	<li> <I>Demo</I>
	</menu>

</menu>

<h3>New Actors</h3>

<ul>

<li> <a href="codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/actor/lib/Exec.html"><code>Exec</code></a>
<dd> (Christopher Hylands Brooks)
Execute a subprocess

</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/security/package-summary.html">ptolemy.actor.lib.security</a>:

<dl>
<dt> Java Cryptography Actors
<dd> (Christopher Hylands Brooks, Rakesh Reddy)

</dl>

Most models developed under Ptolemy II 1.0.1,
2.0.1, 3.0.2  or HyVisual 2.2-beta should run under Ptolemy II 4.0
The MoMLParser includes a list of backward
compatibility filters that make certain changes on models
when read, handling such issues as actors being moved or renamed
and parameter names being changed.
The filters themselves are defined in
<a href="codeDoc/ptolemy/moml/filter/package-summary.html">
ptolemy.moml.filter</a>.
If you have developed your own actors under Ptolemy II 2.0.1 by
writing your own Java files, you should recompile all your java code with
the new release.  In theory, copying the .class files should work, but
recompiling is safer.
<p>
Not all changes can be handled automatically, since
some have semantic content. We begin with a description
of the changes that are not handled, followed by a description
of changes that are handled.

<h3>Backward compatible issues that are not handled automatically</h3>

<menu>
<li> The FileWriter and DoubleReader actors have been removed, use
the LineWriter or ExpressionWriter actors instead of FileWriter
and use the LineReader and ExpressionReader actors instead of
DoubleReader.
<li> In the CT (continuous-time) domain, instances of Clock and
TriggeredClock very likely should be manually changed to
ContinuousClock and TriggeredContinuousClock. The reason for this is that
we have made progress on the semantics of signals with discontinuities
and have improved the software implementation.
We created a new set of clocks for the CT domain.
ContinuousClock and TriggeredContinuousClock generate piecewise
constant signals with discontinuities.  The discontinuities
are correctly handled regardless of step sizes, and threshold
crossing detectors properly identify discrete transitions
across the threshold.
In principle, Clock and TriggeredClock can still be used in
CT models, e.g. to generate a sequence of events, but it is better to use
the EventSource actor for this purpose.

<li> In hybrid systems models (CT + FSM), the signal types for
modal models may not be inferred as expected.
If a modal model has both continuous and discrete signal
types at its inputs, it may need manual adjustment of the output signal
types. To do this, right click an output port and
add a "signalType" parameter; then set the value of the parameter
to "CONTINUOUS" or "DISCRETE" depending on your needs.

<li> AudioReader now uses a FileAttribute instead of a string valued
parameter.  The name of this parameter has changed from
sourceURL to fileOrURL to conform with LineReader and ExpressionReader.

<li> Longs are now printed with a trailing capital <CODE>L</CODE>
character.

<li> We have improved the way that the SDF (synchronous dataflow) domain
implements rate propagation. Previously, SDF would infer the rates of
ports of an SDF model, and create parameters named
"tokenConsumptionRate" "tokenInitProduction" and
"tokenConsumptionRate". However, this has two bad side effects:
<ol>
<li> 
 If a port has these parameters already, then the SDF scheduler
   overrides them.  This may not be correct.
<li> If a port has these parameters already, then running a model
   will mark it dirty, resulting in a prompt to save the model
   on exit.
</ol>
We've changed this so that it sets these values only if the parameters
do not exist already, and stores them in new attributes called
"_tokenConsumptionRate" "_tokenInitProduction" and
"_tokenConsumptionRate". These are transient (instances
of Variable rather than
Parameter), so they will not trigger a prompt to save.
</menu>

<h3>Backward compatible issues that are handled automatically</h3>

<menu>
<li>ptolemy.moml.filter.AddEditorFactory:
If a parameter has a <code>_location</code>, then
add a VisibleParameterEditorFactory named <code>_editorFactory</code>.
This supports double clicking on visible parameters.

<li>ptolemy.moml.filter.AddIcon: Add specialized icons that display
in Vergil the value of one of the parameters or certain actors.
The affected actors are:
        <menu>
	<li>ptolemy.actor.lib.Const
	<li>ptolemy.actor.lib.MathFunction
	<li>ptolemy.actor.lib.TrigFunction
	<li>ptolemy.actor.lib.Scale
	<li>ptolemy.actor.lib.Expression
	</menu>

<li>ptolemy.moml.filter.ClassChanges:
change class names that have been renamed or moved to a different package.
The changes are:
        <menu>
	<li>ptolemy.kernel.util.VersionAttribute	 -&gt; ptolemy.kernel.attributes.VersionAttribute
	<li>ptolemy.moml.Location	 -&gt; ptolemy.kernel.util.Location
	<li>ptolemy.actor.lib.comm.SerialComm	 -&gt; ptolemy.actor.lib.io.comm.SerialComm
        </menu>

<li>ptolemy.moml.filter.HideAnnotationNames: If an annotation name ends with
'annotation1', then add <code>_hideName</code> if necessary.
This prevents labels from appearing above visible parameters in Vergil.

<li>ptolemy.moml.filter.ParameterNameChanges: Update any Parameter names
that have been changed.
Below are the actors that are affected, along with the Parameter name 
and the new name:	
       <menu>
       <li>ptolemy.domains.pn.kernel.PNDirector
	<br>&nbsp;&nbsp;	Initial_queue_capacity	 -&gt; initialQueueCapacity
       </menu>

<li>ptolemy.moml.filter.PortNameChanges:
Update any actor port names that have been changed.
Below are the actors that are affected, along
with the old port name and the new port name:
        <menu>
	<li>ptolemy.actor.lib.conversions.CartesianToComplex
	 <br>&nbsp;&nbsp;	imag	 -&gt; y
	 <br>&nbsp;&nbsp;	real	 -&gt; x
	<li>ptolemy.actor.lib.Sleep
	 <br>&nbsp;&nbsp;	delay	 -&gt; sleepTime
	<li>ptolemy.actor.lib.conversions.ComplexToCartesian
	 <br>&nbsp;&nbsp;	imag	 -&gt; y
	 <br>&nbsp;&nbsp;	real	 -&gt; x
        </menu>

<li>ptolemy.moml.filter.PropertyClassChanges:
Update any actor port class names that have been changed.
Below are the actors that are affected, along with the port name
and the new classname:
        <menu>
	<li>ptolemy.domains.sdf.lib.vq.HTVQEncode
	 <br>&nbsp;&nbsp;	input	 -&gt; ptolemy.actor.TypedIOPort
	 <br>&nbsp;&nbsp;	output	 -&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.domains.sdf.lib.vq.VQDecode
	 <br>&nbsp;&nbsp;	input	 -&gt; ptolemy.actor.TypedIOPort
	 <br>&nbsp;&nbsp;	output	 -&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.domains.sdf.lib.vq.ImagePartition
	 <br>&nbsp;&nbsp;	input	 -&gt; ptolemy.actor.TypedIOPort
	 <br>&nbsp;&nbsp;	output	 -&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.domains.sdf.lib.vq.ImageUnpartition
	 <br>&nbsp;&nbsp;	input	 -&gt; ptolemy.actor.TypedIOPort
	 <br>&nbsp;&nbsp;	output	 -&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.actor.lib.Expression
	 <br>&nbsp;&nbsp;	expression	 -&gt; ptolemy.kernel.util.StringAttribute
        </menu>
</menu>

</body>
</html>
