<!-- DO NOT EDIT this file, it is created by running make.
     The file to edit is $PTII/doc/ptIIx.x.release.htm
     where x.x is the release number, then run 'make update'
     to update the derived files and check them in to cvs. -->
<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II 3.0 Release Notes</title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#faf0e6">
<!--whatsnew-->
<h2>Major Features that are new in Ptolemy 3.0 </h2>
<menu>

<li> HSIF Support
(Haiyang Zheng)
 <br>
The Hybrid System Interchange Format (HSIF), was developed by the
<a href="http://www.isis.vanderbilt.edu#in_browser">Institute of Software Integrated Systems (ISIS) at Vanderbilt University</a>
as part of the <a href="http://www.isis.vanderbilt.edu/Projects/mobies/default.html#in_browser">ISIS MoBIES</a> effort.
The HSIF documentation states:

<blockquote>
"The goal of HSIF is to define an interchange format for hybrid system
models that can be shared between modeling and analysis tools. HSIF
models represent dynamic systems, whose dynamics includes both
continuous and discrete behaviors."
</blockquote>

Haiyang Zheng developed a set of XSLT files that convert
HSIF into MoML, the XML format used to represent Ptolemy II Models.

 <br>See the <a href="../ptolemyhsif/demo/index.htm">HSIF/MoML documentation</a> for details.
<a href="hsif/demo/SwimmingPool/SwimmingPool.xml"></a>
</li>

<li> Expression language rework
 (Steve Neuendorffer, Edward A. Lee)


<li> Continuous Time rework
(Haiyang Zheng, Jie Liu (Parc)

<li> <a href="../ptolemy/domains/ci/doc/main.htm">Component Interaction Domain</a>
(Yang Zhao, Xiaojun Liu) - The CI domain models systems that contain
both event-driven and demand-driven styles of computation.

<li> Vergil updates
(Steve Neuendorffer, Edward A. Lee, John Reekie)
 Vergil has been improved
 and the following features have been added
	<menu>
	<li> Run buttons on the toolbar and hotkeys. 
	<li> Undo/Redo
	<li> Port Parameters
	<li> GUI components for viewing Ptolemy II data,
	as given in the expression language. Files with the extension .ptd are
	now
opened by a token viewer. The default viewer is a text editor, but if
the data is a matrix, then the matrix viewer is used.
	<li> Ptolemy II configurations have been refactored into
	separate directories in <CODE>$PTII/ptolemy/configs</CODE>

	<li><CODE>vergil -help</CODE> will list the possible configurations.
	<li> A full-screen mode was created for viewing Ptolemy II
	models.  This could be used, for example, in presentations.
        </menu>
</menu>

<h2>Other Features that are new in Ptolemy II 3.0</h2>

<ul>


<li> <a href="codeDoc/ptolemy/actor/lib/python/PythonScript.java">PythonScript</a>
(Xiaojun Liu)
An interface to 
<a href="http://www.jython.org/#in_browser" target="_top">Jython</a>,
a Java implementation of Python.

<li> Ptolemy II Matlab interface updates
(Zoltan Kemenczy and Sean Simmons, Research In Motion, Ltd.) -
The Matlab interface has been updated to provide
<menu>
<li> Logical variable support for Matlab version 6.5 (R13)

<li> Remove (the need for) ptmatlab.dll being in the user's path

<li> Removed warnings for gcc version 3.2 (used by latest cygwins)

<li> Add support/configuration for building on Linux
</menu>
Resources:
 <menu>
 <li> <a href="../ptolemy/matlab/matlab.htm">Ptolemy II Matlab Interface Overview</a>
 <a href="codeDoc/ptolemy/matlab/package-summary.html">Java class documentation</a>
 <li> <a href="../ptolemy/matlab/demo/MatlabExpression/MatlabExpression.xml">Matlab Expression Demonstration</a> -
 Requires that Matlab be installed locally, will not work within
 an applet, but will work with Web Start
 </menu>

<li> <a href="codegen.htm">Code generator</a>
(Steve Neuendorffer, Christopher Hylands)
The Java code generator now handles Expression actors.
The code generator now works with Java 1.4.
 <br>The applet generator has been extended to copy necessary jar
files on an as needed basis.

<li> <a href="codeDoc/ptolemy/kernel/attributes/FileAttribute.html">ptolemy.kernel.data.FileAttribute</a> 
(Edward A. Lee)
- Manages platform dependencies in file
system interaction, and provides a convenient user interface for
selecting and accessing files on the file system.

<li> <a href="codeDoc/ptolemy/data/FunctionToken.html">ptolemy.data.FunctionToken</a> 
(Xiaojun Liu, Steve Neuendorffer)
Token that contains a function.

<li> <a href="codeDoc/ptolemy/data/ImageToken.html">ptolemy.data.ImageToken</a>
(James Yeh) - An abstract token that contains images.  Derived tokens
such as 
     <a href="codeDoc/ptolemy/data/AWTImageToken.html">ptolemy.data.AWTImageToken</a>,
<a
href="codeDoc/ptolemy/actor/lib/jai/JAIImageToken.html">ptolemy.actor.lib.jai.JAIImageToken</a>
extend ImageToken.



<li> Interface to C actors using the Java Native Interface.
(Vincent Arnould (Thales), contributor: Christopher Hylands)
The <a href="codeDoc/jni/package-summary.htm">jni</a>
package contains a prototype of an interface between Ptolemy II actors
and C code by using the Java Native Interface (JNI).

</ul>

<h3>New Demonstrations</h3>

<menu>
<li> <a href="../ptolemy/domains/ci/doc/main.htm">CI</a>:
	Component Interaction

 <menu>
 <li> <a href="../domains/ci/demo/Router/Router.xml">Router</a> 
 </menu>

<li> <a href="../ptolemy/domains/ct/doc/main.htm">CT</a>:
	Continuous Time
<menu>
<li> 


<li><a href="../ptolemy/hsif/demo/Thermostat/Thermostat.xml">HSIF Thermostat</a>.
<br> This example shows a simple thermostat modeled as a hybrid system.
The purpose of the example is to demonstrate the ability that HyVisual has
to import models defined in HSIF, the <i>Hybrid System Interchange Format</i>.
To run HSIF models, you must invoke Ptolemy II with the <CODE>-hyvisual</CODE>
command line argument or else run the HyVisual Web Edition.  These
models will not work in a standard Ptolemy II vergil or Web Edition
because to support HSIF, we need to check xml each file to see
if it is an HSIF file of a MoML file.  This check slows Ptolemy II
down slightly.
 <br>See the <a href="../ptolemy/hsif/demo/index.htm">HSIF/MoML documentation</a> for details.

<br><a href="../ptolemy/hsif/demo/SwimmingPool/SwimmingPool.xml">HSIF Swimming Pool</a>.
<br> This example shows a simple hybrid system model of a pool.

</menu>

<li> <a href="../ptolemy/domains/de/doc/main.htm">DE</a>:
	 Discrete Event
 <menu>
 <li> <a href="../actor/hoc/demo/HocDE/HocDE.xml">HOC DE</a>  (New in Ptolemy II 3.0)
 </menu>


<li><a href="../ptolemy/domains/giotto/doc/main.htm">FSM</a>:
	Finite State Machine
 <menu>
 <li> <a href="../domains/fsm/demo/ModalBSC/ModalBSC.xml">Modal&nbsp;BSC</a>
 <li> <a href="../domains/fsm/demo/StateTracker/StateTracker.xml">State&nbsp;Tracker</a>
 </menu>

<li> <a href="../ptolemy/domains/sdf/doc/main.htm">SDF</a>:
	Synchronous Dataflow
 <menu>
 <li><a href="../actor/hoc/demo/DFTSubSet/DFTSubSet.xml">DFT Subset</a>
 </menu>
</menu>


<h3>New Actors</h3>

<ul>

<li> <a href="codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/actor/lib/BusAssembler.html"><code>BusAssembler</code></a>
<dd> (Zoltan Kemenczy, Research in Motion Limited)
Assemble input port channels into output bus.

<dt> <a href="codeDoc/ptolemy/actor/lib/BusDisassembler.html"><code>BusDisassembler</code></a>
<dd> (Zoltan Kemenczy, Research in Motion Limited)
split input bus channels onto output port channels.


<dt> <a href="codeDoc/ptolemy/actor/lib/Rician.html"><code>Rician</code></a>
<dd> (Rachel Zhou)
An actor that outputs a random sequence with a Rician distribution.

<dt> <a href="codeDoc/ptolemy/actor/lib/Stop.html"><code>Stop</code></a>
<dd> (Edward A. Lee)
An actor that stops a model executing when it receives a true token.

<dt> <a href="codeDoc/ptolemy/actor/lib/ThrowException.html"><code>ThrowException</code></a>
<dd> (Edward A. Lee)
An actor that throws an exception when it receives a true token.

<dt> <a href="codeDoc/ptolemy/actor/lib/ThrowModelError.html"><code>ThrowModelError</code></a>
<dd> (Edward A. Lee)
An actor that throws a model error when it receives a true token.

</dl>

<li> <a href="codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a>:

<dl>

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/ConvolutionalCoder.html"><code>ConvolutionalCoder</code></a>

<dd> (Rachel Zhou) Generate a convolutional code.

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/DeScrambler.html"><code>DeScrambler</code></a>
<dd> (Rachel Zhou) Descramble the input bit sequence using a feedback shift register.

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/HadamardCode.html"><code>HadamardCode</code></a>
<dd> (Rachel Zhou) Produce a Hadamard codeword by selecting a row from a Hadamard matrix.

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/Scrambler.html"><code>Scrambler</code></a>
<dd> (Rachel Zhou) Given an input bit sequence, scramble it in a pseudo random way.

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/ViterbiDecoder.html"><code>ViterbiDecoder</code></a>
<dd> (Rachel Zhou) Viterbi Decoder.

</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/conversions/package-summary.html">ptolemy.actor.lib.conversions</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/ExpressionToToken.html"><code>ExpressionToToken</code></a>
<dd> (Steve Neuendorffer)
An actor that reads expressions and parses them into tokens.


<dt> <a href="codeDoc/ptolemy/actor/lib/conversions.html"><code>TokenToExpressions</code></a>
<dd> (Steve Neuendorffer)
An actor that converts tokens into expressions.

</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/jai/package-summary.html">ptolemy.actor.lib.jai</a>:

<dl>
<dt> Java Advanced Imaging
<dd> (James Yeh)
Actors that use the Java Advanced Imaginv framework
</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/jmf/package-summary.html">ptolemy.actor.lib.jmf</a>:

<dl>
<dt> Java Media Framework actors
<dd> (James Yeh)
Actors that use the Java Media Framework
</dl>


</ul>


<h2>Backward compatibility issues</h2>

Most models developed under Ptolemy II 1.0.1 should run under Ptolemy II 3.0.

 <p>The MoMLParser has been extended to include a list of backward
compatibility filters that look for actors that have changed while
parsing a model.  The backward compatibility filters will make what
ever change is necessary, and the user will eventually be prompted to
save the model.  The filters themselves are defined in <a
href="codeDoc/ptolemy/moml/filter/package-summary.html">ptolemy.moml.filter</a>

 <p>Below are the backward compatibility issues
that are handled automatically.

<menu>
<li>ptolemy.moml.filter.AddEditorFactory:
If a parameter has a <code>_location</code>, then
add a VisibleParameterEditorFactory named <code>_editorFactory</code>.

<li>ptolemy.moml.filter.AddIcon: Add specialized icons that display the value
of one of the parameters.
The affected actors are:
        <menu>
	<li>ptolemy.actor.lib.Const
	<li>ptolemy.actor.lib.MathFunction
	<li>ptolemy.actor.lib.TrigFunction
	<li>ptolemy.actor.lib.Scale
	<li>ptolemy.actor.lib.Expression
	</menu>
<li>ptolemy.moml.filter.ClassChanges: change any class names that have been renamed
Below are original class names followed by the new class names.
        <menu>
	<li>ptolemy.kernel.util.VersionAttribute	 -&gt; ptolemy.kernel.attributes.VersionAttribute
	<li>ptolemy.moml.Location	 -&gt; ptolemy.kernel.util.Location
	<li>ptolemy.actor.lib.comm.SerialComm	 -&gt; ptolemy.actor.lib.io.comm.SerialComm
        </menu>
<li>ptolemy.moml.filter.HideAnnotationNames: If an annotation name ends with
'annotation1', then add <code>_hideName</code> if necessary.

<li>ptolemy.moml.filter.ParameterNameChanges: Update any Parameter names
that have been renamed.
Below are the actors that are affected, along with the Parameter name 
and the new name:	
       <menu>
       <li>ptolemy.domains.pn.kernel.PNDirector
	<br>&nbsp;&nbsp;	Initial_queue_capacity	 -&gt; initialQueueCapacity
       </menu>
<li>ptolemy.moml.filter.PortNameChanges: Update any actor port names that have been
renamed.
Below are the actors that are affected, along
with the old port name and the new port name:
        <menu>
	<li>ptolemy.actor.lib.conversions.CartesianToComplex
	 <br>&nbsp;&nbsp;	imag	 -&gt; y
	 <br>&nbsp;&nbsp;	real	 -&gt; x
	<li>ptolemy.actor.lib.Sleep
	 <br>&nbsp;&nbsp;	delay	 -&gt; sleepTime
	<li>ptolemy.actor.lib.conversions.ComplexToCartesian
	 <br>&nbsp;&nbsp;	imag	 -&gt; y
	 <br>&nbsp;&nbsp;	real	 -&gt; x
        </menu>
<li>ptolemy.moml.filter.PropertyClassChanges: Update any actor port class names
that have been renamed.
Below are the actors that are affected, along with the port name
and the new classname:
        <menu>
	<li>ptolemy.domains.sdf.lib.vq.HTVQEncode
	 <br>&nbsp;&nbsp;	input	 -&gt; ptolemy.actor.TypedIOPort
	 <br>&nbsp;&nbsp;	output	 -&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.domains.sdf.lib.vq.VQDecode
	 <br>&nbsp;&nbsp;	input	 -&gt; ptolemy.actor.TypedIOPort
	 <br>&nbsp;&nbsp;	output	 -&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.domains.sdf.lib.vq.ImagePartition
	 <br>&nbsp;&nbsp;	input	 -&gt; ptolemy.actor.TypedIOPort
	 <br>&nbsp;&nbsp;	output	 -&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.domains.sdf.lib.vq.ImageUnpartition
	 <br>&nbsp;&nbsp;	input	 -&gt; ptolemy.actor.TypedIOPort
	 <br>&nbsp;&nbsp;	output	 -&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.actor.lib.Expression
	 <br>&nbsp;&nbsp;	expression	 -&gt; ptolemy.kernel.util.StringAttribute
        </menu>
</menu>


Below are the changes that are not handled automatically:
<menu>
<li> AudioReader now uses a FileAttribute instead of a string valued
parameter.  The name of this parameter has changed from
sourceURL to fileOrURL to conform with LineReader and ExpressionReader.

<li> Longs are now printed with a trailing capital <CODE>L</CODE>
character.


<li> We have improved the way that the SDF (synchronous dataflow) domain
implements rate propagation. Previously, SDF would infer the rates of
ports of an SDF model, and create parameters named
"tokenConsumptionRate" "tokenInitProduction" and
"tokenConsumptionRate". However, this has two bad side effects:

<ol>
<li> 
 If a port has these parameters already, then the SDF scheduler
   overrides them.  This may not be correct.

<li> If a port has these parameters already, then running a model
   will mark it dirty, resulting in a prompt to save the model
   on exit.
</ol>

We've changed this so that it sets these values only if the parameters
do not exist already, and stores them in new attributes called
"_tokenConsumptionRate" "_tokenInitProduction" and
"_tokenConsumptionRate". These are transient (Variable rather than
Parameter), so they will not trigger a prompt to save.
</menu>

If you have developed your own actors under Ptolemy II 2.0.1 by
writing your own Java files, you should recompile all your java code with
the new release.  In theory, copying the .class files should work, but
recompiling is safer.

</body>
</html>
