<!-- $Id$ -->
<html>
<head>

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II Installation</title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#faf0e6">
<h1>Ptolemy II Installation</h1>
See the <a href="ptII2.0.release.htm">Ptolemy II 2.0 release notes</a>
for details about this release.
<h2>Ptiny</h2>
<p>Ptolemy II is available in two versions:
   <menu>
   <li> Ptiny - which can be used to build models in 
   CT, DE, FSM, PN and SDF using built-in actors. 
   <li> Full - which includes other domains and 
   support for developing custom actors.
   </menu>
The Ptiny version is primarily for the Windows platform, it does not include
a <a href="troubleshooting.htm#startVergil">start up script for Vergil</a>
for non-Windows platforms.  Installation instructions for the Ptiny
version can be found online at
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII</code></a>.

<p>The Full version is for Windows and Unix platforms.  The instructions
on this page concern installing the Full version.

<h2>Instructions for the impatient</h2>

<ol>

<li> Install JDK1.4.0 or later, add the jdk bin directory to your path
so that <CODE>javac</CODE> and <CODE>java</CODE> are available,
and have the <code>make</code> command available.

<li> Set the PTII environment variable to the top level Ptolemy directory,
that is the directory above this directory
	<dl>
	<dt> bash
	<dd> <pre>
PTII=c:\\Program\ Files\\Ptolemy\\Ptolemy\ II\ 2.0 
export PTII
</pre>

<dt> csh
<dd> <pre>
setenv PTII /users/yourname/ptII
</pre>

</dl>

<li> Run configure
<pre>
cd "$PTII"
rm -f config.*
./configure
</pre>

<li> Ptolemy is shipped with .class and .jar files, but the
$PTII/bin/scripts needs to be updated.  The safest thing to do is 
to run make install on the entire tree:
<pre>
make install
</pre>


<li> Start vergil
<pre>
$PTII/bin/vergil
</pre>


</ol>


<h2>Requirements</h2>
<h3>The PTII variable</h3>
The PTII environment variable is used to refer to the directory
that contains the Ptolemy II tree.
Setting <CODE>PTII</CODE> is covered in
the <a href="#Unix">Unix</a> and <a href="#Windows">Windows</a>
sections below.

<h3><a name="java">Java</a></h3>
Ptolemy II has been developed under JDK1.4.1_01, which is available from
<a href="http://java.sun.com/j2se/1.4/" target="_top"><CODE>http://java.sun.com/j2se/1.4/</CODE></a>


<p>The Java download is available in several formats.
<dl>
<dt> JRE - Java Runtime Environment
<dd> Runtime only
 <br>If you are planning on only using the prebuilt Ptolemy II
actors, you can download the JRE.
<dt> JDK - Java Development Kit
<dd> Runtime and development tools like the Java compiler <CODE>javac</CODE>
 <br>If you are planning on writing your own actors or recompiling
from sources, download the JDK.  If you install the JDK, be sure
that the <CODE>bin</CODE> directory is in your path so that
the <CODE>javac</CODE> and <CODE>java</CODE> commands are available.
</dl>


<h3><a name="Plugin">Java Plug-in</a></h3>
 <!-- Note: the plug-in is called "The Java Plug-in", not "The JDK Plugin"-->
The applet tags have been configured to require JDK1.4, so to run the applets
in Netscape 4.7 or Internet Explorer 5.0 under Windows, you will need to use
the Java Plug-in from
<a href="http://java.sun.com/products/plugin/" target="_top"><CODE>http://java.sun.com/products/plugin/</CODE></a>
<a href="http://www.javasoft.com/products/plugin/" target="_top">JavaSoft</a>.

 <p>Currently, the Java Plug-in 1.4 is included in the JDK1.4 download for
Windows.
 <p>If you are running under Solaris 2.6 or 2.7, you can
<a href="http://www.sun.com/solaris/netscape/" target="_top">download</a>
a separate plug-in or a complete Netscape installation.
 <p>If your platform is not supported by the plug-in, you can run
the applets with the JDK <CODE>appletviewer</CODE> command.
 <p>See the <a href="troubleshooting.htm#plugin">Plug-in section of the Ptolemy II Troubleshooting guide</a> for details.

<h2>Optional packages that are shipped with Ptolemy</h2>

<h3><a name="Jacl">Jacl</a></h3>
Jacl is a 100% Java implementation of Tcl that we use for testing Ptolemy II.

Each Java directory contains a <CODE>test</CODE> subdirectory that contains
Tcl files that use Jacl to test the Ptolemy II Java code.

 <p>Jacl is <B>only</B> necessary if you are planning on running
the Ptolemy II test suite.

 <p>We ship a customized version of Jacl called Ptjacl.
The primary difference between Ptjacl and Jacl1.1 is that Ptjacl
is shipped as one jar file.

 <p>The Ptjacl jar file at <CODE>$PTII/lib/ptjacl.jar</CODE>
is shipped with Ptolemy II.

 <p>For more information about Jacl and Tcl Blend, see
<menu>
<li> <a href="http://tcl.activestate.com/software/java/" target="_top">Activestate.com Jacl and Tcl Blend page</a>.

<li> <a href="http://ptolemy.eecs.berkeley.edu/~cxh/java" target="_top">Christopher Hylands' Java Page.</a>

<li> <a href="coding/tcljava.htm"><CODE>java::</CODE> man page</a>
</menu>


<h3><a name="Diva">Diva</a></h3>
Diva is a visualization package used by some of the demos.
 <p>The Ptolemy II distribution include <CODE>$PTII/lib/diva.jar</CODE>.
 <p>The Diva sources and documentation are available at
<a href="http://www.gigascale.org/diva" target="_top"><CODE>http://www.gigascale.org/diva</CODE></a>.


<h2>Optional packages not shipped with Ptolemy</h2>

<h3>make</h3>
Ptolemy II has been built with GNU make 3.77, but does not use GNU make extensions, so GNU make is not requires.  Ptolemy II has also been built
with Solaris 2.5.1 <CODE>/usr/ccs/bin/make</CODE>.
 <p>It seems that the make that is included with SGI Irix 6.5 may have
problems, the workaround is to installed GNU make.
 

<h3>Java3d</h3>
The 
<a href="../ptolemy/domains/gr/doc/body.htm" target="body">3-D graphics (GR)</a>
domain demos require Java3d, which can be installed from
<a href="http://java.sun.com/products/java-media/3D/" target="_top"><CODE>http://java.sun.com/products/java-media/3D/</CODE></a>.

You need not install Java3d if you are not planning on using GR domain.

 <p>If you plan on recompiling the GR domain, then install the Java 3D SDK
and runtime.  If you plan on only running the GR domain demos, then
installing only the Java 3D runtime should be sufficient.
We have verified the demos with the Java 3D 1.2.1_04 SDK (DirectX Version).

<p>Note that JDK1.4.0 requires Java 3D 1.2.1_04.  If you run
with Java 3D 1.2.1_03 and JDK1.4.0, the GR demos will fail to initialize
and you will see the message:
<pre>
Fail to create back buffer - DDERR_INALIDPARAM
</pre>
The Java 3D 1.2.1_04 release notes say that this bug:
<pre>
4470749 Java3D fail to initialize underlying OGL/D3D library in jdk1.4
</pre>
was fixed in Java 3D 1.2.1_04

<h3><a name="matlab">Matlab</a></h3>
Ptolemy II includes an interface to Matlab that was  
developed by Zoltan Kemenczy and Sean Simmons of 
<a href="http://www.rim.net/">Research in Motion Limited</a>.

<!-- If you change the next paragraph update the release notes -->
<p>The Matlab interface works only under Windows and it requires that
Matlab be installed on the local machine.  The Matlab interface has
been tested with Matlab 6.1, which corresponds with R12.1.

<p>The <a href="codeDoc/ptolemy/matlab/Expression.html">Matlab Expression</a>
actor can access Matlab methods to process matrices and plot data
using the Matlab plotter.
<p>A demo can be found at
<a href="../ptolemy/matlab/demo/MatlabExpression/MatlabExpression.xml"><code>$PTII/ptolemy/matlab/demo/MatlabExpression/MatlabExpression.xml</code></a>

<h4>Compiling the Matlab interface</h4>

<p>The Matlab interface will only work under Windows.

<p>If you do not have <code>gcc</code> or <code>dlltool</code>
installed, you can install them as part of the 
<a href="#cygwin">Cygwin installation</a>


<p>The Matlab interface is implemented using the Java Native Interface
(JNI).  When <code>$PTII/configure</code> is run, it look in the user
path for a binary called <code>matlab</code>, determines the location
of the Matlab <code>extern/include/libeng.dif</code> file and then checks
for <code>gcc</code> and <code>dlltool</code>. 

<p>If these components were not found at when configure was run, then
you can rerun configure, remake and run the demo with:

<pre>
cd $PTII
rm config.*; ./configure
cd $PTII/ptolemy/matlab
make
$PTII/bin/vergil ./demo/MatlabExpression/MatlabExpression
</pre>



<h3><a name="javacc">JavaCC</a></h3>
JavaCC is the Java Compiler Compiler, which similar to <CODE>yacc</CODE>
and <CODE>lex</CODE>.
 <p>JavaCC is only necessary if you modify the expression parser in
<CODE>ptolemy/data/expr</CODE>.
 <p>As of 9/02, Ptolemy II was using JavaCC 2.1

 <p>To install JavaCC, follow the instructions below
<ol>
<li> Download JavaCC2_1.zip from
<a href="http://www.webgain.com/download/javacc/details.html" target="_top"><CODE>http://www.webgain.com/download/javacc/details.html</CODE></a>
<li> <CODE>$PTII/configure</CODE> looks for JavaCC in
the <CODE>$PTII/vendors/sun/JavaCC</CODE> directory.  If
<CODE>configure</CODE> does not find JavaCC there, then it looks
for the <CODE>javacc</CODE> binary your path.  You may also
use the <CODE>--with-javacc=DIR</CODE> <CODE>configure</CODE> argument.
<br> The best thing to do is to
unzip <code>JavaCC2_1.zip</code>
so that <code>$PTII/vendors/sun/JavaCC/JavaCC2_1.class</code> is created.

<br><code>JavaCC2_1.class</code> is the <b>Installer</b>, not the code
itself, so more steps are necessary
<li> Set your CLASSPATH to <CODE>.</CODE>
<br>Under Windows with Cygwin bash:
<pre>
CLASSPATH=.
export CLASSPATH
</pre>
<br>Under Unix with Csh:
<pre>
setenv CLASSPATH .
</pre>
<li> cd to <code>$PTII/vendors/sun/JavaCC</code>

<li> Run <CODE>java</CODE> on the file.  Note that you should
<B>not</B> include the <CODE>.class</CODE> suffix in the command line.
<pre>
java Java2_1
</pre>
<li>During installation, change the default installation directory
from <code>vendors/sun/JavaCC/javacc2.1</code>
to
<code>vendors/sun/JavaCC</code>
<li>Rerun configure by first removing the cache files:
<pre>
cd $PTII
rm config.*
./configure
</pre>
The <code>configure</code> script should find JavaCC, the output should look
something like
<pre>
checking for JavaCC... <i>yourpath</i>/ptII/vendors/sun/JavaCC
checking for jjtree... $(JAVACC_DIR)/bin/jjtree
checking for javacc... $(JAVACC_DIR)/bin/javacc
</pre>
</ol>


<h2>Rebuilding</h2>
The Ptolemy II distribution includes the compiled Java <CODE>.class</CODE>
files and the <CODE>javadoc</CODE> output, so it is not
necessary to 'build' or run <CODE>make</CODE> to use Ptolemy II.

<h3><a name="Unix">Unix</a></h3>
 If you would like to rebuild from the Java sources under Unix,
you should set the <CODE>PTII</CODE> environment variable in your
environment.  Under C Shell:
<pre>
setenv PTII /users/ptII
</pre>
You may want to add that line to your <CODE>~/.cshrc</CODE> file.

 <p>To configure the makefiles,
run <CODE>$PTII/configure</CODE>, which is
a GNU autoconf script that looks for your Java compiler, reads in
<CODE>$PTII/mk/ptII.mk.in</CODE> and generates
<CODE>$PTII/mk/ptII.mk</CODE>:
<pre>
cd "$PTII"
rm -f config.*
./configure
</pre>
<CODE>$PTII/configure</CODE> creates <CODE>$PTII/config.status</CODE>
and <CODE>$PTII/config.cache</CODE>.  If you would like to reconfigure
Ptolemy II to use a different Java compiler, set your path so
that the appropriate compiler is first in your path, then
remove <CODE>config.status</CODE> and rerun configure.  You
may also use the <CODE>--with-java=</CODE> configure command line
argument.  For more information, run <CODE>configure -help</CODE>.


 <p>To build:
<pre>
make fast all
</pre>

<h3><a name="Windows">Windows</a></h3>
Ptolemy II was developed under Windows 2000.  We have successfully
installed Ptolemy II under Windows '98, but if you have problems under 
Windows '98 we recommend upgrading Windows 2000.

<p>To build Ptolemy II under Windows 2000:
<ol>
<li>Install JDK 1.4 from
<a href="http://java.sun.com/j2se/1.4/"><CODE>http://java.sun.com/j2se/1.4/</CODE></a>

 <p>Note that the code generation facility will not work with JDK1
 <p>Be sure to add the <CODE>bin</CODE> directory
to your path so that <CODE>javac</CODE> and <CODE>java</CODE>
are available.

<li> Install the <a name="cygwin">Cygwin</a> toolkit from
<a href="http://sources.redhat.com/cygwin/" target="_top"><CODE>http://sources.redhat.com/cygwin/</CODE></a>
 <p>Complete installation instructions can be found at
<a href="http://sources.redhat.com/cygwin/faq" target="_top"><CODE>http://sources.redhat.com/cygwin/faq</CODE></a>,
<p>The Cygwin installer tends to change
over time, but below is a summary of the steps
necessary:
 <ol>
 <li> Create an empty directory

 <li> Download <a href="http://sources.redhat.com/cygwin/setup.exe"><CODE>http://sources.redhat.com/cygwin/setup.exe</CODE></a>
and save it in the empty directory

 <li> Click on <CODE>setup</CODE>, then <code>Next</code>

 <li> Select <code>Install from Internet</code>, then 
click on <code>Next</code>

 <li> Use the default install root directory, which should
be <CODE>c:/cygwin</CODE>

 <li> Select 'Default Text File Type' of DOS.
 <br>If you select Unix instead of DOS, then you will likely have
 <a href="http://www.gigascale.org/softdevel/faq/23.html">Cygwin CR/NL problems</a> with CVS.
 

 <li> Then hit the <CODE>Next</CODE> button.

 <li> Use the default Local Package Directory, which should be the
 directory you created above.

 <li> If you are not behind a firewall, click on direct connection,
then click <code>Next</code>
 <li> Select a nearby mirror, then click <code>Next</code>

 <li> You will be presented with a list of packages to install.
  <br>The initial default installs packages from <CODE>Base</CODE>,
	which is roughly a 6Mb download that expands into about 26Mb
	of files.

         <p> If you are serious about development you may also want
         to install the packages below.  To install an individual package,
	 click on the <CODE>+</CODE> to the left of the group name, then 
	 click on the arrows to the right of the group name
         until <CODE>Default</CODE>  changes to <CODE>Install</CODE>
        <ul>

        <li> Devel Category
	<ul>
	 <li> autoconf - requires gawk and m4 from the Interpreters Category
	 <li> binutils, gcc, gettext, libintl libintl1, libtool, libtool-devel
	  - The matlab interface requires gcc and Matlab.  You may find
	  it easier to install all of the Devel category
	 <li> cvs 
	</ul>
        <li> Net Category
        <ul>
         <li> openssh - cvs may need this
         <li> openssl - required by openssh
        </ul>
        <li> Text Category: less
        </ul>
      </ol>

 <li> Hit <CODE>Next</CODE>, which should download the packages and
install them
 
 <li> Click on <CODE>Add icon to Start Menu</CODE>, and then
      <CODE>Finish</CODE>.
 
 <li>  Start up bash with
	<CODE>Start</CODE> -&gt; <CODE>Cygnus Solutions</CODE> -&gt;
	<CODE>Cygwin Bash Shell</CODE>
 
  </menu>


<li> <a name="settingptII">Set the value of the <CODE>PTII</CODE> environment variable</a>
to the
name of the directory where Ptolemy II is installed.
Under Windows XP, you set the environment variable via
the Environment tab of the System control panel
(<CODE>Start Menu </CODE> -&gt; <CODE>Settings</CODE> -&gt;
<CODE>Control Panels</CODE> -&gt; <CODE>System</CODE> -&gt;
<CODE>Advanced</CODE> -&gt; <CODE>Environment Variables</CODE>)
 <p>The PTII value should be set using back slashes so that javac
gets the right path if you've installed Cygwin in a location
other than <CODE>C:\</CODE> such as <CODE>C:\Cygwin</CODE>.

<BLOCKQUOTE>
If you have installed Cygwin in c:/cygwin, and your Ptolemy II installation
is in a directory outside of the c:/cygwin tree, then Cygwin may
change your PTII variable to include "/cygdrive/c".  This
will cause problems with non-Cygwin tools like javac that do
not understand /cygdrive/c.
 <p>The best fix for this is to move your home directory outside
of c:/cygwin.  An alternative is to place your Ptolemy II tree
outside of c:/cygwin.
<h3>How to tell Cygwin where your home directory is</h3>

<ol>
<li> Cygwin gets the location of your home directory from 
a line that contains your login in
<CODE>c:/cygwin/etc/passwd</CODE>.  If your login is
not listed, then run
<pre>
mkpasswd -l
</pre>
To list all the local accounts and add the line for your account
to <CODE>c:/cygwin/etc/passwd</CODE> using <CODE>workdpad</CODE>.
To start <CODE>wordpad</CODE>, do Start -&gt; Run and type in
<CODE>wordpad</CODE>.  
 <br>Note: you can use <CODE>mkpasswd -help</CODE> to get help.
If you are logged in to the domain and not the local machine, try
<pre>
mkpasswd -d | grep <I>yourlogin</I>
</pre>
to get just your login

<li> Edit <CODE>c:/cygwin/etc/passwd</CODE> with wordpad and
change the home directory from <CODE>/home/<I>yourlogin</I></CODE>
to <CODE>/cygdrive/c/users/<I>yourlogin</I></CODE>, which
will set your home directory as <CODE>c:/users/<I>yourlogin</I></CODE>
 <br> Save<CODE>c:/cyginw/etc/passwd</CODE>

<li> Start up a new bash shell and see where your home directory
is by typing <CODE>pwd</CODE>
</ol>

</BLOCKQUOTE>


 <p>An example PTII value would be:
<pre>
c:\users\yourname\ptII
</pre>

<blockquote>
<table border=2>
 <tr>
 <td>
 <h4>Cygwin directory mapping</h4>
 <p>Note that Cygwin remaps directories, so <CODE>d:\tmp</CODE>
may appear as <CODE>/cygdrive/d/tmp</CODE>.

 <p>Unfortunately, the <CODE>java</CODE> command
does not understand the Cygwin <CODE>/cygdrive</CODE> notation,
so <CODE>java</CODE> may not find the files it needs.

 <p>For example, <CODE>pwd</CODE>
returns <CODE>/cygdrive/d/tmp/ptII</CODE>, which will not work
with <CODE>java</CODE>:
<pre>
cxh@MOWAT-171 /cygdrive/d/tmp/ptII
$ PTII=d:\\tmp\\ptII

cxh@MOWAT-171 /cygdrive/d/tmp/ptII
$ echo $PTII
d:\tmp\ptII

cxh@MOWAT-171 /cygdrive/d/tmp/ptII
$ cd $PTII

cxh@MOWAT-171 /cygdrive/d/tmp/ptII
$ pwd
/cygdrive/d/tmp/ptII
</pre>

So, under Cygwin, it is best to avoid using pwd when setting
variables.  Avoid:
<pre>
PTII=`pwd`/ptII
</pre>
and use
<pre>
PTII=d:\\tmp\\ptII
</pre>
instead.  Note that the configure script checks for this sort of thing.

 </td>
 </td>
</table>
</blockquote>

<li> In the Environment tab, you should also set your path to include the location of the JDK bin directory (i.e. <CODE>C:\j2sdk1.4.1_01\bin</CODE>)

 <p>When you run cygwin.bat, your path
should be set to include the Cygwin tools.  You can test this
by typing <CODE>type make</CODE>, which should return
<pre>
make is /usr/bin/make
</pre>
If <CODE>make</CODE> cannot be found, then
you may also need to add the Cygwin bin directory
<CODE>c:\cygwin\usr\bin</CODE>
to your path.

<li> Optional: Install JavaCC, see the instructions
<a href="#javacc">above</a>.


<li> Start up Cygwin <CODE>bash</CODE>, and cd to the Ptolemy II directory.

<li> Run <CODE>rm -f config.*</CODE>
<li> Run <CODE>./configure</CODE>

<li> Run <CODE>make fast all</CODE>
<li> Now type <CODE>vergil</CODE> (or
<CODE>$PTII/bin/vergil</CODE> if you did not set your path) in the C
shell or cygwin Bash window and the Ptolemy II GUI should start up
</ol>


 <p>Currently, Ptolemy II does not support building via Microsoft
Visual Studio <CODE>nmake</CODE> under Windows.  Also, we have not
tried building Ptolemy II under Windows '95 or Windows '98.

 <p>The instructions for setting up a parallel tree using CVS can be found in
<a href="coding/develsetup.htm"><CODE>$PTII/doc/coding/develsetup</CODE>.</a>


<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
</body>
</html>
