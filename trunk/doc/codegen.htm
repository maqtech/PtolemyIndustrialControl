<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Code Generation</title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>Code Generation</h1>
Ptolemy II includes an experimental code generation implementation
that was first developed my Jeff Tsay as part of his Masters project.
(Jeff Tsay, "<a href="http://ptolemy.eecs.berkeley.edu/publications/papers/00/codegen/" target="_top">A Code Generation Framework for Ptolemy II</a>," ERL Technical Report UCB/ERL No. M00/25, Dept. EECS, University of California, Berkeley, CA  94720, May 19, 2000.)


<p>The codegen facility is not complete, but it is possible
to generate Java code for SDF systems and run it.  Simple
systems can be run on the Palm Pilot using 
<a href="kvm.htm">kvm</a>.

<h2>Initial Setup</h2
Currently, the following steps are necessary to get codegen running.
We hope to modify the codegen facility so that these steps are not necessary.

<h3>Skeleton Files</h3>
Currently, codegen uses skeleton files that include the type
signature of the Java methods and fields.  The skeleton filenames
end in <code>.jskel</code>, and can be thought of as a cache of the type signature of the methods and fields for a particular class.
<p>Skeleton files are used for with the Java runtime and within Ptolemy II.

<h4>Ptolemy II Skeleton Files</h4>
To generate Ptolemy II skeleton files:
<pre>
   cd ptolemy/lang/java
   make skeleton
</pre>
Note that we <b>don't</b> want to run Skeleton in any directory that contain
actors, like actor/lib or domains/sdf/lib because the code generator
needs to transform the code contained in actors.

<p>If jskel files are present in actor.lib, then you will end up
with the intialize() and fire() methods being declared native, which
will result in errors like:
<pre>
cxh@maury 15% java -classpath ../.. cg.orthocom.CG_Main
Exception in thread "main" java.lang.UnsatisfiedLinkError: initialize
at cg.orthocom.CG_Main.main(CG_Main.java, Compiled Code)
</pre>
<h4>Java Runtime Skeleton Files</h4>
The codegen facility also needs to read in skeleton files for
the java.lang and sun packages that are included with the Java runtime.
Unfortunately, we cannot redistribute these files.  Eventually, we
hope to use reflection to make these files unnecessary.

<p>Local users can download and install the Java Runtime skeleton files
with:
<pre>
scp carson://users/ptII/vendors/sun/src/javasrc_2.zip
</pre>
and then unzip the file in <code>$PTII/vendors/sun/src</code>

<p>Users without local access will need to generate skeleton files
for all the classes in the java and sun packages. 
<pre>
cd $PTII/ptolemy/lang/java
make javasrc_skeletons
</pre>


<h2>Demonstrations</h2>
<h3>Print out the AST</h3>
<pre>
cd $PTII/ptolemy/lang/java
make PrintTree
</pre> 
This rule sets the CLASSPATH and then runs
<pre>
java ptolemy.lang.java.PrintTree ./nodetypes/IntLitNode.java
</pre>
and prints out the AST.

<h3>Regenerate Code</h3>
<pre>
cd $PTII/ptolemy/lang/java
make RegenerateCode
</pre> 
This rule sets the CLASSPATH and then runs
<pre>
java ptolemy.lang.java.RegenerateCode ./nodetypes/IntLitNode.java
</pre>
which reads in IntLitNote.java and then regenerates code for it.

<h3>Semantic Analysis</h3>
<pre>
cd $PTII/ptolemy/lang/java
make analysis
</pre> 
This rule sets the CLASSPATH and then runs
<pre>
java ptolemy.lang.java.Main ./nodetypes/IntLitNode.java
</pre>
which reads in IntLitNote.java and then performs static
semantic analysis on it

<h3>SDF Code generation</h3>
<pre>
cd $PTII/ptolemy/lang/java
make codegen
</pre> 
This rule sets the CLASSPATH and then reads in the Ptolemy
simulation from
<a href="../ptolemy/domains/sdf/demo/orthocom"><code>ptolemy/domains/sdf/demo/orthocom</code></a> and generates code in
<a href="../cg/orthocom"><code>cg/orthocom</code></a>.
<pre>
java -verbose:class  ptolemy.domains.sdf.codegen.SDFCodeGenerator \
     -class  ptolemy.domains.sdf.demo.orthocom.OrthogonalComSystem \
     -iterations 50 \
     -outdir $(ROOT) -outpkg cg.orthocom
</pre>
<dl>
<dt><code>-iterations</code
<dd>Number of iterations.  If set to <code>0</code>, then run forever
<dt><code>-outdir</code
<dd>Root directory for output, usually set to $PTII
<dt><code>-outpkg</code
<dd>Package of output classes, usually set to <code>cg.<i>system</i></code>.
If <code>outdir</code> is set to <code>$PTII</code>, and
<code>outpkg</code> is set to <code>cg.orthocom</code>, then
the output classes will be created in <code>$PTII/cg/orthocom</code>

</dl>
Compile the newly created java classes with:
<pre>
cd $PTII/cg/orthocom
javac -classpath ../.. CG_Main.java
</pre>

Run the code generation classes
<pre>
cd $PTII/cg/orthocom
java -classpath ../.. cg.orthocom.CG_Main
</pre>




<h2>How Codegen Works</h2>
Codegen parses a Java file that contains a Ptolemy II system and
then generates Java code in a separate directory.
<h3>Packages and directories</h3>
<dl>
<dt><a href="../ptolemy/lang"><code>ptolemy/codegen</code></a>
<dd> Domain independent classes that implement Tokens, Exceptions and
generate code for actors.
<dt><a href="../ptolemy/lang"><code>ptolemy/lang</code></a>
<dd>
<dt><a href="../ptolemy/lang/java"><code>ptolemy/lang/java</code></a>
<dd>
<dt><a href="../ptolemy/lang/java/extended"><code>ptolemy/lang/java/extended</code></a>
<dd>
<dt><a href="../ptolemy/lang/java/nodetypes"><code>ptolemy/lang/java/nodetypes</code></a>
<dd> Generated by running <code>make run_GenerateVisitor</code>
in <code>$PTII/ptolemy/lang/java</code>

<dt><a href="../ptolemy/lang/java"><code>ptolemy/lang/java/ptbyacc</code></a>
<dd> C Source code for a Ptolemy II specific version of 
<a href="#ptbyacc"><code>ptbyacc</code></a>.

<dt><a href="../ptolemy/domains/sdf/codegen"><code>ptolemy/domains/sdf/codegen</code></a>
<dd> Classes used to generate Java code with SDF semantics including
SDF code generator and buffer handling.
The SDFTypeIdentifier class identifies SDFAtomicActor and SDF ports.
</dl>

<h2><a name="ptbyacc"><code>ptbyacc</code></a></h2>
<code>ptbyacc</code> is a parser generator written in C that
generates 
<a href="../ptolemy/lang/java/JavaParser.java"><code>ptolemy/lang/java/JavaParser.java</code></a> and the <code>.tbl</code> files in 
<code>ptolemy/lang/java</code>

<p> The original <code>byacc</code> source can be found at
<a href="http://www.lincom-asg.com/~rjamison/byacc" target="_top">http://www.lincom-asg.com/~rjamison/byacc</a>.  The top of JavaParser.java contains
a list of the modifications we have made.

<p> Usually it is only necessary to build or run <code>ptbyacc</code>
if there are large scale modifications to the Java parser.  Often, one
can just modify JavaParser.java directly.

<p> When JavaParser runs, it needs to load tables that contain
the parse data.  JavaParser first looks for <code>.bin</code> files
the directory where the JavaParser class is located.  If the <code>.bin</code>
files cannot be found, then the <code>.tbl</code> files are loaded
and <code>.bin</code> files are generated.
To regenerate the <code>.bin</code> files, run
<code>make update_tables</code> in 
<code>$PTII/ptolemy/lang/java</code>.
<br><bold>FIXME: make the read method static so that this is true</bold>

</body>
</html>
