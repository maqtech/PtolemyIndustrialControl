<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II 2.0beta Release Notes</title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#faf0e6">
<h1>Ptolemy II 2.0beta Release Notes</h1>

Ptolemy II is a set of Java packages supporting heterogeneous,
concurrent modeling and design.  Its <code>kernel</code> package
supports clustered hierarchical graphs, which are collections of
<I>entities</I> and <I>relations</I> between those entities.  Its
<code>actor</code> package extends the kernel so that entities have
functionality and can communicate via the relations.  Its
<I>domains</I> extend the actor package by imposing <I>models of
computation</I> on the interaction between entities.  Examples of
models of computation include discrete-event systems, dataflow,
process networks, synchronous/reactive systems, and communicating
sequential processes.

 <br>Ptolemy II includes a number of support packages, such as 
<code>graph</code>, providing graph-theoretic manipulations,

<code>math</code>, providing matrix and vector math and signal
processing functions,

<code>plot</code>, providing visual display of data,

<code>data</code>, providing a type system, data encapsulation and an
expression parser, etc.


Ptolemy II 2.0beta is a release of the Ptolemy II 
java classes and the Ptolemy II design document

 <p>The design document describes the Ptolemy II design and the implementation
of the Java classes.  The design document is not included
with Ptolemy II 2.0beta, but will be shipped with the Ptolemy II 2.0
production release.   In the interim, please see the "Using Vergil"
chapter (<a href="design/usingVergil/usingVergil.pdf">PDF</a> - 
<a href="design/usingVergil/index.htm">HTML</a>)


<h2>Complete List of Domains in Ptolemy II</h2>
 <!-- We include this list here since we will be posting the release notes
to the newsgroups etc.  See also main.htm
 -->
<ul>
<li> <a href="../ptolemy/domains/csp/doc/body.htm" target="body">CSP</a>:
	 communicating sequential processes,
<li> <a href="../ptolemy/domains/ct/doc/body.htm" target="body">CT</a>:
	continuous-time modeling,
<li> <a href="../ptolemy/domains/de/doc/body.htm" target="body">DE</a>:
	discrete-event modeling,
<li> <a href="../ptolemy/domains/dde/doc/body.htm" target="body">DDE</a>:
	distributed discrete events (experimental),
<li> <a href="../ptolemy/domains/dt/doc/body.htm" target="body">DT</a>:
	discrete time,
<li> <a href="../ptolemy/domains/fsm/doc/body.htm" target="body">FSM</a>:
b	 finite state machines,
<li> <a href="../ptolemy/domains/giotto/doc/body.htm" target="body">Giotto</a>:
	periodic time-driven (experimental),
<li> <a href="../ptolemy/domains/gr/doc/body.htm" target="body">GR</a>:
	3-D graphics (experimental),
 <!-- petrinet ??-->
<li> <a href="../ptolemy/domains/pn/doc/body.htm" target="body">PN</a>:
	process networks,
<li> <a href="../ptolemy/domains/sdf/doc/body.htm" target="body">SDF</a>:
	synchronous dataflow,
<li> <a href="../ptolemy/domains/sr/doc/body.htm" target="body">SR</a>:
	synchronous/reactive (experimental), and
<li> <a href="../ptolemy/domains/tm/doc/body.htm" target="body">TM</a>:
	timed multitasking (experimental).

</ul>

<h2>Platforms</h2>

The core of Ptolemy II 2.0 is 100% Java, so it should work on any
platform that has JDK1.3

 <p>We developed Ptolemy II 2.0 under Solaris 8 and Windows 2000 sr2
and with JDK1.3.1 and JDK1.4beta.  Note that code generation 
only works under JDK1.3.0 or 1.3.1 because of limitations in Soot.

Ptolemy II 2.0 will not compile under JDK1.2.2.

<p>The code generation facility requires JDK1.3.0, it will not
work under JDK 1.4.0

<!--whatsnew-->
<h2>Major Features that are new in Ptolemy 2.0 </h2>
<menu>

<li> <a href="../ptolemy/domains/ct/demo/Switch/Switch.htm">Modal Models</a>
 (Xiaojun Liu, Edward A. Lee)
<!-- Text from ptweb/projects/mobies/reports/01/3 -->
A modal model is an FSM (finite state machine) combined
hierarchically with other models. In our visual syntax, the system
builder directly interacts with this hierarchical view. If you look
inside the modal model, you will see a visual rendition of the FSM. If
you create a state in this FSM, then you can create a refinement, and
also you can look inside the state using the context menu on the state.
The refinement can be another FSM or some other model using some other
Ptolemy domain. For example, by using the CT domain (continuous time),
one can easily build hybrid systems.


<li> <a href="codegen.htm">Code Generation</a>
(Primary Author: Stephen Neuendorffer, Contributor: Christopher Hylands)
This release includes a limited prototype of our code generation facility
that will generate .class files for non-hierarchical SDF models

<li> <a href="codeDoc/ptolemy/data/unit/package-summary.html">ptolemy.data.unit</a> -
<a href="../ptolemy/data/unit/demo/Units/Units.htm">Units Demo</a>
(Primary Authors: Yuhong Xiong, Xiaojun Liu, Contributors: Winthrop Williams, Edward A. Lee)
<br>
A major source of errors in embedded software is incorrect application
of units. Yuhong Xiong and Xiaojun Liu have created a unit system for
Ptolemy II that is quite clever. A suite of constants are defined, with
names such as "meter", "cm", "feet", "miles", "seconds", "hours", and
"days". In each unit category ("length" or "time" for example), there
is a primary unit with respect to which all the others are specified.
Thus, for example, if the primary unit of length is meters, then the
expression "1.0 * cm" will have an internal value of 0.01 * meters.
Compound units are specified by just multiplying and dividing, as in
for example "1.0 * cm/second".

<p>The way this is realized is that these unit constants are tokens just
like other Ptolemy II data, and multiplication and division are
overloaded in the base classes for numeric valued tokens.  We continue
to work on this architecture to enable users to customize the unit
system on a per-model basis.

<li> <a href="../ptolemy/domains/tm/doc/body.htm" target="body">Timed Multitasking Domain</a>
(Jie Liu) - an implementation of a model of
computation based on priority-driven multitasking, as common in
real-time operating systems (RTOSs), but with more deterministic
behavior

<li> <a href="../ptolemy/domains/sr/doc/body.htm" target="body">Synchronous/Reactive Domain</a>:
(Primary Author: Paul Whitaker, Contributors: Elaine Cheong, John Reekie)

<li> <a href="webStartHelp.htm">Web Start</a>
 (Christopher Hylands) -  
Ptolemy II includes support to build distributions using Sun's Web Start
facility, which allows end users to download fully functional distributions
via the web.

</menu>

<h2>Other Features that are new in Ptolemy II 2.0</h2>

<ul>

<li> Vergil updates
(Steve Neuendorffer, Edward A. Lee, John Reekie
 Vergil has been improved
 and the following features have been added
	<menu>
	<li> Annotations - It is now much easier to annotate a model with
	text.
	<li> Parameters - The model can display top level parameter
	names and values
	<li> Snap to grid - It is now much easier to line up actors
	<li> Panner, zoom - The panner and zoom facilities make
	it easier to navigate large
	<li> Improved FSM editor
	<li> Animation - It is now possible to show which actors are firing
	when.
	<li> Better icons - Some icons such as Const, Scale and Expression
	will display their values.  
	<li> set data types of ports
	</menu>
See <a href="design/usingVergil/index.htm"><code>$PTII/doc/design/usingVergil/index.htm</code></a> for more complete information


<li> <a href="codeDoc/ptolemy/data/ByteToken.html">ptolemy.data.ByteToken</a>
(Winthrop Williams, Steve Neuendorffer) - A new Token supporting bytes.

<li> <a href="codeDoc/ptolemy/data/expr/package-summary.html">Expression improvements</a>
(Zoltan Kemenczy, Research In Motion, Ltd.)

<li> <a href="../ptolemy/domains/fsm/demo/MultipleRuns/MultipleRuns.htm">Multiple Runs</a>:
(Xiaojun Liu, Edward A. Lee) - The FSM domain as been extended
to perform multiple runs of refinement on a model

<li> <a href="codeDoc/ptolemy/graph/package-summary.html">ptolemy.graph</a>
 (Shuvra S. Bhattacharyya (University of Maryland at College Park)) -
The graph package was redesigned and reimplemented.

 <!-- Tcl shell is not shipping in 2.0, it makes the download larger.-->

</ol>

<h3>New Demonstrations</h3>

<menu>
<li> <a href="../ptolemy/domains/ct/doc/body.htm" target="body">CT</a>:
	Continuous Time
 <menu>
 <li> <a href="../ptolemy/domains/ct/demo/BouncingBall/BouncingBall.htm">Bouncing Ball</a>  (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
 A Continuous Time model that uses a Finite State Machine and the GR
 domain to simulate a bouncing ball.

 <li> <a href="../ptolemy/domains/ct/demo/CarTracking/CarTracking.htm">Car Tracking</a>
 A following car tracking a leading car in an unreliable 
 communication environment.

 <li> <a href="../ptolemy/domains/ct/demo/Switch/Switch.htm">Switching Continuous Signals</a>
 Shows how to handle hybrid systems with both continuous and discrete inputs
 and outputs.
 <li> <a href="../ptolemy/domains/ct/demo/Thermostat/Thermostat.htm">Modal Thermostat</a>
 A thermostat model where the refinements of the
 modes in the state machine are the same model.
 <li> <a href="../ptolemy/data/unit/demo/Units/Units.htm">Units</a>
 A demonstration of the Units facility
 </menu>



<li> <a href="../ptolemy/domains/fsm/doc/body.htm" target="body">FSM</a>:
	 Finite State Machines
 <menu>
 <li> <a href="../ptolemy/domains/fsm/demo/Blending/Blending.htm">Blending</a>
 A blending controller with two major control modes.
 <li> <a href="../ptolemy/domains/fsm/demo/MultipleRuns/MultipleRuns.htm">Multiple&nbsp;Runs</a> 
 A state machine performs multiple runs of the refinement of mode1. 
 </menu>

<li><a href="../ptolemy/domains/gr/doc/body.htm" target="body">GR</a>:
	3-D graphics (experimental)
 <menu>
 <li> <a href="../ptolemy/domains/gr/demo/FurutaPendulum/FurutaPendulum.htm">FurutaPendulum</a>
 The Furuta pendulum has a motor controlling the angle of an arm, from
 which a free-swinging pendulum hangs. The objective is to swing the
 pendulum up and then balance it.

 </menu>

<li> <a href="../ptolemy/domains/sdf/doc/body.htm" target="body">SDF</a>:
	Synchronous Dataflow
 <menu>
 <li><a href="../ptolemy/domains/sdf/demo/LMSAdaptive/LMSAdaptive.htm">LMSAdaptive</a>
 An adaptive filter
 <li><a href="../ptolemy/domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.htm">MaximumEntropySpectrum</a>
 A spectral estimation example
 </menu>


<li> <a href="../ptolemy/domains/sr/doc/body.htm" target="body">SR</a>:
	synchronous/reactive (experimental), and
 <menu>
 <li><a href="../ptolemy/domains/sr/demo/TokenRing/TokenRing.htm">TokenRing</a>
 A cyclic token-ring arbiter composed of three blocks.
 </menu>

<li> <a href="../ptolemy/domains/tm/doc/body.htm" target="body">TM</a>:
	timed multitasking (experimental).
 <menu>
 <li><a href="../ptolemy/domains/tm/demo/Controllers/Controllers.htm" target="main">Controllers</a>
   Two (independent) control loops whose controllers share the same CPU.
 <li><a href="../ptolemy/domains/tm/demo/FFT/FFT.htm" target="main">FFT</a>
   This model shows the use of background process for long running tasks in 
   the TM domain.
 <li><a href="../ptolemy/domains/tm/demo/MergedEvents/MergedEvents.htm" target="main">MergedEvents</a>
 <li><a href="../ptolemy/domains/tm/demo/SimpleTasks/SimpleTasks.htm" target="main">SimpleTasks</a>
  This model shows two independent tasks on a
  single CPU machine.
 </menu>


</menu>


<h3>New Actors</h3>

<menu>

<li> <a href="codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/actor/lib/Accumulator.html"><code>Accumulator</code></a>
<dd> (Edward A. Lee)
An actor that outputs the sum of the inputs so far.

<dt> <a href="codeDoc/ptolemy/actor/lib/BooleanMultiplexor.html"><code>BooleanMultiplexor</code></a> 
<dd> (Steve Neuendorffer)
A polymorphic multiplexor with boolean select.

<dt> <a href="codeDoc/ptolemy/actor/lib/BooleanSelect.html"><code>BooleanSelect</code></a> 
<dd> (Steve Neuendorffer)
A polymorphic multiplexor with boolean select.

<dt> <a href="codeDoc/ptolemy/actor/lib/BooleanSwitch.html"><code>BooleanSwitch</code></a> 
<dd> (Steve Neuendorffer)
A polymorphic multiplexor with boolean select.

<dt> <a href="codeDoc/ptolemy/actor/lib/ClassWrapper.html"><code>ClassWrapper</code></a> 
An actor that wraps (an instance of) a Java class.

<dd> (Xiaojun Liu)
<dt> <a href="codeDoc/ptolemy/actor/lib/Counter.html"><code>Counter</code></a> 
A constant source.

<dd> (Steve Neuendorffer)
<dt> <a href="codeDoc/ptolemy/actor/lib/Differential.html"><code>Differential</code></a> 
<dd> (Edward A. Lee)
An actor that outputs the difference between successive inputs.

<dt> <a href="codeDoc/ptolemy/actor/lib/DoubleReader.html"><code>DoubleReader</code></a> 
<dd> (Jie Liu, Christopher Hylands)
An actor that outputs doubles read from a URL.

<dt> <a href="codeDoc/ptolemy/actor/lib/Limiter.html"><code>Limiter</code></a> 
<dd> (Edward A. Lee)
An actor that limits the input to a specified range.

<dt> <a href="codeDoc/ptolemy/actor/lib/LinearDifferenceEquationSystem.html"><code>LinearDifferenceEquationSystem</code></a> 
<dd> (Jie Liu, Elaine Cheong)
Linear Difference Equation System.


<dt> <a href="codeDoc/ptolemy/actor/lib/LookupTable.html"><code>LookupTable</code></a> 
<dd> (Paul Whitaker, Christopher Hylands)
A lookup table that outputs internally stored data given an index Parameter.

<dt> <a href="codeDoc/ptolemy/actor/lib/NonStrictTest.html"><code>NonStrictTest</code></a> 
<dd> (Paul Whitaker, Christopher Hylands)
Check the input streams against a parameter value, ignoring absent values.

<dt> <a href="codeDoc/ptolemy/actor/lib/URLDirectoryReader.html"><code>URLDirectoryReader</code></a> 
<dd> (Christopher Hylands)
An actor that reads a URL naming a directory and outputs each
element of the directory one at a time.

<dt> <a href="codeDoc/ptolemy/actor/lib/VectorAssembler.html"><code>VectorAssembler</code></a> 
<dd> (Jie Liu, Elaine Cheong)
An actor that reads a token from each input channel to assemble a
DoubleMatrixToken.

<dt> <a href="codeDoc/ptolemy/actor/lib/VectorDisassembler.html"><code>VectorDisassembler</code></a> 
<dd> (Jie Liu, Elaine Cheong)
An actor that disassembles a DoubleMatrixToken to a multiport output.

<dt> <a href="codeDoc/ptolemy/actor/lib/WallClockTime.html"><code>WallClockTime</code></a> 
<dd> (Edward A. Lee)
Output the elapsed time in seconds.

</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/comm/package-summary.html">ptolemy.actor.lib.comm</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/comm/SerialComm.html"><code>SerialComm</code></a> 
<dd> (Winthrop Williams)
Read and write from a serial port
</dl>

<li> 
 <a href="codeDoc/ptolemy/actor/lib/conversions/package-summary.html">ptolemy.actor.lib.conversions</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/BooleanToAnything.html"><code>BooleanToAnything</code></a> 
<dd> (Edward A. Lee)
An actor that converts a boolean token into any other data type.

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/InUnitsOf.html"><code>InUnitsOf</code></a> 
<dd> (Yuhong Xiong, Xiaojun Liu, Edward Lee)
An actor that converts input tokens to specified units.

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/IntArrayToString.html"><code>IntArrayToString</code></a> 
<dd> (Michael Leung, Edward A. Lee, and Paul Whitaker)
An actor that converts an array of integers into a string.

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/LongToDouble.html"><code>LongToDouble</code></a> 
<dd> (Christopher Hylands)
An actor that converts a LongToken into a DoubleToken.

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/StringToIntArray.html"><code>StringToIntArray</code></a> 
<dd> (Winthrop Williams)
An actor that converts a string to an array of integers.

</dl>


<li> <a href="codeDoc/ptolemy/actor/lib/gui/package-summary.html">ptolemy.actor.lib/gui</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/gui/MatrixVisualizer.html"><code>MatrixVisualizer</code></a> 
<dd> (Neil Turner, Steve Neuendorffer)
An actor for 2-D visualization of matrices.

<dt> <a href="codeDoc/ptolemy/actor/lib/gui/RealTimePlotter.html"><code>RealTimePlotter</code></a> 
<dd> (Edward A. Lee)
Plot input data as a function of elapsed real time.

<dt> <a href="codeDoc/ptolemy/actor/lib/gui/SliderSource.html"><code>SliderSource</code></a> 
<dd> (Xiaojun Liu)
An actor whose output is controlled by a slider in the run window.

</dl>


<li> <a href="codeDoc/ptolemy/actor/lib/logic/package-summary.html">ptolemy.actor.lib.logic</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/logic/IsPresent.html"><code>IsPresent</code></a> 
<dd> (Edward A. Lee)
Output true if the input is present, false otherwise.
</dl>

<li> <a href="codeDoc/ptolemy/actor/lib/net/package-summary.html">ptolemy.actor.lib.net</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/net/DatagramReader.html"><code>DatagramReader</code></a> 
<dd> (Winthrop Williams)
An actor that asynchronously reads datagram packets.
<dt> <a href="codeDoc/ptolemy/actor/lib/net/DatagramWriter.html"><code>DatagramWriter</code></a> 
<dd> (Winthrop Williams)
An actor that sends its input as a UDP datagram packet.
</dl>

<li> <a href="codeDoc/ptolemy/domains/ct/lib/package-summary.html">ptolemy.domains.ct.lib</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/domains/ct/lib/EventSource.html"><code>EventSource</code></a> 
<dd> (Jie Liu)
Generate discrete events at prespecified time instants.
<dt> <a href="codeDoc/ptolemy/domains/ct/lib/FirstOrderHold.html"><code>FirstOrderHold</code></a> 
<dd> (Jie Liu)
An actor that takes a value and a derivative and does first order projection.

<dt> <a href="codeDoc/ptolemy/domains/ct/lib/LevelCrossingDetector.html"><code>LevelCrossingDetector</code></a> 
<dd> (Jie Liu)
A CT actor that detects level crossings of its trigger input signal.

</dl>

<li> <a href="codeDoc/ptolemy/domains/de/lib/package-summary.html">ptolemy.domains.de.lib</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/domains/de/lib/EventButton.html"><code>EventButton</code></a> 
<dd> (Winthrop Williams, Paul Whitaker)
An actor that generates an empty token in response to a click of a button.

<dt> <a href="codeDoc/ptolemy/domains/de/lib/EventFilter.html"><code>EventFilter</code></a> 
<dd> (Steve Neuendorffer, Sonia Sachs)
An actor that filters false boolean tokens.

<dt> <a href="codeDoc/ptolemy/domains/de/lib/Inhibit.html"><code>Inhibit</code></a>
<dd> (Steve Neuendorffer)
An actor that produces a copy of the most recent input each time

<dt> <a href="codeDoc/ptolemy/domains/de/lib/PreemptableTask.html"><code>PreemptableTask</code></a> 
<dd> (Elaine Cheong, Yang Zhao, Xiaojun Liu)
An actor that implements as preemptable task

<dt> <a href="codeDoc/ptolemy/domains/de/lib/Previous.html"><code>Previous</code></a> 
<dd> (Edward A. Lee)
An actor that outputs the previous event when it receives an event.


<dt> <a href="codeDoc/ptolemy/domains/de/lib/Queue.html"><code>Queue</code></a> 
<dd> (Steve Neuendorffer)
An actor that implements a queue of events.

<dt> <a href="codeDoc/ptolemy/domains/de/lib/QueueWithNextOut.html"><code>QueueWithNextOut</code></a> 
<dd> (Winthrop Williams, Steve Neuendorffer)
An actor that implements a queue of events with a nextOut port

<dt> <a href="codeDoc/ptolemy/domains/de/lib/SamplerWithDefault.html"><code>SamplerWithDefault</code></a> 
<dd> (Steve Neuendorffer, Jie Liu, Edward A. Lee)
An actor that produces a copy of the most recent input each time

</dl>

<li> <a href="codeDoc/ptolemy/domains/sdf/lib/package-summary.html">ptolemy.domains.sdf.lib</a>:


<dl>
<dt> <a href="codeDoc/ptolemy/domains/sdf/lib/DoubleToMatrix.html"><code>DoubleToMatrix</code></a> 
<dd> (Edward A. Lee)
An actor that converts a sequence of input tokens to a matrix.

<dt> <a href="codeDoc/ptolemy/domains/sdf/lib/MatrixToDouble.html"><code>MatrixToDouble</code></a> 
<dd> (Edward A. Lee)
An actor that converts a matrix to sequence of output tokens.

</dl>

</menu>


<h2>Backward compatibility issues</h2>
Most models developed under Ptolemy II 1.0.1 should run under Ptolemy II 2.0.

 <p>The MoMLParser has been extended to include a list of backward
compatibility filters that look for actors that have changed while
parsing a model.  The backward compatibility filters will make what
ever change is necessary, and the user will eventually be prompted to
save the model.  The filters themselves are defined in <a
href="codeDoc/ptolemy/moml/filter/package-summary.html">ptolemy.moml.filter</a>

 <p>Below are the backward compatibility issues
that are handled automatically.

<menu>
<li> ptolemy.moml.filter.AddEditorFactory:
 If a parameter has a <code>_location</code>, then
Add a VisibleParameterEditorFactory named <code>_editorFactory</code>
<li> ptolemy.moml.filter.AddIcon:
Add specialized icons that display the value
of one of the parameters.
<br>The affected actors are:
  <menu>
  <li>ptolemy.actor.lib.Scale
  <li>ptolemy.actor.lib.Const
  <li>ptolemy.actor.lib.TrigFunction
  <li>ptolemy.actor.lib.MathFunction
  <li>ptolemy.actor.lib.Expression
  </menu>
<li> ptolemy.moml.filter.HideAnnotationNames:
If an annotation name ends with
'annotation1', then add <code>_hideName</code> if necessary.

<li> ptolemy.moml.filter.PortNameChanges:
Update any actor port names that have been
renamed. 
  <br>Below are the actors that are affected, along with the old port name 
  and the new port name:
  <menu>
  <li>ptolemy.actor.lib.Sleep
  <br>&nbsp;&nbsp;		delay	 -&gt; sleepTime
  <li>ptolemy.actor.lib.conversions.ComplexToCartesian
  <br>&nbsp;&nbsp;		imag	 -&gt; y
  <br>&nbsp;&nbsp;		real	 -&gt; x
  <li>	ptolemy.actor.lib.conversions.CartesianToComplex
  <br>&nbsp;&nbsp;		imag	 -&gt; y
  <br>&nbsp;&nbsp;		real	 -&gt; x
  </menu>

<li>ptolemy.moml.filter.PropertyClassChanges:
Update any actor port class names that have been renamed. 
  <br>Below are the actors that are affected, along with the port name 
  and the new classname:
   
  <menu>
  <li>	ptolemy.domains.sdf.lib.vq.ImageUnpartition
  <br>&nbsp;&nbsp;		output	 -&gt; ptolemy.actor.TypedIOPort
  <br>&nbsp;&nbsp;		input	 -&gt; ptolemy.actor.TypedIOPort
  <li>	ptolemy.actor.lib.javasound.AudioReader
  <br>&nbsp;&nbsp;		sourceURL	 -&gt; ptolemy.data.expr.Parameter
  <li>	ptolemy.domains.sdf.lib.vq.VQDecode
  <br>&nbsp;&nbsp; 		output	 -&gt; ptolemy.actor.TypedIOPort
  <br>&nbsp;&nbsp;		input	 -&gt; ptolemy.actor.TypedIOPort
  <li>	ptolemy.domains.sdf.lib.vq.HTVQEncode
  <br>&nbsp;&nbsp;		output	 -&gt; ptolemy.actor.TypedIOPort
  <br>&nbsp;&nbsp;		input	 -&gt; ptolemy.actor.TypedIOPort
  <li>	ptolemy.domains.sdf.lib.vq.ImagePartition
  <br>&nbsp;&nbsp;		output	 -&gt; ptolemy.actor.TypedIOPort
  <br>&nbsp;&nbsp;		input	 -&gt; ptolemy.actor.TypedIOPort
  </menu>
</menu>

Below are the changes that are not handled automatically:
<menu>
<li> ct.kernel.CTRealTimeDirector has been removed, the fix
is to use ct.kernel.CTDirector instead and to 
set the synchronizeToRealTime parameter to true.

<li> DDE: RcvrComparator renamed to ReceiverComparator

<li> actor.lib.Reader is now actor.lib.DoubleReader
 <br> The Reader class was
included in the Ptolemy II 1.0.1 download, but was not part of the 
default configuration.
</menu>

If you have developed your own actors under Ptolemy II 1.0.1 by
writing your own Java files, you should recompile all your java code with
the new release.  In theory, copying the .class files should work, but
recompiling is safer.

<!--/whatsnew-->

<h2>Major Features that were new in Ptolemy II 1.0.1 </h2>
<menu>
<li> Vergil - the Ptolemy II GUI
(Steve Neuendorffer and Edward A. Lee)
<li> Giotto Domain
	(Christoph M. Kirsch, Benjamin Horowitz, Thomas A. Henzinger)
<li> Java 3D Domain (GR Domain) (Chamberlain Fong)
<li> Discrete Time Domain (Chamberlain Fong)
<li> CORBA/Jini work (Jie Liu)
</menu>

<h2>Other Features that were new in Ptolemy II 1.0.1</h2>

<ul>
<li> The actor classes are more robust and have been reviewed.

<li> <a href="codeDoc/ptolemy/actor/gui/package-summary.html">User interface utilities for applets and applications</a>

<li> Live editing of models and parameters;
<li> Network integration;
<li> <a href="codeDoc/ptolemy/data/type/package-summary.html">A sophisticated type system including:</a>
     <ul>
     <li> <a href="../ptolemy/domains/sdf/demo/Type/Type.htm">Type constant propagation,</a>
     <li> <a href="codeDoc/ptolemy/data/type/RecordType.html">Record types,</a>
     <li> <a href="codeDoc/ptolemy/data/type/ArrayType.html">Array types,</a> and
     <li> <a href="codeDoc/ptolemy/data/FixToken.html">Fixed-point type</a>
     </ul>
<li> <a href="expression.htm">An expression language for parameter expressions;</a>
<li> <a href="codeDoc/ptolemy/actor/lib/package-summary.html">Data and domain polymorphic component library;</a>
<li> <a href="codeDoc/ptolemy/actor/lib/Expression.html">A polymorphic expression actor;</a>
<li> <a href="codeDoc/ptolemy/moml/package-summary.html">A very simple XML file format called MoML;</a>
<li> <a href="../ptolemy/plot/doc/body.htm" target="body">A flexible signal plotter;</a>
<li> Several domains with concurrent models of computation (
<a href="../ptolemy/domains/csp/doc/body.htm" target="body">CSP</a>,
<a href="../ptolemy/domains/pn/doc/body.htm" target="body">PN</a>,
<a href="../ptolemy/domains/dde/doc/body.htm" target="body">DDE</a>
)
<li> Hierarchically interoperable domains
(<a href="../ptolemy/domains/ct/demo/SigmaDelta/SigmaDelta.htm" target="main">CT/FSM Accelerometer demo</a>);

<li> <a href="docbody.htm" target="body">On-line documentation (in HTML);</a>
<li> <a href="../ptolemy/actor/lib/javasound/demo/KarplusStrong/KarplusStrong.htm" target="main">Audio signal processing capabilities;</a></br>
</ul>

<!--vergilDocs-->
<h2>Limitations</h2>
Version 2.0 has a number of limitations.

<h3>Release Limitations</h3>
<menu>

<li> The gzipped tar file that contains the Ptolemy II distribution
 <B>requires</B> GNU tar or WinZip.  Solaris 2.5.1 tar will fail to
untar this file with a checksum error because the pathnames are longer
than 100 characters.  If you do not have GNU tar, you can obtain
source and selected binaries from 
ftp://ptolemy.eecs.berkeley.edu/pub/gnu.

<li> The Ptolemy II 2.0-beta release does not include the design
document.  We will include an updated version of the design document
in the full release.  The Ptolemy II 1.0 design document can be found
in:

<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/designdoc.htm#in_browser">Ptolemy Web Site</a>

<li> The Using Vergil html file has some bogus characters in it.

<li> <code>vergil foo</code> hangs.  No window comes up if foo does not exist.

<li> The documentation for custom actors used in demonstrations is not
included in the release.

<li> Dragging the UnitConversion icon into a blank canvas will
throw an exception because UnitConversion requires data
in the other Unit icons.

</menu>



<li> Applet issues:
	<menu>
	<li>   Look inside on a composite actor fails :
	"Cannot look inside with a configuration"
	<li> Applets that use MoMLViewerApplet do not auto start.
	These applets include
		<ul>
		<li> Giotto applets
		<li> SDF Expression, FixPoint, LMSAdaptive, MaximumEntropy
		</ul>


	<li> SDF Spectrum plot is not filled at the end
	<li> $PTII/doc/expression.htm needs to be updated

<li> The DDE Zeno demo produces an error message in the Java Plug-in console
window:
<pre>
java.lang.IllegalArgumentException: LowerJoin - Attempt to set current time to the past; time = 50.001. The _lastTime was 54.0
	at ptolemy.domains.dde.kernel.PrioritizedTimedQueue.put(PrioritizedTimedQueue.java:297)
	at ptolemy.domains.dde.kernel.DDEReceiver.put(DDEReceiver.java:580)
	at ptolemy.domains.dde.kernel.DDEReceiver.put(DDEReceiver.java:549)
	at ptolemy.domains.dde.kernel.FeedBackDelay._sendOutToken(FeedBackDelay.java:247)
	at ptolemy.domains.dde.kernel.FeedBackDelay.fire(FeedBackDelay.java:175)
	at ptolemy.actor.process.ProcessThread.run(ProcessThread.java:126)
ptolemy.actor.Manager run(): elapsed time: 23004 ms
</pre>

<li> Running the Networked demo via an applet on the local
file system results in an AccessControlException.
<pre>
com.microstar.xml.XmlException: XML element "entity" triggers exception:
  java.lang.Exception: Attempted to lookup 'Waveform', but got: 
  java.lang.ClassNotFoundException: Waveform
Attempted to find as a moml class, but got: java.security.AccessControlException: access denied (java.net.SocketPermission ptolemy.eecs.berkeley.edu resolve) in file:/C:/Program Files/Ptolemy/Ptolemy II 2.0 beta2/ptolemy/moml/demo/Networked/ at line 62 and column 118
	at ptolemy.moml.MoMLParser.startElement(MoMLParser.java:1341)
	at com.microstar.xml.XmlParser.parseElement(XmlParser.java:944)
	at com.microstar.xml.XmlParser.parseContent(XmlParser.java:1117)
	at com.microstar.xml.XmlParser.parseElement(XmlParser.java:946)
	at com.microstar.xml.XmlParser.parseDocument(XmlParser.java:495)
	at com.microstar.xml.XmlParser.doParse(XmlParser.java:175)
	at com.microstar.xml.XmlParser.parse(XmlParser.java:145)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:492)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:471)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:456)
	at ptolemy.actor.gui.MoMLApplet._createModel(MoMLApplet.java:188)
</pre>

The Network demo does not work as a local applet because the xml file
includes a reference to http://ptolemy.eecs.berkeley.edu, which is
not on the local file system, so we get a SecurityException.

	</menu>

<li> Web Start issues:
	<menu>
	<li> Applet generation still does not work in the Web Edition
	<li> Invoking a pdf file or the code generator brings up a blank
	 window.
	<li> Web Start is limited to about 65Mb of memory
	 <br>If you try to run all the demos, then eventually you may
	see the following in the Web Start console
<pre>
761 ms. Memory: 65280K Free: 3614K (6%)
7471 ms. Memory: 65280K Free: 931K (1%)
Exception occurred during event dispatching:
java.lang.OutOfMemoryError

	&lt;&lt;no stack trace available&gt;&gt;
</pre>
	</menu>
</menu>

<h3>Limitations in the Actor Libraries</h3>
<menu>
<li>The actor library is far from complete.
<li>The Expression actor does not properly propagate type constraints in
an expression-dependent fashion. It works correctly for double-valued
expressions of double-valued inputs.

<li> The Ptolemy parameter parser uses comma "," to separate elements
in an array.  This causes problems when Ptolemy is run on
European machines that use a comma "1,0" instead of a period "1.1"
in floating point numbers.

<li> The readFile() parameter function does not work with applets.

<!-- If you change the next paragraph update install.htm -->
<li>The Matlab interface works only under Windows and it requires that
Matlab be installed on the local machine.  The Matlab interface has
been tested with Matlab 6.1, which corresponds with R12.1.

<li> The actor.lib.comm.SerialComm actor requires that Javacomm is installed

<a href="http://java.sun.com/products/javacomm/index.html#in_browser" target="_top"><CODE>http://java.sun.com/products/javacomm/index.html</CODE></a>.  The SerialComm actor
will only work under Windows.

</menu>

<h3>Limitations in the PN Domain</h3>
The PN domain documents that it locally handles mutations.  However, this
is currently not true in the implementation.  For the basic PN model, this
doesn't really matter, since mutations happen pretty much the same as they
would otherwise.  (i.e. they are non-deterministic in when they execute) 
However, for timed PN models, there is actually some expressiveness
lost, since timed PN models can locally execute mutations deterministically.


<h3>Limitations in the User Interface</h3>

Below are some of the limitations of Vergil, the Ptolemy II Graphical
User Interface.

<menu>
<li> You should not change the names of built in ports - The port
mechanism should disallow port name changes on ports that are
named in Java.  The UI could recognize this.  The UI should
not allow the user to remove built in Java defined ports.
<li> Query needs to be put into a scroll pane

<li> Manually setting of the types of actors like ArrayToSequence that
have constraints on their element types can cause problems.

<li> HTVQ demo is badly laid out when run under vergil
	
<li> The Vergil HTML Viewer does not correctly handle internal hyperlinks.
The codegen page is especially difficult to use because of this.

<li>No undo mechanism.
<li>Weak support for multiports in the graph editor.
<li>It is difficult to control wire routing.
<li>Cannot have more than one vertex in a connection.
<li>No mechanism to set the width of a relation.
<li>The integrated web browser is not a full-featured browser.
<li>Icon editor not yet integrated.
<li>Debugger not yet integrated.
<li>It is difficult to add actors to the libraries.
<li>No dynamic class reloading.
</menu>

<h3>Code Generation Limitations</h3>
Code Generation limitations are covered on the
<a href="codegen.htm#limitations">Code Generation</a> page. 

</menu>

<h3>Missing Domains</h3>
<menu>
<li>Boolean and integer dataflow.
<li>Dynamic dataflow
</menu>
<!--/vergilDocs-->
<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
 <!-- Leave a trailing p here so that there is a little space at the bottom -->
 <p>
</body>
</html>
