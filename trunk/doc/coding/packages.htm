<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../default.css" rel="stylesheet" type="text/css">
<title>Ptolemy II Package Design</title>
</head>
<body>
<h1><A NAME="java">Ptolemy II Package Design</A></h1>
<p>
Ptolemy II uses the Java package system to group classes.
</p>
<menu>
<li> Packages are (roughly) small enough that the UML static structure
diagram for the package fits on one page.  Larger packages are possible
when there is a compelling reason to keep classes together, or when
the classes have such a regular structure that their architecture is
easily grasped.

<li> Bidirectional dependencies between packages should be avoided.
If two packages
are dependent upon each other, it makes it hard to determine which
package to compile first.  Below are the possibilities
	<menu>
	<li> Remove the dependency
	<li> Combine the two packages into one package
	<li> Move the dependency into a third package, which
	will probably be a subpackage of one of the packages.
	</menu>

<li> A subpackage is a package that is beneath a parent package in the
directory hierarchy.  For example <CODE>ptolemy.kernel.util</CODE> is a
subpackage of <CODE>ptolemy.kernel</CODE>.  The makefiles are structured so
that we run make in the subdirectories first so in general, it is best
if subpackages do not depend on the parent package (the reverse is OK).


<li> The test suite for a package should only use packages that
are already depended upon by the package under test.  This rule
cannot always be followed, but if it is followed, it makes it much
easier to reuse a package since the tests will not require extra
packages.
</menu>
</body>
</html>
