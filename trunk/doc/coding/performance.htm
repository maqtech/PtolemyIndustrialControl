<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../default.css" rel="stylesheet" type="text/css">
<title>Performance</title>
</head>
<body>
<h1>Performance</h1>
Contents
<menu>
<li> <a href="#profiling">Profiling</a>
<li> <a href="#remoteresources">Remote resources</a>
</menu>

<h2><a name="profiling">Profiling</a></h2>
 <p>In JDK1.3, try
<pre>
java -Xrunhprof:help
</pre>

<h2>Simple timing</h2>
One simple way to time a run is to modify
the <CODE>run()</CODE> method in ptolemy.actor.Manager so that
<CODE>System.out.println(new Date()).getTime())</CODE> is called
at the start and the end of the <CODE>run()</CODE> method.

 <p>You may also need to include the following at the top with the other
import statements.
<pre>
import java.util.Date;
</pre>

<h2><a name="performance">Performance</a></h2>
Measuring the performance of an Applet inside a browser is tricky.

 <p><a href="http://help.netscape.com/kb/consumer/19970907-1.html" target="_top"><CODE>http://help.netscape.com/kb/consumer/19970907-1.html</CODE></a>
says
<pre>
To troubleshoot your Java applets in UNIX environment, you can start Communicator with the "-java" switch.


 #netscape -java
 Usage: -java [-options] class

 where options include:
     -help             print out this message
     -version          print out the build version
     -v -verbose       turn on verbose mode
     -debug            enable remote JAVA debugging
     -noasyncgc        don't allow asynchronous garbage collection
     -verbosegc        print a message when garbage collection occurs
     -noclassgc        disable class garbage collection
     -cs -checksource  check if source is newer when loading classes
     -ss&lt;number&gt;       set the maximum native stack size for any thread
     -oss&lt;number&gt;      set the maximum Java stack size for any thread
     -ms&lt;number&gt;       set the initial Java heap size
     -mx&lt;number&gt;       set the maximum Java heap size
     -D&lt;name&gt;=&lt;value&gt;  set a system property
     -classpath &lt;directories separated by ':'&gt;
                       list directories in which to look for classes
     -prof[:&lt;file&gt;]    output profiling data to ./java.prof or ./&lt;file&gt;
     -verify           verify all classes when read in
     -verifyremote     verify classes read in over the network [default]
     -noverify         do not verify any class
</pre>

 <p>And
<a href="http://help.netscape.com/kb/consumer/19970907-2.html" target="_top"><CODE>http://help.netscape.com/kb/consumer/19970907-2.html</CODE></a>

<pre>
You can automatically startup the Java Virtual Machine as you launch
 Communicator. This will prevent Communicator from restarting the
 Java Virtual Machine each time you browse pages that have Java applets
 or audio files played by the liveaudio plugin.

 The command to use is :
 "C:\Program Files\Netscape\Communicator\Program\netscape.exe" -start_java

 You can edit the properties of your start icon of the Communicator
 to add the option. You can also start the messenger (or other
 component) the same way by :
 "C:\Program Files\Netscape\Communicator\Program\netscape.exe" -start_java -mail

 Note: This doesn't seem to work on NT3.51
</pre>

<h3>Memory Leaks</h3>
Under C and C++, one must manage memory by hand.  

 <p>Java has a garbage collector, which helps, but memory leaks are
still possible. Usually, an object is marked as being eligible for GC
when it goes out of scope.  Or, if the value of the object is null,
then it may be GC'd.  However, an object will not be garbage collected
if the object has references to it.  This is how we get memory leaks.

 <p>We can <B>ask</B> that the garbage collector be run with
<pre>
System.gc();
</pre>
For example, we do this in the code generator after building
the large AST that represents the java.lang and ptolemy.kernel classes.

 <p>Finalization is what happens before an object is GC'd.  We
can force the system to run the <CODE>finalize</CODE> method
on all objects that are waiting to be finalized with:
<pre>
System.runFinalization();
</pre>


For further information, see
<a href="http://www.javasoft.com/docs/books/tutorial/java/data/garbagecollection.html" target="_top">Java Tutorial Page about Garbage Collection</a>
and
<a href="http://www-106.ibm.com/developerworks/java/library/j-leaks/" target="_top">IBM page about memory leaks</a>

<h3>Increasing the size of the Heap</h3>
Sometimes, as a workaround, all that is necessary is to increase the
size of the Java heap.  The <code>java</code> command takes non-standard
commands like <code>-Xmx<i>size</i></code> to set the maximum stack
size.  For example, under Cygwin, to run with a 256 megabyte heap size:
<pre>
export JAVAFLAGS=-Xmx256m
$PTII/bin/vergil
</pre>
To see what other <code>-X</code> commands are available, run
<pre>
java -X
</pre> 

<h3>HP's JMeter</h3>
HP's JMeter is a tool available as a free download after a quick registration
from
<a href="http://www.hp.com/products1/unix/java/hpjmeter/">http://www.hp.com/products1/unix/java/hpjmeter/</a>.
HP's JMeter works with Java 1.2 through 1.5.

<p>To generate the profile, do
c:/Program\ Files/java/jdk1.5.0_05/bin/java  -Xmx256M "-Dptolemy.ptII.dir=c:/cxh/ptII" -Xrunhprof:heap=all,depth=30 -classpath "c:\cxh\ptII;c:\cxh\ptII\lib\diva.jar" ptolemy.vergil.vergilApplication


To run the HP JMeter tool:
<pre>
java -Xmx256m -jar $PTII/vendors/hpjmeter/HPjmeter.jar
</pre>
Then open up the <code>java.prof.txt</a>

<p>JMeter reported a syntax error, I then had to edit v.hprof.txt and
move two bogus lines:

<pre>
ROOT 50000105 (kind=<thread>, id=200000, trace=300000)
ROOT 50000187 (kind=<thread>, id=200003, trace=300000)
HEAP DUMP BEGIN (4250 objects, 298272 bytes) Tue Jun 08 11:23:54 2004
</pre>
became

<pre>
HEAP DUMP BEGIN (4250 objects, 298272 bytes) Tue Jun 08 11:23:54 2004
ROOT 50000105 (kind=<thread>, id=200000, trace=300000)
ROOT 50000187 (kind=<thread>, id=200003, trace=300000)
</pre>
<h3>Heap Analysis Tool</h3>

Heap Analysis Tool (HAT) is a freely available tool from 
<a href="https://hat.dev.java.net/">https://hat.dev.java.net/</a>
that
can process -Xrunhprof data.  HAT works best with Java 1.2,
it did not work for me with Java 1.4.2:
<pre>
java.io.IOException: Stack trace not found for serial # 0
	at hat.parser.HprofReader.getStackTraceFromSerial(HprofReader.java:611)
	at hat.parser.HprofReader.readArray(HprofReader.java:777)
</pre>
 <p>See the 
<a href="http://developer.java.sun.com/developer/onlineTraining/Programming/JDCBook/perf3.html">JDC Book that discusses Heap Analysis Tool</a> for
downloads and further information.

 <p>Generate a hprof file:
<pre>
 java -Xrunhprof:file=vergil.hprof,format=b -classpath $PTII/lib/diva.jar\;$PTII/ptolemy/vergil/vergil.jar\;$PTII/ptolemy/ptolemy.jar\;$PTII ptolemy.vergil.VergilApplication
</pre>

<pre>Run HAT:
java -classpath hat.zip\;$PTII/lib/diva.jar\;$PTII/ptolemy/vergil/vergil.jar\;$PTII/ptolemy/ptolemy.jar\;$PTII -mx100m hat.Main vergil.hprof
</pre>


<h2><a name="remoteresources">Remote resources</a></h2>

<h3>Commercial Profilers</h3>
<menu>
<li> <a href="http://www.alphaworks.ibm.com/tech/heaproots?open&ca=daw-rss-s8" target="_top">IBM's HeapRoots</a> (Free download after registration?)

<li> <a href="http://www.student.nada.kth.se/~d94-rol/jmp/" target="_top">JMP</a> GPL'd, written in C, uses GTK


<li> <a href="http://www.hp.com/products1/unix/java/hpjmeter/" target="_top">HP's JMeter</a> (Free download after registration)

<li> <a href="http://www.sitraka.com/software/jprobe/" target="_top">JProbe</a> (Commercial tool)

<li> <a href="http://www.ej-technologies.com/docs/javamemoryleak/default.html" target="_top">JProfile</a>

<li> <a href="http://www.rational.com/index.jsp" target="_top">Purify</a> - 
<a href="http://www-106.ibm.com/developerworks/rational/library/1791.html" target="_top">Case Study</a>

<li> <a href="http://www.borland.com/optimizeit/" target="_top">Optimizeit Suite</a>

<li> <a href="http://www.metrowerks.com" target="_top">Metrowerks</a>

<li> <a href="http://wwws.sun.com/software/Developer-products/ffj/index.html" target="_top">Sun's Forte For Java</a>
<li> <a href="http://www.rational.com/products/quantify_unix/index.jsp" target="_top">Quantify</a>
</menu>

<h3>Java and Optimization</h3>

<menu>

<li> <a href="http://java.sun.com/j2se/docs/PerformanceFAQ.html" target="_top">Java HotSpot FAQ</a>

<li> <a href="http://developer.java.sun.com/developer//technicalArticles/Programming/perfanal/index.html" target="_top">PerfAnal: A Performance Analysis Tool</a>
(March 2000 Java Developer Connection Article - The JDC requires registration, but is free to join)

 <li><a href="http://developer.java.sun.com/developer/onlineTraining/Programming/JDCBook/perf3.html" target="_top">JDC Book that discusses Heap Analysis Tool</a>

<li> <a href="http://developer.java.sun.com/developer/TechTips/2000/tt0124.html#tip2" target="_top">Java.sun.com article - TechUsing Hprof to Tune performance</a>

<li> <a href="http://www.javaworld.com/javaworld/jw-09-1998/jw-09-speed.html" target="_top"> September 1998 Javaworld article</a> - includes a benchmark applet
<li> <a href="http://www.javaworld.com/javaworld/jw-04-1997/jw-04-optimize.html" target="_top">March 1997 Javaworld article</a> - includes a benchmark applet
<li> <a href="http://www.javasoft.com/docs/books/tutorial/essential/system/garbage.html" target="_top">JavaSoft Tutorial garbage collection information</a>
<li> <A HREF="http://www.cs.cmu.edu/~jch/java/" target="_top">CMU Java optimization page</A>
<li> <a href="http://developer.java.sun.com/developer/onlineTraining/Programming/JDCBook/perf3.html" target="_top">developer JDBC Book</a>

<li> <a href="http://patrick.net/jpt/" target="_top">"Some tips on Java Performance"</a>
</menu>


<h3>Benchmarks</h3>

<menu>

<li> <a href="http://dir.yahoo.com/Computers_and_Internet/Programming_and_Development/Languages/Java/Benchmarks/" target="_top">Yahoo Java Benchmarks</a>

<li> <a href="http://www.webfayre.com/pendragon/jpr/index.html" target="_top">Java Performance Report</a> (1997)

</menu>

<h3>Scripting and Java</h3>

<menu>
<li> <A HREF="http://cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html" target="_top">Kernighan Scripting Benchmark paper</A>
<li> <a href="http://ptolemy.eecs.berkeley.edu/~cxh/java/tclblend/scriptperf/index.html" target="_top">Ptolemy Group Scripting Benchmark paper</a>
</menu>

<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
</body>
</html>
