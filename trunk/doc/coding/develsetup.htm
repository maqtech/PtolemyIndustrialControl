<!--$Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../default.css" rel="stylesheet" type="text/css">
<title>Setting up a development tree</title>
</head>
<body>
<h1>Setting up a development tree</h1>

This page describes how local developers setup parallel development
trees.  The information below is primarily for use by developers at
U.C. Berkeley.  Remote sites doing Ptolemy II development may want to
emulate the U.C. Berkeley developer setup.

<h2>Parallel trees</h2>
Locally, the master development tree is in <CODE>~ptII</CODE>.
We use the Concurrent Versions System (CVS) to manage the source files.
For more information about CVS, see
<a href="http://www.sourcegear.com/CVS" target="_top"><CODE>http://www.sourcegear.com/CVS</CODE></a>

Locally, the CVS Repository is in <CODE>~cvs/Repository</CODE>.

To create a copy of the Ptolemy II tree, follow the steps below:
<ol>
<li> Verify that the <CODE>CVSROOT</CODE> environment variable is set
to <CODE>~cvs/Repository</CODE>

<li> The most common location for a Ptolemy II tree is in 
<CODE>~/ptII</CODE>.  To create a copy of the tree in <CODE>~/ptII</CODE>:
<pre>
cd
cvs checkout ptII
</pre>


<li> Set the <CODE>PTII</CODE> environment variable to the location
of your Ptolemy II tree.  In this case, under C shell:
<pre>
setenv PTII ~/ptII
</pre>


<li> cd to the directory where your Ptolemy II tree is and run
<pre>
cd $PTII
configure
make
</pre>

</ol>


<h2>Browsing your tree from the web</h2>
If you would like to be able to browse your development tree from the
web, then you should set it up so that the development tree is
not publically available to anyone on the net.

<ol>
<li>  Create a directory for your private webpages:
<pre>
mkdir ~/public_html/private
</pre>

An alternative name is <CODE>~/public_html/local</CODE>

<li> Create a link to a <CODE>.htaccess</CODE> file that limits access:
<pre>
cd ~/public_html/private
ln -s /usr/local/apache/htaccess/ohmCluster .htaccess
</pre>

<li>  Create any links you want from that directory.
<pre>
ln -s ~/ptII .
</pre>
</ol>

<h2>Releases</h2>
Below are the steps to build a release
<ol>
<li> Clean the tree by running <CODE>make checkjunk</CODE>
and adding files as appropriate to the makefiles

<li> Run <a href="../../util/testsuite/chkjava"><CODE>$PTII/util/testsuite/chkjava</CODE></a> on the java files and fix problems

<li> Run <a href="../../util/testsuite/jindent"><CODE>$PTII/util/testsuite/jindent</CODE></a> on the java files and indent the files to the Ptolemy II
coding standard.

<li> Run <CODE>$PTII/adm/copyright/fixcopyrights</CODE> (not shipped with
the release) and update the copyrights on the <CODE>.java</CODE>, <CODE>.tcl</CODE> and makefiles

<li> Run the nightly build, build a release and run 
<CODE>$PTII/adm/copyright/chkcopyright</CODE> on all the files.

<pre>
find . -type f -print &gt; ~/tmp/ff
sh ~ptII/adm/copyright/chkcopyright `cat ~/tmp/ff | grep -v .class | grep -v codeDoc | grep -v xml | grep -v alljtests.tcl | grep -v .htm | grep -v qcf | grep -v .dtd | grep -v gif` 
</pre>

<li> Tag the tree as the release tree and create a branch
For more information about CVS, see the 
<a href="http://www.gigascale.org/softdevel/faq/1/" target="_top">Gigascale CVS Pages</a>

 <p>To make a branch for 0.4beta, use the following command:
<pre>
cd $PTII
cvs tag -b rel-0-4-beta
</pre>
Then check out the release branch  with
<pre>
cd ~/src
cvs co -r rel-0-4-beta ptII
mv ptII ptII0.4
</pre>

<li> The nightly build uses a makefile in ~ptII/adm (not shipped)
to build the release.  Copy the most recent makefile and
set up a new tree for the release tree.

</ol>


<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
</body>
</html>
