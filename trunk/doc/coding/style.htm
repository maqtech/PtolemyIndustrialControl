<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../default.css" rel="stylesheet" type="text/css">
<title>Programming Style for Ptolemy II</title>
</head>
<body>
<h1>Programming Style for Ptolemy II</h1>
<p>
The following programming style is followed in the Ptolemy II project.
Please submit comments or suggestions to eal@eecs.berkeley.edu.
<ol>
<li><a href="#proofreading">Proofreading</a>
<li><a href="#indentation">Indentation</a>
<li><a href="#spaces">Spaces</a>
<li><a href="#comment conventions">Comment conventions</a>
<li><a href="#naming conventions">Naming conventions</a>
<li><a href="#global variables">Global variables</a>
<li><a href="#java exceptions conventions">Java exceptions conventions</a>
<li><a href="#documentation conventions">Documentation conventions</a>
<li><a href="#HTML documentation conventions">HTML documentation conventions</a>
<li><a href="#applet conventions">Applet conventions</a>
<li><a href="#copyright conventions">Copyright and acknowledgements</a>
<li><a href="#emacs">Emacs</a>
</ol>

<h2><a name="proofreading">Proofreading</a></h2>

Software has become a publication medium.  People will read your code.
Your name is on it, so you want to be proud of it.  It seems that most
people stop working on the code when it "works."  This is like stopping
work on a paper when what it says is correct, and not worrying at all
about how it is said.  PROOFREAD YOUR CODE AFTER YOU'VE GOT IT WORKING.
 <p>
<a href="../../util/testsuite/chkjava"><CODE>$PTII/util/testsuite/chkjava</CODE></a> is a script that will indicate certain
problems with your code. To run it, type
<pre>
   $PTII/util/testsuite/chkjava *.java
</pre>
 <p>You should also spell check your code with <CODE>spell *.java</CODE>.
See also the <a href="reviews.htm">Reviews</a> and
<a href="testing.htm">Testing</a> pages

<h2><a name="indentation">Indentation</a></h2>

Tabs are 8 space characters, not the tab character.
The reason for this is that code becomes unreadable when the Tab
character is interpreted differently by different viewers.
Do not override this in your text editor.
Nested statements should be indented 4 characters, as in:
<pre>
public class NamedObj implements Nameable, Serializable, Cloneable {

    /** Construct an object in the default workspace with an empty string
     *  as its name. The object is added to the list of objects in
     *  the workspace. Increment the version number of the workspace.
     */
    public NamedObj() {
        this(_defaultworkspace, "");
    }
</pre>
Closing brackets should be on a line by themselves, aligned with
the beginning of the line that contains the open bracket.
<p>
Long lines (which are common, especially for Tk commands)
should be broken up into many small lines.  Continuation lines
are indented by 8 characters, as in
<pre>
        $prefix.m.edit.menu add command &#92
                -label "Select All" &#92
                -underline 0 &#92
                -accelerator "C-/" &#92
                -command "$this selectall"
</pre>
Notice that the line breaks are carefully chosen so
that the options are easy to identify.  Avoid the following
variant:

<pre>
        $prefix.m.edit.menu add command &#92
                -label "Select All" &#92
                -underline 0 -accelerator "C-/" &#92
                -command "$this selectall"
</pre>
Glancing at this, it is easy to miss the <CODE>-accelerator</CODE>
option.

In Java, you can often use the <CODE>+</CODE> operator to concatenate
<CODE>Strings</CODE> together:
<pre>
	return "This is a really " +
	       "long string";
</pre>

<h2><a name="spaces">Spaces</a></h2>

Be sure to use spaces between language elements in a consistent fashion.
<menu>
<li> Use a space after each comma:
	<ul>
	<li> Right: <CODE>foo(a, b);</CODE>
	<li> Wrong: <CODE>foo(a,b);</CODE>
	</ul>

<li> Use spaces around operators such as plus, minus, multiply, divide or
equals signs:
	<ul>
	<li> Right: <CODE>a = b + 1;</CODE>
	<li> Wrong: <CODE>a=b+1;</CODE>

	<li> Right: <CODE>for (i = 0; i &lt; 10; i += 2)</CODE>
	<li> Wrong: <CODE>for (i=0; i&lt;10; i+=2)</CODE>
	</ul>
</menu>


<h2><a name="comment conventions">Comment conventions</a></h2>

<MENU>
<LI> Comments should include honest information about the limitations of
the object definition.

<LI> Comments should be complete sentences and complete thoughts.

<li> Spelling and grammar should be correct.
</MENU>


<h2><a name="naming conventions">Naming conventions</a></h2>

<p>In Java, there is no limit to name sizes (as it should be).
Do not hesitate to use long names.

 <P>Method and variable names that are <CODE>protected</CODE>
or <CODE>private</CODE> are preceded by
a leading underscore "<CODE>_</CODE>".
(as in <CODE>_protectedMethod()</CODE>, <CODE>_privateMethod()</CODE>.

 <P>Method names should have internal capitalization and start with
a lower case letter (as in <CODE>aPublicMethod()</CODE>).

 <P>If possible, variables should not use internal capitalization
unless the name is long.  This makes it easier to distinguish between
methods and variables.  However, avoiding capitalization in variable
names is up to the implementer.

 <P><CODE>static final</CODE> constants should be in uppercase, with
  words separated by underscores if necessary, as in
<CODE>INFINITE_CAPACITY</CODE>.

 <P>Method and variable names should avoid using underscores internally, except
if they are <CODE>static final</CODE> constants.

<h2><a name="java exceptions conventions">Java exceptions conventions</a></h2>
Java exception classes should follow these conventions.
<MENU>
<LI> <CODE>ptolemy</CODE> package exceptions should extend
<A HREF="../../ptolemy/kernel/util/KernelException.java">KernelException</A>
or java.lang.RuntimeException.

<LI> Exceptions should be defined in the same package as the classes
that throw them or in packages that they depend on.
The exceptions in java.lang follow this convention.

<LI> In Java, most Exceptions have two constructors, a nullary constructor
and a constructor that takes a String detail argument.
 <br> In the Ptolemy II kernel, Exceptions have these two constructors
as well as constructors that take one or two NamedObj arguments.
The purpose of the NamedObj arguments is to provide a uniform interface
and look and feel to exception messages.


<LI> When throwing an exception, it is best if the detail message is
a complete sentence that includes a string that describes the object
that caused the exception.  For example
<PRE>
throw MyException(this, "The list already contains an element named `" +
	getElementName() +"'.");
</PRE>


<li> An <CODE>@exception</CODE> tag should always read like this:

<pre>
   * @exception MyException If such and such occurs.
</pre>


Notice that the body always starts with "If", not "Thrown if", or
anything else.  Just look at the Javadoc output to see why this occurs.

In the case of an interface or base class that does not throw the
exception, use the following:

<pre>
   * @exception MyException Not thrown in this base class.  Derived
   *  classes may throw it if such and such happens.
</pre>

</MENU>
<h3>Runtime exceptions</h3>
The principle for throwing exceptions is this:

<BLOCKQUOTE>
  If a testable precondition of a method is violated,
  throw a runtime exception. Otherwise throw
  a regular exception.
  A testable precondition is an assumption mady by the method that
  can be tested prior to calling the method.
</BLOCKQUOTE>

<h4>Example 1</h4>

Receiver.get() may not be able to supply a
token. The precondition is

<pre>
  Domain is blocking || data is available
</pre>


If there is no data in a non-blocking domain,
then the precondition fails.
This can be tested by calling <CODE>hasToken()</CODE>.
NoSuchItemException
(preferably with a better name) should therefore
be a runtime exception.

<h4>Example 2</h4>


 <p>MutationRequest.processEvents() may fail because
a mutation request failed. There is no reasonable
and checkable precondition for calling this method,
therefore MutationFailedException is a regular
exception.



<h2><a name="HTML documentation conventions">HTML documentation conventions</a></h2>
If you are writing HTML documentation, please follow these conventions
<menu>

<li> <a href="templates/text.htm"><CODE>$PTII/doc/coding/templates/text.htm</CODE></a> is a template of what a HTML text file should look like
<li> The title should be a <CODE>h1</CODE> type header and should
not be centered
<li> Any subheadings after the title should be <CODE>h2</CODE>
<li> If you refer to a web page outside of the Ptolemy II tree, be sure
to use the <CODE>_top</CODE> target so that when the user
clicks on the link, the Ptolemy II pages are obscured and the
remote page is opened in the full browser window.  For example,
the HTML should look like:
<pre>
&lt;a href="http://www.javasoft.com" target="_top"&gt;JavaSoft&lt;/a&gt;
</pre>

<li> Use the following footer on files
<pre>
&lt;p&gt;&lt;font size="2" color="#cc0000"&gt;Last Updated: $Date$&lt;/font&gt;
</pre>
The above text should be on one line so that we can easily update
the color via scripts.

<li> There is no need to include a <CODE>mailto:</CODE>
link or a Copyright on the bottom of most pages.

<li> In general, avoid using <CODE>&lt;HR&gt;</CODE>, the
frames layout makes <CODE>&lt;HR&gt;</CODE> unnecessary.

</menu>

<h2><a name="applet conventions">Applet conventions</a></h2>
Applets should have the same look and feel as other HTML pages.
See the <a href="applets.htm">Applet information for Ptolemy II Developers</a>
page for links to Applet resources and other information.

<menu>
<li> Applets that are demonstrations should follow these naming guidelines:
<menu>
<li> Each individual applet should be in its own directory -
this make it easier to move applets around, and retire old applets

<li> The directory that contains an applet and the name of the
<CODE>.htm</CODE> file that runs the applet should have the same base.
For example, <CODE>ct/demo/SigmaDelta/SigmaDelta.htm</CODE> is
the <CODE>.htm</CODE> file that runs the CT Sigma Delta Applet.

</menu>


<li> All of the essential parts of the applet should be visible
if the browser is set to fill the screen of an XGA display.
The essential parts of the demo include the controls and any output
widgets, such as plots.

<li> The explanation of the demo should follow the applet.

<li> It is best if the applet does not bring up separate windows, all of
the activity should occur within the main browser window.


<li> All applets should use the <a href="../install.htm#Plugin">JDK1.3
plugin</a>.  Using the plugin complicates the html for the applet.
The Java Plugin website includes a converter that converts an html file
from a JDK1.1 applet to a JDK1.3 plugin.  The resulting html
has two sections, one for Internet Explorer, one for Netscape.
 <br> The section within <CODE>&lt;Object ... &lt;COMMENT</CODE> is
for Internet Explorer.
 <br> The section within <CODE>&lt;EMBED&gt;...&lt;&lt;/EMBED&gt;</CODE>
is for Netscape.
<a href="templates/applet.htm"><CODE>$PTII/doc/coding/templates/applet.htm</CODE></a> contains a sample template with the two sections.

<li> Most applets should include the following jar files.  Note that
since we are using the plugin, the each jar file will need to be mentioned
twice, once for IE, once for Netscape
	<dl>
	<dt> <CODE><I>YourApplet.jar</I></CODE>
	<dd> A jar file containing all the class files necessary for
	your applet.  Usually all the classes that are in the
	demo directory go into this jar file.  If this is the
	case, then the makefile should set <CODE>PTPACKAGE</CODE>
	to the name of the demo, and then the install rule should depend
	on <CODE>PTCLASSJAR</CODE>:
<pre>
PTPACKAGE = 	BusContention
[...]
install: jclass $(PTCLASSJAR)
</pre>

	<dt> <CODE>lib/diva.jar</CODE>
	<dd> If the applet uses Diva, then this file will need to be included

	<dt> <CODE>ptolemy/ptsupport.jar</CODE>
	<dd> The jar file that contains class files necessary for
	all demos.  See
	<a href="../../ptolemy/makefile"><CODE>$PTII/ptolemy/makefile</CODE></a>
	for a list of what is in <CODE>ptsupport.jar</CODE>

	<dt> <CODE>ptolemy/domains/<I>domain</I>/<I>domain</I>.jar</CODE>
	<dd> The jar file that contains the kernel and library for
	the domain of this applet
	</dl>

<li> Test your applet under Netscape and Internet Explorer under
NT and under Netscape under Solaris.

<li> The makefile for each applet should have a demo rule that looks
like:
<pre>
demo:
	CLASSPATH="$(CLASSPATH)" appletviewer ComSystem.htm
</pre>

Note that the double quotes around CLASSPATH are necessary for
demos that use diva under NT because the darn CLASSPATH separator
is a semicolon.

<li> The makefile for a directory above a set of demos should have
a rule like:
<pre>
demo: subdemo
</pre>
so that <CODE>make demo</CODE> will run the demos in the subdirectory
</menu>



<h2><a name="copyright conventions">Copyright and Acknowledgements</a></h2>

We would prefer to be able to release Ptolemy II with the
<A HREF="../../copyright.txt">standard UC Berkeley copyright</A>,
which allows for subsequent commercialization.
However, this is a large project, and we should use existing
code as much as possible.  The following scenarios are possible:
<ul>
<li> An uncopyrighted program (public domain) is used either verbatim
or as inspiration.  In this case, it is essential to acknowledge the
author and institution originating the code, but this has no effect
on our copyright policy.

<li> A copylefted program (under the Gnu public license) is used
as inspiration.  If there is no verbatim code used, then it
is sufficient (and necessary) to acknowledge the author and
institution.

<li> A copylefted program or portion of a program is used verbatim.
This will place the entire Ptolemy II program under the Gnu public license,
and therefore should be done only with good reason.  We are
not averse to doing this.  If you include copylefted code,
<em>be sure to identify every line of code that is borrowed in this
way</em>.  This will allow us (or someone else) to later rewrite this
code and liberate Ptolemy II from the copyleft.

</ul>
In all cases, any foreign code that you use should be carefully
read and tested.  Yes, it should be read!
Preferably, it should be reformatted to fit our programming
style, but if it is a large piece of code, it is probably not
worth doing.  We will need to devise a scheme to avoid
confusing the automatic documentation generator.
If it is Tcl/Tk code, it <em>must</em> be ported to Tk 4.0
(a nontrivial task).  If it is not Itcl code, it should
be carefully searched for namespace violations.

 <P>If your file is based on a file that has non-UC Berkeley
copyrights, then you should be sure to include the copyrights.

 <P>If your file is a rewrite of a previously copyrighted file from UC
Berkeley, then you should include the date from that file.

<h2><a name="emacs">Emacs</a></h2>
Emacs includes  the <CODE>cc-mode</CODE>, which will auto-indent Java
code.
 <p>To set up Emacs to follow the Ptolemy II coding style, see
<a href="../../util/testsuite/ptjavastyle.el"><CODE>$PTII/util/testsuite/ptjavastyle.el</CODE></a> and follow
the instructions at the top.

<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
</body>
</html>
