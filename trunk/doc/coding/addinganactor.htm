<!-- $Id -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../default.css" rel="stylesheet" type="text/css">
<title>Adding An Actor to Ptolemy II</title>
</head>
<body>
<H1>Adding An Actor to Ptolemy II</H1>
Below are instructions for adding an actor to Ptolemy II
and making it visible in Vergil.  
 <p>Chapter 4 of
the Ptolemy II Design Document at
<a href="http://ptolemy.eecs.berkeley.edu/publications/papers/01/HMAD"><CODE>http://ptolemy.eecs.berkeley.edu/publications/papers/01/HMAD</CODE></a>
discusses how to design actors, but the design document does
not discuss compiling the actor and adding it to Vergil.  The reason
for this omission is because we are hoping to eventually have a cleaner
method for adding actors.  The text below is a how-to guide for
the current environment

 <p> For this example, we are going to take the Ramp actor
and change the default step from <CODE>1</CODE> to <CODE>2</CODE>.
The new actor will be called Ramp2.

<p> The instructions below assume that you have installed
the Java Development Kit (JDK), which includes the <CODE>javac</CODE>
binary, that you have a <CODE>make</CODE> binary and other tools installed,
that Ptolemy II has been installed, and that <CODE>$PTII/configure</CODE>
and <CODE>make</CODE> have been run.  For details about the
installation process, see
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII1.0/ptII1.0/doc/install.htm"><CODE>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII1.0/ptII1.0/doc/install.htm</CODE></a>
 <p>Under Windows 2000 with JDK1.3 and Cygwin, to do the setup, I did:
<pre>
bash-2.04$ PTII=c:\\Program\ Files\\Ptolemy\\Ptolemy\ II\ 1.0.1
bash-2.04$ export PTII
bash-2.04$ cd "$PTII"
bash-2.04$ ./configure
bash-2.04$ make &gt;&amp; make.out
</pre>
If <CODE>configure</CODE> has problems, check to make sure your path
includes your jdk1.3/bin directory.  To check, use the <CODE>echo</CODE> command.
<pre>
bash-2.04$ echo $PATH
</pre>
Configure and make usually generate a few errors.  Errors do not
necessarily indicate failure of the process.

 <p>Below are the steps necessary to add an actor:
<ol>

<li> Create the new <CODE>.java</CODE> file that implements your actor:
	<ol>
	<li> In this case, we are just copying a <CODE>Ramp.java</CODE> to
	<CODE>Ramp2.java</CODE>
	<pre>
	cd "$PTII/ptolemy/actor/lib"	
	cp -p Ramp.java Ramp2.java
	</pre>
	Note that if we had copied our java code from a <i>different
	directory</i>, we would also have to change the package
	statement (usually near line 31) in the java code.
	This is good to keep in mind since
	there is no error message to clue you in to this particular error.<p>
	
	<li> Edit <CODE>Ramp2.java</CODE> and change:
	<menu>
<li> <pre>
public class Ramp extends SequenceSource {
</pre>
to
<pre>
public class Ramp<B>2</B> extends SequenceSource {
</pre>

<li> <pre>
    public Ramp(CompositeEntity container, String name)
            throws NameDuplicationException, IllegalActionException  {
</pre>
to
<pre>
    public Ramp<B>2</B>(CompositeEntity container, String name)
            throws NameDuplicationException, IllegalActionException  {
</pre>

<li> <pre>
        step = new Parameter(this, "step", new IntToken(1));
</pre>
to
<pre>
        step = new Parameter(this, "step", new IntToken(<B>2</B>));
</pre>

<li> <pre>
        Ramp newObject = (Ramp)super.clone(workspace);
</pre>
to
<pre>
        Ramp<B>2</B> newObject = (Ramp<B>2</B>)super.clone(workspace);
</pre>

</menu>
	</ol>

<li> Edit the <CODE>$PTII/ptolemy/actor/lib/makefile</CODE>
and add <CODE>Ramp2.java</CODE> to the value of <CODE>JSRCS</CODE>.
A good place for this is just after the <CODE>Ramp.java \</CODE>
line:
<pre>
	Quantizer.java \
	Ramp.java \
	RandomSource.java \
</pre>
<pre>
	Quantizer.java \
	Ramp.java \
	<B>Ramp2.java \</B>
	RandomSource.java \

</pre>
This step is not strictly necessary, but it is good programming
practice to put all source files in the makefile.
Another reason we add it to the makefile is so that our new actor
will be included in the <CODE>lib.jar</CODE> file.<p>

<li> Run <CODE>make</CODE> in the <CODE>$PTII/ptolemy/actor/lib</CODE>
directory (which is where you should already be).  <CODE>make</CODE>
will descend into the subdirectories and compile any needed files
and eventually run
<pre>
rm -f `basename Ramp2.java .java`.class
CLASSPATH="../../.." "/cygdrive/c/jdk1.3/bin/javac" -g -O Ramp2.java
</pre>
and <CODE>Ramp2.class</CODE> will be produced.<p>

<li> Edit <CODE>$PTII/ptolemy/actor/lib/sources.xml</CODE>
and add Ramp2 just after the lines for Ramp
 <br>Change:
<pre>
&lt;entity name="Ramp" class="ptolemy.actor.lib.Ramp"&gt;
&lt;doc&gt;Create a sequence of tokens with increasing value&lt;/doc&gt;
&lt;/entity&gt;

&lt;entity name="SequentialClock" class="ptolemy.actor.lib.SequentialClock"&gt;
&lt;doc&gt;A clock producing exactly one output per clock tick&lt;/doc&gt;
&lt;/entity&gt;
</pre>
To:
<pre>
&lt;entity name="Ramp" class="ptolemy.actor.lib.Ramp"&gt;
&lt;doc&gt;Create a sequence of tokens with increasing value&lt;/doc&gt;
&lt;/entity&gt;

<B>&lt;entity name="Ramp2" class="ptolemy.actor.lib.Ramp2"&gt;
&lt;doc&gt;Create a sequence of tokens with increasing value 2&lt;/doc&gt;
&lt;/entity&gt;
</B>
&lt;entity name="SequentialClock" class="ptolemy.actor.lib.SequentialClock"&gt;
&lt;doc&gt;A clock producing exactly one output per clock tick&lt;/doc&gt;
&lt;/entity&gt;

</pre>

<li> Start up Vergil.
<pre>
bash-2.04$ vergil
</pre>
If this does not work, you may not have created an alias for vergil.  Try specifying the full path name, like this.
<pre>
bash-2.04$ "$PTII/bin/vergil"
</pre>

<li> In Vergil, click on <u>File</u>-&gt;<u>New</u>-&gt;<u>Graph Editor</u><p>

<li> In the Graph Editor window, click on <u>actor library</u>-&gt;<u>sources</u>.
The Ramp2 actor will appear. <p>

<li>  To test the Ramp2 actor:
<ol>
<li> Drag the Ramp2 actor over to the main canvas on the right

<li> Clock on <u>actor library</u> -&gt; <u>sinks</u> and drag a Display actor
over to the main canvas

<li> Connect the two actors by left clicking on the output
of the ramp2 actor and dragging over to the input of the Display actor

<li> Select <u>director library</u> -&gt; <u>SDF</u> and drag the SDF director
over to the right window

<li> Select <u>View</u> -&gt; <u>Run</u> and change the number of iterations
from <CODE>0</CODE> to <CODE>10</CODE>, then hit the Run button.

<li> You should see the numbers from 0 to 18 in the display

</ol>


</ol>

<h2>Adding a new palette</h2>
The palette on the left side of the Graph editor lists the utilities,
directors and actors available for use in Vergil.

 <p>To add a new set of actors, we first create a .xml file
that lists the actor.  In this case, the file
is called <CODE>$PTII/ptolemy/actor/lib/myactors.xml</CODE>,
and it contains one actor, <CODE>Ramp2</CODE>:


<pre>
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE plot PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd"&gt;
&lt;entity name="myactors" class="ptolemy.moml.EntityLibrary"&gt;
  &lt;configure&gt;
    &lt;?moml
      &lt;group&gt;
&lt;doc&gt;My Actors&lt;/doc&gt;
&lt;entity name="Ramp2" class="ptolemy.actor.lib.Ramp2"&gt;
&lt;doc&gt;Create a sequence of tokens with increasing value of 2&lt;/doc&gt;
&lt;/entity&gt;

      &lt;/group&gt;
    ?&gt;
  &lt;/configure&gt;
&lt;/entity&gt;

</pre>

 <p>The palette and menus are determined by configuration files.
There are one or more configuration files for each pallet.
Their filenames, as of May 2002, are shown below.  For the latest
information, check the configuration file one level above these,
which is usually named 
<CODE>$PTII/ptolemy/configs/vergilConfiguration.xml</CODE>
<pre>
<u>pallet</u>            <u>configuration file(s)</u>

utilities         $PTII/ptolemy/configs/utilitiesLibrary.xml

director library  $PTII/ptolemy/configs/ptinyDirectors.xml
                  $PTII/ptolemy/configs/experimentalDirectors.xml

actor library     $PTII/ptolemy/configs/ptinyActors.xml

more libraries    $PTII/ptolemy/domains/domains.xml
                  $PTII/ptolemy/configs/automataLibrary.xml
                  $PTII/ptolemy/actor/lib/comm/comm.xml
                  $PTII/ptolemy/actor/lib/esoteric.xml
                  $PTII/ptolemy/copernicus/copernicus.xml
                  $PTII/ptolemy/matlab/matlab.xml
                  $PTII/ptolemy/actor/lib/matrix.xml
                  $PTII/ptolemy/actor/lib/test.xml
	          $PTII/ptolemy/apps/apps.xml"/>
</pre>

We want to add our new pallet, myactors.xml, to the actor library pallet
so we will add it's filename to 
<CODE>$PTII/ptolemy/configs/ptinyActors.xml</CODE>.
Note that we want our new pallet to be a sub 
pallet of the actor library pallet,
just as the sources pallet is.  The <CODE>input</CODE> statements 
below do not cause the inputted pallet to be a sub pallet.  
Sub-palleting is caused by the <CODE>entity</CODE>
statement in the 4th line of your myactors.xml file.

 <p>In <CODE>ptolemy/configs/ptinyActors.xml</CODE> we change
<pre>
            &lt;doc&gt;default entity library&lt;/doc&gt;
            &lt;input source="../actor/lib/sources.xml"/&gt;
</pre>
to:
<pre>
            &lt;doc&gt;default entity library&lt;/doc&gt;
            &lt;input source="../actor/lib/myactors.xml"/&gt;
            &lt;input source="../actor/lib/sources.xml"/&gt;
</pre>

Then restart vergil, and your myactors sub-palette will appear under
'actor library'.

</body>
</html>
