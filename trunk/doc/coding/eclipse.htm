<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <title>Setting up Ptolemy II and Eclipse</title>
<link href="../default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>Setting up Ptolemy II and Eclipse</h1>
<p>
These instructions assume you are using Eclipse 3.3 under Windows.
Other ways of setting up and building Ptolemy II are described on the
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/install.htm">
Ptolemy II install page</a>. 
<p>Contents of this page:
<menu>
<li><a href="#Installing">Install Eclipse</a>
<li><a href="#Preferences">Eclipse Preferences for Ptolemy II</a><
<li><a href="#SettingUp">Set up Eclipse for Ptolemy II</a>
<li><a href="#simpleDebug">Simple Debugging Session</a></h2>
<li><a href="#Optional">Optional Extensions</a>
<li><a href="#Troubleshooting">Troubleshooting</a>
</menu>
Other local pages:
<menu>
<li><a href="performance.htm#Eclipse">Profiling using TPTP</a>
</menu>
<h2><a name="Installing">Install Eclipse</a></h2>
<ol>
<li>
Download the latest version of Eclipse from
<a href="http://www.eclipse.org" target="_top">http://www.eclipse.org</a>.
 <br>In June, 2008, we chose <B>Eclipse IDE for Java Developers</B>, which is
<CODE>eclipse-java-europa-winter-win32.zip</CODE> (79Mb). 
<p>The version we installed was Eclipse 3.3.2, BuildId M20080221-1800.

<li>
Unzip the download file into an appropriate place, such as <code>C:\Program Files</code>, which will create <code>C:\Program Files\eclipse\eclipse.exe</code>.
<li>
Finish the installation by running <CODE>eclipse/eclipse.exe</CODE>.
<br>The first time this is run it will complete the installation process.
<br>After the first run, normal start-up will occur whenever it is started.
</ol>

<h2><a name="Preferences">Eclipse Preferences for Ptolemy II</a></h2>
<p>
The default configuration of Eclipse has some difficulties with Ptolemy II,
so a few changes are necessary.
<ol>
<li>
We will need to change the default memory size for Eclipse
because Ptolemy II is a big project.
In Windows,  create a shortcut to eclipse.exe by going to the
directory where Eclipse is installed, right clicking on eclipse.exe
and selecting <code>Create Shortcut</code>.

<p>Then right mouse click on the shortcut and select Properties and change
the target to increase the memory allocated by default. E.g.,
if you installed Eclipse in <CODE>C:\Program Files\eclipse</CODE>,
then the Target should read:
<pre>
   "C:\Program Files\eclipse\eclipse.exe" -vmargs -Xmx256M
</pre>
The maximum memory size will now be 256 megabytes when you restart
Eclipse.  You may allocate more memory if you wish.
<p>To add Eclipse to the start menu, right click on the shortcut and 
select <code>Pin to Start Menu</code>
<p>
<li>Eclipse requires some customization to build Ptolemy II
and to keep the <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/coding/style.htm" target="_top">Ptolemy II coding style</a>.
In the steps below, we
outline changes to be made in the Eclipse Preferences window,
which is invoked via <code>Window</code> | <code>Preferences</code>.
For each of the
changes, hit <code>Apply</code>.  When all the changes are done, hit
<code>OK</code>, which will close the Eclipse Preferences Window.

<li>
By default, Eclipse rebuilds a project when any change is made
to a file.  This will result in thousands of errors when Ptolemy II
is first checked out, and during normal usage, can be annoying because
of the pauses it creates. We suggest disabling this feature as
follows:
<ol>
<li> While still in the preferences window 
  (<code>Window</code> | <code>Preferences</code>).
<li> Select <code>General</code> | <code>Workspace</code>
<li> Deselect <code>Build automatically</code>.
<li> Click Apply. 
</ol>
<p>
<li>

Ptolemy II source files are worked on by many people with different
editors.  Unfortunately, different text editors interpret tab
characters differently, so it is best to use spaces rather than tabs.
<br>Sadly, the Eclipse developers have chosen to use tabs
as spaces, so you must adjust the Eclipse Java Formatter
if you plan on contributing code to the Ptolemy II tree.

<br>Also, it is best if files end with new line characters, so
that we can run line oriented scripts on them.
<br>In addition, we currently do not want the Eclipse Formatter
to format comments.  We hope to change this policy in the future.

<br>We handle these changes together:
 <ol>
  <li> While still in the preferences window (<code>Window</code> | <code>Preferences</code>).

  <li> Expand the Java tree, select <code>Code Style</code> | <code>Formatter</code>
  <li> Under "Active profile", Click on "New..."
  <li> In the "New Profile" window, enter "Ptolemy II" into
       the "Profile Name" entry.

  <li> Under "Initialize settings with the following profile",
       select "Java Conventions [built-in]"
       (We use Java Conventions over the "Eclipse"
       setting because the Eclipse style uses tabs.)
  
  <li> Click on "OK" to close the "New Profile" window
   
  <li> A "Profile 'Ptolemy II'" window will appear.
       Under the "Indentation" tab, change the Tab policy to "Spaces only". 
  <li> Under the "New Lines" tab, select "at end of file"
  <li> Under the "Comments" tab, <b>unselect</b> "Enable block comment formatting"
  <li> Click OK.

  <li> In the Preferences Window, click Apply



 </ol>

<li>
Ptolemy II uses some features of Java 5.0.
In particular, <CODE>ptolemy/actor/ptalon</CODE> uses generics,
which require Java 5.0 or later.
<br>Set Eclipse to use Java 5.0 or later source code compliance.
<ol>
 <li> While still in the preferences window (<code>Window</code> | <code>Preferences</code>).
 <li> Expand the Java tree, select <code>Compiler</code> | <code>Building</code>
 <li> Make sure that Set "Compiler compliance level" is "5.0" or later.
 <li> Click Apply. 
</ol>

<li> Eclipse has very good compiler error/warning.  One of the
warnings complains if a Serializable class does not have
serialVersionUID declared.  Since this warning is only useful
if you are tightly managing serialization, we turn it off:
 <ol>
  <li> While still in the preferences window (<code>Window</code> | <code>Preferences</code>).
  <li> Expand the Java tree, select <code>Compiler</code. | <code>Errors/Warning</code>
  <li> Under "Potential programming problems", change
  "Serializable class without serialVersionUID" to "Ignore"
  <li> Under "Generic Types", change
  "Unchecked generic type operation" to "Ignore".
  <li> Under "Generic Types", change
  "Usage of a raw type" to "Ignore".
  <li> Click Apply.  If you are prompted for a full rebuild, click Yes.
 </ol>

<li> By default, Eclipse checks in <CODE>makefile</CODE>s,
<CODE>*.c</CODE>, <CODE>*.h</CODE> files and <CODE>*.tcl</CODE> files with
<CODE>-kb</CODE>.  This causes no end of problems when the tree is
checked out on a platform that has a different line ending.

 <br>The solution: set your file associations properly:
 <ol>
  <li> While still in the preferences window (<code>Window</code> | <code>Preferences</code>).
  <li> Expand <code>Team</code> | <code>File Content</code>
  <li> Click on "Add Extension" and enter "*.tcl" in the "Enter
  File Extension" window, then click "OK" in the "Enter File Extension"  
  
  <li> Select "*.tcl" in the "File Content" window and then hit
	the "Change" button to change the Content to "ASCII Text"

  <li> Do the same steps for the "*.c" and "*.h" files.

  <li> Click on "Add Name" and add "makefile", select
	"makefile" and click on the "Change" button to
	change the Content to "ASCII Text"
  <li> Click Apply
 </ol>
<li> Click OK to apply all of the above changes.
</menu>

</ol>

<h2><a name="SettingUp">Setting up Eclipse to manage your Ptolemy II development environment</a></h2>
<b>Note that we are switching to Subversion on Wednesday, June 11, 2008</b>
<p><b>CVS instructions can be found at
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII7.0/ptII/doc/coding/eclipse.htm" target="_top"><code>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII7.0/ptII/doc/coding/eclipse.htm</code></a></b>


<p>Eclipse will manage your ptII code tree as a <em>project</em> called
the ptII project.  There several ways to set up the ptII project,
<ol>
<li> Eclipse is unaware of the version control aspects of the project.
<br>If you are downloading the source from major Ptolemy release,
and don't want to update regularly or ssh and subversion are blocked by
a firewall, then use this choice.
<br>(No Eclipse Subversion plugin (Subclipse),
 No Subversion (<code>svn</code>) from the command line)

<li> Eclipse is unaware of the version control aspects of the project,
use the shell version of Subversion to update the tree.
<br>(No Eclipse Subversion plugin (Subclipse),
 use Subversion (<code>svn</code>) from the command line)

<li> Eclipse is aware of the Subversion aspects of the project. 
You can use both Eclipse and shell version of Subversion to update the tree.
<br>(Use both the Eclipse Subversion plugin (Subclipse) and the
shell <code>svn</code> command)

</ol>

Without Subclipse, you'll need to manage the Subversion aspects in the
usual way, i.e. with Subversion commands being submitted to a bash
shell.  With Subclipse, Eclipse will do all sorts of things to "help"
you. Most of these things are good, but there is a learning curve.

<h3><a name="NoSVN">If you <em>don't</em> want to use Subversion with Eclipse</a></h3>

<ol>

<li> Download a ptII source tree from
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest"><CODE>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest</CODE></a>

<li>Configure the .classpath and .project files. See <a href="#.classpath.default"><CODE>.classpath.default</CODE></a>. below.
<li>Create the ptII project
<ul>
 <li> In <code>File</code> | <code>New</code> | <code>Project</code>,
select 'Java project'.
In the 'Contents' box, click on 'Create project from existing source'
and browse to the PTII directory. Finish.

<li>When asked if you want to shift to the Java perspective, click on Yes.
</ul>
</ol>

<h3>Setting up Eclipse for use with Subversion: <a name="Subclipse">Installing Subclipse</a></h3>
<p>The <a href="http://subclipse.tigris.org" target="_top">Subclipse</a>
Eclipse plugin adds Subversion to Eclipse.
<p>
Follow the <a href="http://subclipse.tigris.org/install.html" target="_top">Subclipse installation instructions</a>.  Upgrade users should see the 
<a href="http://subclipse.tigris.org/upgrade.html">Subclipse update instruction<a> otherwise the automatic update might not work.
<p>For your convenience, an abbreviated version of the Subclipse instructions
are below:
<ol>
<li> To download Subclipse, in Eclipse, follow these menus <code>Help<code>
 | <code>Software Updates<code> | <code>Find and Install</code> | <code>Search for new features to install</code> | <code>New Remote Site</code>.  
<li>Then enter
<pre> 
Name: Subclipse 1.2.x (Eclipse 3.2+)
URL:  http://subclipse.tigris.org/update_1.2.x
</pre>
<li>In the <code>Update sites to visit</code> window, select <code>Subclipse 1.2.x (Eclipse 3.2+)</code>
<li>Click Finish

<li>In the "Search Results" window, expand the <code>Subclipse 1.2.x (Eclipse 3.2+)</code> tree and check the box next to <code>Subclipse Plugin</code>.  If you select all of Subclipse, you may need to install other modules.  The <code>Subclipse Plugin</a> is the only Subclipse feature required for accessing the ptII subversion repository.
<li>Click Next, accept the license agreement, click Finish.
<li>In the "Verification" window, click <code>Install All</code>
<li>In the "Install/Update" window, click <code>Yes</code>.
</ol>

<h3>SSH Configuration.</h3>
If you will be accessing the ptII repository with <b>read/write</b>
access, then you will need to do a little more configuration concerning
passwords.
 <p><B>Note:</B> Most users will <b>not</b> need to do this configuration
 because they will be accessing the tree
 with <B>read-only</B> Subversion access.  Read-only users can 
skip to <a href="#CheckOutPtII">Check Out Ptolemy II from the Subversion repository</a>

<p>To access the ptII repository with read/write access, you will
need configure Subclipse to use your password.  If don't do this step
and you leave the default
settings, and have Cygwin ssh installed, then
<code>c:/cygwin/bin/ssh.exe</code> window will pop up each time ssh
is called.

<p>The fix is to set Subclipse to use SVNKit
<code>Window</code> | <code>Preferences</code> | <code>SVNKit (Pure Java)</code>
| <code>OK</code>


<h3><a name="CheckOutPtII">Check Out Ptolemy II</a> from the Subversion repository</h3>

Below we describe how to set up Eclipse so Eclipse
manages the Subversion interaction.

<p>
Eclipse will manage your ptII code tree as a <em>project</em> called
the ptII project.  Assuming Eclipse is running:
<ol>
<li>Install Subclipse by <a href="#Subclipse">following the instructions above</a>.

<li> In Eclipse, add the ptII SVN Repository:

<code>Window</code> | <code>Show View</code> | <code>Other</code> | <code>SVN</code> | <code>SVN Repository</code>
<li>In the SVN Repository view, right click, select <code>New</code> and set the url.
<br>To check out the ptII svn repository with <b>read-only</b> access:
<pre>
svn://source.eecs.berkeley.edu/chess/ptII
</pre>
 <p><B>Note:</B> Most users will select <CODE>svn://</CODE> because
they will be accessing the tree with <B>read-only</B> Subversion access.
<br>If you have an 
<a href="http://chess.eecs.berkeley.edu/ptexternal" target="_top">ssh account</a> on <code>source.eecs.berkeley.edu</code>, then check out ptII with
read/write access:
<pre>
svn+ssh://source.eecs.berkeley.edu/home/svn/chess/ptII
</pre>
Read/write users will be prompted for their source.eecs.berkeley.edu
username and password. 

<li>In the SVN Repository view, expand the ptII svn repository, right click on <code>trunk</code> and select <code>checkout</code>

Follow the wizard, creating selections as follows:
<ul>
<li> In the "Check Out As" window, use the default, <code>Check out as a project configured using the New Project Wizard</code>, then hit <code>Finish</code>.

<li> In the "Select a wizard" window, select <code>Java</code> | <code>Java Project</code>, then hit <code>Next</code>.
<li> In the "Create a Java Project" window set "Project Name"
     to: <CODE>ptII</CODE>
<li> Click Finish.
<li> If you see a Confirm Overwrite Window that says, 
<blockquote>
 <code>The project you created, ptII, contains resources other than the standard .project file. If any of those resources have the same name and relative location of a resource you are checking out, the local resource will be replaced with the resource from the repository</code>
</blockquote>
then click <code>OK</code>.
</ul>

<p>
<li> Wait for the checkout to finish. <I>Go get coffee.</I>
 <br><B>Note:</B>If you did not disable build automatically, as
suggested above, then Eclipse will build the project and produce
<B>thousands of errors</B>. This is not really a problem.  You will
fix the errors below with the <CODE>.classpath.default</CODE> file.

<p>
<li> You will want to view the project in the Java perspective.
If you aren't already in the Java perspective, select
<code>Window</code> | <code>Open Perspective</code> | <code>Java</code>
in the menu.
By default, Eclipse offers a "Package Explorer" as the main navigation
mechanism for the source files. Many developers much
prefer to use the "Navigator."
To get the Navigator, select
<code>Window</code> | <code>Show View</code> | <code>Navigator</code>
in the menu.
You can now browse the source files.

<p>
<li> <a name=".classpath.default">Find</a>
the file in the ptII home directory called
<CODE>.classpath.default</CODE> and copy it into a new file called
<CODE>.classpath</CODE>.
 <br>Note that you can use the Eclipse Navigator browse to the
<CODE>.classpath.default</CODE> file, open the file, copy the contents,
open <CODE>.classpath</CODE>, paste the contents and save <CODE>.classpath</CODE>.
 <br>Or, you can use Windows Explorer or the shell.

<li> In Eclipse, perform a Refresh on the ptII project
by <code>Window</code> | <code>Open Perspective</code> | <code>Java</code
<br> &nbsp;&nbsp;&nbsp;Go to the Package Explorer or the Navigator.
<br> &nbsp;&nbsp;&nbsp;Right mouse click on the ptII icon and select Refresh.

 <br><B>Note:</B>If you do not do copy <CODE>.classpath.default</CODE>
and select "Refresh", then Eclipse will produce
<B>thousands of errors</B>. This is not really a problem. It reflects
that you probably don't have installed many optional packages that
are needed to build subsets of Ptolemy II. You can ignore the errors
(not advised, since they will mask errors you make), or you can copy
the <CODE>.classpath.default</CODE> file and rebuild.
Alternatively, you can <a href="#Optional">install
the optional packages and run configure</a>.

<p>
<li> Build Ptolemy II by selecting <code>Project</code> | </code>Build All</code>.
(<I>If Build All is greyed out, then perhaps "Build Automatically" was
not disabled and Ptolemy has been built.  See above for more about Build Automatically</I>.)
You will get many warnings that you can ignore, but hopefully no errors.

</ol>

<h3><a name="runningPtolemy">Running Ptolemy II</a></h3>

<ol>
 <li> In the Run menu, select "Open Run Dialog".

<p> <li> In the resulting dialog, select "Java Application" and click "New".

<p> <li> In the dialog, fill in the boxes as follows:
<ul>
<li> Name: <CODE>Vergil</CODE>
<li> Project: <CODE>ptII</CODE>
<li> Main class: <CODE>ptolemy.vergil.VergilApplication</CODE>
</ul>

 <p> <li> Press the Run button.
</ol>

The Ptolemy II welcome window should appear.
 <p>You may now wish to read the <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/ptII/doc/design/usingVergil/index.htm">Using Vergil</a>
tutorial.

<h2><a name="simpleDebug">Simple Debugging Session</a></h2>

<ol>
 <li> Locate ptolemy/vergil/VergilApplication in the Explorer and
double click. Place a breakpoint on the first line of main()
by using <code>Run</code> | <code>Add/Remove Breakpoint</code>

 <li> Tell Eclipse which class to run with <code>Run</code> | <code>Run</code>.
On the Main
tab, select the Ptolemy II package and enter
ptolemy.vergil.VergilApplication as Main class.

 <li> Press the Run button
 <li> To debug, quit Vergil, and place a breakpoint in, say, the fire() method
of ptolemy.domains.ct.kernel.CTBaseIntegrator. Then <code>Run</code> | <code>Debug</code>, and
as above. Open the Lorenz CT demo from the Quick Tour and run it.
 </ol>

<h2><a name="Optional">Optional Extensions</a></h2>
<p>
Ptolemy II includes a number of packages that rely on software that you may
or may not have installed, such as MATLAB, the Java comm package (for serial
port connections), joystick support, Java Advanced Imaging (JAI), the Java
Media Framework (JMF), and Java 3D.  If you wish to use or extend these
features, you will need to perform a few extra steps.  These steps
require execution of a script called "configure" in the Ptolemy II
home directory, which in turn requires (on Windows) installation of
Cygwin, a package that offers Unix-like facilities within Windows.
You can find instructions for installing Cygwin at
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/cygwin.htm">
http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/cygwin.htm</a>.
<p>
The procedure below will modify the .classpath file that is
provided in the version control repository to customize it for
the software that you have installed.
The procedure is as follows:
<ol>
<li> Start up Cygwin bash shell.

<li> Set the PTII variable and export it
<pre>
export PTII=c:/Program\ Files/<i>yourLogin</i>/workspace/ptII 
</pre>

<li>
cd to the PTII directory
<pre>
cd "$PTII"
</pre>
<i>Note that we use double quotes around <code>PTII</code> because
the value of <code>PTII</code> has spaces in it.</i>
<li>Run configure:
<pre>
./configure
</pre>
This will create <code>$PTII/.classpath</code>

<li>
If you plan on running the Ptolemy II startup scripts in 
<CODE>$PTII/bin</CODE> on the command line, you will probably
want to run the following commands within Cygwin bash:
<pre>
cd $PTII/bin
make
</pre>

<li> In Eclipse, perform a Refresh on the ptII project
by <code>Window</code>Open Perspective</code> | <code>Java</code>
<br> &nbsp;&nbsp;&nbsp;Go to the Package Explorer or the Navigator.
<br> &nbsp;&nbsp;&nbsp;Right mouse click on the ptII icon and select Refresh.
<br> This will
cause Eclipse to see the new <code>ptII/.classpath</code> and to build
the project (or you may have to manually rebuild if you turned
off automatic rebuild).
</ol>  


<h3>Synchronizing with the repository</h3>

<ol>
<li>In the Navigator view scroll/open until you see the resource
(directory or file) to be synchronized.
<li>Right click that resource and select Team->Synchronize With Repository...
<li>The Synchronize view should then be visible.
<li>Select the Incoming, Outgoing, or Incoming/Outgoing menu bar icon as appropriate
</ol>

<h3>Restoring a file from the repository</h3>
<ol>
<li>In the Navigator view scroll/open until you see the resource (directory or file) to be restored.
<li>Right click that resource and select Replace With->Latest From Head.
</ol>

<h3><a name="#debugTclTests">Debugging Tcl Tests</a></h3>
<ol>
<li> Go to Windows -&gt; Open Perspective -&gt; Java.

<li> In Package Explorer, locate ptjacl.jar -&gt; tcl.lang -&gt;
Shell.class -&gt;  Shell and highlight it.

<li> Go to Run -&gt; Debug...

<li> Select Arguments tag.

<li> In Program arguments, put alljtests.tcl or any individual test tcl file. 
 <br>(E.g. SimpleDelay.tcl)

<li> In VM arguments, put <CODE>-Dptolemy.ptII.dir=<I>your PtII directory</I></CODE>
 <br>(E.g. <CODE>-Dptolemy.ptII.dir=c:\hyzheng\ptII</CODE>)


<li> Select Local directory, browse to the directory containing the tcl 
tests.
 <br> (E.g. <CODE>C:\hyzheng\ptII\ptolemy\domains\de\lib\test</CODE>)

<li> Select Debug.

</ol>

The nice thing of using Eclipse is that you can very easily locate where 
the exception is thrown by clicking the classes listed in the stack trace. 
You may further register a breakpoint to do more diagnosis.


<h2><a name="Troubleshooting">Troubleshooting</a></h2>

<h3>Preferences</h3>
If you have already used Eclipse and you would like to start over with
new projects and preferences, remove the <code>workspace</code> directory in the
Eclipse directory.  The <code>workspace</code> directory will only
appear if you have already run Eclipse.  <b>Note that removing the
<code>workspace</code> directory will cause Eclipse to 'forget'
about any projects that you may have set up</b>


<h3>Rebuilding Briefly flashes a window</h3> 
<p>If you have problems where clicking on build briefly flashes up
a window, look in <code>$PTII/.classpath</code> for and empty
exclusion that looks like <code>||</code>

<p>If you have problems with the classpath, look in the 
<code>workspace/.metadata/log</code> file that is in
the directory where eclipse is installed. For more information
about the <code>.metadata</code> directory, see
<a href="#metadata">below</a>.

<h3>Eclipse takes a long time to start up</h3>

If Eclipse takes a long time to start up, then the problem could be 
a problem in your .metadata file.

 <p>Basically, when eclipse starts up, it might try to update
<a name="metadata"><CODE>H:/workspace/.metadata</CODE></a>
.  The solution is covered in
<a href="http://www.eclipse.org/documentation/html/plugins/org.eclipse.platform.doc.user/doc/tasks/running_eclipse.htm" target="_top"><CODE>http://www.eclipse.org/documentation/html/plugins/org.eclipse.platform.doc.user/doc/tasks/running_eclipse.htm</CODE></a>:

The way I figured this out was by running Norton Antivirus and
doing View -&gt; File System Realtime Scan Statistics and then I noticed 
that my machine was updating H:/workspace/.metadata

 <p>I think I introduced the problem by clicking on the Eclipse.exe
binary and selecting Pin to Start Menu.  My solution was to remove the
Eclipse bogus entry in the start menu and then create a shortcut,
change Start in property and then pin that shortcut to my start menu.


</body>
</html>
