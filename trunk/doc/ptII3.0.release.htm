<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II 3.0 Release Notes</title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#faf0e6">
<h1>Ptolemy II 3.0 Release Notes</h1>

Ptolemy II is a set of Java packages supporting heterogeneous,
concurrent modeling and design.  Its <code>kernel</code> package
supports clustered hierarchical graphs, which are collections of
<I>entities</I> and <I>relations</I> between those entities.  Its
<code>actor</code> package extends the kernel so that entities have
functionality and can communicate via the relations.  Its
<I>domains</I> extend the actor package by imposing <I>models of
computation</I> on the interaction between entities.  Examples of
models of computation include discrete-event systems, dataflow,
process networks, synchronous/reactive systems, and communicating
sequential processes.

 <p>Ptolemy II includes a number of support packages, such as 

 <br><code>data</code>, providing a type system, data encapsulation and an
 expression parser,

 <br><code>plot</code>, providing visual display of data,

 <br><code>math</code>, providing matrix and vector math and signal
processing functions, and

 <br><code>graph</code>, providing graph-theoretic manipulations.


 <p>The Ptolemy II 
<a href="design/index.htm">Design Document</a>
describes the Ptolemy II design and
the implementation of the Java classes.
 <p>The "Using Vergil" chapter (
<a href="design/usingVergil/usingVergil.pdf">PDF</a>
 - <a href="design/usingVergil/index.htm">HTML</a>) describes
how to use Vergil.


<h2>Complete List of Domains in Ptolemy II</h2>
 <!-- We include this list here since we will be posting the release notes
to the newsgroups etc.  See also main.htm
 -->
<ul>
<li> <a href="../ptolemy/domains/ci/doc/body.htm" target="body">CI</a>:
	 component interaction (experimental),
<li> <a href="../ptolemy/domains/csp/doc/body.htm" target="body">CSP</a>:
	 communicating sequential processes,
<li> <a href="../ptolemy/domains/ct/doc/body.htm" target="body">CT</a>:
	continuous-time modeling,
<li> <a href="../ptolemy/domains/de/doc/body.htm" target="body">DE</a>:
	discrete-event modeling,
<li> <a href="../ptolemy/domains/dde/doc/body.htm" target="body">DDE</a>:
	distributed discrete events (experimental),
<li> <a href="../ptolemy/domains/dt/doc/body.htm" target="body">DT</a>:
	discrete time,
<li> <a href="../ptolemy/domains/fsm/doc/body.htm" target="body">FSM</a>:
	finite state machines,
<li> <a href="../ptolemy/domains/giotto/doc/body.htm" target="body">Giotto</a>:
	periodic time-driven (experimental),
<li> <a href="../ptolemy/domains/gr/doc/body.htm" target="body">GR</a>:
	3-D graphics (experimental),
 <!-- petrinet ??-->
<li> <a href="../ptolemy/domains/pn/doc/body.htm" target="body">PN</a>:
	process networks,
<li> <a href="../ptolemy/domains/sdf/doc/body.htm" target="body">SDF</a>:
	synchronous dataflow,
<li> <a href="../ptolemy/domains/sr/doc/body.htm" target="body">SR</a>:
	synchronous/reactive, and
<li> <a href="../ptolemy/domains/tm/doc/body.htm" target="body">TM</a>:
	timed multitasking (experimental).

</ul>

<h2>Platforms</h2>

The core of Ptolemy II 3.0 is 100% Java, so it should work on any
platform that has JDK1.4 or later

 <p>We developed Ptolemy II 3.0 under Solaris 8 and Windows XP sp1 
and with JDK1.4.1_02. 

Ptolemy II 3.0 will not compile under Java 1.3 because we use the
java.lang.URI class, which is present only in Java 1.4 and later

<!--whatsnew-->
<h2>Major Features that are new in Ptolemy 3.0 </h2>
<menu>

<li> Continuous Time (CT) domain rework for improved mixed signal and
hybrid systems semantics
(Jie Liu, Parc, and Haiyang Zheng).

<li> <a href="../ptolemy/domains/ci/doc/body.htm" target="body">Component Interaction Domain</a>
(Yang Zhao, Xiaojun Liu) - The CI domain models systems that contain
both data-driven and demand-driven styles of computation.

<li> Rework of FSM domain to support chained transitions
and better hybrid systems semantics (Haiyang Zheng).

<li> Expression language rework to create a full-featured, functional
and higher-order expression language with extensive support for
composite types such as matrices, arrays, and records;
the expression language is also now fully integrated with the Ptolemy II
type system
 (Steve Neuendorffer, Edward A. Lee).

<li> Configurations have been reworked to make it much easier to
create standalone tools that extract portions of the Ptolemy II
infrastructure and have customized user interfaces, documentation,
and actor and director libraries.
Configurations have been refactored into
separate directories in <CODE>$PTII/ptolemy/configs</CODE>,
and one example of such a standalone tool, HyVisual, is provided.

<li> Updates to Vergil, the user interface for building models
(Steve Neuendorffer, Edward A. Lee, John Reekie):
	<menu>
	<li> Run buttons on the toolbar and hotkeys.
        <li> Persistent window sizing and placement.
	<li> Undo/Redo.
	<li> Port Parameters.
	<li><CODE>vergil -help</CODE> lists available configurations.
	<li> Full-screen mode for use in presentations.
        </menu>

<li> Other user interface improvements
(Steve Neuendorffer, Edward A. Lee):
        <menu>
        <li> Interactive shells infrastructure.
        <li> An interactive expression shell using this infrastructure.
	<li> Infrastructure for specialized token viewers.
        Files with the extension .ptd are now opened by a token viewer.
        The default token viewers is a text editor, but others can be
	added in the configuration.
	<li> A matrix token viewer.
        </menu>

<li> HSIF Support
(Haiyang Zheng).
The Hybrid System Interchange Format (HSIF), was developed by the
<a href="http://www.isis.vanderbilt.edu#in_browser">
Institute of Software Integrated Systems (ISIS) at Vanderbilt University</a>
as part of the
<a href="http://www.isis.vanderbilt.edu/Projects/mobies/default.html#in_browser">ISIS MoBIES</a> effort.
The HSIF documentation states:
<menu>
"The goal of HSIF is to define an interchange format for hybrid system
models that can be shared between modeling and analysis tools. HSIF
models represent dynamic systems, whose dynamics includes both
continuous and discrete behaviors."
</menu>
Haiyang Zheng developed a set of XSLT files that convert
HSIF into MoML, the XML format used to represent Ptolemy II Models.
See the <a href="../ptolemy/hsif/demo/index.htm">HSIF/MoML documentation</a>.
</li>

<li> A first version of higher-order components, the
<a href="codeDoc/ptolemy/actor/hoc/MultiInstanceComposite.html">
MultiInstanceComposite</a> actor
(Zoltan Kemenczy and Sean Simmons, Research In Motion, Ltd.).
This actor creates a parameterized number of instances of a composite
actor.

<li>
Python integration, with a
<a href="codeDoc/ptolemy/actor/lib/python/PythonScript.java">PythonScript</a>
actor that permits definition of actors in Python (Xiaojun Liu).
This uses
<a href="http://www.jython.org/#in_browser" target="_top">Jython</a>,
a Java implementation of Python.
</menu>

<h2>Other Features that are new in Ptolemy II 3.0</h2>

<ul>

<li> Ptolemy II Matlab interface updates
(Zoltan Kemenczy and Sean Simmons, Research In Motion, Ltd.):
<menu>
<li> Logical variable support for Matlab version 6.5 (R13).
<li> Remove (the need for) ptmatlab.dll being in the user's path.
<li> Removed warnings for gcc version 3.2 (used by latest cygwins).
<li> Add support/configuration for building on Linux.
</menu>
Resources:
 <menu>
 <li> <a href="../ptolemy/matlab/matlab.htm">
Ptolemy II Matlab Interface Overview</a>
 <a href="codeDoc/ptolemy/matlab/package-summary.html">
Java class documentation</a>
 <li> <a href="../ptolemy/matlab/demo/MatlabExpression/MatlabExpression.xml">
Matlab Expression Demonstration</a>,
 <li> <a href="../ptolemy/matlab/demo/MatlabCT/MatlabCT.xml">
Matlab Continuous Time Demonstration</a>
</menu>
These demos require that Matlab be installed locally; they will not work
within an applet, but will work with Web Start.

<li> <a href="codegen.htm">Code generator improvements</a>
(Steve Neuendorffer, Christopher Hylands):
The Java code generator now handles Expression actors.
The code generator now works with Java 1.4.
The applet generator has been extended to copy necessary jar
files on an as needed basis.

<li> <a href="codeDoc/ptolemy/data/FunctionToken.html">FunctionToken</a>
class (Xiaojun Liu, Steve Neuendorffer): An expression that defines a function
can be passed among actors in a function token.

<li> Transition Refinements: A transition in an FSM can have
a refinement, which is a model that executes when the refinement
is taken.

<li> <a href="codeDoc/ptolemy/kernel/attributes/FileAttribute.html">
FileAttribute</a> class
(Edward A. Lee).
This attribute makes it easy to create a parameter in an actor
that represents a file or resource. It supports specification
of files using paths relative to the model, the classpath, or
the user directory.  It also provides a convenient user interface for
selecting and accessing files on the file system.

<li> <a href="codeDoc/ptolemy/data/ImageToken.html">ImageToken</a> class
(James Yeh): An abstract token that contains images.  Derived tokens
such as 
<a href="codeDoc/ptolemy/data/AWTImageToken.html">
AWTImageToken</a>,
<a href="codeDoc/ptolemy/actor/lib/jai/JAIImageToken.html">
ptolemy.actor.lib.jai.JAIImageToken</a>
provide concrete classes.

<li> Interface to C actors using the Java Native Interface
(Vincent Arnould, Thales, contributor: Christopher Hylands):
The <a href="codeDoc/jni/package-summary.html">jni</a>
package contains a prototype of an interface between Ptolemy II actors
and C code by using the Java Native Interface (JNI).
 <br>The Interface to C actors works in the source distribution,
it does not work in Web Start or the Windows installer.
</ul>

<h3>New Demonstrations</h3>

<menu>
<li> <a href="../ptolemy/domains/ci/doc/body.htm" target="body">CI</a>:
	Component Interaction

 <menu>
 <li> <a href="../ptolemy/domains/ci/demo/Router/Router.xml">Router</a> 
 </menu>

<li> <a href="../ptolemy/domains/ct/doc/body.htm" target="body">CT</a>:
	Continuous Time
<menu>

<li> <a href="../ptolemy/domains/ct/demo/ComparedClocks/ComparedClocks.xml">Compared Clocks</a>

<li> <a href="../ptolemy/matlab/demo/MatlabCT/MatlabCT.xml">Matlab Continuous Time Demonstration</a>

<li>HSIF Thermostat and Swimming Pool
<br> This example shows a simple thermostat modeled as a hybrid system.
The purpose of the example is to demonstrate the ability that HyVisual has
to import models defined in HSIF, the <i>Hybrid System Interchange Format</i>.
To run HSIF models, you must invoke Ptolemy II with the <CODE>-hyvisual</CODE>
command line argument or else run the HyVisual Web Edition.  These
models will not work in a standard Ptolemy II vergil or Web Edition
because to support HSIF, we need to check xml each file to see
if it is an HSIF file of a MoML file.  This check slows Ptolemy II
down slightly.

 <br>See the <a href="../ptolemy/hsif/demo/index.htm">HSIF/MoML documentation</a> for details.

<li><a href="../ptolemy/hsif/demo/SwimmingPool/SwimmingPool.xml">HSIF Swimming Pool</a>.
<br> This example shows a simple hybrid system model of a pool.

<li> <a href="../ptolemy/domains/ct/demo/LevelCrossingDetector/LevelCrossingDetector.xml">Level Crossing Detector</a>
<li> <a href="../ptolemy/domains/ct/demo/SampledClocks/SampledClocks.xml">Sampled Clocks</a>
</menu>

<li> <a href="../ptolemy/domains/de/doc/body.htm" target="body">DE</a>:
	 Discrete Event
 <menu>
 <li> <a href="../ptolemy/actor/hoc/demo/HocDE/HocDE.xml">HOC DE</a>  (New in Ptolemy II 3.0)
 </menu>


<li><a href="../ptolemy/domains/fsm/doc/body.htm" target="body">FSM</a>:
	Finite State Machine
 <menu>
<li> <a href="../ptolemy/domains/fsm/demo/ChainedTransitions/ChainedTransitions.xml">Chained Transitions</a>
 <li> <a href="../ptolemy/domains/fsm/demo/ModalBSC/ModalBSC.xml">Modal&nbsp;Binary Symmetric Channel</a>
 <li> <a href="../ptolemy/domains/fsm/demo/StateTracker/StateTracker.xml">State&nbsp;Tracker</a>
 </menu>

<li> <a href="../ptolemy/domains/sdf/doc/body.htm" target="body">SDF</a>:
	Synchronous Dataflow
 <menu>
 <li><a href="../ptolemy/actor/hoc/demo/DFTSubSet/DFTSubSet.xml">DFT Subset</a>
 <li><a href="../ptolemy/domains/sdf/demo/FourierSeries/FourierSeries.xml">Fourier Series</a>
 <li><a href="../ptolemy/domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">Sound Spectrum</a>
 </menu>
</menu>


<h3>New Actors</h3>

<ul>

<li> <a href="codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/actor/lib/BusAssembler.html"><code>BusAssembler</code></a>
<dd> (Zoltan Kemenczy, Research in Motion Limited)
Assemble input port channels into output bus.

<dt> <a href="codeDoc/ptolemy/actor/lib/BusDisassembler.html"><code>BusDisassembler</code></a>
<dd> (Zoltan Kemenczy, Research in Motion Limited)
split input bus channels onto output port channels.


<dt> <a href="codeDoc/ptolemy/actor/lib/Rician.html"><code>Rician</code></a>
<dd> (Rachel Zhou)
An actor that outputs a random sequence with a Rician distribution.

<dt> <a href="codeDoc/ptolemy/actor/lib/Stop.html"><code>Stop</code></a>
<dd> (Edward A. Lee)
An actor that stops a model executing when it receives a true token.

<dt> <a href="codeDoc/ptolemy/actor/lib/ThrowException.html"><code>ThrowException</code></a>
<dd> (Edward A. Lee)
An actor that throws an exception when it receives a true token.

<dt> <a href="codeDoc/ptolemy/actor/lib/ThrowModelError.html"><code>ThrowModelError</code></a>
<dd> (Edward A. Lee)
An actor that throws a model error when it receives a true token.

</dl>

<li> <a href="codeDoc/ptolemy/actor/lib/comm/package-summary.html">ptolemy.actor.lib.comm</a>:

<dl>

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/ConvolutionalCoder.html"><code>ConvolutionalCoder</code></a>

<dd> (Rachel Zhou) Generate a convolutional code.

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/DeScrambler.html"><code>DeScrambler</code></a>
<dd> (Rachel Zhou) Descramble the input bit sequence using a feedback shift register.

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/HadamardCode.html"><code>HadamardCode</code></a>
<dd> (Rachel Zhou) Produce a Hadamard codeword by selecting a row from a Hadamard matrix.

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/Scrambler.html"><code>Scrambler</code></a>
<dd> (Rachel Zhou) Given an input bit sequence, scramble it in a pseudo random way.

 <dt> <a href="codeDoc/ptolemy/actor/lib/comm/ViterbiDecoder.html"><code>ViterbiDecoder</code></a>
<dd> (Rachel Zhou) Viterbi Decoder.

</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/conversions/package-summary.html">ptolemy.actor.lib.conversions</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/ExpressionToToken.html"><code>ExpressionToToken</code></a>
<dd> (Steve Neuendorffer)
An actor that reads expressions and parses them into tokens.


<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/TokenToExpression.html"><code>TokenToExpression</code></a>
<dd> (Steve Neuendorffer)
An actor that converts tokens into expressions.

</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/jai/package-summary.html">ptolemy.actor.lib.jai</a>:

<dl>
<dt> Java Advanced Imaging actors
<dd> (James Yeh)
Actors that use the Java Advanced Imagining framework
</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/jmf/package-summary.html">ptolemy.actor.lib.jmf</a>:

<dl>
<dt> Java Media Framework actors
<dd> (James Yeh)
Actors that use the Java Media Framework
</dl>


</ul>


<h2>Backward compatibility issues</h2>

Most models developed under Ptolemy II 1.0.1 or
2.0.1 or HyVisual 2.2-beta should run under Ptolemy II 3.0.
The MoMLParser includes a list of backward
compatibility filters that make certain changes on models
when read, handling such issues as actors being moved or renamed
and parameter names being changed.
The filters themselves are defined in
<a href="codeDoc/ptolemy/moml/filter/package-summary.html">
ptolemy.moml.filter</a>.
If you have developed your own actors under Ptolemy II 2.0.1 by
writing your own Java files, you should recompile all your java code with
the new release.  In theory, copying the .class files should work, but
recompiling is safer.
<p>
Not all changes can be handled automatically, since
some have semantic content. We begin with a description
of the changes that are not handled, followed by a description
of changes that are handled.

<h3>Backward compatible issues that are not handled automatically</h3>

<menu>
<li> In the CT (continuous-time) domain, instances of Clock and
TriggeredClock very likely should be manually changed to
ContinuousClock and TriggeredContinuousClock. The reason for this is that
we have made progress on the semantics of signals with discontinuities
and have improved the software implementation.
We created a new set of clocks for the CT domain.
ContinuousClock and TriggeredContinuousClock generate piecewise
constant signals with discontinuities.  The discontinuities
are correctly handled regardless of step sizes, and threshold
crossing detectors properly identify discrete transitions
across the threshold.
In principle, Clock and TriggeredClock can still be used in
CT models, e.g. to generate a sequence of events, but it is better to use
the EventSource actor for this purpose.

<li> In hybrid systems models (CT + FSM), the signal types for
modal models may not be inferred as expected.
If a modal model has both continuous and discrete signal
types at its inputs, it may need manual adjustment of the output signal
types. To do this, right click an output port and
add a "signalType" parameter; then set the value of the parameter
to "CONTINUOUS" or "DISCRETE" depending on your needs.

<li> AudioReader now uses a FileAttribute instead of a string valued
parameter.  The name of this parameter has changed from
sourceURL to fileOrURL to conform with LineReader and ExpressionReader.

<li> Longs are now printed with a trailing capital <CODE>L</CODE>
character.

<li> We have improved the way that the SDF (synchronous dataflow) domain
implements rate propagation. Previously, SDF would infer the rates of
ports of an SDF model, and create parameters named
"tokenConsumptionRate" "tokenInitProduction" and
"tokenConsumptionRate". However, this has two bad side effects:
<ol>
<li> 
 If a port has these parameters already, then the SDF scheduler
   overrides them.  This may not be correct.
<li> If a port has these parameters already, then running a model
   will mark it dirty, resulting in a prompt to save the model
   on exit.
</ol>
We've changed this so that it sets these values only if the parameters
do not exist already, and stores them in new attributes called
"_tokenConsumptionRate" "_tokenInitProduction" and
"_tokenConsumptionRate". These are transient (instances
of Variable rather than
Parameter), so they will not trigger a prompt to save.
</menu>

<h3>Backward compatible issues that are handled automatically</h3>

<menu>
<li>ptolemy.moml.filter.AddEditorFactory:
If a parameter has a <code>_location</code>, then
add a VisibleParameterEditorFactory named <code>_editorFactory</code>.
This supports double clicking on visible parameters.

<li>ptolemy.moml.filter.AddIcon: Add specialized icons that display
in Vergil the value of one of the parameters or certain actors.
The affected actors are:
        <menu>
	<li>ptolemy.actor.lib.Const
	<li>ptolemy.actor.lib.MathFunction
	<li>ptolemy.actor.lib.TrigFunction
	<li>ptolemy.actor.lib.Scale
	<li>ptolemy.actor.lib.Expression
	</menu>

<li>ptolemy.moml.filter.ClassChanges:
change class names that have been renamed or moved to a different package.
The changes are:
        <menu>
	<li>ptolemy.kernel.util.VersionAttribute	 -&gt; ptolemy.kernel.attributes.VersionAttribute
	<li>ptolemy.moml.Location	 -&gt; ptolemy.kernel.util.Location
	<li>ptolemy.actor.lib.comm.SerialComm	 -&gt; ptolemy.actor.lib.io.comm.SerialComm
        </menu>

<li>ptolemy.moml.filter.HideAnnotationNames: If an annotation name ends with
'annotation1', then add <code>_hideName</code> if necessary.
This prevents labels from appearing above visible parameters in Vergil.

<li>ptolemy.moml.filter.ParameterNameChanges: Update any Parameter names
that have been changed.
Below are the actors that are affected, along with the Parameter name 
and the new name:	
       <menu>
       <li>ptolemy.domains.pn.kernel.PNDirector
	<br>&nbsp;&nbsp;	Initial_queue_capacity	 -&gt; initialQueueCapacity
       </menu>

<li>ptolemy.moml.filter.PortNameChanges:
Update any actor port names that have been changed.
Below are the actors that are affected, along
with the old port name and the new port name:
        <menu>
	<li>ptolemy.actor.lib.conversions.CartesianToComplex
	 <br>&nbsp;&nbsp;	imag	 -&gt; y
	 <br>&nbsp;&nbsp;	real	 -&gt; x
	<li>ptolemy.actor.lib.Sleep
	 <br>&nbsp;&nbsp;	delay	 -&gt; sleepTime
	<li>ptolemy.actor.lib.conversions.ComplexToCartesian
	 <br>&nbsp;&nbsp;	imag	 -&gt; y
	 <br>&nbsp;&nbsp;	real	 -&gt; x
        </menu>

<li>ptolemy.moml.filter.PropertyClassChanges:
Update any actor port class names that have been changed.
Below are the actors that are affected, along with the port name
and the new classname:
        <menu>
	<li>ptolemy.domains.sdf.lib.vq.HTVQEncode
	 <br>&nbsp;&nbsp;	input	 -&gt; ptolemy.actor.TypedIOPort
	 <br>&nbsp;&nbsp;	output	 -&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.domains.sdf.lib.vq.VQDecode
	 <br>&nbsp;&nbsp;	input	 -&gt; ptolemy.actor.TypedIOPort
	 <br>&nbsp;&nbsp;	output	 -&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.domains.sdf.lib.vq.ImagePartition
	 <br>&nbsp;&nbsp;	input	 -&gt; ptolemy.actor.TypedIOPort
	 <br>&nbsp;&nbsp;	output	 -&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.domains.sdf.lib.vq.ImageUnpartition
	 <br>&nbsp;&nbsp;	input	 -&gt; ptolemy.actor.TypedIOPort
	 <br>&nbsp;&nbsp;	output	 -&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.actor.lib.Expression
	 <br>&nbsp;&nbsp;	expression	 -&gt; ptolemy.kernel.util.StringAttribute
        </menu>
</menu>

<!--/whatsnew-->

<h2>Features that were new in previous Ptolemy II releases </h2>

<a href="oldFeatures.htm">Features that were new in previous Ptolemy II releases </a>


<!--vergilDocs-->
<h2><a name="limitations">Limitations</a>
</h2>
Version 3.0 has the following limitations:

<h3>Release Limitations</h3>
<ul>

<li> The gzipped tar file that contains the Ptolemy II distribution
 <B>requires</B> GNU tar or WinZip.  Solaris 2.5.1 tar will fail to
untar this file with a checksum error because the pathnames are longer
than 100 characters.  If you do not have GNU tar, you can obtain
source and selected binaries from 
ftp://ptolemy.eecs.berkeley.edu/pub/gnu.
 <p>Note further that some of the .class names are longer than
31 characters, which may cause problems when downloading zip files
on the Macintosh and using Stuffit.

<li> The documentation for custom actors used in demonstrations is not
included in the release.  The source code for the custom actors can be found
in the source download.

<li> If a URL ends with <CODE>#in_browser</CODE>, then
Ptolemy II will invoke the User's web browser.  Unfortunately, this
does not always work, especially under Windows if Netscape is already
running.  The workaround is to exit Netscape and let Ptolemy II
start up Netscape for you.


<li> Web Start does not work very well if the pathname to the 
<CODE>vergil.jnlp</CODE> file has spaces in it.  The workaround is
to place your Ptolemy II tree in a directory that does not have spaces
in the path name if you plan on using Web Start.

<li> Applet issues:
	<ul>

	<li> Opera has problems viewing applets that are on the local
	file system.  In particular, it seems to have problems with urls like
	<CODE>file:///d|/ptII/ptolemy/plot/demo/FourierSeries.htm</CODE>
	which work fine in Netscape 4.x, IE, Mozilla.

	 <p>However, if I use the following style of URL, then some of the applets
	work: 
<CODE>file://localhost/d:/ptII/ptolemy/plot/demo/FourierSeries.htm</CODE>.
	Unfortunately any applet that accesses a data file will
	not work with the above URL style because the data file will
	be outside the codebase.

	 <p> The solution is to install a web server on the local
	machine and view the applets using 
	<CODE>http://localhost/</CODE>
	
        <li> Opera 6.03/Windows 2000/Java 1.4.0, may have
        problems running applets that include diva.jar if diva.jar
	is not downloaded in the first applet.  To reproduce this problem:
	<ol>
	<li> Run <a href="../ptolemy/domains/sdf/demo/Butterfly/Butterfly.htm">SDF Butterfly</a>, which does not use diva.jar

	<li> <a href="../ptolemy/domains/sdf/demo/Expression/Expression.htm">SDF Expression</a>, which uses diva.jar

	<li> In Opera, do <CODE>Window</CODE> -&gt; <CODE>Special</CODE>
	-&gt; <CODE>Java Console</CODE>, and you will see the following
        stack trace
<pre>
java.lang.NoClassDefFoundError: diva/graph/GraphController	
at java.lang.Class.getDeclaredConstructors0(Native Method)  
at java.lang.Class.privateGetDeclaredConstructors(Class.java:1576) 
at java.lang.Class.getConstructor0(Class.java:1748) 
at java.lang.Class.newInstance0(Class.java:266)  
at java.lang.Class.newInstance(Class.java:249) 
at opera.PluginPanel.run(opera/PluginPanel.java:343) 
at java.lang.Thread.run(Thread.java:536)  
</pre>

	</ol>
	The problem only occurs under Opera.

	<li> The DDE Zeno demo produces an error message in the Java Plug-in
	console window:
<pre>
java.lang.IllegalArgumentException: LowerJoin - Attempt to set current time
	      to the past; time = 50.001. The _lastTime was 54.0
	at ptolemy.domains.dde.kernel.PrioritizedTimedQueue.put(PrioritizedTimedQueue.java:297)
	at ptolemy.domains.dde.kernel.DDEReceiver.put(DDEReceiver.java:580)
	at ptolemy.domains.dde.kernel.DDEReceiver.put(DDEReceiver.java:549)
	at ptolemy.domains.dde.kernel.FeedBackDelay._sendOutToken(FeedBackDelay.java:247)
	at ptolemy.domains.dde.kernel.FeedBackDelay.fire(FeedBackDelay.java:175)
	at ptolemy.actor.process.ProcessThread.run(ProcessThread.java:126)
ptolemy.actor.Manager run(): elapsed time: 23004 ms
</pre>

	<li> Running the Networked demo via an applet on the local
	file system results in an AccessControlException.
<pre>
com.microstar.xml.XmlException: XML element "entity" triggers exception:
  java.lang.Exception: Attempted to lookup 'Waveform', but got: 
  java.lang.ClassNotFoundException: Waveform
Attempted to find as a moml class, but got: 
             java.security.AccessControlException: access denied
             (java.net.SocketPermission ptolemy.eecs.berkeley.edu resolve)
	     in file:/C:/Program Files/Ptolemy/Ptolemy II 3.0 beta2/
                   ptolemy/moml/demo/Networked/ at line 62 and column 118
	at ptolemy.moml.MoMLParser.startElement(MoMLParser.java:1341)
	at com.microstar.xml.XmlParser.parseElement(XmlParser.java:944)
	at com.microstar.xml.XmlParser.parseContent(XmlParser.java:1117)
	at com.microstar.xml.XmlParser.parseElement(XmlParser.java:946)
	at com.microstar.xml.XmlParser.parseDocument(XmlParser.java:495)
	at com.microstar.xml.XmlParser.doParse(XmlParser.java:175)
	at com.microstar.xml.XmlParser.parse(XmlParser.java:145)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:492)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:471)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:456)
	at ptolemy.actor.gui.MoMLApplet._createModel(MoMLApplet.java:188)
</pre>

	The Network demo does not work as a local applet because the xml file
	includes a reference to http://ptolemy.eecs.berkeley.edu, which is
	not on the local file system, so we get a SecurityException.
	 <br>The workaround is to run the applet by downloading it
	from the Ptolemy Website:
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII3.0/ptII3.0/ptolemy/moml/demo/Networked/Networked.htm"><CODE>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII3.0/ptII3.0/ptolemy/moml/demo/Networked/Networked.htm</CODE></a>
	</ul>

<li> Web Start issues:
	<ul>

	<li> Viewing a pdf file may bring up a blank window along with
	the pdf file.  Running the code generator may bring up
	a blank window while the java or javac processes are running.

	<li> Web Start is limited to about 65Mb of memory
	 <br>If you try to run all the demos, then eventually you may
	see the following in the Web Start console
<pre>
761 ms. Memory: 65280K Free: 3614K (6%)
7471 ms. Memory: 65280K Free: 931K (1%)
Exception occurred during event dispatching:
java.lang.OutOfMemoryError

	&lt;&lt;no stack trace available&gt;&gt;
</pre>
	One workaround is to request garbage collection by doing
	<CODE>File</CODE> -&gt; <CODE>View</CODE> -&gt;
	<CODE>JVM Properties</CODE> -&gt;
	<CODE>Request Garbage Collection</CODE>
	</ul>
</ul>

<h3>Limitations in the Actor Libraries</h3>
<ul>
<li>The actor library is far from complete.
<li>The Expression actor does not properly propagate type constraints in
an expression-dependent fashion. It works correctly for double-valued
expressions of double-valued inputs.

<li> The Ptolemy parameter parser uses comma "," to separate elements
in an array.  This causes problems when Ptolemy is run on
European machines that use a comma "1,0" instead of a period "1.1"
in floating point numbers.

<li> The readFile() parameter function does not work with applets.

<!-- If you change the next paragraph update install.htm -->

<li>The Matlab interface works only under Windows and it requires that
Matlab be installed on the local machine. 
The Matlab interface should work with version of Matlab from
R11 (5.3) and up to and including R12.1 (6.1)
<p>Didier Mauuary reports that under Windows 98, configure failed
to set up the <code>MATLAB_DIR</code>, <code>PTCC</code>
and <code>PTDLLTOOL</code> makefile variables, but after
he set them by hand:
<pre>
 MATLAB_DIR = /cygdrive/c/MATLABR11
 PTCC = gcc
 PTDLLTOOL = dlltool
</pre>
he was able to get farther with the recompilation of the Matlab interface.

<li> The actor.lib.comm.SerialComm actor requires that Javacomm is installed

<a href="http://java.sun.com/products/javacomm/index.html#in_browser" target="_top"><CODE>http://java.sun.com/products/javacomm/index.html</CODE></a>.
The SerialComm actor will only work under Windows.

</ul>

<h3>Limitations in the PN Domain</h3>
The PN domain documents that it locally handles mutations.  However, this
is currently not true in the implementation.  For the basic PN model, this
doesn't really matter, since mutations happen pretty much the same as they
would otherwise.  (i.e. they are non-deterministic in when they execute) 
However, for timed PN models, there is actually some expressiveness
lost, since timed PN models can locally execute mutations deterministically.


<h3>Limitations in the TM Domain</h3>
The TM domain will not run in system that does not have a GUI because
the TMDirector brings up a plot of the schedule.

<h3>Limitations in the User Interface</h3>

Below are some of the limitations of Vergil, the Ptolemy II Graphical
User Interface.

<ul>

<li> If there are multiple windows open for a model, say, the top
level vergil window and the tree view, or the top level window
and the inside look of a composite component, when the top
level window is closed, all other windows are closed, but the
user is not prompted to save any change to the model.

<li> When setting the type of a port, we should provide a combo
box that lists the common ports

<li> When creating a Modal Model, use Control-Right-Button to
drawn arcs between nodes.  One potential workaround would
be to have an information message in the status bar about this.

<li> You should not change the names of built in ports - The port
mechanism should disallow port name changes on ports that are
named in Java.  The UI could recognize this.  The UI should
not allow the user to remove built in Java defined ports.

<li> Manually setting of the types of actors like ArrayToSequence that
have constraints on their element types can cause problems.
<li> HTVQ demo is badly laid out when run under vergil.
<li>Weak support for multiports in the graph editor.
<li>It is difficult to control wire routing.
<li>Cannot have more than one vertex in a connection.
<li>No mechanism to set the width of a relation.
<li>The integrated web browser is not a full-featured browser.
<li>Icon editor not yet integrated.
<li>Debugger not yet integrated.
<li>It is difficult to add actors to the libraries.
<li>No dynamic class reloading.
</ul>

<h3>Code Generation Limitations</h3>
Code Generation limitations are covered on the
<a href="codegen.htm#limitations">Code Generation</a> page. 

<h3>Missing Domains</h3>
<ul>
<li>Boolean and integer dataflow.
<li>Dynamic dataflow
</ul>
 <p>For limitations discovered after the release, see the
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII3.0/#in_browser">Ptolemy II 3.0 website</a>

<!--/vergilDocs-->
<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
 <!-- Leave a trailing p here so that there is a little space at the bottom -->
 <p>
</body>
</html>
