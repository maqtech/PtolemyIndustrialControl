#!/bin/sh
#
# Shell script that starts up Ptolemy II Java classes
# Author:  Christopher Hylands
# Version: $Id$
#
# Copyright (c) 1998-2000 The Regents of the University of California.
# 	All Rights Reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY

# If this script is named 'ptolemy', 'ptplot', or 'vergil', don't edit it!
# instead, edit ptinvoke.in and run configure
# 
# configure substitutes in variables that are surrounded with @,
#

# Location of the Ptolemy II tree.  The bin directory should be found
# at $PTIIDEFAULT/bin
PTII_DEFAULT=@PTII_DEFAULT@

# Default JDK Home
PTJAVA_DIR=@PTJAVA_DIR@

# Location of ptjacl.jar
PTJACL_JAR=@PTJACL_JAR@

# Flag to pass to java.  Solaris JDK1.2 reference version needs -native
PTJACL_JFLAG=@PTJACL_JFLAG@

################
# You probably don't want to edit below here

# Optional jar file
jarfile=

# javaflag contains optional flags passed to java that may be
# set by this script
# JAVAFLAGS may be set by the user to pass a user selected flag
# to java.  For example
# setenv JAVAFLAGS -Djava.compiler=
# ptolemy foo.xml
# will turn off the Just In Time (JIT) compiler, which will
# result in exception messages with line numbers.
# To see what sort of options are available, type 'java -h'
# To see what sort of properties are available, type
# echo "source $PTII/util/testsuite/jdktools.tcl; jdkProperties; exit" | ptjacl
#
javaflag=$JAVAFLAGS

# Keep these alphabetical
case "`basename $0`" in
    histogram)
	# Histogram Plotter
	javastartupclass=ptolemy.plot.plotml.HistogramMLApplication
	javasourcedir=ptolemy/plot/plotml
	;;
    ptinvoke)
	# Invoke the class named by the first argument
	javastartupclass=$1
	javasourcedir=
	shift
	;;
    ptjacl)
	# tcl.lang.Shell brings up the Jacl prompt in the current window
	javastartupclass=tcl.lang.Shell
	javasourcedir=
	jarfile=$PTJACL_JAR
	javaflag="$PTJACL_FLAG $javaflag"
	;;
    ptjaclapp)
	# tcl.lang.PanelShellApp brings up Jacl in a separate window
	javastartupclass=tcl.lang.PanelShellApp
	javasourcedir=
	jarfile=$PTJACL_JAR
	javaflag="$PTJACL_FLAG $javaflag"
	;;
    ptolemy)
	# Ptolemy II Application
	javastartupclass=ptolemy.actor.gui.PtolemyApplication
	javasourcedir=ptolemy/actor/gui
	;;
    ptplot)
	# Signal Plotter
	javastartupclass=ptolemy.plot.plotml.EditablePlotMLApplication
	javasourcedir=ptolemy/plot/plotml
	;;
    pxgraph)
	# Plotter compatible with old X11 pxgraph
	javastartupclass=ptolemy.plot.compat.PxgraphApplication
	javasourcedir=ptolemy/plot/compat
	;;
    vergil)
	# Ptolemy II UI
	javastartupclass=ptolemy.vergil.VergilApplication
	javasourcedir=ptolemy/vergil
	jarfile=$PTII/lib/diva.jar
	;;
esac

# Special check for Jacl with a better error message
if [ "$jarfile" = "$PTJACL_JAR" ]; then
    if [ ! -f $PTJACL_JAR ]; then
	echo "$0: Warning '$PTJACL_JAR' not found."
	echo "    ptjacl.jar can be found at"
	echo "	  http://ptolemy.eecs.berkeley.edu/~cxh/java/jacl/ptjacl.html"
	echo "    You only need run Jacl if you want to run the Ptolemy II"
	echo "    test suites."
    fi
fi

# Check that PTII is set, and that we can find the proper sources
if [ -z "$PTII" ]; then
    if [ -d "$PTII_DEFAULT" ]; then
	PTII="$PTII_DEFAULT"
	export PTII
    fi
    if [ ! -d "$PTII/$javasourcedir" ]; then
	echo "$0: Could not find '$PTII/$javasourcedir'.  Perhaps your PTII"
	echo " variable is not set properly?"
    fi	
fi



windows=no

case "${OSTYPE-no}" in
    [Ll]inux)
    if [ "${JAVA_HOME-no}" != "no" ]; then
	JAVAHOME="$JAVA_HOME"
	export JAVAHOME
    fi;;
    cygwin32*)
	windows=yes;;
esac

# If JAVAHOME is not set, then try to set it
if [ -z "$JAVAHOME" ]; then
    if [ -d "$PTJAVA_DIR" ]; then
	JAVAHOME="$PTJAVA_DIR"
	export JAVAHOME
    else
	if [ "$windows" = "yes" ]; then
	    searchfile=java.exe
	else
	    searchfile=java
	fi
	oldifs="$IFS"; IFS=":"
	for i in $PATH
	do
	    if [ -x "$i/$searchfile" -a ! -d "$i/$searchfile" ]; then
		JAVAHOME=`dirname $i`
		export JAVAHOME
		break
	    fi
	done
	IFS="$oldifs"
    fi
    if [ -z "$JAVAHOME" ]; then
	if [ -d "/usr/eesww/lang/jdk1.1latest" ]; then
		# Locally, Java can sometimes be found here.
		JAVAHOME=/usr/eesww/lang/jdk1.1latest
	fi
    fi
    if [ -z "$JAVAHOME" ]; then
	echo "$0: Could not find $searchfile in your \$PATH"
	echo " Please set \$JAVAHOME to the directory that contains your"
	echo " Java distribution"
	exit 3
    fi
fi

# This section looks complex, but really all it does is
# branch between windows/unix, jarfile set/not set, CLASSPATH set/not set
if [ "$windows" = "yes" ]; then
    # Windows via Cygwin32
    # chdir prints the current directory in DOS format.
    # The tr command deletes the \r at the end
    WINPTII=`(cd $PTII; cmd /c chdir) | tr -d '\r'`
    if [ "${jarfile-no}" != "no" ]; then
	if [ "${CLASSPATH}" != "no" ]; then
	    $JAVAHOME/bin/java -classpath $WINPTII\;$JAVAHOME\\lib\\classes.zip\;$jarfile\;$CLASSPATH $javastartupclass ${1+"$@"}
	else
	    $JAVAHOME/bin/java -classpath $WINPTII\;$JAVAHOME\\lib\\classes.zip\;$jarfile $javastartupclass ${1+"$@"}
	fi    
    else
	if [ "${CLASSPATH}" != "no" ]; then
	    $JAVAHOME/bin/java -classpath $WINPTII\;$JAVAHOME\\lib\\classes.zip\;$CLASSPATH $javaflag $javastartupclass ${1+"$@"}
	else
	    $JAVAHOME/bin/java -classpath $WINPTII\;$JAVAHOME\\lib\\classes.zip $javaflag $javastartupclass ${1+"$@"}
	fi
    fi
else
    if [ "${jarfile-no}" != "no" ]; then
	if [ "${CLASSPATH}" != "no" ]; then
	    CLASSPATH=$PTII:$jarfile:$CLASSPATH
	    export CLASSPATH
        else
	    CLASSPATH=$PTII:$jarfile
	    export CLASSPATH
	fi
    else
	if [ "${CLASSPATH}" != "no" ]; then
	    CLASSPATH=$PTII:$CLASSPATH
	    export CLASSPATH
	else
	    CLASSPATH=$PTII
	    export CLASSPATH
        fi
    fi	
    $JAVAHOME/bin/java $javaflag $javastartupclass ${1+"$@"}
fi
