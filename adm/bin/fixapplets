#!/bin/sh
# This script reads in applets and updates the html to
# handle the latest version of the plugin
#
# $Id$
# Usage: fixapplets file.html [...]



for file in $@
do
        # 1)Get the current parameters, create a new .htm file with
        # those parameters.
	awk '
 BEGIN {
	    # applet parameters that go inside <applet ... >
	    appletParamNames["codebase"] = 1
	    appletParamNames["code"] = 1
	    appletParamNames["archive"] = 1
	    appletParamNames["width"] = 1
	    appletParamNames["height"] = 1
	}
 $1 ~ /<OBJECT/ { sawObject = 1}
 sawObject == 0 { print $0 }
 $1 ~ /<EMBED/  { sawEmbed = 1
		  paramCount = 0
		  appletParamCount = 0
	        }
 $1 ~ /<NOEMBED/    {
			sawNoEmbed = 1
			alternateHTML = ""    
		    }
 sawEmbed == 1 && sawNoEmbed == 0 && $1 !~ /<EMBED/ { 
		    if ( $0 ~ /=/) {
			# Line like   background="#faf0e6"
		        # We call split twice so that we get the
		        # name that is in $1 without leading spaces
			split($1, n, "=")
			split($0, f, "=")

			# Look for applet parameters
			sawAppletParam = 0
			for (appletParamName in appletParamNames) {
			    if (n[1] == appletParamName) {
			        if (n[1] == "code" \
				    && f[2] ~ /.class/ ) {
				    f[2] = substr(f[2], 0, length(f[2])- 7)
				}				
				sawAppletParam = 1
				appletParams[appletParamName] = f[2]
				lastAppletParam = appletParamName
			    }
			}
			if (sawAppletParam == 0 \
				    && n[1] != "type" \
				    && n[1] != "pluginspage") {
			    paramName[paramCount] = n[1]
			    paramValue[paramCount++] = f[2]
			}
		    } else {
			if ($1 !~ /</ && lastAppletParam == "archive") {
			    # continuation lines like: 
			    # archive="
			    #    ptolemy/ptsupport.jar,
			    #    ptolemy/domains/sdf/sdf.jar"
			    appletParams["archive"] = appletParams["archive"] "\n" $0
			}
		    }
		}
 sawNoEmbed == 1 && $1 !~ /NOEMBED>/   {
		    alternateHTML = alternateHTML "\n" $0
		    }
 $1 ~ /<\/NOEMBED/  { sawNoEmbed = 0 }
 $1 ~ /<\/EMBED/    { sawEmbed = 0}
 $1 ~ /<\/OBJECT>/  { 
		    sawObject = 0
		    print "<applet"
		    for (appletParam in appletParams) {
			if (appletParams[appletParam] != "") {
			    printf("\t%s = %s\n", appletParam, appletParams[appletParam])
			}
		    }
		    print ">"
		    for (i = 0; i < paramCount; i++) {
			printf("<param name = %s value = %s>", paramName[i], paramValue[i])
		    }
		    if (alternateHTML ~ /No JDK 1.3 support for applet!/) {_
			print "No Java Plug-in support for applet, see <a href=\"http://java.sun.com/products/plugin/\"><code>http://java.sun.com/products/plugin/</code></a>"
		    } else {
			print alternateHTML
		    }
		    print "</applet>"
		}

 ' $file > fixapplets.htm

	
	# 2) Run the HTMLConverter that is part of the jdk on
	# the html file.

	# The HTMLConverter writes files to a temporary directory,
	# so we delete it and create it
	CURRENT_DIRECTORY=`pwd | sed 's@/cygdrive/\([a-z]\)@\1:@'`
	rm -rf htmlconverter_bak
	mkdir htmlconverter_bak

	$PTII/bin/htmlconverter \
	    -backup $CURRENT_DIRECTORY/htmlconverter_bak \
	    fixapplets.htm

	# 3) Add trailing back slashes

awk '$NF ~ /document.writeln/ {
      sawWriteln = 1
     }
$NF ~ /);$/ {
      sawWriteln = 0
     }

     {
      if (sawWriteln == 1) {
           if (substr($NF,length($NF),1) == "\\") {
               print $0
           } else {
               if ( $0 ~ /^<PARAM/) {
                    print "	    " $0 " \\"
               } else {
                    print $0 " \\"
               }
           }
      } else {
           print $0
      }
    }
    ' fixapplets.htm |
    sed -e 's/CODEBASE/codebase/' \
	-e 's/CODE/code/' \
	-e 's/ARCHIVE/archive/' \
	-e 's/WIDTH/width/' \
	-e 's/HEIGHT/height/' \
	-e 's/<PARAM NAME = /<PARAM NAME=/' \
	-e 's/VALUE = /VALUE=/' \
	> fixapplets2.htm

diff $file fixapplets2.htm

done