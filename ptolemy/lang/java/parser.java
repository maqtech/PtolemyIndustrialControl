//### This file created by BYACC 1.8(/Java extension  0.92)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//### Please send bug reports to rjamison@lincom-asg.com
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



//#line 120 "jparser.y"
package ptolemy.lang.java;

import java.util.LinkedList;
import java.util.ListIterator;
import java.io.IOException;
import java.io.FileInputStream;

import ptolemy.lang.*;

//#line 20 "parser.java"




//#####################################################################
// class: parser
// does : encapsulates yacc() parser functionality in a Java
//        class for quick code development
//#####################################################################
public class parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[],stateptr;             //state stack
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
void state_push(int state)
{
  if (stateptr>=YYSTACKSIZE)         //overflowed?
    return;
  statestk[++stateptr]=state;
}
int state_pop()
{
  if (stateptr<0)                    //underflowed?
    return -1;
  return statestk[stateptr--];
}
void state_drop(int cnt)
{
int ptr;
  ptr=stateptr-cnt;
  if (ptr<0)
    return;
  stateptr = ptr;
}
int state_peek(int relative)
{
int ptr;
  ptr=stateptr-relative;
  if (ptr<0)
    return -1;
  return statestk[ptr];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
boolean init_stacks()
{
  statestk = new int[YYSTACKSIZE];
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class parsersemantic is defined in parserval.java


String   yytext;//user variable to return contextual strings
parserval yyval; //used to return semantic vals from action routines
parserval yylval;//the 'lval' (result) I got from yylex()
parserval valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new parserval[YYSTACKSIZE];
  yyval=new parserval(0);
  yylval=new parserval(0);
  valptr=-1;
}
void val_push(parserval val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
parserval val_pop()
{
  if (valptr<0)
    return new parserval(-1);
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
parserval val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new parserval(-1);
  return valstk[ptr];
}
//#### end semantic value section ####
public final static short ABSTRACT=257;
public final static short BOOLEAN=258;
public final static short BREAK=259;
public final static short BYTE=260;
public final static short CASE=261;
public final static short CATCH=262;
public final static short CHAR=263;
public final static short CLASS=264;
public final static short CONTINUE=265;
public final static short DEFAULT=266;
public final static short DO=267;
public final static short DOUBLE=268;
public final static short ELSE=269;
public final static short EXTENDS=270;
public final static short FINAL=271;
public final static short FINALLY=272;
public final static short FLOAT=273;
public final static short FOR=274;
public final static short IF=275;
public final static short IMPLEMENTS=276;
public final static short IMPORT=277;
public final static short INSTANCEOF=278;
public final static short INT=279;
public final static short INTERFACE=280;
public final static short LONG=281;
public final static short NATIVE=282;
public final static short NEW=283;
public final static short _NULL=284;
public final static short PACKAGE=285;
public final static short PRIVATE=286;
public final static short PROTECTED=287;
public final static short PUBLIC=288;
public final static short RETURN=289;
public final static short SHORT=290;
public final static short STATIC=291;
public final static short SUPER=292;
public final static short SWITCH=293;
public final static short SYNCHRONIZED=294;
public final static short THIS=295;
public final static short THROW=296;
public final static short THROWS=297;
public final static short TRANSIENT=298;
public final static short TRY=299;
public final static short VOID=300;
public final static short VOLATILE=301;
public final static short WHILE=302;
public final static short CONST=303;
public final static short GOTO=304;
public final static short TRUE=305;
public final static short FALSE=306;
public final static short IDENTIFIER=307;
public final static short INT_LITERAL=308;
public final static short LONG_LITERAL=309;
public final static short FLOAT_LITERAL=310;
public final static short DOUBLE_LITERAL=311;
public final static short CHARACTER_LITERAL=312;
public final static short STRING_LITERAL=313;
public final static short EMPTY_DIM=314;
public final static short CAND=315;
public final static short COR=316;
public final static short EQ=317;
public final static short NE=318;
public final static short LE=319;
public final static short GE=320;
public final static short LSHIFTL=321;
public final static short ASHIFTR=322;
public final static short LSHIFTR=323;
public final static short PLUS_ASG=324;
public final static short MINUS_ASG=325;
public final static short MULT_ASG=326;
public final static short DIV_ASG=327;
public final static short REM_ASG=328;
public final static short LSHIFTL_ASG=329;
public final static short ASHIFTR_ASG=330;
public final static short LSHIFTR_ASG=331;
public final static short AND_ASG=332;
public final static short XOR_ASG=333;
public final static short OR_ASG=334;
public final static short PLUSPLUS=335;
public final static short MINUSMINUS=336;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    4,    4,    4,    4,    4,    4,    4,    4,   32,
   32,   33,   33,   34,   34,   34,   34,   34,   34,   34,
   34,   35,   36,    1,   99,   99,   92,   92,   88,   88,
   88,   74,   74,   70,   70,   71,   72,   73,   38,   38,
   40,   40,   82,   83,   83,   84,   84,   85,   85,   85,
   85,   85,   85,   85,   86,   67,   67,   68,   68,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,  106,
  106,  105,  105,  104,  104,   24,   24,   77,   77,   37,
   89,   89,   90,   90,   75,   41,   41,   42,   39,   39,
   53,   53,   79,   79,   55,   55,   78,   80,   76,   43,
   43,   44,   91,   94,   94,   93,   93,   93,   93,   87,
   81,   81,   25,   25,   25,   30,   30,   26,   26,   45,
   57,   57,   58,   58,   59,   59,   61,   61,   46,   46,
   46,   46,   46,   46,   46,   46,   47,   48,   56,   56,
   56,   56,   56,   56,   56,   49,   49,   49,   60,   62,
   62,   96,   96,   95,   95,   50,   50,   50,   50,   63,
   63,   66,   66,   64,   64,   65,   65,   51,   51,   51,
   51,   98,   98,   52,   52,   52,   52,  103,  103,  102,
   54,    5,    5,    5,    5,    6,    6,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,  100,  100,
   97,  101,    8,    8,   31,   31,    9,    9,    9,   27,
   27,   28,   28,   10,   10,   10,   10,   29,   29,   23,
    3,    3,    2,    2,   11,   11,   11,   12,   13,   14,
   14,   14,   14,   14,   15,   16,   17,   17,   17,   17,
   18,   18,   18,   19,   19,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   22,  107,
};
final static short yylen[] = {                            2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    3,    3,    1,    1,    2,    1,    2,
    2,    1,    1,    1,    1,    3,    5,    6,    2,    1,
    2,    1,    3,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    2,    4,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    3,    2,    4,    1,    1,    9,    9,    1,
    1,    1,    1,    3,    4,    1,    1,    2,    1,    3,
    1,    1,   10,    9,    5,    5,    2,    1,    5,    1,
    1,    2,    3,    1,    2,    1,    1,    1,    2,    4,
    9,    9,    3,    4,    2,    1,    3,    1,    1,    3,
    1,    1,    1,    2,    1,    1,    4,    3,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    3,    1,    1,
    1,    1,    1,    1,    1,    5,    7,    5,    3,    1,
    3,    1,    2,    3,    2,    5,    7,    8,    7,    2,
    1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    3,    1,    1,    5,    3,    3,    4,    1,    2,    5,
    2,    1,    1,    3,    3,    1,    1,    1,    1,    1,
    3,    3,    1,    1,    1,    3,    3,    3,    1,    1,
    1,    3,    4,    4,    3,    3,    4,    4,    6,    1,
    1,    1,    3,    5,    6,    4,    4,    1,    2,    3,
    1,    1,    1,    2,    1,    1,    1,    2,    2,    1,
    1,    2,    2,    1,    2,    2,    1,    2,    2,    1,
    4,    4,    4,    1,    1,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    5,    1,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    1,    0,
};
final static short yydefred[] = {                         0,
    0,    0,    1,    0,   26,  201,  199,    0,  200,    0,
    0,   34,   35,    0,   27,    0,   25,    0,   28,   65,
   64,   66,   62,   61,   60,   63,   67,   68,   69,    0,
    0,    0,   58,   32,    0,   33,   24,    0,  202,    0,
   36,   31,    0,    0,   59,   30,    0,    0,    0,   37,
    0,    0,   40,    0,    0,  100,  101,   39,    0,    0,
    0,   42,    0,  102,    0,   99,   41,    0,   38,    0,
    0,    0,  107,  106,    0,    0,    0,    0,    0,   98,
    0,    0,   49,   51,   50,   52,    0,   44,    0,   48,
    0,   90,   14,   16,   15,   21,   19,   18,   20,   17,
   80,    0,   11,   10,   12,   13,    0,  109,  105,  103,
   97,    0,    0,    0,    0,    0,    0,    0,  189,    0,
    0,    0,    0,  190,    0,    0,    0,    6,    7,    2,
    3,    4,    5,    8,    9,    0,  137,    0,    0,    0,
    0,    0,    0,  188,    0,  183,    0,  193,    0,    0,
    0,    0,    0,    0,    0,    0,  234,  240,  139,    0,
    0,    0,    0,    0,  136,  126,  129,  130,  132,  133,
  134,  135,    0,    0,    0,  123,  125,    0,    0,  122,
    0,    0,    0,   54,   43,   47,   57,   23,    0,   72,
    0,    0,  172,    0,  173,    0,    0,    0,    0,    0,
    0,    0,    0,  195,  186,  226,  227,    0,  230,  231,
    0,    0,  268,    0,  245,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  239,  238,  232,  233,  235,
  236,    0,    0,  228,  229,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  131,  120,  124,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  223,    0,    0,  222,    0,
  110,    0,  168,  169,    0,    0,    0,  161,    0,    0,
  164,  165,    0,    0,    0,    0,    0,    0,  170,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  206,    0,    0,  171,    0,    0,  175,    0,    0,    0,
  191,    0,    0,    0,  205,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  210,  211,  128,  196,  198,  197,    0,  138,    0,  184,
  185,    0,   70,    0,    0,   81,    0,    0,    0,   55,
    0,    0,  224,    0,   73,    0,    0,  127,    0,    0,
    0,  160,    0,    0,  219,  217,    0,  216,    0,    0,
    0,    0,    0,    0,  247,  248,    0,    0,    0,  249,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  181,  179,  177,    0,  242,  241,  243,  204,
    0,  208,  207,  203,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   75,   77,    0,    0,  167,  162,    0,
  163,    0,    0,  220,    0,    0,    0,  148,  174,    0,
   71,  156,  213,    0,   84,    0,    0,   86,   87,    0,
    0,    0,    0,  115,    0,  119,  116,    0,    0,    0,
    0,    0,    0,  215,    0,    0,    0,    0,    0,    0,
  150,    0,  209,   88,    0,   85,    0,    0,    0,  113,
    0,    0,  157,  159,    0,  147,    0,    0,  155,  149,
  153,    0,  180,    0,    0,    0,    0,    0,    0,  111,
  114,  117,  112,  158,  154,  151,    0,    0,    0,   94,
   92,   91,   78,   79,    0,    0,   93,    0,    0,   96,
   95,
};
final static short yydgoto[] = {                          2,
    3,  267,  268,  144,  145,  146,  147,  148,  204,  205,
  151,  206,  207,  208,  209,  210,  157,  158,  211,  339,
  213,  488,  285,  424,  456,  457,  340,  341,  286,  458,
  160,  197,  103,  162,  105,  163,  164,   52,   64,   61,
  447,  448,   55,   56,  165,  166,  167,  168,  169,  170,
  171,  172,  513,  317,  496,  173,  174,  175,  176,  438,
  177,  468,  279,  280,  429,  430,   31,   32,   33,   11,
   12,   13,   34,   35,  354,   36,   83,   84,   85,   86,
   73,   69,   87,   88,   89,   90,   74,   37,  355,  356,
   66,   14,   75,   76,  469,  470,  214,  194,    4,  179,
    9,  318,  319,  190,  191,  357,  269,
};
final static short yysindex[] = {                      -257,
 -268,    0,    0, -203,    0,    0,    0,  131,    0, -268,
 -203,    0,    0,  543,    0, -220,    0,  166,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  543,
 -147, 3795,    0,    0,  543,    0,    0,    0,    0,  -22,
    0,    0, -268, -268,    0,    0,  111,  -94,  -88,    0,
 -268,  -92,    0, -268,   77,    0,    0,    0,  168, -268,
   97,    0,  202,    0, 3795,    0,    0, 1581,    0, -268,
 2571,  193,    0,    0, 3795,  126,    0,  130, 1254,    0,
 4636,  200,    0,    0,    0,    0,  136,    0, 1581,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -91,    0,    0,    0,    0, -268,    0,    0,    0,
    0, -268, -268, 1535, 1813,  223,  225, 1813,    0, 1936,
  226,  234,  236,    0, 1936,  130,  237,    0,    0,    0,
    0,    0,    0,    0,    0, 1936,    0, 1936, 1936, 1936,
 1936, 1936, 1936,    0,  232,    0,  188,    0,    0,    0,
 -210,    0,    0, 1968,    0,    0,    0,    0,    0,  240,
  -91,  235,  243,  244,    0,    0,    0,    0,    0,    0,
    0,    0,  246,  182, 1254,    0,    0,   19,    6,    0,
  272,  -91, -268,    0,    0,    0,    0,    0,  -32,    0,
   88,  275,    0,  257,    0,  264,   12,   23,  -91,  776,
 1936,  238,  -10,    0,    0,    0,    0, 1968,    0,    0,
  271, 3932,    0,  297,    0, -268, 1936, 1936, 3372, -143,
 1936, 3426,  300,   24,   45,    0,    0,    0,    0,    0,
    0, -268, 1936,    0,    0, 1936, 1936, 1936, 1936, 1936,
 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936,   32,   93,
   83,   84,   91,    0,    0,    0, 1936, 1535, 1936, -140,
   87,  -31,  115,  325,   87,    0,   54,  313,    0, -268,
    0,   87,    0,    0,  342,  116,  340,    0, 1817,  334,
    0,    0, 3493, 1936,  238,   32, 1936,   32,    0, 1813,
 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936,
 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936,
    0, 3539, 3551,    0,  354,  130,    0,  133,  124, 3606,
    0, 4397, 1936, 4397,    0, 3479, 3932, 3932, 3932, 3932,
 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3639,  357,
    0,    0,    0,    0,    0,    0,  358,    0, 3713,    0,
    0,  366,    0,  367,  369,    0, 1813,    0,   87,    0,
   87,  372,    0, 1876,    0,  373, 1936,    0, 1936, 1936,
 3727,    0, 1535, 3785,    0,    0,  385,    0,    0,   58,
   58, 3843,  194,  194,    0,    0,  678, 2427, 2458,    0,
 3961, 2822,  162,  162,   58,   58,  459,  459,  459,  284,
 1535,   87,    0,    0,    0, 1535,    0,    0,    0,    0,
 1936,    0,    0,    0, 1936,   87,  146,  -91,  386,  398,
   32, 1639, 3932,    0,    0,   32, 3903,    0,    0,  403,
    0, 1936,  176,    0,   97, 1936, -108,    0,    0,  408,
    0,    0,    0,  416,    0, -268,  339,    0,    0,   32,
   32,   32,  146,    0, 3932,    0,    0,  -19,  146,  406,
 1535,  427, 1535,    0, 3932, 1936,  411,  345, -108, 1254,
    0,  130,    0,    0, 1357,    0,  146,  146,  412,    0,
 1730,  414,    0,    0, 1535,    0, 3932,  430,    0,    0,
    0, 1166,    0,   22,  452, 1254,  374,  -15,  -15,    0,
    0,    0,    0,    0,    0,    0, 1936, 1936,  380,    0,
    0,    0,    0,    0,  453,  466,    0,  451,  458,    0,
    0,
};
final static short yyrindex[] = {                        63,
    0,    0,    0,  455,    0,    0,    0,    0,    0,    0,
  455,    0,    0,    4,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    4,
    0, 4650,    0,    0,    4,    0,    0,   11,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -90,  396,    0,
    0,  396,    0,    0,    0,    0,    0,    0, 3247,    0,
    0,    0,  -12,    0, 2142,    0,    0, 2142,    0,    0,
    0, 4500,    0,    0, 2142,    0, 4321, 4591,  397,    0,
    0, 4455,    0,    0,    0,    0,    0,    0, 4546,    0,
 4560,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  464,  464,    0,    0,    0,    0,    0,    0,  464,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3000,    0, 2755,    0,  657, 1079,
 3127,  607, 1274,    0, 1630, 1727,    0,    0,    0, 2392,
    0,  -79,   -6,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  402,    0,    0, 2017, 2578,    0,
   -3,    0,    0,    0,    0,    0,    0,    0,  107,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  464,
    0,    0,    0,    0,    0,    0,    0, 3305,    0,    0,
    0,  469,    0, 2215,    0,    0,    0,    0,    0,    0,
    0,    0,  215,  217, 3059,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  491,  107,    0,
    0,    0,    0,    0,    0,    0,  491,    0,    0,    0,
  368,  107,    0,    0,  368,    0, 2333,  121,    0,    0,
    0,  368,    0,    0,    0,    0,   34,    0,    0,    0,
    0,    0,    0,    0, 2637, 2882,  491, 2882,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  885,  969,    0,
    0,    0,    0, 2696,    0,    0,  113,  280,  791,  972,
  982, 1077, 1083, 1226, 1585, 1642, 1733, 1842,  493,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2274,    0,  501,    0,    0,    0,  500,  368,    0,
  368,    0,    0,    0,    0,    0,    0,    0,    0,  491,
    0,    0,    0,    0,    0,    0,    0,    0, 3187, 4247,
 4257,    0, 4016, 4074,    0,    0,  495,  251,  703,    0,
  120,  174,  328, 1847, 4315, 4325, 4084, 4142, 4199,    0,
    0, 1888,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  491, 1888,  396,    0,    0,    0,
  -40,    0,  158,    0,    0,  -40,    0,    0,    0,    0,
    0,  491, 1063,    0, 2941,    0,  397,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  206,
  -27,  -27,  464,    0,   -2,    0,    0,    0,  464,    0,
    0,    0,    0,    0, 1924,    0,    0,    0, 1448,    0,
    0,    0,    0,    0,  397,    0,  -11,  -11,    0,    0,
    0,    0,    0,    0,    0,    0,  486,    0,    0,    0,
    0,  397,    0,    0, 1955,  397,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  491,  491,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,
};
final static short yygindex[] = {                         0,
    0,    0,  421,    0,    0,    0,    0,    0,  -73,   94,
    0,  142,  192,   55,  208,  363,  -82,    0,    0,  668,
  407,    0,    0,    0,  181,   65, -172,  138, -169,    0,
    0,  -55, -109,  -26,  -14,  -64,  148,    0,  -57,    0,
 -315,    0,    0,    0,  -68,   74,    0,    0,    0,    0,
    0,    0,   51,  233,    0, -178, -418,   86, -173,    0,
  360,   76,    0,    0, -182,  139,  288,    0,  538,    0,
    0,    0,    0,  383,  170,    0,    0,    0,    0,    0,
    0,  140,    0,  484,    0,    0,    0,  204, -211,  160,
    0,  569,    0,  508,    0,  118,   28,  471,    0,   13,
    0,    0,  267,  321,  -43,    0,    1,
};
final static int YYTABLESIZE=4957;
final static short yytable[] = parserdata.yytable;
final static short yycheck[] = {                         68,
    0,  175,   60,    0,    4,   79,   71,   40,   40,   78,
    0,   11,   70,    1,   14,   71,   81,  200,   59,   42,
   89,  200,   10,   79,   44,   81,  136,  285,    1,   40,
   30,   59,  123,  203,   41,   35,   51,   10,  307,   54,
  114,   44,   46,   59,   71,   60,   59,   59,   48,   49,
  115,   46,   52,  265,   81,   70,  475,  126,   40,  115,
  272,   40,    0,   51,   41,   65,   54,   46,   68,   46,
   43,   44,   60,  277,   41,   75,   58,  496,   51,   79,
   91,   54,   70,   71,  257,   41,  307,   60,  115,   89,
   46,  118,   59,   81,   37,  123,   91,   70,   71,   42,
   43,  175,   45,  118,   47,  125,   79,  123,   81,  136,
  123,  123,  112,  113,  287,  285,  264,  161,  262,  175,
  120,   59,  125,  264,  335,  336,  200,  115,  272,  102,
  118,   44,  280,   79,  107,   91,   44,  453,  182,  112,
  113,  114,  115,  459,  200,  118,   59,  359,  136,  361,
   44,   59,  261,   41,  295,  199,   44,  266,   44,   44,
   41,  477,  478,   44,   44,   59,  307,   61,  114,   59,
   58,   59,   79,   59,   59,  270,   46,   58,   59,   59,
  290,  270,   63,  276,  258,  276,  369,  114,  161,   59,
  369,  370,  138,  139,  140,  141,  142,  143,   37,  123,
  200,   44,  175,   42,   43,   93,   45,  114,   47,  182,
  183,   46,   93,   46,   41,  307,   59,   44,   71,  123,
   79,   60,  314,   62,   59,  290,  199,  307,   81,  175,
   37,   58,   59,   30,  314,   42,   63,  125,   35,  322,
   47,  324,  415,  216,  125,   44,   41,  316,  248,   44,
  125,   59,  123,  432,  200,  114,  297,  257,   59,  232,
  125,  261,   40,  290,   40,  265,   93,  264,  175,  297,
   79,   46,  272,   40,  264,   40,   40,   46,   91,   40,
   46,  314,  314,  280,  307,  258,   79,  287,   46,   46,
  280,   41,  357,  200,   44,  369,  370,  270,  125,  373,
  307,  357,  290,  307,   59,  114,  125,  314,   58,   59,
  314,   40,  258,   63,   40,   59,  175,  290,  492,  257,
   41,  114,   59,   44,  302,  314,  264,  401,   91,   59,
  357,  258,  406,  271,  507,  508,   40,   58,   59,  277,
   41,  200,  280,   93,  282,  314,  264,  264,  286,  287,
  288,  258,   65,  291,  264,   68,  294,  271,  432,  359,
  298,  361,   75,  301,   40,   38,  175,  314,   41,  357,
  370,   44,   93,   61,  124,  125,   89,  323,  321,  322,
  323,   40,  175,   44,  357,   58,   59,  461,  446,  463,
   63,  200,   59,   40,  262,  272,  470,   41,   41,  258,
  373,  475,  402,  472,  125,   40,  123,  200,   41,   41,
   44,  485,   41,   41,  470,  415,  416,  417,  492,  475,
   93,   94,  496,  369,  370,   41,   41,  373,  401,  498,
  499,  446,  432,  406,  315,  316,  492,  437,   41,  278,
  496,   79,  297,   41,  269,  418,  373,   65,   41,  258,
   68,  124,  125,  453,    0,  401,   41,   75,  446,  459,
  406,  123,  369,  370,   59,  258,  373,   41,   58,  125,
   59,   89,   59,  446,  401,  475,  114,  477,  478,  406,
  319,  320,  321,  322,  323,   79,  432,   58,  461,  316,
  463,   40,  492,   41,  401,   37,  496,  470,  125,  406,
   42,   43,  475,   45,  125,   47,   41,  507,  508,   59,
  369,  370,  485,   59,  373,  461,   59,  463,  123,  492,
  114,  125,   59,  496,  470,  432,  125,   59,  314,  475,
  314,   41,   38,   41,  461,   41,  463,  175,   44,  485,
   41,   41,  401,   58,  364,  481,  492,  406,  411,  499,
  496,  319,   58,   59,  461,  470,  463,   63,  485,  200,
  369,  370,  200,  470,  373,  315,  316,  492,  475,   32,
  432,  402,   89,  432,  435,  416,  369,  370,  485,   11,
  373,  175,   75,  113,  318,  492,  469,   93,   94,  496,
  270,   -1,  401,   -1,   -1,   -1,   -1,  406,   -1,   -1,
   -1,   59,  461,   -1,  463,   -1,  200,   -1,  401,   -1,
   -1,  470,   -1,  406,   -1,   -1,  475,   -1,  124,  125,
  258,   -1,   -1,  432,   -1,  258,  485,  260,   -1,   -1,
  263,   -1,   -1,  492,   -1,  268,   -1,  496,   -1,  432,
  273,   -1,  315,  316,  317,  318,  279,   41,  281,   -1,
   44,   -1,  461,   -1,  463,   -1,   -1,  290,   -1,   -1,
   -1,  470,   -1,   -1,  258,   59,  475,   61,  461,   -1,
  463,   -1,   -1,   -1,  307,   -1,  485,  470,   -1,   -1,
   -1,   -1,  475,  492,   -1,   -1,   -1,  496,   -1,   -1,
   -1,   -1,  485,   -1,   -1,   -1,   -1,   41,   -1,  492,
   44,   -1,   46,  496,   -1,   -1,  286,   -1,  288,   -1,
   -1,  257,   -1,   -1,   37,   59,   -1,   61,  264,   42,
   43,   -1,   45,   -1,   47,  271,   -1,   -1,   -1,   -1,
   -1,  369,  370,   -1,  280,  373,  282,   60,   -1,   62,
  286,  287,  288,   41,   -1,  291,   44,   91,  294,   -1,
   -1,   -1,  298,   -1,   -1,  301,   -1,  258,   -1,  260,
   58,   59,  263,  401,   -1,   63,   -1,  268,  406,   -1,
   -1,   -1,  273,   -1,   -1,  369,  370,   -1,  279,  373,
  281,   -1,   -1,   -1,   -1,   -1,   -1,  120,   -1,  290,
   -1,   -1,  125,   -1,  432,   93,   94,   -1,   -1,  257,
   -1,   -1,   -1,  136,   -1,   -1,  307,  401,   33,  315,
  316,   -1,  406,  271,   -1,   40,   -1,   -1,   43,   -1,
   45,   -1,   -1,  461,  282,  463,  124,  125,  286,  287,
  288,   41,  470,  291,   44,   -1,  294,  475,  432,   -1,
  298,  421,   -1,  301,   -1,   -1,  426,  485,   58,   59,
   -1,   -1,   -1,   -1,  492,   -1,   -1,   -1,  496,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  461,  201,  463,
  450,  451,  452,   -1,   -1,   -1,  470,   -1,   -1,   -1,
   -1,  475,   -1,   93,  217,  218,   -1,   -1,  221,   -1,
   -1,  485,   -1,   -1,   -1,   -1,   -1,   -1,  492,   -1,
  233,  126,  496,  236,  237,  238,  239,  240,  241,  242,
  243,  244,  245,  246,  247,  125,   -1,   33,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   -1,  259,   43,   -1,   45,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,   59,   -1,   -1,  279,   -1,   -1,   -1,
   -1,  284,   -1,   -1,   -1,  278,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,   -1,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,   -1,  317,  318,  319,  320,  321,  322,
  323,   33,   -1,   -1,   -1,   -1,   -1,  123,   40,  125,
  126,   43,   41,   45,   -1,   44,   -1,  315,  316,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   59,   -1,   58,
   59,  364,   -1,  258,  367,  260,   -1,   -1,  263,   58,
   59,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,   -1,
   -1,   -1,   -1,   -1,  279,   -1,  281,   -1,  283,  284,
   -1,   -1,   -1,   -1,   93,  290,   -1,  292,   -1,   -1,
  295,   -1,   -1,   -1,   93,  300,   -1,   -1,   -1,   -1,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  422,
   -1,  123,   -1,  125,  126,   33,  125,   -1,   -1,   -1,
   -1,   -1,   40,  436,   -1,   43,  125,   45,   -1,   -1,
  335,  336,   -1,   -1,   -1,   -1,   -1,   41,   -1,   41,
   44,   59,   44,   41,   46,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,  466,   58,   59,   -1,   59,   -1,   61,
   58,   59,  258,  259,  260,  261,   -1,  263,  481,  265,
  266,  267,  268,  269,   -1,  271,  272,  273,  274,  275,
   -1,   -1,   -1,  279,   -1,  281,   -1,  283,  284,   93,
   -1,   -1,   -1,  289,  290,   93,  292,  293,  294,  295,
  296,   -1,   -1,  299,  300,  123,  302,  125,  126,  305,
  306,  307,  308,  309,  310,  311,  312,  313,   33,   -1,
   -1,  125,   -1,   -1,   -1,   40,   -1,  125,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,
  336,   -1,   -1,   -1,   59,   -1,  258,  259,  260,  261,
   -1,  263,   -1,  265,  266,  267,  268,  269,   -1,  271,
   -1,  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,
   -1,  283,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,
  292,  293,  294,  295,  296,   -1,   41,  299,  300,   44,
  302,   -1,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,   58,   59,   -1,   33,   -1,  123,   -1,
   -1,  126,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,
   -1,   -1,   -1,  335,  336,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   41,   -1,   -1,   44,   93,   -1,
  258,  259,  260,  261,   -1,  263,   -1,  265,  266,  267,
  268,   -1,   59,  271,   61,  273,  274,  275,   -1,   -1,
   -1,  279,   -1,  281,   -1,  283,  284,   -1,   -1,   -1,
  125,  289,  290,   -1,  292,  293,  294,  295,  296,   -1,
   -1,  299,  300,   -1,  302,   -1,   -1,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  123,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   -1,   -1,   40,  335,  336,   43,
   -1,   45,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,
  265,  266,  267,  268,   -1,   -1,  271,   -1,  273,  274,
  275,   -1,   -1,   -1,  279,   -1,  281,   -1,  283,  284,
   -1,   -1,   -1,   -1,  289,  290,   -1,  292,  293,  294,
  295,  296,   -1,   -1,  299,  300,   -1,  302,   -1,   -1,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  123,
   33,   -1,  126,   -1,   -1,   -1,   -1,   40,   -1,   -1,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  335,  336,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,  258,  259,  260,   -1,   -1,  263,   -1,  265,   -1,
  267,  268,   -1,   -1,  271,   -1,  273,  274,  275,   -1,
   -1,   -1,  279,   -1,  281,   -1,  283,  284,   -1,   -1,
   -1,   -1,  289,  290,   -1,  292,  293,  294,  295,  296,
   -1,   -1,  299,  300,   -1,  302,   -1,   -1,  305,  306,
  307,  308,  309,  310,  311,  312,  313,   33,   -1,   -1,
  123,   -1,   -1,  126,   40,   -1,   -1,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,  336,
   -1,   -1,   -1,   59,   -1,   -1,   -1,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
   -1,   -1,   -1,   -1,  258,  259,  260,   -1,   -1,  263,
   -1,  265,   -1,  267,  268,   41,   -1,  271,   44,  273,
  274,  275,   -1,   -1,   -1,  279,   -1,  281,   -1,  283,
  284,   -1,   58,   59,   -1,  289,  290,   -1,  292,  293,
  294,  295,  296,   -1,   -1,  299,  300,  123,  302,   -1,
  126,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   41,   33,   -1,   44,   -1,   -1,   -1,   93,   40,   -1,
   -1,   43,   41,   45,   -1,   44,   -1,   -1,   59,   -1,
   61,  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   -1,   -1,  123,   -1,  258,  259,  260,   -1,  125,
  263,   -1,  265,   -1,  267,  268,   -1,   -1,  271,   -1,
  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,   -1,
  283,  284,   -1,   -1,   93,   -1,  289,  290,   -1,  292,
  293,  294,  295,  296,   -1,   -1,  299,  300,   -1,  302,
   -1,   -1,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  123,   33,  125,  126,   -1,  125,   41,   -1,   40,
   44,   -1,   43,   41,   45,   -1,   44,   -1,   -1,   -1,
   -1,   -1,  335,  336,   -1,   59,   -1,   61,   -1,   -1,
   58,   59,  258,  259,  260,   -1,   -1,  263,   -1,  265,
   -1,  267,  268,   -1,   -1,   -1,   -1,  273,  274,  275,
   -1,   -1,   -1,  279,   -1,  281,   -1,  283,  284,   -1,
   -1,   -1,   -1,  289,  290,   93,  292,  293,  294,  295,
  296,   -1,   -1,  299,  300,   -1,  302,  257,   -1,  305,
  306,  307,  308,  309,  310,  311,  312,  313,   -1,   33,
   -1,  271,  123,   -1,  125,  126,   40,  125,   -1,   43,
   -1,   45,  282,   -1,   -1,   -1,  286,  287,  288,  335,
  336,  291,   -1,   -1,  294,   59,   -1,   -1,  298,   -1,
   -1,  301,   41,   -1,   38,   44,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,  258,   -1,  260,   58,
   59,  263,   -1,   -1,   58,   59,  268,   -1,   33,   63,
   -1,  273,   -1,   -1,   -1,   40,   -1,  279,   43,  281,
   45,  283,  284,   -1,   -1,   -1,   -1,   -1,  290,   -1,
  292,   -1,   -1,  295,   93,   -1,   -1,   -1,  300,   93,
   94,   -1,  126,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,   41,   -1,  125,   44,   33,   -1,
  124,  125,   -1,  335,  336,   40,   -1,   -1,   43,   -1,
   45,   58,   59,   -1,   -1,   -1,   -1,  258,   -1,  260,
   -1,   -1,  263,   -1,   -1,   -1,   -1,  268,  123,   -1,
   46,  126,  273,   -1,   -1,   -1,   -1,   -1,  279,   -1,
  281,   -1,  283,  284,   -1,   61,   93,   -1,   -1,  290,
   -1,  292,   -1,   -1,  295,   -1,   -1,   -1,   61,  300,
   -1,   -1,   -1,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,  313,   -1,   -1,   91,   -1,   -1,  125,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  126,   46,   -1,  335,  336,   -1,   -1,   -1,   -1,
  258,   -1,  260,   -1,  258,  263,  260,   61,   -1,  263,
  268,   -1,   -1,   -1,  268,  273,   -1,   -1,   -1,  273,
   -1,  279,   -1,  281,   -1,  279,   -1,  281,   -1,  283,
  284,   -1,  290,   -1,   -1,   -1,  290,   91,  292,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,  307,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,   -1,   -1,  258,   -1,  260,   -1,   -1,  263,   -1,
   -1,   -1,   -1,  268,   -1,  258,   -1,  260,  273,   -1,
  263,  335,  336,   -1,  279,  268,  281,   -1,  283,  284,
  273,  315,  316,  317,  318,  290,  279,  292,  281,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  290,   -1,   -1,
  305,  306,  307,  308,  309,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,  258,  307,  260,   -1,   -1,  263,   -1,
   -1,   -1,   -1,  268,   -1,   -1,   -1,   -1,  273,   -1,
  335,  336,   -1,   -1,  279,   -1,  281,   -1,  283,  284,
   -1,   -1,   -1,   -1,   -1,  290,   -1,  292,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,
  305,  306,  307,  308,  309,  310,  311,  312,  313,   -1,
   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,
  335,  336,   58,   59,   60,   61,   62,   63,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,  307,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   58,   59,   60,   61,   62,   63,   -1,  124,  125,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   60,   61,   62,   63,   -1,  124,  125,  258,
   -1,  260,   -1,   -1,  263,  264,   -1,   -1,   -1,  268,
   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,   -1,
  279,  280,  281,   -1,   -1,   93,   94,   -1,   37,   38,
   -1,  290,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,  300,   -1,   -1,   -1,   -1,   -1,   -1,  307,   58,
   59,   60,   61,   62,   63,  123,  124,  125,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,
   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   60,   -1,   62,   -1,
   -1,   -1,  278,   -1,   37,   38,   -1,   -1,   -1,   42,
   43,   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,  125,   60,   -1,   62,
   94,  307,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  307,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  278,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,  297,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  278,
   93,   94,   -1,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,
   -1,  124,  125,   -1,  278,   -1,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,   -1,   93,
   94,   -1,   37,   38,   -1,  278,   41,   42,   43,   44,
   45,   46,   47,  317,  318,  319,  320,  321,  322,  323,
   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,   -1,
  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,   61,   62,   63,   -1,  124,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,   -1,
  260,   -1,   -1,  263,  264,   -1,   -1,   -1,  268,   -1,
   -1,   -1,   -1,  273,   -1,   -1,   -1,   93,   94,  279,
  280,  281,   -1,   -1,   -1,  278,   -1,   -1,   37,   38,
  290,   -1,   -1,   42,   43,   -1,   45,   -1,   47,   -1,
  300,   -1,   -1,   -1,   -1,   -1,   -1,  307,  124,  125,
   -1,   60,   -1,   62,  307,   -1,   -1,   -1,   -1,   -1,
   -1,  314,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  278,   94,   -1,   -1,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   61,   62,   63,  124,   -1,   -1,   -1,   -1,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  278,   93,   94,   -1,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   60,   61,   62,   63,   -1,  124,  125,   -1,   -1,   -1,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,  278,   93,   94,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,
   61,   62,   63,   -1,  124,  125,   -1,   -1,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,   -1,   93,   94,   -1,   37,   38,   -1,   -1,  278,
   42,   43,   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   63,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  317,  318,
  319,  320,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   58,   59,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  278,   93,
   94,   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,
  124,  125,   -1,   -1,   -1,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  278,   -1,   93,
   94,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,
  124,  125,   -1,   -1,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,  278,   91,   -1,   93,
   94,   37,   38,   -1,   -1,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,  123,
  124,  125,  314,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,   -1,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   37,   38,
   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
   59,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,   -1,   37,   38,  278,   94,   41,   42,   43,   -1,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   94,
   42,   43,  276,   45,  278,   47,   -1,   -1,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   -1,   45,   60,   47,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   -1,   60,  307,   62,   63,   -1,   -1,   -1,   -1,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
   -1,   93,   94,   -1,   -1,   37,   38,   -1,   -1,   41,
   42,   43,  278,   45,   -1,   47,   94,   37,   38,   -1,
   -1,   41,   42,   43,   -1,   45,   -1,   47,   60,   -1,
   62,   63,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   -1,   62,   63,   -1,   -1,  124,   -1,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,   -1,   -1,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   94,   -1,   41,   42,   43,  278,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   -1,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,  124,   37,   38,   -1,   -1,   -1,
   42,   43,   44,   45,   -1,   47,  315,  316,  317,  318,
  319,  320,  321,  322,  323,   -1,   -1,   -1,   60,   94,
   62,   63,   -1,  278,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,  316,  317,  318,  319,  320,  321,  322,  323,   37,
   38,   -1,   -1,   -1,   42,   43,  278,   45,   -1,   47,
   -1,   -1,  124,   37,   38,   -1,   -1,   -1,   42,   43,
  278,   45,   60,   47,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   -1,   62,   63,
   -1,   -1,   -1,  315,  316,  317,  318,  319,  320,  321,
  322,  323,   -1,   -1,   -1,   93,   94,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  278,   -1,   -1,   -1,
   94,   37,   38,   -1,   -1,   -1,   42,   43,  278,   45,
   -1,   47,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   63,   -1,   -1,
  124,   -1,   -1,  315,  316,  317,  318,  319,  320,  321,
  322,  323,   -1,   -1,   -1,  315,  316,  317,  318,  319,
  320,  321,  322,  323,   -1,   -1,   -1,   93,   94,   37,
   38,   -1,   -1,  278,   42,   43,   -1,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   -1,   60,   -1,   62,   63,   -1,   -1,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
  315,  316,  317,  318,  319,  320,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   -1,   45,   -1,   47,
   -1,   -1,   -1,  315,  316,  317,  318,  319,  320,  321,
  322,  323,   60,   -1,   62,   63,  124,   -1,   37,   38,
   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  278,   60,   -1,   62,   63,   -1,   94,   37,   38,   -1,
   -1,   -1,   42,   43,  278,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   -1,   62,   -1,   -1,   94,  124,  315,  316,  317,
  318,  319,  320,  321,  322,  323,   -1,   -1,   -1,   -1,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
   -1,  257,   -1,   38,   94,  124,   41,   -1,   43,   44,
   45,   -1,  278,   -1,   -1,  271,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   60,  282,   62,   63,   -1,
  286,  287,  288,   -1,  124,  291,   -1,   -1,  294,   -1,
   -1,   -1,  298,   -1,   -1,  301,   -1,   -1,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,   93,   94,
   -1,   38,   -1,   -1,   41,   -1,   43,   44,   45,   -1,
  278,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   58,   59,   60,   -1,   62,   63,   -1,   -1,  124,
  125,   58,   59,   60,   -1,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,  317,
  318,  319,  320,  321,  322,  323,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,   38,
  278,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   58,
   59,   60,   -1,   62,   63,   -1,   -1,  124,  125,  278,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,  317,
  318,  319,  320,  321,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   94,   38,   -1,  278,   41,
   -1,   -1,   44,   -1,   -1,   -1,  315,  316,  317,  318,
  319,  320,  321,  322,  323,   -1,   58,   59,   60,   -1,
   62,   63,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,  318,  319,
  320,  321,  322,  323,   38,   -1,   -1,   41,   -1,   -1,
   44,   93,   94,  278,   38,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,   63,
   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,
  315,  316,  317,  318,  319,  320,  321,  322,  323,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,  278,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,  278,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
  124,  125,   58,   59,   60,   -1,   62,   63,   -1,   -1,
  124,  125,   58,   59,   60,   -1,   62,   63,  315,  316,
  317,  318,  319,  320,  321,  322,  323,   -1,  315,  316,
  317,  318,  319,  320,  321,  322,  323,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,  278,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,  124,  125,
   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,  317,  318,
  319,  320,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  126,   -1,  278,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,  316,  317,  318,  319,  320,   -1,   -1,   -1,
   -1,  315,  316,  317,  318,  319,  320,  123,  258,  125,
  260,   -1,   -1,  263,  264,   -1,   -1,   -1,  268,   -1,
   -1,   -1,  278,  273,   -1,   -1,   -1,   -1,   -1,  279,
  280,  281,  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  300,   -1,   -1,   -1,  125,   -1,   -1,  307,   -1,  315,
  316,  317,  318,  319,  320,   -1,   -1,   -1,   -1,  315,
  316,  317,  318,  319,  320,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  258,   -1,  260,   -1,   -1,  263,
   -1,   -1,   -1,   -1,  268,   -1,   -1,   -1,   -1,  273,
  125,   -1,   -1,   -1,   -1,  279,   -1,  281,   -1,  283,
  284,   -1,   -1,   -1,  125,   -1,  290,   -1,  292,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  257,  258,   -1,  260,   -1,   -1,  263,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,   -1,  273,   -1,   -1,
   -1,   -1,   -1,  279,  280,  281,  282,   -1,   -1,   -1,
  286,  287,  288,   -1,  290,  291,   -1,   -1,  294,   -1,
   -1,   -1,  298,   -1,  300,  301,  257,  258,   -1,  260,
   -1,  307,  263,  264,   -1,   -1,   -1,  268,   -1,   -1,
  271,   -1,  273,   -1,   -1,   -1,   -1,   -1,  279,  280,
  281,  282,   -1,   -1,   -1,  286,  287,  288,   -1,  290,
  291,   -1,   -1,  294,   -1,   -1,   -1,  298,   -1,  300,
  301,   -1,   -1,  258,   -1,  260,  307,   -1,  263,  264,
   -1,   -1,   -1,  268,   -1,   -1,   -1,  258,  273,  260,
   -1,   -1,  263,  264,  279,  280,  281,  268,   -1,   -1,
   -1,   -1,  273,   -1,   -1,  290,   -1,   -1,  279,  280,
  281,   -1,   -1,   -1,   -1,  300,   -1,  257,  258,  290,
  260,   -1,  307,  263,  264,   -1,   -1,   -1,  268,  300,
   -1,  271,   -1,  273,   -1,   -1,  307,   -1,   -1,  279,
  280,  281,  282,   -1,   -1,   -1,  286,  287,  288,   -1,
  290,  291,   -1,   -1,  294,   -1,   -1,   -1,  298,   -1,
  300,  301,   -1,  258,   -1,  260,   -1,  307,  263,  264,
   -1,   -1,   -1,  268,   -1,   -1,   -1,  258,  273,  260,
   -1,   -1,  263,  264,  279,  280,  281,  268,   -1,   -1,
   -1,   -1,  273,   -1,   -1,  290,   -1,   -1,  279,  280,
  281,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,  290,
   -1,   -1,  307,   -1,   -1,   -1,   -1,   -1,   -1,  300,
   -1,   -1,   -1,   -1,   -1,   -1,  307,
};
final static short YYFINAL=2;
final static short YYMAXTOKEN=336;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'","'&'",null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'","'?'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'","'^'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'","'|'","'}'","'~'",null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"ABSTRACT","BOOLEAN","BREAK",
"BYTE","CASE","CATCH","CHAR","CLASS","CONTINUE","DEFAULT","DO","DOUBLE","ELSE",
"EXTENDS","FINAL","FINALLY","FLOAT","FOR","IF","IMPLEMENTS","IMPORT",
"INSTANCEOF","INT","INTERFACE","LONG","NATIVE","NEW","_NULL","PACKAGE",
"PRIVATE","PROTECTED","PUBLIC","RETURN","SHORT","STATIC","SUPER","SWITCH",
"SYNCHRONIZED","THIS","THROW","THROWS","TRANSIENT","TRY","VOID","VOLATILE",
"WHILE","CONST","GOTO","TRUE","FALSE","IDENTIFIER","INT_LITERAL","LONG_LITERAL",
"FLOAT_LITERAL","DOUBLE_LITERAL","CHARACTER_LITERAL","STRING_LITERAL",
"EMPTY_DIM","CAND","COR","EQ","NE","LE","GE","LSHIFTL","ASHIFTR","LSHIFTR",
"PLUS_ASG","MINUS_ASG","MULT_ASG","DIV_ASG","REM_ASG","LSHIFTL_ASG",
"ASHIFTR_ASG","LSHIFTR_ASG","AND_ASG","XOR_ASG","OR_ASG","PLUSPLUS",
"MINUSMINUS",
};
final static String yyrule[] = parserdata.yyrule;

//#line 1345 "jparser.y"

protected void init(String filename) throws IOException {
  _filename = filename;
  _lexer = new Yylex(new FileInputStream(_filename));
}

protected int yylex()
{
  int retval;

  try {
    retval = _lexer.yylex();

    yylval = _lexer.getParserVal();

  } catch (IOException e) {

    throw new RuntimeException("lexical error");
  }

  return retval;
}

protected static final LinkedList cons(Object obj)
{
  return cons(obj, new LinkedList());
}

protected static final LinkedList cons(Object obj, LinkedList list)
{
  if ((obj != null) && (obj != AbsentTreeNode.instance)) {
     list.addFirst(obj);
  }

  return list;
}

protected static final LinkedList append(LinkedList list, Object obj)
{
  list.addLast(obj);

  return list;
}


protected static final Object appendLists(LinkedList list1, LinkedList list2)
{
  list1.addAll(list2);

  return list1;
}

/** Place to put the finished AST. */
protected CompileUnitNode _theAST;

public CompileUnitNode getAST() { return _theAST; }

protected void yyerror(String msg)
{
  throw new RuntimeException("parse error for " + _filename + ": " + msg);
}

/** An array type with given ELEMENTTYPE and DIMS dimensions.  When
 *  DIMS=0, equals ELEMENTTYPE.
 */
protected static TypeNode makeArrayType(TypeNode elementType, int dims)
{
  while (dims > 0) {
	   elementType = new ArrayTypeNode(elementType);
	   dims -= 1;
  }
  return elementType;
}

protected String _filename = null;
protected Yylex _lexer = null;
//#line 1827 "parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}



//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  char:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]+"");
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0) {
      try {
         yyval = (parserval) (val_peek(yym-1).clone());
      } catch (CloneNotSupportedException e) {
         yyerror("clone not supported");
      }
    } else {
      yyval = new parserval(0);
    }

    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 204 "jparser.y"
{ _theAST = (CompileUnitNode) val_peek(0).obj; }
break;
case 2:
//#line 210 "jparser.y"
{ yyval.obj = new IntLitNode(val_peek(0).sval); }
break;
case 3:
//#line 212 "jparser.y"
{ yyval.obj = new LongLitNode(val_peek(0).sval); }
break;
case 4:
//#line 214 "jparser.y"
{ yyval.obj = new FloatLitNode(val_peek(0).sval); }
break;
case 5:
//#line 216 "jparser.y"
{ yyval.obj = new DoubleLitNode(val_peek(0).sval); }
break;
case 6:
//#line 218 "jparser.y"
{ yyval.obj = new BoolLitNode("true"); }
break;
case 7:
//#line 220 "jparser.y"
{ yyval.obj = new BoolLitNode("false"); }
break;
case 8:
//#line 222 "jparser.y"
{ yyval.obj = new CharLitNode(val_peek(0).sval); }
break;
case 9:
//#line 224 "jparser.y"
{ yyval.obj = new StringLitNode(val_peek(0).sval); }
break;
case 14:
//#line 245 "jparser.y"
{ yyval.obj = BoolTypeNode.instance; }
break;
case 15:
//#line 247 "jparser.y"
{ yyval.obj = CharTypeNode.instance; }
break;
case 16:
//#line 249 "jparser.y"
{ yyval.obj = ByteTypeNode.instance; }
break;
case 17:
//#line 251 "jparser.y"
{ yyval.obj = ShortTypeNode.instance; }
break;
case 18:
//#line 253 "jparser.y"
{ yyval.obj = IntTypeNode.instance; }
break;
case 19:
//#line 255 "jparser.y"
{ yyval.obj = FloatTypeNode.instance; }
break;
case 20:
//#line 257 "jparser.y"
{ yyval.obj = LongTypeNode.instance; }
break;
case 21:
//#line 259 "jparser.y"
{ yyval.obj = DoubleTypeNode.instance; }
break;
case 22:
//#line 267 "jparser.y"
{ yyval.obj = new TypeNameNode((NameNode) val_peek(0).obj); }
break;
case 23:
//#line 272 "jparser.y"
{ yyval.obj = new ArrayTypeNode((TypeNode) val_peek(1).obj); }
break;
case 24:
//#line 281 "jparser.y"
{ yyval.obj = new CompileUnitNode((TreeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj);  }
break;
case 25:
//#line 286 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 26:
//#line 288 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 27:
//#line 293 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 28:
//#line 295 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 29:
//#line 301 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 30:
//#line 303 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 31:
//#line 305 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 36:
//#line 323 "jparser.y"
{ yyval.obj = new ImportNode((NameNode) val_peek(1).obj); }
break;
case 37:
//#line 328 "jparser.y"
{ yyval.obj = new ImportOnDemandNode((NameNode) val_peek(3).obj); }
break;
case 38:
//#line 340 "jparser.y"
{ yyval.obj = new ClassDeclNode(val_peek(5).ival, (NameNode) val_peek(3).obj, (TreeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj,
         (LinkedList) val_peek(0).obj); }
break;
case 39:
//#line 355 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 40:
//#line 357 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 41:
//#line 365 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 42:
//#line 367 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 43:
//#line 376 "jparser.y"
{
     yyval.obj = val_peek(1).obj; /* in the original, an ABSENT tree is added*/
   }
break;
case 44:
//#line 382 "jparser.y"
{ }
break;
case 45:
//#line 384 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 47:
//#line 390 "jparser.y"
{ yyval.obj = appendLists((LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 49:
//#line 399 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 50:
//#line 401 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 51:
//#line 403 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 52:
//#line 406 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 53:
//#line 413 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 54:
//#line 415 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj); }
break;
case 55:
//#line 423 "jparser.y"
{
      Modifier.checkFieldModifiers(val_peek(3).ival);
	     LinkedList result = new LinkedList();

      LinkedList varDecls = (LinkedList) val_peek(1).obj;
      ListIterator itr = varDecls.listIterator(0);

	     while (itr.hasNext()) {
		     DeclaratorNode decl = (DeclaratorNode) itr.next();
		     result = cons(new FieldDeclNode(val_peek(3).ival,
						            makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
						            decl.getName(), decl.getInitExpr()),
				               result);
		   }

      yyval.obj = result;
   }
break;
case 56:
//#line 449 "jparser.y"
{ }
break;
case 57:
//#line 451 "jparser.y"
{ yyval.ival = Modifier.NO_MOD; }
break;
case 58:
//#line 455 "jparser.y"
{ yyval.ival = val_peek(0).ival; }
break;
case 59:
//#line 457 "jparser.y"
{
     yyval.ival = (val_peek(1).ival | val_peek(0).ival);
		  if ((val_peek(1).ival & val_peek(0).ival) != 0) {
		     yyerror("repeated modifier");
     }
   }
break;
case 60:
//#line 468 "jparser.y"
{ yyval.ival = Modifier.PUBLIC_MOD; }
break;
case 61:
//#line 470 "jparser.y"
{ yyval.ival = Modifier.PROTECTED_MOD;  }
break;
case 62:
//#line 472 "jparser.y"
{ yyval.ival = Modifier.PRIVATE_MOD;  }
break;
case 63:
//#line 475 "jparser.y"
{ yyval.ival = Modifier.STATIC_MOD;  }
break;
case 64:
//#line 477 "jparser.y"
{ yyval.ival = Modifier.FINAL_MOD;  }
break;
case 65:
//#line 480 "jparser.y"
{ yyval.ival = Modifier.ABSTRACT_MOD;  }
break;
case 66:
//#line 482 "jparser.y"
{ yyval.ival = Modifier.NATIVE_MOD;  }
break;
case 67:
//#line 484 "jparser.y"
{ yyval.ival = Modifier.SYNCHRONIZED_MOD;  }
break;
case 68:
//#line 487 "jparser.y"
{ yyval.ival = Modifier.TRANSIENT_MOD;  }
break;
case 69:
//#line 489 "jparser.y"
{ yyval.ival = Modifier.VOLATILE_MOD;  }
break;
case 70:
//#line 495 "jparser.y"
{ yyval.ival = Modifier.FINAL_MOD;  }
break;
case 71:
//#line 497 "jparser.y"
{ yyval.ival = Modifier.NO_MOD;  }
break;
case 72:
//#line 508 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 73:
//#line 510 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj, (LinkedList) val_peek(2).obj); }
break;
case 74:
//#line 515 "jparser.y"
{ yyval.obj = new DeclaratorNode(val_peek(0).ival, (NameNode) val_peek(1).obj, AbsentTreeNode.instance); }
break;
case 75:
//#line 517 "jparser.y"
{ yyval.obj = new DeclaratorNode(val_peek(2).ival, (NameNode) val_peek(3).obj, (ExprNode) val_peek(0).obj); }
break;
case 78:
//#line 533 "jparser.y"
{
     Modifier.checkMethodModifiers(val_peek(8).ival);
	    yyval.obj = new MethodDeclNode(val_peek(8).ival, (LinkedList) val_peek(4).obj, makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival),
			                        (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj, (TreeNode) val_peek(0).obj); }
break;
case 79:
//#line 539 "jparser.y"
{
     Modifier.checkMethodModifiers(val_peek(8).ival);
	    yyval.obj = new MethodDeclNode(val_peek(8).ival, (LinkedList) val_peek(4).obj, makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival),
                             (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj, (TreeNode) val_peek(0).obj);
   }
break;
case 80:
//#line 548 "jparser.y"
{ yyval.obj = VoidTypeNode.instance; }
break;
case 81:
//#line 556 "jparser.y"
{ }
break;
case 82:
//#line 558 "jparser.y"
{ yyval.obj = new LinkedList();  }
break;
case 83:
//#line 563 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 84:
//#line 565 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 85:
//#line 570 "jparser.y"
{
       yyval.obj = new ParameterNode(val_peek(3).ival, makeArrayType((TypeNode) val_peek(2).obj, val_peek(0).ival),
             (NameNode) val_peek(1).obj);
     }
break;
case 86:
//#line 580 "jparser.y"
{ }
break;
case 87:
//#line 582 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 88:
//#line 587 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 89:
//#line 592 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 90:
//#line 594 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 92:
//#line 603 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 93:
//#line 612 "jparser.y"
{
       Modifier.checkConstructorModifiers(val_peek(9).ival);
	      yyval.obj = new ConstructorDeclNode(val_peek(9).ival, val_peek(8).sval, (LinkedList) val_peek(6).obj, (LinkedList) val_peek(4).obj,
             (TreeNode) val_peek(2).obj, new BlockNode((LinkedList) val_peek(1).obj));
     }
break;
case 94:
//#line 619 "jparser.y"
{
         Modifier.checkConstructorModifiers(val_peek(8).ival);
	      yyval.obj = new ConstructorDeclNode(val_peek(8).ival, val_peek(7).sval, (LinkedList) val_peek(5).obj, (LinkedList) val_peek(3).obj,
					    new SuperConstructorCallNode(new LinkedList()),
					    new BlockNode((LinkedList) val_peek(1).obj));
	    }
break;
case 95:
//#line 633 "jparser.y"
{ yyval.obj = new ThisConstructorCallNode((LinkedList) val_peek(2).obj); }
break;
case 96:
//#line 635 "jparser.y"
{ yyval.obj = new SuperConstructorCallNode((LinkedList) val_peek(2).obj); }
break;
case 97:
//#line 643 "jparser.y"
{ yyval.obj = new StaticInitNode((BlockNode) val_peek(0).obj); }
break;
case 98:
//#line 648 "jparser.y"
{ yyval.obj = new InstanceInitNode((BlockNode) val_peek(0).obj); }
break;
case 99:
//#line 656 "jparser.y"
{ yyval.obj = new InterfaceDeclNode(val_peek(4).ival, (NameNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 100:
//#line 668 "jparser.y"
{ }
break;
case 101:
//#line 670 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 102:
//#line 675 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 103:
//#line 682 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 104:
//#line 687 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 105:
//#line 689 "jparser.y"
{ yyval.obj = appendLists((LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 107:
//#line 697 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 108:
//#line 699 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 109:
//#line 701 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj); }
break;
case 110:
//#line 706 "jparser.y"
{
     Modifier.checkConstantFieldModifiers(val_peek(3).ival);
     LinkedList varDecls = (LinkedList) val_peek(1).obj;
     ListIterator itr = varDecls.listIterator(0);

	    LinkedList result = new LinkedList();

	    while (itr.hasNext()) {
		    DeclaratorNode decl = (DeclaratorNode) itr.next();
		    result = cons(new FieldDeclNode(val_peek(3).ival, makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
						           decl.getName(), decl.getInitExpr()),
				              result);
		  }

	    yyval.obj = result;
	  }
break;
case 111:
//#line 727 "jparser.y"
{ Modifier.checkMethodSignatureModifiers(val_peek(8).ival);
	      yyval.obj = new MethodDeclNode(val_peek(8).ival | Modifier.ABSTRACT_MOD, (LinkedList) val_peek(4).obj,
				       makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival),
				       (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj, AbsentTreeNode.instance); }
break;
case 112:
//#line 733 "jparser.y"
{
        Modifier.checkMethodSignatureModifiers(val_peek(8).ival);
	      yyval.obj = new MethodDeclNode(val_peek(8).ival | Modifier.ABSTRACT_MOD, (LinkedList) val_peek(4).obj,
				       makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival), (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj,
              AbsentTreeNode.instance); }
break;
case 113:
//#line 746 "jparser.y"
{ yyval.obj = new ArrayInitNode((LinkedList) val_peek(1).obj); }
break;
case 114:
//#line 748 "jparser.y"
{ yyval.obj = new ArrayInitNode((LinkedList) val_peek(2).obj); }
break;
case 115:
//#line 750 "jparser.y"
{ yyval.obj = new ArrayInitNode(new LinkedList()); }
break;
case 116:
//#line 756 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 117:
//#line 758 "jparser.y"
{ yyval.obj = append((LinkedList) val_peek(2).obj, val_peek(0).obj); }
break;
case 120:
//#line 773 "jparser.y"
{ yyval.obj = new BlockNode((LinkedList) val_peek(1).obj); }
break;
case 121:
//#line 777 "jparser.y"
{ }
break;
case 122:
//#line 779 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 123:
//#line 784 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 124:
//#line 786 "jparser.y"
{ yyval.obj = appendLists((LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 125:
//#line 791 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 126:
//#line 793 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 127:
//#line 803 "jparser.y"
{
       LinkedList varDecls = (LinkedList) val_peek(1).obj;
       LinkedList result = new LinkedList();

       ListIterator itr = varDecls.listIterator();

	    while (itr.hasNext()) {
		  DeclaratorNode decl = (DeclaratorNode) itr.next();
		  result = cons(new VarDeclNode(Modifier.FINAL_MOD,
                       makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
                       decl.getName(), decl.getInitExpr()), result);
       }
       yyval.obj = result;
     }
break;
case 128:
//#line 818 "jparser.y"
{
       LinkedList varDecls = (LinkedList) val_peek(1).obj;
       LinkedList result = new LinkedList();

       ListIterator itr = varDecls.listIterator();

	    while (itr.hasNext()) {
		  DeclaratorNode decl = (DeclaratorNode) itr.next();
		  result = cons(new VarDeclNode(Modifier.NO_MOD,
                       makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
                       decl.getName(), decl.getInitExpr()), result);
		}
       yyval.obj = result;
     }
break;
case 131:
//#line 840 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 137:
//#line 852 "jparser.y"
{ yyval.obj = new EmptyStmtNode(); }
break;
case 138:
//#line 860 "jparser.y"
{ yyval.obj = new LabeledStmtNode((NameNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 139:
//#line 868 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 140:
//#line 870 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 141:
//#line 872 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 142:
//#line 874 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 143:
//#line 876 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 144:
//#line 878 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 145:
//#line 880 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 146:
//#line 888 "jparser.y"
{ yyval.obj = new IfStmtNode((ExprNode) val_peek(2).obj, (TreeNode) val_peek(0).obj, AbsentTreeNode.instance); }
break;
case 147:
//#line 890 "jparser.y"
{ yyval.obj = new IfStmtNode((ExprNode) val_peek(4).obj, (TreeNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 148:
//#line 892 "jparser.y"
{ yyval.obj = new SwitchNode((ExprNode) val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 149:
//#line 897 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 150:
//#line 901 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 151:
//#line 903 "jparser.y"
{ yyval.obj = cons(new SwitchBranchNode((LinkedList) val_peek(2).obj, (LinkedList) val_peek(1).obj),
               (LinkedList) val_peek(0).obj); }
break;
case 152:
//#line 909 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 153:
//#line 911 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 154:
//#line 916 "jparser.y"
{ yyval.obj = new CaseNode((TreeNode) val_peek(1).obj); }
break;
case 155:
//#line 918 "jparser.y"
{ yyval.obj = new CaseNode(AbsentTreeNode.instance); }
break;
case 156:
//#line 925 "jparser.y"
{ yyval.obj = new LoopNode(new EmptyStmtNode(), (ExprNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 157:
//#line 927 "jparser.y"
{ yyval.obj = new LoopNode((TreeNode) val_peek(5).obj, (ExprNode) val_peek(2).obj, new EmptyStmtNode()); }
break;
case 158:
//#line 929 "jparser.y"
{ yyval.obj = new ForNode((LinkedList) val_peek(5).obj, (ExprNode) val_peek(4).obj,
      (LinkedList) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 159:
//#line 932 "jparser.y"
{ yyval.obj = new ForNode((LinkedList) val_peek(4).obj, new BoolLitNode("true"), (LinkedList) val_peek(2).obj,
      (TreeNode) val_peek(0).obj); }
break;
case 160:
//#line 938 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 161:
//#line 940 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 162:
//#line 944 "jparser.y"
{ }
break;
case 163:
//#line 946 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 164:
//#line 950 "jparser.y"
{ }
break;
case 165:
//#line 952 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 166:
//#line 957 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 167:
//#line 959 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 168:
//#line 967 "jparser.y"
{ yyval.obj = new BreakNode((TreeNode) val_peek(1).obj); }
break;
case 169:
//#line 969 "jparser.y"
{ yyval.obj = new ContinueNode((TreeNode) val_peek(1).obj); }
break;
case 170:
//#line 971 "jparser.y"
{ yyval.obj = new ReturnNode((TreeNode) val_peek(1).obj); }
break;
case 171:
//#line 973 "jparser.y"
{ yyval.obj = new ThrowNode((ExprNode) val_peek(1).obj); }
break;
case 172:
//#line 978 "jparser.y"
{ }
break;
case 173:
//#line 980 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 174:
//#line 988 "jparser.y"
{ yyval.obj = new SynchronizedNode((ExprNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 175:
//#line 990 "jparser.y"
{ yyval.obj = new TryNode((BlockNode) val_peek(1).obj, new LinkedList(), (TreeNode) val_peek(0).obj); }
break;
case 176:
//#line 992 "jparser.y"
{ yyval.obj = new TryNode((BlockNode) val_peek(1).obj, (LinkedList) val_peek(0).obj, AbsentTreeNode.instance); }
break;
case 177:
//#line 994 "jparser.y"
{ yyval.obj = new TryNode((BlockNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, (TreeNode) val_peek(0).obj); }
break;
case 178:
//#line 999 "jparser.y"
{ yyval.obj = cons (val_peek(0).obj); }
break;
case 179:
//#line 1001 "jparser.y"
{ yyval.obj = cons (val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 180:
//#line 1006 "jparser.y"
{ yyval.obj = new CatchNode((ParameterNode) val_peek(2).obj, (BlockNode) val_peek(0).obj); }
break;
case 181:
//#line 1011 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 182:
//#line 1022 "jparser.y"
{ yyval.obj = new ObjectNode((NameNode) val_peek(0).obj); }
break;
case 184:
//#line 1025 "jparser.y"
{ yyval.obj = new TypeClassAccessNode(new TypeNameNode((NameNode) val_peek(2).obj)); }
break;
case 185:
//#line 1027 "jparser.y"
{ yyval.obj = new OuterClassAccessNode(new TypeNameNode((NameNode) val_peek(2).obj)); }
break;
case 189:
//#line 1038 "jparser.y"
{ yyval.obj = new NullPntrNode(); }
break;
case 190:
//#line 1040 "jparser.y"
{ yyval.obj = new ThisNode(); }
break;
case 191:
//#line 1042 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 192:
//#line 1044 "jparser.y"
{ yyval.obj = new ObjectNode((NameNode) val_peek(1).obj); }
break;
case 194:
//#line 1047 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 196:
//#line 1051 "jparser.y"
{ yyval.obj = new TypeClassAccessNode((TypeNode) val_peek(2).obj); }
break;
case 197:
//#line 1053 "jparser.y"
{ yyval.obj = new TypeClassAccessNode((TypeNode) val_peek(2).obj); }
break;
case 198:
//#line 1055 "jparser.y"
{ yyval.obj = new TypeClassAccessNode((TypeNode) val_peek(2).obj); }
break;
case 199:
//#line 1064 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 201:
//#line 1070 "jparser.y"
{ yyval.obj = new NameNode(AbsentTreeNode.instance, val_peek(0).sval); }
break;
case 202:
//#line 1092 "jparser.y"
{ yyval.obj = new NameNode((NameNode) val_peek(2).obj, val_peek(0).sval); }
break;
case 203:
//#line 1099 "jparser.y"
{ yyval.obj = new ArrayAccessNode(new ObjectNode((NameNode) val_peek(3).obj), (ExprNode) val_peek(1).obj); }
break;
case 204:
//#line 1101 "jparser.y"
{ yyval.obj = new ArrayAccessNode((ExprNode) val_peek(3).obj, (ExprNode) val_peek(1).obj); }
break;
case 205:
//#line 1110 "jparser.y"
{ yyval.obj = new ObjectFieldAccessNode((TreeNode) val_peek(2).obj, (NameNode) val_peek(0).obj); }
break;
case 206:
//#line 1112 "jparser.y"
{ yyval.obj = new SuperFieldAccessNode((NameNode) val_peek(0).obj); }
break;
case 207:
//#line 1120 "jparser.y"
{ yyval.obj = new MethodCallNode((NameNode) val_peek(3).obj, (LinkedList) val_peek(1).obj); }
break;
case 208:
//#line 1122 "jparser.y"
{ yyval.obj = new MethodCallNode((TreeNode) val_peek(3).obj, (LinkedList) val_peek(1).obj); }
break;
case 209:
//#line 1125 "jparser.y"
{ yyval.obj = new MethodCallNode(new NameNode((NameNode) val_peek(5).obj, val_peek(3).sval), (LinkedList) val_peek(1).obj); }
break;
case 210:
//#line 1129 "jparser.y"
{  }
break;
case 211:
//#line 1131 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 212:
//#line 1136 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 213:
//#line 1138 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 214:
//#line 1146 "jparser.y"
{ yyval.obj = new AllocateNode((TypeNode) val_peek(3).obj, (LinkedList) val_peek(1).obj); }
break;
case 215:
//#line 1149 "jparser.y"
{ yyval.obj = new AllocateAnonymousClassNode((TypeNode) val_peek(4).obj,
         (LinkedList) val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 216:
//#line 1152 "jparser.y"
{ yyval.obj = new AllocateArrayNode((TypeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, val_peek(0).ival); }
break;
case 217:
//#line 1154 "jparser.y"
{ yyval.obj = new AllocateArrayNode((TypeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, val_peek(0).ival); }
break;
case 218:
//#line 1159 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 219:
//#line 1161 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 220:
//#line 1166 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 221:
//#line 1170 "jparser.y"
{ }
break;
case 222:
//#line 1172 "jparser.y"
{ yyval.ival = 0; }
break;
case 223:
//#line 1177 "jparser.y"
{ yyval.ival = 1; }
break;
case 224:
//#line 1179 "jparser.y"
{ yyval.ival = val_peek(1).ival + 1; }
break;
case 228:
//#line 1193 "jparser.y"
{ yyval.obj = new PostIncrNode((ExprNode) val_peek(1).obj); }
break;
case 229:
//#line 1198 "jparser.y"
{ yyval.obj = new PostDecrNode((ExprNode) val_peek(1).obj); }
break;
case 232:
//#line 1208 "jparser.y"
{ yyval.obj = new UnaryPlusNode((ExprNode) val_peek(0).obj); }
break;
case 233:
//#line 1210 "jparser.y"
{ yyval.obj = new UnaryMinusNode((ExprNode) val_peek(0).obj); }
break;
case 235:
//#line 1216 "jparser.y"
{ yyval.obj = new PreIncrNode((ExprNode) val_peek(0).obj); }
break;
case 236:
//#line 1221 "jparser.y"
{ yyval.obj = new PreDecrNode((ExprNode) val_peek(0).obj); }
break;
case 238:
//#line 1227 "jparser.y"
{ yyval.obj = new ComplementNode((ExprNode) val_peek(0).obj); }
break;
case 239:
//#line 1229 "jparser.y"
{ yyval.obj = new NotNode((ExprNode) val_peek(0).obj); }
break;
case 241:
//#line 1235 "jparser.y"
{ yyval.obj = new CastNode((TypeNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 242:
//#line 1237 "jparser.y"
{ yyval.obj = new CastNode((TypeNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 243:
//#line 1239 "jparser.y"
{ yyval.obj = new CastNode(new TypeNameNode((NameNode) val_peek(2).obj), (ExprNode) val_peek(0).obj); }
break;
case 244:
//#line 1250 "jparser.y"
{ }
break;
case 245:
//#line 1252 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 247:
//#line 1258 "jparser.y"
{ yyval.obj = new MultNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 248:
//#line 1260 "jparser.y"
{ yyval.obj = new DivNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 249:
//#line 1262 "jparser.y"
{ yyval.obj = new RemNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 250:
//#line 1264 "jparser.y"
{ yyval.obj = new PlusNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 251:
//#line 1266 "jparser.y"
{ yyval.obj = new MinusNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 252:
//#line 1268 "jparser.y"
{ yyval.obj = new LeftShiftLogNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 253:
//#line 1270 "jparser.y"
{ yyval.obj = new RightShiftLogNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 254:
//#line 1272 "jparser.y"
{ yyval.obj = new RightShiftArithNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 255:
//#line 1274 "jparser.y"
{ yyval.obj = new LTNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 256:
//#line 1276 "jparser.y"
{ yyval.obj = new GTNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 257:
//#line 1278 "jparser.y"
{ yyval.obj = new LENode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 258:
//#line 1280 "jparser.y"
{ yyval.obj = new GENode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 259:
//#line 1282 "jparser.y"
{ yyval.obj = new InstanceOfNode((ExprNode) val_peek(2).obj, (TypeNode) val_peek(0).obj); }
break;
case 260:
//#line 1284 "jparser.y"
{ yyval.obj = new EQNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 261:
//#line 1286 "jparser.y"
{ yyval.obj = new NENode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 262:
//#line 1288 "jparser.y"
{ yyval.obj = new BitAndNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 263:
//#line 1290 "jparser.y"
{ yyval.obj = new BitOrNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 264:
//#line 1292 "jparser.y"
{ yyval.obj = new BitXorNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 265:
//#line 1294 "jparser.y"
{ yyval.obj = new CandNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 266:
//#line 1296 "jparser.y"
{ yyval.obj = new CorNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 267:
//#line 1298 "jparser.y"
{ yyval.obj = new IfExprNode((ExprNode) val_peek(4).obj, (ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 269:
//#line 1307 "jparser.y"
{ yyval.obj = new AssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 270:
//#line 1309 "jparser.y"
{ yyval.obj = new MultAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 271:
//#line 1311 "jparser.y"
{ yyval.obj = new DivAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 272:
//#line 1313 "jparser.y"
{ yyval.obj = new RemAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 273:
//#line 1315 "jparser.y"
{ yyval.obj = new PlusAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 274:
//#line 1317 "jparser.y"
{ yyval.obj = new MinusAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 275:
//#line 1319 "jparser.y"
{ yyval.obj = new LeftShiftLogAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 276:
//#line 1321 "jparser.y"
{ yyval.obj = new RightShiftLogAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 277:
//#line 1323 "jparser.y"
{ yyval.obj = new RightShiftArithAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 278:
//#line 1325 "jparser.y"
{ yyval.obj = new BitAndAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 279:
//#line 1327 "jparser.y"
{ yyval.obj = new BitXorAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 280:
//#line 1329 "jparser.y"
{ yyval.obj = new BitOrAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
//#line 3025 "parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



}
//################### END OF CLASS yaccpar ######################
