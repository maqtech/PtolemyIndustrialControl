//### This file created by BYACC 1.8(/Java extension  0.92)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//### Please send bug reports to rjamison@lincom-asg.com
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



//#line 118 "jparser.y"
package ptolemy.lang.java;

import java.util.LinkedList;
import java.util.ListIterator;
import java.io.IOException;
import java.io.FileInputStream;

import ptolemy.lang.*;

//#line 20 "parser.java"




//#####################################################################
// class: parser
// does : encapsulates yacc() parser functionality in a Java
//        class for quick code development
//#####################################################################
public class parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[],stateptr;             //state stack
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
void state_push(int state)
{
  if (stateptr>=YYSTACKSIZE)         //overflowed?
    return;
  statestk[++stateptr]=state;
}
int state_pop()
{
  if (stateptr<0)                    //underflowed?
    return -1;
  return statestk[stateptr--];
}
void state_drop(int cnt)
{
int ptr;
  ptr=stateptr-cnt;
  if (ptr<0)
    return;
  stateptr = ptr;
}
int state_peek(int relative)
{
int ptr;
  ptr=stateptr-relative;
  if (ptr<0)
    return -1;
  return statestk[ptr];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
boolean init_stacks()
{
  statestk = new int[YYSTACKSIZE];
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class parsersemantic is defined in parserval.java


String   yytext;//user variable to return contextual strings
parserval yyval; //used to return semantic vals from action routines
parserval yylval;//the 'lval' (result) I got from yylex()
parserval valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new parserval[YYSTACKSIZE];
  yyval=new parserval(0);
  yylval=new parserval(0);
  valptr=-1;
}
void val_push(parserval val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
parserval val_pop()
{
  if (valptr<0)
    return new parserval(-1);
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
parserval val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new parserval(-1);
  return valstk[ptr];
}
//#### end semantic value section ####
public final static short ABSTRACT=257;
public final static short BOOLEAN=258;
public final static short BREAK=259;
public final static short BYTE=260;
public final static short CASE=261;
public final static short CATCH=262;
public final static short CHAR=263;
public final static short CLASS=264;
public final static short CONTINUE=265;
public final static short DEFAULT=266;
public final static short DO=267;
public final static short DOUBLE=268;
public final static short ELSE=269;
public final static short EXTENDS=270;
public final static short FINAL=271;
public final static short FINALLY=272;
public final static short FLOAT=273;
public final static short FOR=274;
public final static short IF=275;
public final static short IMPLEMENTS=276;
public final static short IMPORT=277;
public final static short INSTANCEOF=278;
public final static short INT=279;
public final static short INTERFACE=280;
public final static short LONG=281;
public final static short NATIVE=282;
public final static short NEW=283;
public final static short _NULL=284;
public final static short PACKAGE=285;
public final static short PRIVATE=286;
public final static short PROTECTED=287;
public final static short PUBLIC=288;
public final static short RETURN=289;
public final static short SHORT=290;
public final static short STATIC=291;
public final static short SUPER=292;
public final static short SWITCH=293;
public final static short SYNCHRONIZED=294;
public final static short THIS=295;
public final static short THROW=296;
public final static short THROWS=297;
public final static short TRANSIENT=298;
public final static short TRY=299;
public final static short VOID=300;
public final static short VOLATILE=301;
public final static short WHILE=302;
public final static short CONST=303;
public final static short GOTO=304;
public final static short TRUE=305;
public final static short FALSE=306;
public final static short IDENTIFIER=307;
public final static short INT_LITERAL=308;
public final static short LONG_LITERAL=309;
public final static short FLOAT_LITERAL=310;
public final static short DOUBLE_LITERAL=311;
public final static short CHARACTER_LITERAL=312;
public final static short STRING_LITERAL=313;
public final static short EMPTY_DIM=314;
public final static short CAND=315;
public final static short COR=316;
public final static short EQ=317;
public final static short NE=318;
public final static short LE=319;
public final static short GE=320;
public final static short LSHIFTL=321;
public final static short ASHIFTR=322;
public final static short LSHIFTR=323;
public final static short PLUS_ASG=324;
public final static short MINUS_ASG=325;
public final static short MULT_ASG=326;
public final static short DIV_ASG=327;
public final static short REM_ASG=328;
public final static short LSHIFTL_ASG=329;
public final static short ASHIFTR_ASG=330;
public final static short LSHIFTR_ASG=331;
public final static short AND_ASG=332;
public final static short XOR_ASG=333;
public final static short OR_ASG=334;
public final static short PLUSPLUS=335;
public final static short MINUSMINUS=336;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    4,    4,    4,    4,    4,    4,    4,    4,   32,
   32,   33,   33,   34,   34,   34,   34,   34,   34,   34,
   34,   35,   36,    1,  104,  104,   97,   97,   93,   93,
   93,   80,   80,   76,   76,   77,   78,   79,   67,   67,
   68,   68,   68,   68,   69,   69,   69,   38,   38,   40,
   40,   87,   88,   88,   89,   89,   90,   90,   90,   90,
   91,   70,   70,   71,   71,   72,   72,   72,   72,   72,
   72,   72,   72,   72,   72,  110,  110,  109,  109,   24,
   24,   83,   83,   37,   94,   94,   95,   95,   81,   41,
   41,   42,   39,   39,   53,   53,   85,   85,   55,   55,
   84,   82,   73,   73,   74,   74,   75,   75,   43,   43,
   44,   96,   99,   99,   98,   98,   92,   86,   86,   25,
   25,   25,   30,   30,   26,   26,   45,   57,   57,   58,
   58,   59,   59,   61,   46,   46,   46,   46,   46,   46,
   46,   46,   47,   48,   56,   56,   56,   56,   56,   56,
   56,   49,   49,   49,   60,   62,   62,  101,  101,  100,
  100,   50,   50,   50,   50,   63,   63,   66,   66,   64,
   64,   65,   65,   51,   51,   51,   51,  103,  103,   52,
   52,   52,   52,  108,  108,  107,   54,    5,    5,    6,
    6,    7,    7,    7,    7,    7,    7,    7,    7,  105,
  105,  102,  106,    8,    8,   31,   31,    9,    9,    9,
   27,   27,   28,   28,   10,   10,   10,   29,   29,   23,
    3,    3,    2,    2,   11,   11,   11,   12,   13,   14,
   14,   14,   14,   14,   15,   16,   17,   17,   17,   17,
   18,   18,   18,   19,   19,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   22,  111,
};
final static short yylen[] = {                            2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    3,    3,    1,    1,    2,    1,    2,
    2,    1,    1,    1,    1,    3,    5,    6,    1,    1,
    1,    2,    1,    2,    1,    1,    1,    2,    1,    2,
    1,    3,    1,    1,    1,    2,    1,    1,    1,    1,
    4,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    2,    4,    1,
    1,    9,    9,    1,    1,    1,    1,    3,    3,    1,
    1,    2,    1,    3,    1,    1,   10,    9,    5,    5,
    2,    5,    1,    1,    1,    2,    1,    1,    1,    1,
    2,    3,    1,    2,    1,    1,    4,    9,    9,    3,
    4,    2,    1,    3,    1,    1,    3,    1,    1,    1,
    2,    1,    1,    3,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    3,    1,    1,    1,    1,    1,    1,
    1,    5,    7,    5,    3,    1,    3,    1,    2,    3,
    2,    5,    7,    8,    7,    2,    1,    1,    1,    1,
    1,    1,    3,    3,    3,    3,    3,    1,    1,    5,
    3,    3,    4,    1,    2,    5,    2,    1,    1,    1,
    1,    1,    1,    1,    3,    3,    1,    1,    1,    1,
    1,    1,    3,    4,    4,    3,    3,    4,    4,    6,
    1,    1,    1,    3,    5,    4,    4,    1,    2,    3,
    1,    1,    1,    2,    1,    1,    1,    2,    2,    1,
    1,    2,    2,    1,    2,    2,    1,    2,    2,    1,
    4,    4,    4,    1,    1,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    5,    1,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    1,    0,
};
final static short yydefred[] = {                         0,
    0,    0,    1,    0,   26,  202,  200,    0,  201,    0,
    0,   34,   35,    0,   27,    0,   25,    0,   28,  108,
   43,  107,    0,    0,    0,    0,    0,  105,   32,    0,
   33,   24,    0,  203,    0,   36,   31,    0,   45,   46,
   47,   44,    0,   42,  106,   30,    0,    0,    0,   37,
    0,    0,   49,    0,    0,  109,  110,   48,    0,    0,
    0,   51,    0,  111,    0,  102,   50,    0,   38,    0,
   71,   70,   72,   68,   67,   66,   69,   73,   74,   75,
    0,    0,   64,  116,  115,    0,    0,    0,    0,    0,
   58,   60,   59,    0,   53,    0,   57,    0,   94,   14,
   16,   15,   21,   19,   18,   20,   17,   84,    0,   11,
   10,   12,   13,    0,   65,  114,  112,    0,  101,    0,
    0,    0,   52,   56,   63,   23,    0,   76,    0,    0,
    0,    0,    0,    0,    0,    0,  193,    0,    0,    0,
    0,  194,    0,    0,    0,    6,    7,    2,    3,    4,
    5,    8,    9,    0,  143,    0,    0,    0,    0,    0,
    0,  192,    0,  189,    0,  197,    0,    0,    0,    0,
    0,    0,    0,    0,  234,  240,  145,    0,    0,  142,
  133,  135,  136,  138,  139,  140,  141,    0,    0,    0,
  130,  132,    0,    0,  129,    0,    0,    0,    0,    0,
  223,    0,    0,  222,    0,  117,    0,  178,    0,  179,
    0,    0,    0,    0,    0,    0,    0,  199,  190,  226,
  227,    0,  230,  231,    0,    0,  268,    0,  245,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  239,  238,  232,  233,  235,  236,    0,    0,  228,  229,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  137,  127,  131,    0,    0,
    0,    0,    0,    0,    0,   85,   86,    0,   61,    0,
    0,  224,    0,   77,    0,  174,  175,    0,    0,  167,
    0,    0,  170,  171,    0,    0,    0,    0,    0,    0,
  176,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  207,    0,    0,  177,    0,    0,  181,    0,
    0,    0,  195,    0,    0,    0,  206,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  211,  212,  134,    0,  144,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   79,   81,    0,
    0,    0,    0,    0,  166,    0,    0,  219,  217,    0,
  216,    0,    0,    0,    0,    0,    0,  247,  248,    0,
    0,    0,  249,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  187,  185,  183,    0,  242,
  241,  243,  205,    0,  209,  208,  204,    0,   89,   88,
    0,    0,   90,   91,    0,    0,    0,  122,    0,  126,
  123,    0,    0,    0,  173,  168,    0,  169,    0,    0,
  220,  215,    0,    0,  154,  180,    0,  162,  214,    0,
   92,    0,    0,    0,    0,  120,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  156,    0,
  210,    0,    0,    0,    0,    0,    0,  118,  121,  124,
  119,  163,  165,    0,  153,    0,    0,  161,  155,  159,
    0,  186,    0,    0,    0,   98,   96,   95,   82,   83,
  164,  160,  157,    0,    0,   97,    0,    0,  100,   99,
};
final static short yydgoto[] = {                          2,
    3,  202,  203,  162,  163,  164,  165,  166,  218,  219,
  169,  220,  221,  222,  223,  224,  175,  176,  225,  351,
  227,  487,  297,  368,  430,  431,  352,  353,  298,  432,
  178,  179,  110,  111,  112,  113,  114,   52,   64,   61,
  422,  423,   55,   56,  180,  181,  182,  183,  184,  185,
  186,  187,  499,  329,  474,  188,  189,  190,  191,  445,
  192,  466,  291,  292,  436,  437,   24,   25,   42,   81,
   82,   83,   26,   27,   28,   11,   12,   13,   29,   30,
  274,   31,   91,   92,   93,   84,   69,   94,   95,   96,
   97,   85,   32,  275,  276,   66,   14,   86,   87,  467,
  468,  228,  209,    4,  213,    9,  330,  331,  128,  129,
  204,
};
final static short yysindex[] = {                      -217,
 -214,    0,    0, -146,    0,    0,    0,  144,    0, -214,
 -146,    0,    0,   51,    0, -164,    0,  168,    0,    0,
    0,    0,   51,  -91, -210,  -96, -176,    0,    0,   51,
    0,    0,    0,    0,  -40,    0,    0, -214,    0,    0,
    0,    0, -214,    0,    0,    0,  139,  -66,  -52,    0,
 -214,  -55,    0, -214,  106,    0,    0,    0,  189, -214,
  117,    0,  206,    0, 3891,    0,    0, 3947,    0, -214,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4171, 3891,    0,    0,    0, 3891,  126,    0,  140, 4172,
    0,    0,    0,  128,    0, 3947,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -244,    0,
    0,    0,    0, -214,    0,    0,    0, 1155,    0,  229,
 -244, -214,    0,    0,    0,    0,  -32,    0,   12,  231,
 -214, -214, 1436,  234,  235, 2077,    0, 1762,  240,  247,
  253,    0, 1762,  140,  255,    0,    0,    0,    0,    0,
    0,    0,    0, 1520,    0, 1762, 1762, 1762, 1762, 1762,
 1762,    0,  256,    0,  215,    0,    0,    0,  -90,    0,
    0, 1752,    0,    0,    0,    0,    0,  259, -244,    0,
    0,    0,    0,    0,    0,    0,    0,  251,  191, 1155,
    0,    0,   25,   13,    0, 2077,  -26,  103,  278, 2077,
    0,    5,  262,    0, -214,    0, 2077,    0,  270,    0,
  273,   34,   13, 1520, 1762,  260,   11,    0,    0,    0,
    0, 1752,    0,    0,  283, 3529,    0,  308,    0, -214,
 1762, 1762, 2987,  -30, 1762, 3045,   36,  312,  314,   38,
    0,    0,    0,    0,    0,    0, -214, 1762,    0,    0,
 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
 1762, 1762, 1762,   45,  132,    0,    0,    0, 1762, 1436,
 1762,   65, -244,  325,  332,    0,    0, 2077,    0, 2077,
  335,    0, 1651,    0,  338,    0,    0,  340,  342,    0,
 1717,  334,    0,    0, 3100, 1762,  260,   45, 1762,   45,
    0, 2077, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
 1762, 1762,    0, 3114, 3160,    0,  344,  140,    0,  120,
  124, 3172,    0, 3859, 1762, 3859,    0, 3225, 3529, 3529,
 3529, 3529, 3529, 3529, 3529, 3529, 3529, 3529, 3529, 3529,
 3283,  354,    0,    0,    0,  360,    0, 3346,  362,   45,
 2077,  107,  364,  365,   45, 1567, 3529,    0,    0,   45,
 1762, 1762, 1762, 3404,    0, 1436, 3459,    0,    0,  366,
    0,    0,   -9,   -9, 3471,  194,  194,    0,    0,  323,
 2317,  492,    0, 3612, 3583,  401,  401,   -9,   -9,  108,
  108,  108,  280, 1436, 2077,    0,    0,    0, 1436,    0,
    0,    0,    0, 1762,    0,    0,    0, 1762,    0,    0,
 -214,  288,    0,    0,   45,   45,  107,    0, 3529,    0,
    0,   -7,  107, 3517,    0,    0,  373,    0, 1762,  156,
    0,    0, 1762,  -28,    0,    0,  386,    0,    0,  388,
    0, 1239,  107,  107,  371,    0, 1614,  372,  374, 1436,
  394, 1436, 3529, 1762,  363,  316,  -28, 1155,    0,  140,
    0,   74,  410, 1155,  333,  -29,  -29,    0,    0,    0,
    0,    0,    0, 1436,    0, 3529,  402,    0,    0,    0,
 1047,    0, 1762, 1762,  339,    0,    0,    0,    0,    0,
    0,    0,    0,  416,  418,    0,  403,  406,    0,    0,
};
final static short yyrindex[] = {                        21,
    0,    0,    0,   64,    0,    0,    0,    0,    0,    0,
   64,    0,    0,    4,    0,    0,    0,    0,    0,    0,
    0,    0,    4,    0,  203,    0, -140,    0,    0,    4,
    0,    0,    9,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -106,  346,    0,
    0,  346,    0,    0,    0,    0,    0,    0, 2802,    0,
    0,    0,  -14,    0, 3949,    0,    0, 3949,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4196,    0,    0,    0, 3949,    0, 4025, 4126,    0,
    0,    0,    0,    0,    0, 4080,    0, 4081,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  345,    0,   -3,
    0,    0,    0,    0,    0,    0,  152,    0,    0,    0,
  413,  413,    0,    0,    0,    0,    0,  413,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2556,    0, 2438,    0,  642,  784, 2742, 1343,
 1641,    0, 1665, 1944,    0,    0,    0, 2191,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  351,
    0,    0, 1707, 1875,    0,  438,  152,    0,    0,  438,
    0, 2132,  151,    0,    0,    0,  438,    0,    0,    0,
    0,    0, 2624,  413,    0,    0,    0,    0,    0,    0,
    0, 2928,    0,    0,    0,  421,    0, 1823,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  169,  171, 2683,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  438,  152,    0,    0,    0,    0,  438,    0,
    0,    0,    0,  441,    0,    0,    0,  438,    0,  438,
    0,    0,    0,    0,    0,    0,    0,    0,   62,    0,
    0,    0,    0,    0,    0,    0, 2250, 2497,  438, 2497,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  759,
  873,    0,    0,    0,    0, 2379,    0,    0,   67,  130,
  299,  532,  615,  654,  724, 1146, 1208, 1236, 1349, 1353,
  445,    0,    0,    0,    0,    0,    0,    0, 2073,  165,
    0,  346,    0,    0,  -48,    0,  158,    0,    0,  -48,
    0,    0,  438,    0,    0,    0,    0,    0,    0,    0,
    0, 2870, 3935, 3946,    0, 3635, 3703,    0,    0,  -19,
  100, 1347,    0,  443,  123, 3645, 4051, 3992, 4004, 3760,
 3818, 3878,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  438,    0,    0,
    0,    0,    0,    0,  -41,  -41,  413,    0,   10,    0,
    0,    0,  413,    0,    0,    0,    0,    0,  438,  952,
    0,    0,    0,  345,    0,    0,    0,    0,    0,    0,
    0,  345,   -1,   -1,    0,    0,    0,    0,    0,    0,
    0,    0, 1523,    0,    0,    0, 1330,    0,    0,    0,
    0,    0, 1998,  345,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  430,    0,    0,    0,    0,
  345,    0,  438,  438,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,  337,    0,    0,    0,    0,    0,  -42,  147,
    0,  208,  257,  101,  276,  380, -182,    0,    0,  643,
  399,    0,    0,    0,  210,   32,  -94,   77, -197,    0,
    0,  -58, -125,  -20,  -44,    0,  414,    0,  -57,    0,
 -381,    0,    0,    0,  -89,  -71,    0,    0,    0,    0,
    0,    0,   19,  172,    0,  -27, -385,   40, -184,    0,
  286,   20,    0,    0, -187,   73,    0,    0,    0,   -8,
    0,  432,    0,    0,  489,    0,    0,    0,    0,    0,
  113,    0,    0,    0,    0,    0,    0,    0,  426,    0,
    0,    0,  177, -165,  163,    0,  514,    0,  440,    0,
   66,   47,  409,    0,   76,    0,    0,  212,  343,  -80,
    1,
};
final static int YYTABLESIZE=4503;
final static short yytable[] = {                        119,
    5,   47,   67,  282,   15,  268,   58,  200,   29,   63,
  282,   15,   99,  278,   33,   63,  282,  282,  262,  300,
  282,  262,  109,   33,  262,   63,  293,  313,  238,  497,
   33,  121,  308,  306,  281,  307,  457,  309,  262,  262,
  198,  285,  202,  262,   93,  455,   39,    7,   53,   57,
  299,  458,   62,  125,  234,  205,    7,  282,  272,   90,
   40,  212,    6,  282,  269,   88,  475,    1,   98,  126,
  206,  476,  477,  262,  262,  167,    8,   41,  336,  282,
   20,  282,  270,  272,   48,   18,   88,   90,  495,   49,
  167,  217,    6,  118,   44,  237,  125,    7,  265,  378,
    7,  296,  172,  271,  262,  262,    7,  269,   93,   23,
  269,   22,  363,  493,  364,  216,    7,  456,  195,  230,
  172,  282,  282,   41,  269,  269,   59,    7,  271,   59,
   10,  210,  210,  239,  125,   59,    7,  273,  229,  103,
  263,  273,   34,  263,  313,   59,  205,  167,  273,  308,
  306,  410,  307,  412,  309,  127,   59,  263,  263,  269,
  130,  279,  263,  266,  193,   59,  266,  197,  199,  282,
  273,  167,   38,  273,  356,  205,  382,  208,  208,  193,
  266,  266,    7,   43,  435,  266,  289,  273,  273,   16,
  355,  269,  263,  194,   78,  282,  277,   50,  357,   37,
  277,   80,   17,   51,  380,  282,   46,  277,  282,   78,
  282,   59,  282,   35,  294,  266,   80,   54,  172,  273,
   60,  273,  273,  263,  263,  264,   36,  167,   65,  240,
  313,  327,  464,  172,   16,  308,  193,  465,  406,   68,
  309,  328,    7,  237,  249,  250,    7,  266,  282,   70,
  117,  264,  123,    7,  273,  282,  241,  242,  243,  244,
  245,  246,  118,  354,  168,  194,   34,  282,  196,  354,
  207,   59,   40,  214,  215,   59,  323,  282,  277,  168,
  277,  201,   59,  282,  282,  230,  231,  201,  104,  194,
  172,  282,  232,  337,  235,  262,  262,  282,  263,  354,
  282,  247,  273,  202,  440,  248,  268,   20,  282,  266,
  202,  320,  321,  322,  172,  267,  193,  280,  282,  360,
  282,   21,  283,  450,    7,  170,    7,  282,  286,  167,
  167,  287,  446,  167,  282,  288,  168,  448,   22,  274,
  170,  301,  274,  282,  289,  289,  273,  269,    7,  126,
  296,  282,  334,   59,  335,   59,  274,  274,  201,  313,
  168,  167,  424,  451,  308,  306,  167,  307,  361,  309,
  172,  359,  362,  438,  171,  365,   63,   59,  370,  371,
  492,  327,  304,  405,  303,  372,  498,  498,  483,  171,
  485,  274,  375,  173,  415,  328,  167,  170,  504,  505,
  416,  418,  444,  421,  425,  426,  442,    7,  173,  167,
  452,  289,  501,  460,  263,  263,  168,  167,  354,  167,
  488,  170,  193,  274,  462,  167,  470,  424,  471,  478,
  481,  167,  482,  424,  484,  411,   59,  313,  266,  438,
  489,  167,  308,  306,  469,  307,  171,  309,  167,  494,
  193,    7,  195,  424,  424,  193,  507,  496,  508,  502,
  304,  509,  303,  506,  510,  173,   39,    7,  282,  282,
  171,  282,  172,  172,  195,  128,  172,  170,  282,  244,
   59,   87,   11,  265,   10,  213,  265,  281,  480,  173,
  449,  469,  369,  354,  354,  500,   59,  174,  193,  290,
  265,  265,  408,  122,  172,  265,  193,  491,  193,  172,
  503,  461,  174,  115,  193,   45,  177,  447,  168,  168,
  193,  124,  168,  420,   19,  116,  171,  194,  313,  310,
  193,  177,  490,  308,  306,  265,  307,  193,  309,  172,
  211,  407,    0,  194,    0,  173,    0,  284,    0,  194,
  168,  304,  172,  303,    0,  168,    0,    0,    0,    0,
  172,    0,  172,    0,    0,    0,  194,  265,  172,  174,
    0,    0,  270,    0,  172,  270,    0,    0,    0,  170,
  170,    0,    0,  170,  172,  168,    0,    0,  177,  270,
  270,  172,    0,  174,    0,    0,    0,    0,  168,    0,
  302,    0,    0,    0,    0,    0,  168,    0,  168,    0,
    0,  170,  177,    0,  168,    0,  170,    0,    0,    0,
  168,    0,    0,    0,  270,    0,    0,    0,  171,  171,
  168,    0,  171,    0,  379,    0,  381,  168,    0,  316,
  317,  318,  319,  320,  321,  322,  170,  173,  173,  174,
    0,  173,    0,    0,    0,  271,  270,    0,  271,  170,
  171,    0,    0,    0,    0,  171,    0,  170,  177,  170,
    0,    0,  271,  271,    0,  170,    0,    0,  302,  173,
    0,  170,  150,    0,  173,  150,    0,  199,    0,    0,
    0,  170,    0,    0,  272,  171,  419,  272,  170,    0,
  150,  427,  199,    0,    0,    0,  433,  271,  171,    0,
    0,  272,  272,    0,  173,    0,  171,    0,  171,  318,
  319,  320,  321,  322,  171,    0,    0,  173,    0,    0,
  171,    0,  199,    0,    0,  173,    0,  173,    0,  271,
  171,    0,    0,  173,    0,    0,  272,  171,    0,  173,
    0,  174,  174,    0,    0,  174,    0,  265,  265,  173,
    0,  453,  454,    0,  275,    0,  173,  275,    0,  302,
  177,  177,    0,    0,  177,    0,    0,    0,  272,    0,
  226,  275,  275,  174,    0,  233,    0,    0,  174,    0,
    0,  184,    0,    0,    0,    0,  236,    0,  184,    0,
    0,  184,  177,  184,    0,    0,    0,  177,  316,  317,
  318,  319,  320,  321,  322,    0,  275,  184,  174,    0,
    0,    0,    0,    0,  151,    0,    0,  151,    0,  190,
    0,  174,    0,    0,    0,    0,    0,  177,    0,  174,
    0,  174,  151,    0,  190,    0,    0,  174,  275,    0,
  177,    0,    0,  174,    0,    0,    0,  295,  177,    0,
  177,    0,    0,  174,    0,    0,  177,    0,    0,    0,
  174,    0,  177,  324,  325,    0,    0,  332,    0,    0,
    0,  184,  177,  184,  184,    0,    0,    0,    0,  177,
  338,    0,    0,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  182,    0,    0,    0,    0,
    0,    0,  182,  358,    0,  182,    0,  182,    0,    0,
    0,    0,    0,    0,    0,  367,    0,    0,    0,    0,
    0,  182,    0,  374,    0,    0,    0,    0,  377,    0,
    0,    0,    0,    0,    0,  383,  384,  385,  386,  387,
  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  199,  199,  199,  199,  199,
  199,  199,  199,  199,  199,  199,  199,  199,    0,    0,
    0,    0,    0,    0,  152,    0,    0,    0,    0,    0,
    0,  152,    0,    0,  152,  182,  152,  182,  182,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  429,    0,
  152,    0,    0,  434,    0,    0,  184,  184,  184,  184,
    0,  184,    0,  184,  184,  184,  184,  184,    0,    0,
  184,  184,  184,  184,    0,    0,    0,  184,    0,  184,
    0,  184,  184,    0,    0,    0,    0,  184,  184,    0,
  184,  184,  184,  184,  184,    0,    0,  184,    0,    0,
  184,    0,    0,  184,  184,  184,  184,  184,  184,  184,
  184,  184,    0,    0,  152,    0,  152,  152,    0,  156,
    0,    0,    0,    0,    0,  463,  154,    0,    0,  158,
    0,  159,    0,  184,  184,    0,    0,    0,    0,  429,
    0,    0,    0,    0,    0,  155,  486,  190,  190,  190,
  190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  182,  182,  182,  182,    0,  182,    0,  182,  182,  182,
  182,  182,    0,    0,    0,  182,  182,  182,    0,    0,
    0,  182,    0,  182,    0,  182,  182,    0,    0,    0,
    0,  182,  182,    0,  182,  182,  182,  182,  182,  118,
    0,  182,  157,    0,  182,    0,    0,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  277,  156,    0,  277,
    0,    0,    0,    0,  154,    0,    0,  158,    0,  159,
    0,    0,    0,  277,  277,    0,    0,  182,  182,  152,
  152,  152,  152,  155,  152,    0,  152,  152,  152,  152,
    0,    0,    0,    0,  152,  152,  152,    0,    0,    0,
  152,    0,  152,    0,  152,  152,    0,    0,  277,    0,
  152,  152,    0,  152,  152,  152,  152,  152,  276,    0,
  152,  276,    0,  152,    0,    0,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  276,  276,    0,    0,    0,
  277,  156,    0,    0,    0,    0,  278,  118,  154,  278,
  157,  158,    0,  159,    0,    0,  152,  152,    0,    0,
    0,    0,    0,  278,  278,    0,    0,  155,    0,    0,
  276,    0,    0,    0,  100,  131,  101,  464,    0,  102,
    0,  132,  465,  133,  103,    0,    0,    0,    0,  104,
  134,  135,    0,    0,    0,  105,    0,  106,  278,  136,
  137,    0,  276,    0,    0,  138,  107,    0,  139,  140,
  141,  142,  143,    0,    0,  144,    0,    0,  145,    0,
    0,  146,  147,    6,  148,  149,  150,  151,  152,  153,
  278,  118,  158,    0,  157,    0,    0,    0,    0,  158,
    0,    0,  158,    0,  158,    0,    0,    0,    0,    0,
    0,  160,  161,  148,    0,    0,  148,  264,  158,  279,
  264,    0,  279,  280,    0,    0,  280,    0,    0,    0,
    0,  148,    0,  226,  264,  264,  279,  279,    0,  264,
  280,  280,  100,  131,  101,    0,    0,  102,    0,  132,
    0,  133,  103,    0,    0,    0,    0,  104,  134,  135,
    0,    0,    0,  105,    0,  106,    0,  136,  137,  264,
  264,  279,    0,  138,  107,  280,  139,  140,  141,  142,
  143,    0,  158,  144,    0,  158,  145,    0,    0,  146,
  147,    6,  148,  149,  150,  151,  152,  153,  156,    0,
  264,  264,    0,  279,    0,  154,    0,  280,  158,    0,
  159,    0,    0,    0,    0,    0,    0,    0,    0,  160,
  161,    0,    0,    0,  155,    0,  100,  131,  101,    0,
    0,  102,    0,  132,    0,  133,  103,    0,    0,    0,
    0,  104,  134,  135,    0,    0,    0,  105,    0,  106,
    0,  136,  137,    0,    0,    0,    0,  138,  107,    0,
  472,  140,  141,  473,  143,    0,    0,  144,    0,    0,
  145,    0,    0,  146,  147,    6,  148,  149,  150,  151,
  152,  153,  156,    0,    0,    0,    0,    0,  118,  154,
    0,  157,  158,  267,  159,    0,  267,    0,    0,    0,
    0,    0,    0,  160,  161,    0,    0,    0,    0,    0,
  267,  267,    0,    0,    0,    0,    0,  158,  158,  158,
    0,    0,  158,    0,  158,    0,  158,  158,    0,  156,
    0,    0,  158,  158,  158,    0,  154,    0,  158,  158,
  158,  159,  158,  158,    0,  267,    0,    0,  158,  158,
    0,  158,  158,  158,  158,  158,    0,    0,  158,    0,
    0,  158,    0,    0,  158,  158,  158,  158,  158,  158,
  158,  158,  158,    0,    0,  157,  156,  267,    0,    0,
    0,    0,    0,  154,    0,    0,  158,    0,  159,    0,
    0,  264,  264,    0,  158,  158,  226,  226,  226,  226,
  226,  226,  226,  226,  226,  226,  226,  226,  226,    0,
    0,  149,    0,  156,  149,    0,    0,    0,    0,  366,
  154,  428,  157,  158,  131,  159,    0,    0,    0,  149,
  132,  227,  133,    0,    0,  146,    0,    0,  146,  134,
  135,    0,    0,    0,    0,    0,    0,    0,  136,  137,
    0,    0,    0,  146,  138,  230,    0,  139,  140,  141,
  142,  143,    0,    0,  144,    0,  366,  145,  479,  157,
  146,  147,    6,  148,  149,  150,  151,  152,  153,  156,
    0,    0,  200,    0,    0,    0,  154,    0,    0,  158,
    0,  159,    0,    0,    0,    0,    0,  200,    0,    0,
  160,  161,    0,  366,    0,  373,  157,  100,    0,  101,
    0,    0,  102,    0,    0,    0,    0,  103,    0,    0,
    0,    0,  104,    0,  156,    0,    0,  200,  105,    0,
  106,  154,  136,  137,  158,    0,  159,    0,    0,  107,
    0,  139,  251,    0,  142,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  146,  147,    6,  148,  149,  150,
  151,  152,  153,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  157,    0,    0,    0,    0,    0,    0,  136,
  137,    0,    0,    0,  160,  161,    0,    0,  139,  200,
  200,  142,    0,  200,  200,  200,  200,  200,  200,  200,
    0,  146,  147,    6,  148,  149,  150,  151,  152,  153,
  200,  200,  200,  200,  200,  200,    0,  157,    0,    0,
    0,    0,    0,    0,    0,    0,  136,  137,    0,    0,
    0,  160,  161,    0,    0,  139,    0,    0,  142,    0,
    0,    0,    0,  200,    0,  200,  200,    0,  146,  147,
    6,  148,  149,  150,  151,  152,  153,    0,    0,    0,
    0,    0,    0,  136,  137,  188,    0,    0,    0,    0,
    0,    0,  139,    0,    0,  142,  200,  200,  160,  161,
    0,    0,    0,    0,    0,  146,  147,    6,  148,  149,
  150,  151,  152,  153,  227,  227,  227,  227,  227,  227,
  227,  227,  227,  227,  227,  227,  227,    0,    0,    0,
    0,    0,    0,    0,  147,  160,  161,  147,  230,  230,
  230,  230,  230,  230,  230,  230,  230,  230,  230,  136,
  137,    0,  147,    0,  231,    0,    0,    0,  139,    0,
    0,  142,    0,  200,    0,    0,    0,    0,    0,    0,
  200,  146,  147,    6,  148,  149,  150,  151,  152,  153,
  200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
  200,  200,  200,  194,  136,  137,    0,    0,    0,    0,
    0,  160,  161,  139,    0,    0,  142,    0,  194,    0,
    0,    0,    0,    0,    0,    0,  146,  147,    6,  148,
  149,  150,  151,  152,  153,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,    0,    0,  194,    0,
    0,    0,    0,    0,    0,    0,  160,  161,    0,    0,
  200,    0,    0,    0,    0,    0,    0,    0,    0,  203,
  203,    0,    0,  203,  203,  203,  203,  203,  203,  203,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  200,
  203,  203,  203,  203,  203,  203,  200,  200,  200,  200,
  200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
  200,  200,  200,  200,  200,  200,  200,  200,  200,    0,
    0,    0,    0,  203,    0,  203,  203,    0,  221,  221,
    0,    0,  221,  221,  221,  221,  221,  221,  221,    0,
    0,   22,    0,    0,    0,    0,    0,    0,   22,  221,
  221,  221,  221,  221,  221,    0,  203,  203,  188,  188,
  188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
  188,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  221,  221,    0,  198,  198,    0,
    0,  198,  198,  198,  198,  198,  198,  198,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  198,  198,
  198,  198,  198,  198,  221,  221,  221,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  231,  231,  231,
  231,  231,  231,  231,  231,  231,  231,  231,    0,    0,
    0,  198,    0,  198,  198,    0,  218,  218,    0,    0,
  218,  218,  218,  218,  218,  218,  218,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  218,  218,  218,
  218,  218,  218,    0,  198,  198,    0,    0,    0,    0,
    0,  194,  194,  194,  194,  194,  194,  194,  194,  194,
  194,  194,  194,  194,  100,    0,  101,    0,    0,  102,
    0,    0,  218,  218,  103,    0,    0,    0,    0,  104,
  203,    0,    0,  313,  310,  105,    0,  106,  308,  306,
    0,  307,    0,  309,    0,    0,  107,    0,    0,    0,
    0,    0,    0,  218,  218,    0,  304,    0,  303,  203,
    0,    0,    0,    6,    0,    0,  203,  203,  203,  203,
  203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
  203,  203,  203,  203,  203,  203,  203,  203,  203,  221,
  312,    0,    0,    0,    0,  196,  196,    0,    0,  196,
  196,  196,  196,  196,  196,  196,    0,    0,  221,    0,
    0,    0,    0,    0,    0,    0,  196,  196,  196,  196,
  196,  196,    0,    0,    0,    0,  221,  221,  221,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  198,  196,
    0,  196,  196,    0,  191,  191,    0,    0,  191,  191,
  191,  191,  191,  191,  191,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  191,  191,  191,  191,  191,
  191,    0,  196,  196,    0,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  218,    0,    0,
  191,  191,    0,  282,  282,    0,    0,  282,  282,  282,
  282,  282,  282,  282,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  282,  282,  282,  282,  282,  282,
    0,  191,  191,  218,  218,  218,  218,  218,  218,  218,
  218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
  218,  218,  218,  218,  218,  218,    0,    0,    0,  282,
  282,    0,  225,  225,  302,    0,  225,  225,  225,  225,
  225,    0,  225,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  225,  225,  225,  225,  225,  225,    0,
  282,  282,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  316,  317,  318,  319,  320,  321,  322,
    0,    0,    0,    0,    0,    0,    0,    0,  225,  225,
    0,    0,    0,    0,    0,    0,  196,    0,    0,    0,
  188,  188,    0,    0,  188,  188,  188,  188,  188,    0,
  188,    0,    0,    0,    0,    0,    0,    0,    0,  225,
  225,  188,  188,  188,  188,  188,  188,    0,    0,    0,
    0,    0,    0,  196,  196,  196,  196,  196,  196,  196,
  196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
  196,  196,  196,  196,  196,  191,  188,  188,    0,  188,
  188,    0,    0,    0,  188,  188,    0,  188,    0,  188,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  188,  188,  188,  188,    0,  188,  188,    0,
    0,    0,  191,  191,  191,  191,  191,  191,  191,  191,
  191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
  191,  191,  191,  191,  282,    0,  188,    0,  237,  237,
    0,    0,  237,  237,  237,  237,  237,    0,  237,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  237,
  237,  237,  237,  237,  237,    0,  188,    0,    0,    0,
    0,  282,  282,  282,  282,  282,  282,  282,  282,  282,
  282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
  282,  282,  282,  225,  237,  237,    0,    0,   22,   22,
    0,   22,   22,   22,   22,   22,   22,    0,   22,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   22,
   22,   22,    0,   22,   22,  237,  237,    0,    0,    0,
  225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
  225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
  225,  225,   22,    0,   22,   22,    0,    0,    0,    0,
    0,  188,    0,    0,    0,    0,  259,  259,    0,    0,
  259,  259,  259,  259,  259,    0,  259,    0,    0,    0,
    0,    0,    0,    0,   22,   22,   22,  259,  259,  259,
    0,  259,  259,    0,    0,    0,    0,    0,  188,  188,
  188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
  188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
  188,    0,  259,  259,  246,  246,    0,    0,  246,  246,
  246,  246,  246,    0,  246,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  246,  246,  246,    0,  246,
  246,    0,    0,  259,  259,    0,   22,  188,  188,  188,
  188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
  188,  188,  188,  188,  188,  188,  188,  188,  188,  237,
  246,  246,    0,  313,  310,    0,    0,    0,  308,  306,
    0,  307,    0,  309,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  326,  304,    0,  303,  305,
    0,  246,  246,    0,    0,    0,  237,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,  237,  237,  237,  237,  237,    0,   22,    0,   22,
  312,  313,  310,    0,    0,  333,  308,  306,    0,  307,
    0,  309,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  304,    0,  303,  305,   22,    0,
  311,    0,    0,    0,    0,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  313,  310,  312,    0,
  376,  308,  306,    0,  307,    0,  309,  259,    0,    0,
  313,  310,    0,    0,  403,  308,  306,    0,  307,  304,
  309,  303,  305,    0,    0,    0,    0,    0,  311,    0,
    0,    0,    0,  304,    0,  303,  305,    0,    0,    0,
    0,    0,    0,   11,  259,  259,  259,  259,  259,  259,
  259,  259,  259,  312,    0,    0,  313,  310,    0,    0,
  404,  308,  306,    0,  307,  246,  309,  312,  313,  310,
    0,    0,  409,  308,  306,    0,  307,    0,  309,  304,
    0,  303,  305,  311,    0,    0,    0,    0,    0,    0,
    0,  304,    0,  303,  305,    0,    0,  311,    0,    0,
    0,    0,  246,  246,  246,  246,  246,  246,  246,  246,
  246,    0,    0,  312,    0,    0,    0,    0,    0,    0,
    0,  313,  310,    0,  302,  312,  308,  306,    0,  307,
    0,  309,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  311,  304,    0,  303,  305,    0,    0,
    0,    0,    0,    0,    0,  311,    0,    0,    0,    0,
    0,  314,  315,  316,  317,  318,  319,  320,  321,  322,
    0,    0,    0,    0,    0,    0,    0,  413,  312,  313,
  310,    0,  302,    0,  308,  306,  414,  307,    0,  309,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  304,    0,  303,  305,    0,    0,  311,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  314,
  315,  316,  317,  318,  319,  320,  321,  322,    0,    0,
    0,    0,    0,    0,    0,    0,  312,  302,    0,    0,
    0,    0,  313,  310,    0,    0,    0,  308,  306,    0,
  307,  302,  309,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  304,  311,  303,  305,    0,
    0,    0,    0,    0,  314,  315,  316,  317,  318,  319,
  320,  321,  322,    0,    0,    0,    0,    0,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  302,  417,  312,
  313,  310,    0,    0,    0,  308,  306,    0,  307,  302,
  309,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  439,  304,    0,  303,  305,    0,    0,  311,
    0,    0,    0,    0,  314,  315,  316,  317,  318,  319,
  320,  321,  322,    0,    0,    0,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  313,  310,  312,    0,    0,
  308,  306,  302,  307,    0,  309,    0,  313,  310,    0,
    0,    0,  308,  306,    0,  307,    0,  309,  304,    0,
  303,  305,    0,    0,    0,    0,    0,  311,  443,    0,
  304,    0,  303,  305,    0,    0,    0,    0,    0,  314,
  315,  316,  317,  318,  319,  320,  321,  322,    0,    0,
    0,  441,  312,  313,  310,    0,    0,  459,  308,  306,
  302,  307,    0,  309,  312,  313,  310,    0,    0,    0,
  308,  306,    0,  307,    0,  309,  304,    0,  303,  305,
    0,    0,  311,    0,    0,    0,    0,    0,  304,    0,
  303,  305,    0,    0,  311,    0,    0,  314,  315,  316,
  317,  318,  319,  320,  321,  322,    0,    0,    0,    0,
  312,    0,    0,    0,    0,    0,    0,    0,    0,  313,
  310,    0,  312,  302,  308,  306,    0,  307,    0,  309,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  311,    0,  304,    0,  303,    0,    0,    0,  313,  310,
    0,    0,  311,  308,  306,    0,  307,    0,  309,    0,
  314,  315,  316,  317,  318,  319,  320,  321,  322,    0,
    0,  304,  250,  303,    0,  250,  312,  250,  250,  250,
    0,  302,  260,    0,    0,  260,    0,    0,  260,    0,
    0,    0,  250,  250,  250,    0,  250,  250,    0,    0,
    0,    0,  260,  260,    0,  312,  311,  260,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  250,  250,    0,
    0,    0,    0,    0,    0,  311,  302,  260,  260,    0,
  251,    0,    0,  251,    0,  251,  251,  251,  302,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  250,  250,
  251,  251,  251,    0,  251,  251,    0,    0,  260,  260,
    0,    0,    0,  314,  315,  316,  317,  318,  319,  320,
  321,  322,    0,    0,    0,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  302,  251,  251,  252,    0,    0,
  252,    0,    0,  252,    0,    0,  302,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  252,  252,  252,
    0,  252,  252,    0,    0,    0,  251,  251,    0,    0,
    0,  314,  315,  316,  317,  318,  319,  320,  321,  322,
    0,    0,    0,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  252,  252,    0,  254,    0,    0,  254,    0,
  302,  254,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  254,  254,  254,    0,  254,
  254,    0,    0,  252,  252,    0,    0,    0,    0,  302,
    0,  156,    0,    0,    0,    0,    0,  314,  154,  316,
  317,  318,  319,  320,  321,  322,    0,    0,    0,    0,
  254,  254,  250,    0,    0,  253,    0,    0,  253,    0,
    0,  253,    0,    0,    0,    0,    0,    0,  316,  317,
  318,  319,  320,  321,  322,  253,  253,  253,    0,  253,
  253,  254,  254,    0,    0,    0,    0,    0,    0,  250,
  250,  250,  250,  250,  250,  250,  250,  250,    0,  260,
  260,  260,  260,    0,    0,    0,    0,    0,    0,    0,
  253,  253,  256,    0,    0,  256,    0,    0,  256,    0,
  251,    0,    0,  255,  157,    0,  255,    0,    0,  255,
    0,    0,  256,  256,  256,    0,  256,  256,    0,    0,
    0,  253,  253,  255,  255,  255,    0,  255,  255,    0,
    0,    0,    0,    0,    0,    0,    0,  251,  251,  251,
  251,  251,  251,  251,  251,  251,    0,  256,  256,  257,
    0,    0,  257,    0,    0,  257,    0,  252,  255,  255,
    0,  258,    0,    0,  258,    0,    0,  258,    0,  257,
  257,  257,    0,  257,  257,    0,    0,    0,  256,  256,
    0,  258,  258,  258,    0,  258,  258,    0,    0,  255,
  255,    0,    0,  282,  252,  252,  252,  252,  252,  252,
  252,  252,  252,    0,  257,  257,    0,    0,  261,    0,
    0,  261,    0,    0,  261,  254,  258,  258,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  261,  261,
    0,    0,    0,  261,    0,  257,  257,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  258,  258,    0,
    0,    0,  254,  254,  254,  254,  254,  254,  254,  254,
  254,  136,  137,  261,  261,    0,    0,   71,    0,  113,
  139,    0,    0,  142,    0,  253,    0,    0,    0,    0,
    0,   72,    0,  146,  147,    6,  148,  149,  150,  151,
  152,  153,   73,    0,  261,  261,   74,   75,   76,    0,
    0,   77,    0,    0,   78,    0,    0,    0,   79,    0,
    0,   80,  253,  253,  253,  253,  253,  253,  253,  253,
  253,    0,    0,   71,   55,   54,  282,    0,  282,    0,
    0,  282,  256,    0,    0,    0,  282,   72,    0,    0,
    0,  282,    0,  255,    0,    0,    0,  282,   73,  282,
    0,    0,   74,   75,   76,    0,    0,   89,  282,    0,
   78,    0,    0,    0,   79,    0,    0,   80,  282,  256,
  256,  256,  256,  256,  256,  282,    0,    0,    0,    0,
  255,  255,  255,  255,  255,  255,    0,    0,    0,  257,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  258,   63,    0,   63,    0,    0,   63,    0,    0,
    0,    0,   63,    0,    0,    0,    0,   63,    0,    0,
    0,    0,    0,   63,    0,   63,  257,  257,  257,  257,
  257,  257,    0,    0,   63,    0,    0,    0,  258,  258,
  258,  258,  258,  258,   63,    0,    0,    0,    0,    0,
    0,   63,    0,    0,    0,    0,    0,  282,   63,  282,
   63,    0,  282,   63,    0,    0,    0,  282,   63,    0,
    0,    0,  282,   63,    0,    0,    0,    0,  282,   63,
  282,   63,    0,    0,    0,  261,  261,  261,  261,  282,
   63,    0,    0,    0,    0,    0,    0,    0,    0,  282,
   63,    0,   69,   69,    0,   69,  282,   63,   69,    0,
    0,    0,    0,   69,    0,    0,   69,    0,   69,    0,
    0,    0,    0,    0,   69,    0,   69,   69,    0,    0,
    0,   69,   69,   69,    0,   69,   69,    0,    0,   69,
    0,    0,    0,   69,    0,   69,   69,    0,  100,  100,
  101,  101,   69,  102,  102,    0,    0,    0,  103,  103,
    0,    0,    0,  104,  104,    0,    0,    0,    0,  105,
  105,  106,  106,   62,    0,   62,    0,    0,   62,    0,
  107,  107,    0,   62,    0,    0,    0,    0,   62,    0,
  108,  108,    0,    0,   62,    0,   62,    6,  120,    0,
    0,    0,    0,    0,    0,   62,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   62,    0,    0,    0,    0,
    0,    0,   62,
};
final static short yycheck[] = {                         89,
    0,   42,   60,    0,    4,  190,   51,   40,    0,   54,
   59,   11,   70,   40,   14,   60,  123,   59,   38,  217,
    0,   41,   81,   23,   44,   70,  214,   37,  154,   59,
   30,   90,   42,   43,  200,   45,   44,   47,   58,   59,
  121,  207,   46,   63,   59,  427,  257,    1,   48,   49,
   40,  433,   52,   44,  144,   44,   10,   59,   46,   68,
  271,  133,  307,    0,   40,   65,  452,  285,   68,  314,
   59,  453,  454,   93,   94,  118,    1,  288,   41,   59,
  257,  123,   58,   46,   38,   10,   86,   96,  474,   43,
  133,  136,  307,  123,  271,  154,   96,   51,  179,  297,
   54,   91,   41,   91,  124,  125,   60,   41,  123,   59,
   44,  288,  278,   40,  280,  136,   70,  125,  118,   46,
   59,  123,   59,  264,   58,   59,   51,   81,   91,   54,
  277,  131,  132,  154,  125,   60,   90,  196,  138,  280,
   41,  200,  307,   44,   37,   70,   44,  190,  207,   42,
   43,  334,   45,  336,   47,  109,   81,   58,   59,   93,
  114,   59,   63,   41,  118,   90,   44,  121,  122,  276,
   41,  214,  264,   44,  269,   44,  302,  131,  132,  133,
   58,   59,  136,  280,  372,   63,  214,   58,   59,   46,
   59,  125,   93,  118,   44,   44,  196,   59,  270,   23,
  200,   44,   59,  270,  299,   41,   30,  207,   44,   59,
   59,  136,   61,   46,  214,   93,   59,  270,  118,  278,
  276,  280,   93,  124,  125,  179,   59,  270,  123,  154,
   37,  262,  261,  133,   46,   42,  190,  266,  328,  123,
   47,  272,  196,  302,  335,  336,  200,  125,  297,   44,
  125,  205,  125,  207,  125,  297,  156,  157,  158,  159,
  160,  161,  123,  263,  118,  190,  307,  264,   40,  269,
   40,  196,  264,   40,   40,  200,  230,  257,  278,  133,
  280,  314,  207,  280,  264,   46,   40,  314,  280,  214,
  190,  271,   40,  247,   40,  315,  316,  277,   40,  299,
  280,   46,  361,  307,  376,   91,  491,  257,  288,   59,
  314,  321,  322,  323,  214,  125,  270,   40,  314,  273,
  257,  271,   61,  418,  278,  118,  280,  264,   59,  372,
  373,   59,  404,  376,  271,  302,  190,  409,  288,   41,
  133,   59,   44,  280,  372,  373,  405,   40,  302,  314,
   91,  288,   41,  278,   41,  280,   58,   59,  314,   37,
  214,  404,  362,  421,   42,   43,  409,   45,   44,   47,
  270,  307,   41,  373,  118,   41,  421,  302,   41,   40,
  470,  262,   60,   40,   62,   44,  476,  477,  460,  133,
  462,   93,   59,  118,   41,  272,  439,  190,  493,  494,
   41,   40,  123,  297,   41,   41,   41,  361,  133,  452,
  123,  439,  484,   41,  315,  316,  270,  460,  418,  462,
   58,  214,  376,  125,  269,  468,   41,  427,   41,   59,
   59,  474,   59,  433,   41,  335,  361,   37,  316,  439,
  125,  484,   42,   43,  444,   45,  190,   47,  491,   40,
  404,  405,  452,  453,  454,  409,   41,  125,   41,   58,
   60,   59,   62,  125,   59,  190,  264,  421,  123,  125,
  214,   59,  372,  373,  474,  125,  376,  270,   41,   59,
  405,   41,  314,   41,  314,   41,   44,   58,  457,  214,
  414,  491,  283,  493,  494,  477,  421,  118,  452,  214,
   58,   59,  331,   90,  404,   63,  460,  468,  462,  409,
  491,  439,  133,   82,  468,   27,  118,  405,  372,  373,
  474,   96,  376,  361,   11,   86,  270,  452,   37,   38,
  484,  133,  467,   42,   43,   93,   45,  491,   47,  439,
  132,  330,   -1,  468,   -1,  270,   -1,  205,   -1,  474,
  404,   60,  452,   62,   -1,  409,   -1,   -1,   -1,   -1,
  460,   -1,  462,   -1,   -1,   -1,  491,  125,  468,  190,
   -1,   -1,   41,   -1,  474,   44,   -1,   -1,   -1,  372,
  373,   -1,   -1,  376,  484,  439,   -1,   -1,  190,   58,
   59,  491,   -1,  214,   -1,   -1,   -1,   -1,  452,   -1,
  278,   -1,   -1,   -1,   -1,   -1,  460,   -1,  462,   -1,
   -1,  404,  214,   -1,  468,   -1,  409,   -1,   -1,   -1,
  474,   -1,   -1,   -1,   93,   -1,   -1,   -1,  372,  373,
  484,   -1,  376,   -1,  298,   -1,  300,  491,   -1,  317,
  318,  319,  320,  321,  322,  323,  439,  372,  373,  270,
   -1,  376,   -1,   -1,   -1,   41,  125,   -1,   44,  452,
  404,   -1,   -1,   -1,   -1,  409,   -1,  460,  270,  462,
   -1,   -1,   58,   59,   -1,  468,   -1,   -1,  278,  404,
   -1,  474,   41,   -1,  409,   44,   -1,   46,   -1,   -1,
   -1,  484,   -1,   -1,   41,  439,  360,   44,  491,   -1,
   59,  365,   61,   -1,   -1,   -1,  370,   93,  452,   -1,
   -1,   58,   59,   -1,  439,   -1,  460,   -1,  462,  319,
  320,  321,  322,  323,  468,   -1,   -1,  452,   -1,   -1,
  474,   -1,   91,   -1,   -1,  460,   -1,  462,   -1,  125,
  484,   -1,   -1,  468,   -1,   -1,   93,  491,   -1,  474,
   -1,  372,  373,   -1,   -1,  376,   -1,  315,  316,  484,
   -1,  425,  426,   -1,   41,   -1,  491,   44,   -1,  278,
  372,  373,   -1,   -1,  376,   -1,   -1,   -1,  125,   -1,
  138,   58,   59,  404,   -1,  143,   -1,   -1,  409,   -1,
   -1,   33,   -1,   -1,   -1,   -1,  154,   -1,   40,   -1,
   -1,   43,  404,   45,   -1,   -1,   -1,  409,  317,  318,
  319,  320,  321,  322,  323,   -1,   93,   59,  439,   -1,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   46,
   -1,  452,   -1,   -1,   -1,   -1,   -1,  439,   -1,  460,
   -1,  462,   59,   -1,   61,   -1,   -1,  468,  125,   -1,
  452,   -1,   -1,  474,   -1,   -1,   -1,  215,  460,   -1,
  462,   -1,   -1,  484,   -1,   -1,  468,   -1,   -1,   -1,
  491,   -1,  474,  231,  232,   -1,   -1,  235,   -1,   -1,
   -1,  123,  484,  125,  126,   -1,   -1,   -1,   -1,  491,
  248,   -1,   -1,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261,  262,   33,   -1,   -1,   -1,   -1,
   -1,   -1,   40,  271,   -1,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,
   -1,   59,   -1,  291,   -1,   -1,   -1,   -1,  296,   -1,
   -1,   -1,   -1,   -1,   -1,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,
   -1,   40,   -1,   -1,   43,  123,   45,  125,  126,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,
   59,   -1,   -1,  371,   -1,   -1,  258,  259,  260,  261,
   -1,  263,   -1,  265,  266,  267,  268,  269,   -1,   -1,
  272,  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,
   -1,  283,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,
  292,  293,  294,  295,  296,   -1,   -1,  299,   -1,   -1,
  302,   -1,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,   -1,  123,   -1,  125,  126,   -1,   33,
   -1,   -1,   -1,   -1,   -1,  443,   40,   -1,   -1,   43,
   -1,   45,   -1,  335,  336,   -1,   -1,   -1,   -1,  457,
   -1,   -1,   -1,   -1,   -1,   59,  464,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  258,  259,  260,  261,   -1,  263,   -1,  265,  266,  267,
  268,  269,   -1,   -1,   -1,  273,  274,  275,   -1,   -1,
   -1,  279,   -1,  281,   -1,  283,  284,   -1,   -1,   -1,
   -1,  289,  290,   -1,  292,  293,  294,  295,  296,  123,
   -1,  299,  126,   -1,  302,   -1,   -1,  305,  306,  307,
  308,  309,  310,  311,  312,  313,   41,   33,   -1,   44,
   -1,   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,
   -1,   -1,   -1,   58,   59,   -1,   -1,  335,  336,  258,
  259,  260,  261,   59,  263,   -1,  265,  266,  267,  268,
   -1,   -1,   -1,   -1,  273,  274,  275,   -1,   -1,   -1,
  279,   -1,  281,   -1,  283,  284,   -1,   -1,   93,   -1,
  289,  290,   -1,  292,  293,  294,  295,  296,   41,   -1,
  299,   44,   -1,  302,   -1,   -1,  305,  306,  307,  308,
  309,  310,  311,  312,  313,   58,   59,   -1,   -1,   -1,
  125,   33,   -1,   -1,   -1,   -1,   41,  123,   40,   44,
  126,   43,   -1,   45,   -1,   -1,  335,  336,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   -1,   59,   -1,   -1,
   93,   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,
   -1,  265,  266,  267,  268,   -1,   -1,   -1,   -1,  273,
  274,  275,   -1,   -1,   -1,  279,   -1,  281,   93,  283,
  284,   -1,  125,   -1,   -1,  289,  290,   -1,  292,  293,
  294,  295,  296,   -1,   -1,  299,   -1,   -1,  302,   -1,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  125,  123,   33,   -1,  126,   -1,   -1,   -1,   -1,   40,
   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,  335,  336,   41,   -1,   -1,   44,   41,   59,   41,
   44,   -1,   44,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   59,   -1,   61,   58,   59,   58,   59,   -1,   63,
   58,   59,  258,  259,  260,   -1,   -1,  263,   -1,  265,
   -1,  267,  268,   -1,   -1,   -1,   -1,  273,  274,  275,
   -1,   -1,   -1,  279,   -1,  281,   -1,  283,  284,   93,
   94,   93,   -1,  289,  290,   93,  292,  293,  294,  295,
  296,   -1,  123,  299,   -1,  126,  302,   -1,   -1,  305,
  306,  307,  308,  309,  310,  311,  312,  313,   33,   -1,
  124,  125,   -1,  125,   -1,   40,   -1,  125,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,
  336,   -1,   -1,   -1,   59,   -1,  258,  259,  260,   -1,
   -1,  263,   -1,  265,   -1,  267,  268,   -1,   -1,   -1,
   -1,  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,
   -1,  283,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,
  292,  293,  294,  295,  296,   -1,   -1,  299,   -1,   -1,
  302,   -1,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   33,   -1,   -1,   -1,   -1,   -1,  123,   40,
   -1,  126,   43,   41,   45,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,  335,  336,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,
   -1,   -1,  263,   -1,  265,   -1,  267,  268,   -1,   33,
   -1,   -1,  273,  274,  275,   -1,   40,   -1,  279,   43,
  281,   45,  283,  284,   -1,   93,   -1,   -1,  289,  290,
   -1,  292,  293,  294,  295,  296,   -1,   -1,  299,   -1,
   -1,  302,   -1,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,  313,   -1,   -1,  126,   33,  125,   -1,   -1,
   -1,   -1,   -1,   40,   -1,   -1,   43,   -1,   45,   -1,
   -1,  315,  316,   -1,  335,  336,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,   -1,
   -1,   41,   -1,   33,   44,   -1,   -1,   -1,   -1,  123,
   40,  125,  126,   43,  259,   45,   -1,   -1,   -1,   59,
  265,   61,  267,   -1,   -1,   41,   -1,   -1,   44,  274,
  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,  284,
   -1,   -1,   -1,   59,  289,   61,   -1,  292,  293,  294,
  295,  296,   -1,   -1,  299,   -1,  123,  302,  125,  126,
  305,  306,  307,  308,  309,  310,  311,  312,  313,   33,
   -1,   -1,   46,   -1,   -1,   -1,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   61,   -1,   -1,
  335,  336,   -1,  123,   -1,   59,  126,  258,   -1,  260,
   -1,   -1,  263,   -1,   -1,   -1,   -1,  268,   -1,   -1,
   -1,   -1,  273,   -1,   33,   -1,   -1,   91,  279,   -1,
  281,   40,  283,  284,   43,   -1,   45,   -1,   -1,  290,
   -1,  292,   61,   -1,  295,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,  283,
  284,   -1,   -1,   -1,  335,  336,   -1,   -1,  292,   37,
   38,  295,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   58,   59,   60,   61,   62,   63,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  283,  284,   -1,   -1,
   -1,  335,  336,   -1,   -1,  292,   -1,   -1,  295,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   -1,  305,  306,
  307,  308,  309,  310,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,  283,  284,   61,   -1,   -1,   -1,   -1,
   -1,   -1,  292,   -1,   -1,  295,  124,  125,  335,  336,
   -1,   -1,   -1,   -1,   -1,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,  335,  336,   44,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  283,
  284,   -1,   59,   -1,   61,   -1,   -1,   -1,  292,   -1,
   -1,  295,   -1,  307,   -1,   -1,   -1,   -1,   -1,   -1,
  314,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,   46,  283,  284,   -1,   -1,   -1,   -1,
   -1,  335,  336,  292,   -1,   -1,  295,   -1,   61,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,   -1,   -1,   91,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  335,  336,   -1,   -1,
  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  307,
   58,   59,   60,   61,   62,   63,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,  307,   -1,   -1,   -1,   -1,   -1,   -1,  314,   58,
   59,   60,   61,   62,   63,   -1,  124,  125,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   94,   -1,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   60,   61,   62,   63,  123,  124,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,
   61,   62,   63,   -1,  124,  125,   -1,   -1,   -1,   -1,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  258,   -1,  260,   -1,   -1,  263,
   -1,   -1,   93,   94,  268,   -1,   -1,   -1,   -1,  273,
  278,   -1,   -1,   37,   38,  279,   -1,  281,   42,   43,
   -1,   45,   -1,   47,   -1,   -1,  290,   -1,   -1,   -1,
   -1,   -1,   -1,  124,  125,   -1,   60,   -1,   62,  307,
   -1,   -1,   -1,  307,   -1,   -1,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  278,
   94,   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,  297,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,  336,  278,   91,
   -1,   93,   94,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,
   63,   -1,  124,  125,   -1,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,  336,  278,   -1,   -1,
   93,   94,   -1,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,
   -1,  124,  125,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  336,   -1,   -1,   -1,   93,
   94,   -1,   37,   38,  278,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,   -1,
  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  317,  318,  319,  320,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,   58,   59,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,  336,  278,   93,   94,   -1,   37,
   38,   -1,   -1,   -1,   42,   43,   -1,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   63,   -1,  124,  125,   -1,
   -1,   -1,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,  336,  278,   -1,   94,   -1,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   61,   62,   63,   -1,  124,   -1,   -1,   -1,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  336,  278,   93,   94,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   -1,   62,   63,  124,  125,   -1,   -1,   -1,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  336,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,  278,   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  124,  125,   58,   59,   60,
   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
  278,   -1,   93,   94,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,
   63,   -1,   -1,  124,  125,   -1,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,  336,  278,
   93,   94,   -1,   37,   38,   -1,   -1,   -1,   42,   43,
   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   -1,   62,   63,
   -1,  124,  125,   -1,   -1,   -1,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,   -1,  276,   -1,  278,
   94,   37,   38,   -1,   -1,   41,   42,   43,   -1,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   63,  307,   -1,
  124,   -1,   -1,   -1,   -1,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   94,   -1,
   41,   42,   43,   -1,   45,   -1,   47,  278,   -1,   -1,
   37,   38,   -1,   -1,   41,   42,   43,   -1,   45,   60,
   47,   62,   63,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   -1,   -1,   -1,   60,   -1,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,  314,  315,  316,  317,  318,  319,  320,
  321,  322,  323,   94,   -1,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   -1,   45,  278,   47,   94,   37,   38,
   -1,   -1,   41,   42,   43,   -1,   45,   -1,   47,   60,
   -1,   62,   63,  124,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   -1,   62,   63,   -1,   -1,  124,   -1,   -1,
   -1,   -1,  315,  316,  317,  318,  319,  320,  321,  322,
  323,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,  278,   94,   42,   43,   -1,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   37,
   38,   -1,  278,   -1,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   62,   63,   -1,   -1,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   94,  278,   -1,   -1,
   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,   -1,
   45,  278,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,  124,   62,   63,   -1,
   -1,   -1,   -1,   -1,  315,  316,  317,  318,  319,  320,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  278,   93,   94,
   37,   38,   -1,   -1,   -1,   42,   43,   -1,   45,  278,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   60,   -1,   62,   63,   -1,   -1,  124,
   -1,   -1,   -1,   -1,  315,  316,  317,  318,  319,  320,
  321,  322,  323,   -1,   -1,   -1,  315,  316,  317,  318,
  319,  320,  321,  322,  323,   37,   38,   94,   -1,   -1,
   42,   43,  278,   45,   -1,   47,   -1,   37,   38,   -1,
   -1,   -1,   42,   43,   -1,   45,   -1,   47,   60,   -1,
   62,   63,   -1,   -1,   -1,   -1,   -1,  124,   58,   -1,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,   -1,   -1,
   -1,   93,   94,   37,   38,   -1,   -1,   41,   42,   43,
  278,   45,   -1,   47,   94,   37,   38,   -1,   -1,   -1,
   42,   43,   -1,   45,   -1,   47,   60,   -1,   62,   63,
   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   60,   -1,
   62,   63,   -1,   -1,  124,   -1,   -1,  315,  316,  317,
  318,  319,  320,  321,  322,  323,   -1,   -1,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   94,  278,   42,   43,   -1,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   60,   -1,   62,   -1,   -1,   -1,   37,   38,
   -1,   -1,  124,   42,   43,   -1,   45,   -1,   47,   -1,
  315,  316,  317,  318,  319,  320,  321,  322,  323,   -1,
   -1,   60,   38,   62,   -1,   41,   94,   43,   44,   45,
   -1,  278,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   58,   59,   -1,   94,  124,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,
  317,  318,  319,  320,  321,  322,  323,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,  124,  278,   93,   94,   -1,
   38,   -1,   -1,   41,   -1,   43,   44,   45,  278,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
   58,   59,   60,   -1,   62,   63,   -1,   -1,  124,  125,
   -1,   -1,   -1,  315,  316,  317,  318,  319,  320,  321,
  322,  323,   -1,   -1,   -1,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  278,   93,   94,   38,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,  278,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,
   -1,   62,   63,   -1,   -1,   -1,  124,  125,   -1,   -1,
   -1,  315,  316,  317,  318,  319,  320,  321,  322,  323,
   -1,   -1,   -1,  315,  316,  317,  318,  319,  320,  321,
  322,  323,   93,   94,   -1,   38,   -1,   -1,   41,   -1,
  278,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   62,
   63,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,  278,
   -1,   33,   -1,   -1,   -1,   -1,   -1,  315,   40,  317,
  318,  319,  320,  321,  322,  323,   -1,   -1,   -1,   -1,
   93,   94,  278,   -1,   -1,   38,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,  317,  318,
  319,  320,  321,  322,  323,   58,   59,   60,   -1,   62,
   63,  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,  315,
  316,  317,  318,  319,  320,  321,  322,  323,   -1,  315,
  316,  317,  318,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   94,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
  278,   -1,   -1,   38,  126,   -1,   41,   -1,   -1,   44,
   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,   -1,
   -1,  124,  125,   58,   59,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,  317,
  318,  319,  320,  321,  322,  323,   -1,   93,   94,   38,
   -1,   -1,   41,   -1,   -1,   44,   -1,  278,   93,   94,
   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,   58,
   59,   60,   -1,   62,   63,   -1,   -1,   -1,  124,  125,
   -1,   58,   59,   60,   -1,   62,   63,   -1,   -1,  124,
  125,   -1,   -1,  125,  315,  316,  317,  318,  319,  320,
  321,  322,  323,   -1,   93,   94,   -1,   -1,   38,   -1,
   -1,   41,   -1,   -1,   44,  278,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   63,   -1,  124,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,
   -1,   -1,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  283,  284,   93,   94,   -1,   -1,  257,   -1,  125,
  292,   -1,   -1,  295,   -1,  278,   -1,   -1,   -1,   -1,
   -1,  271,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  282,   -1,  124,  125,  286,  287,  288,   -1,
   -1,  291,   -1,   -1,  294,   -1,   -1,   -1,  298,   -1,
   -1,  301,  315,  316,  317,  318,  319,  320,  321,  322,
  323,   -1,   -1,  257,  125,  125,  258,   -1,  260,   -1,
   -1,  263,  278,   -1,   -1,   -1,  268,  271,   -1,   -1,
   -1,  273,   -1,  278,   -1,   -1,   -1,  279,  282,  281,
   -1,   -1,  286,  287,  288,   -1,   -1,  291,  290,   -1,
  294,   -1,   -1,   -1,  298,   -1,   -1,  301,  300,  315,
  316,  317,  318,  319,  320,  307,   -1,   -1,   -1,   -1,
  315,  316,  317,  318,  319,  320,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  278,  258,   -1,  260,   -1,   -1,  263,   -1,   -1,
   -1,   -1,  268,   -1,   -1,   -1,   -1,  273,   -1,   -1,
   -1,   -1,   -1,  279,   -1,  281,  315,  316,  317,  318,
  319,  320,   -1,   -1,  290,   -1,   -1,   -1,  315,  316,
  317,  318,  319,  320,  300,   -1,   -1,   -1,   -1,   -1,
   -1,  307,   -1,   -1,   -1,   -1,   -1,  258,  258,  260,
  260,   -1,  263,  263,   -1,   -1,   -1,  268,  268,   -1,
   -1,   -1,  273,  273,   -1,   -1,   -1,   -1,  279,  279,
  281,  281,   -1,   -1,   -1,  315,  316,  317,  318,  290,
  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  300,
  300,   -1,  257,  258,   -1,  260,  307,  307,  263,   -1,
   -1,   -1,   -1,  268,   -1,   -1,  271,   -1,  273,   -1,
   -1,   -1,   -1,   -1,  279,   -1,  281,  282,   -1,   -1,
   -1,  286,  287,  288,   -1,  290,  291,   -1,   -1,  294,
   -1,   -1,   -1,  298,   -1,  300,  301,   -1,  258,  258,
  260,  260,  307,  263,  263,   -1,   -1,   -1,  268,  268,
   -1,   -1,   -1,  273,  273,   -1,   -1,   -1,   -1,  279,
  279,  281,  281,  258,   -1,  260,   -1,   -1,  263,   -1,
  290,  290,   -1,  268,   -1,   -1,   -1,   -1,  273,   -1,
  300,  300,   -1,   -1,  279,   -1,  281,  307,  307,   -1,
   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,
   -1,   -1,  307,
};
final static short YYFINAL=2;
final static short YYMAXTOKEN=336;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'","'&'",null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'","'?'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'","'^'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'","'|'","'}'","'~'",null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"ABSTRACT","BOOLEAN","BREAK",
"BYTE","CASE","CATCH","CHAR","CLASS","CONTINUE","DEFAULT","DO","DOUBLE","ELSE",
"EXTENDS","FINAL","FINALLY","FLOAT","FOR","IF","IMPLEMENTS","IMPORT",
"INSTANCEOF","INT","INTERFACE","LONG","NATIVE","NEW","_NULL","PACKAGE",
"PRIVATE","PROTECTED","PUBLIC","RETURN","SHORT","STATIC","SUPER","SWITCH",
"SYNCHRONIZED","THIS","THROW","THROWS","TRANSIENT","TRY","VOID","VOLATILE",
"WHILE","CONST","GOTO","TRUE","FALSE","IDENTIFIER","INT_LITERAL","LONG_LITERAL",
"FLOAT_LITERAL","DOUBLE_LITERAL","CHARACTER_LITERAL","STRING_LITERAL",
"EMPTY_DIM","CAND","COR","EQ","NE","LE","GE","LSHIFTL","ASHIFTR","LSHIFTR",
"PLUS_ASG","MINUS_ASG","MULT_ASG","DIV_ASG","REM_ASG","LSHIFTL_ASG",
"ASHIFTR_ASG","LSHIFTR_ASG","AND_ASG","XOR_ASG","OR_ASG","PLUSPLUS",
"MINUSMINUS",
};
final static String yyrule[] = null;

//#line 1319 "jparser.y"

protected void init(String filename) throws IOException {

  _lexer = new Yylex(new FileInputStream(filename));
}

protected int yylex()
{

  try {
    int retval = _lexer.yylex();

    yylval = _lexer.getParserVal();

    return retval;

  } catch (IOException e) {

    throw new RuntimeException("lexical error");
  }
}

protected static final LinkedList cons(Object obj)
{
  return cons(obj, new LinkedList());
}

protected static final LinkedList cons(Object obj, LinkedList list)
{
  if ((obj != null) && (obj != AbsentTreeNode.instance)) {
     list.addFirst(obj);
  }

  return list;
}

protected static final LinkedList append(LinkedList list, Object obj)
{
  list.addLast(obj);

  return list;
}


protected static final Object appendLists(LinkedList list1, LinkedList list2)
{
  list1.addAll(list2);

  return list1;
}

/** Place to put the finished AST. */
protected CompileUnitNode _theAST;

public CompileUnitNode getAST() { return _theAST; }

protected static void yyerror(String msg)
{
  throw new RuntimeException(msg);
}

/** An array type with given ELEMENTTYPE and DIMS dimensions.  When
 *  DIMS=0, equals ELEMENTTYPE.
 */
protected static TypeNode makeArrayType(TypeNode elementType, int dims)
{
  while (dims > 0) {
	   elementType = new ArrayTypeNode(elementType);
	   dims -= 1;
  }
  return elementType;
}

protected Yylex _lexer;
//#line 1731 "parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}



//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  char:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]+"");
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0) {
      try {
         yyval = (parserval) (val_peek(yym-1).clone());
      } catch (CloneNotSupportedException e) {
         yyerror("clone not supported");
      }
    } else {
      yyval = new parserval(0);
    }

    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 205 "jparser.y"
{ _theAST = (CompileUnitNode) val_peek(0).obj; }
break;
case 2:
//#line 211 "jparser.y"
{ yyval.obj = new IntLitNode(val_peek(0).sval); }
break;
case 3:
//#line 213 "jparser.y"
{ yyval.obj = new LongLitNode(val_peek(0).sval); }
break;
case 4:
//#line 215 "jparser.y"
{ yyval.obj = new FloatLitNode(val_peek(0).sval); }
break;
case 5:
//#line 217 "jparser.y"
{ yyval.obj = new DoubleLitNode(val_peek(0).sval); }
break;
case 6:
//#line 219 "jparser.y"
{ yyval.obj = new BoolLitNode("true"); }
break;
case 7:
//#line 221 "jparser.y"
{ yyval.obj = new BoolLitNode("false"); }
break;
case 8:
//#line 223 "jparser.y"
{ yyval.obj = new CharLitNode(val_peek(0).sval); }
break;
case 9:
//#line 225 "jparser.y"
{ yyval.obj = new StringLitNode(val_peek(0).sval); }
break;
case 14:
//#line 246 "jparser.y"
{ yyval.obj = BoolTypeNode.instance; }
break;
case 15:
//#line 248 "jparser.y"
{ yyval.obj = CharTypeNode.instance; }
break;
case 16:
//#line 250 "jparser.y"
{ yyval.obj = ByteTypeNode.instance; }
break;
case 17:
//#line 252 "jparser.y"
{ yyval.obj = ShortTypeNode.instance; }
break;
case 18:
//#line 254 "jparser.y"
{ yyval.obj = IntTypeNode.instance; }
break;
case 19:
//#line 256 "jparser.y"
{ yyval.obj = FloatTypeNode.instance; }
break;
case 20:
//#line 258 "jparser.y"
{ yyval.obj = LongTypeNode.instance; }
break;
case 21:
//#line 260 "jparser.y"
{ yyval.obj = DoubleTypeNode.instance; }
break;
case 22:
//#line 268 "jparser.y"
{ yyval.obj = new TypeNameNode((NameNode) val_peek(0).obj); }
break;
case 23:
//#line 273 "jparser.y"
{ yyval.obj = new ArrayTypeNode((TypeNode) val_peek(1).obj); }
break;
case 24:
//#line 282 "jparser.y"
{ yyval.obj = new CompileUnitNode((TreeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj);  }
break;
case 25:
//#line 287 "jparser.y"
{ yyval.obj = new PackageNode((NameNode) val_peek(1).obj); }
break;
case 26:
//#line 289 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 27:
//#line 294 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 28:
//#line 296 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 29:
//#line 302 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 30:
//#line 304 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 31:
//#line 306 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 36:
//#line 324 "jparser.y"
{ yyval.obj = new ImportNode((NameNode) val_peek(1).obj); }
break;
case 37:
//#line 329 "jparser.y"
{ yyval.obj = new ImportOnDemandNode((NameNode) val_peek(3).obj); }
break;
case 38:
//#line 342 "jparser.y"
{ yyval.obj = new ClassDeclNode(val_peek(5).ival, (NameNode) val_peek(3).obj, (TreeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj,
         (LinkedList) val_peek(0).obj); }
break;
case 39:
//#line 350 "jparser.y"
{ }
break;
case 40:
//#line 352 "jparser.y"
{ yyval.ival = Modifier.NO_MOD; }
break;
case 42:
//#line 358 "jparser.y"
{ yyval.ival = (val_peek(1).ival | Modifier.FINAL_MOD); }
break;
case 43:
//#line 360 "jparser.y"
{ yyval.ival = Modifier.FINAL_MOD; }
break;
case 44:
//#line 362 "jparser.y"
{
     yyval.ival = (val_peek(1).ival | val_peek(0).ival);
     if ((val_peek(1).ival & val_peek(0).ival) != 0) {
		     yyerror("repeated modifier");
     }
   }
break;
case 45:
//#line 373 "jparser.y"
{ yyval.ival = Modifier.ABSTRACT_MOD; }
break;
case 46:
//#line 375 "jparser.y"
{ yyval.ival = Modifier.FINAL_MOD; }
break;
case 47:
//#line 377 "jparser.y"
{ yyval.ival = Modifier.PUBLIC_MOD; }
break;
case 48:
//#line 385 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 49:
//#line 387 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 50:
//#line 395 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 51:
//#line 397 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 52:
//#line 406 "jparser.y"
{
     yyval.obj = val_peek(1).obj; /* in the original, an ABSENT tree is added*/
   }
break;
case 53:
//#line 412 "jparser.y"
{ }
break;
case 54:
//#line 414 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 56:
//#line 420 "jparser.y"
{ yyval.obj = appendLists((LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 58:
//#line 429 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 59:
//#line 431 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 60:
//#line 433 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 61:
//#line 442 "jparser.y"
{
      Modifier.checkFieldModifiers(val_peek(3).ival);
	     LinkedList result = new LinkedList();

      LinkedList varDecls = (LinkedList) val_peek(1).obj;
      ListIterator itr = varDecls.listIterator(0);

	     while (itr.hasNext()) {
		     DeclaratorNode decl = (DeclaratorNode) itr.next();
		     result = cons(new FieldDeclNode(val_peek(3).ival,
						            makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
						            decl.getName(), decl.getInitExpr()),
				               result);
		   }

      yyval.obj = result;
   }
break;
case 62:
//#line 468 "jparser.y"
{ }
break;
case 63:
//#line 470 "jparser.y"
{ yyval.ival = Modifier.NO_MOD; }
break;
case 64:
//#line 474 "jparser.y"
{ yyval.ival = val_peek(0).ival; }
break;
case 65:
//#line 476 "jparser.y"
{
     yyval.ival = (val_peek(1).ival | val_peek(0).ival);
		  if ((val_peek(1).ival & val_peek(0).ival) != 0) {
		     yyerror("repeated modifier");
     }
   }
break;
case 66:
//#line 487 "jparser.y"
{ yyval.ival = Modifier.PUBLIC_MOD; }
break;
case 67:
//#line 489 "jparser.y"
{ yyval.ival = Modifier.PROTECTED_MOD;  }
break;
case 68:
//#line 491 "jparser.y"
{ yyval.ival = Modifier.PRIVATE_MOD;  }
break;
case 69:
//#line 494 "jparser.y"
{ yyval.ival = Modifier.STATIC_MOD;  }
break;
case 70:
//#line 496 "jparser.y"
{ yyval.ival = Modifier.FINAL_MOD;  }
break;
case 71:
//#line 499 "jparser.y"
{ yyval.ival = Modifier.ABSTRACT_MOD;  }
break;
case 72:
//#line 501 "jparser.y"
{ yyval.ival = Modifier.NATIVE_MOD;  }
break;
case 73:
//#line 503 "jparser.y"
{ yyval.ival = Modifier.SYNCHRONIZED_MOD;  }
break;
case 74:
//#line 506 "jparser.y"
{ yyval.ival = Modifier.TRANSIENT_MOD;  }
break;
case 75:
//#line 508 "jparser.y"
{ yyval.ival = Modifier.VOLATILE_MOD;  }
break;
case 76:
//#line 519 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 77:
//#line 521 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj, (LinkedList) val_peek(2).obj); }
break;
case 78:
//#line 526 "jparser.y"
{ yyval.obj = new DeclaratorNode(val_peek(0).ival, (NameNode) val_peek(1).obj, AbsentTreeNode.instance); }
break;
case 79:
//#line 528 "jparser.y"
{ yyval.obj = new DeclaratorNode(val_peek(2).ival, (NameNode) val_peek(3).obj, (ExprNode) val_peek(0).obj); }
break;
case 82:
//#line 544 "jparser.y"
{
     Modifier.checkMethodModifiers(val_peek(8).ival);
	    yyval.obj = new MethodDeclNode(val_peek(8).ival, (LinkedList) val_peek(4).obj, makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival),
			                        (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj, (TreeNode) val_peek(0).obj); }
break;
case 83:
//#line 550 "jparser.y"
{
     Modifier.checkMethodModifiers(val_peek(8).ival);
	    yyval.obj = new MethodDeclNode(val_peek(8).ival, (LinkedList) val_peek(4).obj, makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival),
                             (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj, (TreeNode) val_peek(0).obj);
   }
break;
case 84:
//#line 559 "jparser.y"
{ yyval.obj = VoidTypeNode.instance; }
break;
case 85:
//#line 567 "jparser.y"
{ }
break;
case 86:
//#line 569 "jparser.y"
{ yyval.obj = new LinkedList();  }
break;
case 87:
//#line 574 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 88:
//#line 576 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 89:
//#line 581 "jparser.y"
{ yyval.obj = new ParameterNode(makeArrayType((TypeNode) val_peek(2).obj, val_peek(0).ival),
                 (NameNode) val_peek(1).obj); }
break;
case 90:
//#line 589 "jparser.y"
{ }
break;
case 91:
//#line 591 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 92:
//#line 596 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 93:
//#line 601 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 94:
//#line 603 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 96:
//#line 612 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 97:
//#line 621 "jparser.y"
{
       Modifier.checkConstructorModifiers(val_peek(9).ival);
	      yyval.obj = new ConstructorDeclNode(val_peek(9).ival, val_peek(8).sval, (LinkedList) val_peek(6).obj, (LinkedList) val_peek(4).obj,
             (TreeNode) val_peek(2).obj, new BlockNode((LinkedList) val_peek(1).obj));
     }
break;
case 98:
//#line 628 "jparser.y"
{
       Modifier.checkConstructorModifiers(val_peek(8).ival);
	      yyval.obj = new ConstructorDeclNode(val_peek(8).ival, val_peek(7).sval, (LinkedList) val_peek(5).obj, (LinkedList) val_peek(3).obj,
					    new SuperConstructorCallNode(new LinkedList()),
					    new BlockNode((LinkedList) val_peek(1).obj));
	    }
break;
case 99:
//#line 642 "jparser.y"
{ yyval.obj = new ThisConstructorCallNode((LinkedList) val_peek(2).obj); }
break;
case 100:
//#line 644 "jparser.y"
{ yyval.obj = new SuperConstructorCallNode((LinkedList) val_peek(2).obj); }
break;
case 101:
//#line 652 "jparser.y"
{ yyval.obj = new StaticInitNode((BlockNode) val_peek(0).obj); }
break;
case 102:
//#line 662 "jparser.y"
{ yyval.obj = new InterfaceDeclNode(val_peek(4).ival, (NameNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 103:
//#line 668 "jparser.y"
{  }
break;
case 104:
//#line 670 "jparser.y"
{ yyval.ival = Modifier.NO_MOD; }
break;
case 105:
//#line 674 "jparser.y"
{ yyval.ival = val_peek(0).ival;  }
break;
case 106:
//#line 676 "jparser.y"
{
     yyval.ival = (val_peek(1).ival | val_peek(0).ival);

		  if ((val_peek(1).ival & val_peek(0).ival) != 0) {
		      yyerror("repeated modifier");
     }
   }
break;
case 107:
//#line 687 "jparser.y"
{ yyval.ival = Modifier.PUBLIC_MOD; }
break;
case 108:
//#line 689 "jparser.y"
{ yyval.ival = Modifier.ABSTRACT_MOD; }
break;
case 109:
//#line 696 "jparser.y"
{ }
break;
case 110:
//#line 698 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 111:
//#line 703 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 112:
//#line 710 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 113:
//#line 715 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 114:
//#line 717 "jparser.y"
{ yyval.obj = appendLists((LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 116:
//#line 723 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 117:
//#line 728 "jparser.y"
{
     Modifier.checkConstantFieldModifiers(val_peek(3).ival);
     LinkedList varDecls = (LinkedList) val_peek(1).obj;
     ListIterator itr = varDecls.listIterator(0);

	    LinkedList result = new LinkedList();

	    while (itr.hasNext()) {
		    DeclaratorNode decl = (DeclaratorNode) itr.next();
		    result = cons(new FieldDeclNode(val_peek(3).ival, makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
						           decl.getName(), decl.getInitExpr()),
				              result);
		  }

	    yyval.obj = result;
	  }
break;
case 118:
//#line 749 "jparser.y"
{ Modifier.checkMethodSignatureModifiers(val_peek(8).ival);
	      yyval.obj = new MethodDeclNode(val_peek(8).ival | Modifier.ABSTRACT_MOD, (LinkedList) val_peek(4).obj,
				       makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival),
				       (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj, AbsentTreeNode.instance); }
break;
case 119:
//#line 755 "jparser.y"
{
        Modifier.checkMethodSignatureModifiers(val_peek(8).ival);
	      yyval.obj = new MethodDeclNode(val_peek(8).ival | Modifier.ABSTRACT_MOD, (LinkedList) val_peek(4).obj,
				       makeArrayType((TypeNode) val_peek(7).obj, val_peek(2).ival), (NameNode) val_peek(6).obj, (LinkedList) val_peek(1).obj,
              AbsentTreeNode.instance); }
break;
case 120:
//#line 768 "jparser.y"
{ yyval.obj = new ArrayInitNode((LinkedList) val_peek(1).obj); }
break;
case 121:
//#line 770 "jparser.y"
{ yyval.obj = new ArrayInitNode((LinkedList) val_peek(2).obj); }
break;
case 122:
//#line 772 "jparser.y"
{ yyval.obj = new ArrayInitNode(new LinkedList()); }
break;
case 123:
//#line 778 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 124:
//#line 780 "jparser.y"
{ yyval.obj = append((LinkedList) val_peek(2).obj, val_peek(0).obj); }
break;
case 127:
//#line 795 "jparser.y"
{ yyval.obj = new BlockNode((LinkedList) val_peek(1).obj); }
break;
case 128:
//#line 799 "jparser.y"
{ }
break;
case 129:
//#line 801 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 130:
//#line 806 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 131:
//#line 808 "jparser.y"
{ yyval.obj = appendLists((LinkedList) val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 132:
//#line 813 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 133:
//#line 815 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 134:
//#line 823 "jparser.y"
{
     LinkedList varDecls = (LinkedList) val_peek(1).obj;
     LinkedList result = new LinkedList();

     ListIterator itr = varDecls.listIterator();

	    while (itr.hasNext()) {
		      DeclaratorNode decl = (DeclaratorNode) itr.next();
		      result = cons(new VarDeclNode(
                        makeArrayType((TypeNode) val_peek(2).obj, decl.getDims()),
                        decl.getName(), decl.getInitExpr()), result);
		  }
     yyval.obj = result;
   }
break;
case 137:
//#line 845 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 143:
//#line 857 "jparser.y"
{ yyval.obj = new EmptyStmtNode(); }
break;
case 144:
//#line 865 "jparser.y"
{ yyval.obj = new LabeledStmtNode((NameNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 145:
//#line 873 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 146:
//#line 875 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 147:
//#line 877 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 148:
//#line 879 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 149:
//#line 881 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 150:
//#line 883 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 151:
//#line 885 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 152:
//#line 893 "jparser.y"
{ yyval.obj = new IfStmtNode((ExprNode) val_peek(2).obj, (TreeNode) val_peek(0).obj, AbsentTreeNode.instance); }
break;
case 153:
//#line 895 "jparser.y"
{ yyval.obj = new IfStmtNode((ExprNode) val_peek(4).obj, (TreeNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 154:
//#line 897 "jparser.y"
{ yyval.obj = new SwitchNode((ExprNode) val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 155:
//#line 902 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 156:
//#line 906 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 157:
//#line 908 "jparser.y"
{ yyval.obj = cons(new SwitchBranchNode((LinkedList) val_peek(2).obj, (LinkedList) val_peek(1).obj),
               (LinkedList) val_peek(0).obj); }
break;
case 158:
//#line 914 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 159:
//#line 916 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 160:
//#line 921 "jparser.y"
{ yyval.obj = new CaseNode((TreeNode) val_peek(1).obj); }
break;
case 161:
//#line 923 "jparser.y"
{ yyval.obj = new CaseNode(AbsentTreeNode.instance); }
break;
case 162:
//#line 930 "jparser.y"
{ yyval.obj = new LoopNode(new EmptyStmtNode(), (ExprNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 163:
//#line 932 "jparser.y"
{ yyval.obj = new LoopNode((TreeNode) val_peek(5).obj, (ExprNode) val_peek(2).obj, new EmptyStmtNode()); }
break;
case 164:
//#line 934 "jparser.y"
{ yyval.obj = new ForNode((LinkedList) val_peek(5).obj, (ExprNode) val_peek(4).obj,
      (LinkedList) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 165:
//#line 937 "jparser.y"
{ yyval.obj = new ForNode((LinkedList) val_peek(4).obj, new BoolLitNode("true"), (LinkedList) val_peek(2).obj,
      (TreeNode) val_peek(0).obj); }
break;
case 166:
//#line 943 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 167:
//#line 945 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 168:
//#line 949 "jparser.y"
{ }
break;
case 169:
//#line 951 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 170:
//#line 955 "jparser.y"
{ }
break;
case 171:
//#line 957 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 172:
//#line 962 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 173:
//#line 964 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 174:
//#line 972 "jparser.y"
{ yyval.obj = new BreakNode((TreeNode) val_peek(1).obj); }
break;
case 175:
//#line 974 "jparser.y"
{ yyval.obj = new ContinueNode((TreeNode) val_peek(1).obj); }
break;
case 176:
//#line 976 "jparser.y"
{ yyval.obj = new ReturnNode((TreeNode) val_peek(1).obj); }
break;
case 177:
//#line 978 "jparser.y"
{ yyval.obj = new ThrowNode((ExprNode) val_peek(1).obj); }
break;
case 178:
//#line 983 "jparser.y"
{ }
break;
case 179:
//#line 985 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 180:
//#line 993 "jparser.y"
{ yyval.obj = new SynchronizedNode((ExprNode) val_peek(2).obj, (TreeNode) val_peek(0).obj); }
break;
case 181:
//#line 995 "jparser.y"
{ yyval.obj = new TryNode((BlockNode) val_peek(1).obj, new LinkedList(), (TreeNode) val_peek(0).obj); }
break;
case 182:
//#line 997 "jparser.y"
{ yyval.obj = new TryNode((BlockNode) val_peek(1).obj, (LinkedList) val_peek(0).obj, AbsentTreeNode.instance); }
break;
case 183:
//#line 999 "jparser.y"
{ yyval.obj = new TryNode((BlockNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, (TreeNode) val_peek(0).obj); }
break;
case 184:
//#line 1004 "jparser.y"
{ yyval.obj = cons (val_peek(0).obj); }
break;
case 185:
//#line 1006 "jparser.y"
{ yyval.obj = cons (val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 186:
//#line 1011 "jparser.y"
{ yyval.obj = new CatchNode((ParameterNode) val_peek(2).obj, (BlockNode) val_peek(0).obj); }
break;
case 187:
//#line 1016 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 188:
//#line 1027 "jparser.y"
{ yyval.obj = new ObjectNode((NameNode) val_peek(0).obj); }
break;
case 193:
//#line 1039 "jparser.y"
{ yyval.obj = new NullPntrNode(); }
break;
case 194:
//#line 1041 "jparser.y"
{ yyval.obj = new ThisNode(); }
break;
case 195:
//#line 1043 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 196:
//#line 1045 "jparser.y"
{ yyval.obj = new ObjectNode((NameNode) val_peek(1).obj); }
break;
case 198:
//#line 1048 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 200:
//#line 1058 "jparser.y"
{ yyval.obj = val_peek(0).obj; }
break;
case 202:
//#line 1064 "jparser.y"
{ yyval.obj = new NameNode(AbsentTreeNode.instance, val_peek(0).sval); }
break;
case 203:
//#line 1069 "jparser.y"
{ yyval.obj = new NameNode((NameNode) val_peek(2).obj, val_peek(0).sval); }
break;
case 204:
//#line 1077 "jparser.y"
{ yyval.obj = new ArrayAccessNode(new ObjectNode((NameNode) val_peek(3).obj), (ExprNode) val_peek(1).obj); }
break;
case 205:
//#line 1079 "jparser.y"
{ yyval.obj = new ArrayAccessNode((ExprNode) val_peek(3).obj, (ExprNode) val_peek(1).obj); }
break;
case 206:
//#line 1088 "jparser.y"
{ yyval.obj = new ObjectFieldAccessNode((TreeNode) val_peek(2).obj, (NameNode) val_peek(0).obj); }
break;
case 207:
//#line 1090 "jparser.y"
{ yyval.obj = new SuperFieldAccessNode((NameNode) val_peek(0).obj); }
break;
case 208:
//#line 1098 "jparser.y"
{ yyval.obj = new MethodCallNode((NameNode) val_peek(3).obj, (LinkedList) val_peek(1).obj); }
break;
case 209:
//#line 1100 "jparser.y"
{ yyval.obj = new MethodCallNode((TreeNode) val_peek(3).obj, (LinkedList) val_peek(1).obj); }
break;
case 210:
//#line 1103 "jparser.y"
{ yyval.obj = new MethodCallNode(new NameNode((NameNode) val_peek(5).obj, val_peek(3).sval), (LinkedList) val_peek(1).obj); }
break;
case 211:
//#line 1107 "jparser.y"
{  }
break;
case 212:
//#line 1109 "jparser.y"
{ yyval.obj = new LinkedList(); }
break;
case 213:
//#line 1114 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 214:
//#line 1116 "jparser.y"
{ yyval.obj = cons(val_peek(2).obj, (LinkedList) val_peek(0).obj); }
break;
case 215:
//#line 1124 "jparser.y"
{ yyval.obj = new AllocateNode((TypeNode) val_peek(3).obj, (LinkedList) val_peek(1).obj); }
break;
case 216:
//#line 1126 "jparser.y"
{ yyval.obj = new AllocateArrayNode((TypeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, val_peek(0).ival); }
break;
case 217:
//#line 1128 "jparser.y"
{ yyval.obj = new AllocateArrayNode((TypeNode) val_peek(2).obj, (LinkedList) val_peek(1).obj, val_peek(0).ival); }
break;
case 218:
//#line 1133 "jparser.y"
{ yyval.obj = cons(val_peek(0).obj); }
break;
case 219:
//#line 1135 "jparser.y"
{ yyval.obj = cons(val_peek(1).obj, (LinkedList) val_peek(0).obj); }
break;
case 220:
//#line 1140 "jparser.y"
{ yyval.obj = val_peek(1).obj; }
break;
case 221:
//#line 1144 "jparser.y"
{ }
break;
case 222:
//#line 1146 "jparser.y"
{ yyval.ival = 0; }
break;
case 223:
//#line 1151 "jparser.y"
{ yyval.ival = 1; }
break;
case 224:
//#line 1153 "jparser.y"
{ yyval.ival = val_peek(1).ival + 1; }
break;
case 228:
//#line 1167 "jparser.y"
{ yyval.obj = new PostIncrNode((ExprNode) val_peek(1).obj); }
break;
case 229:
//#line 1172 "jparser.y"
{ yyval.obj = new PostDecrNode((ExprNode) val_peek(1).obj); }
break;
case 232:
//#line 1182 "jparser.y"
{ yyval.obj = new UnaryPlusNode((ExprNode) val_peek(0).obj); }
break;
case 233:
//#line 1184 "jparser.y"
{ yyval.obj = new UnaryMinusNode((ExprNode) val_peek(0).obj); }
break;
case 235:
//#line 1190 "jparser.y"
{ yyval.obj = new PreIncrNode((ExprNode) val_peek(0).obj); }
break;
case 236:
//#line 1195 "jparser.y"
{ yyval.obj = new PreDecrNode((ExprNode) val_peek(0).obj); }
break;
case 238:
//#line 1201 "jparser.y"
{ yyval.obj = new ComplementNode((ExprNode) val_peek(0).obj); }
break;
case 239:
//#line 1203 "jparser.y"
{ yyval.obj = new NotNode((ExprNode) val_peek(0).obj); }
break;
case 241:
//#line 1209 "jparser.y"
{ yyval.obj = new CastNode((TypeNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 242:
//#line 1211 "jparser.y"
{ yyval.obj = new CastNode((TypeNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 243:
//#line 1213 "jparser.y"
{ yyval.obj = new CastNode(new TypeNameNode((NameNode) val_peek(2).obj), (ExprNode) val_peek(0).obj); }
break;
case 244:
//#line 1224 "jparser.y"
{ }
break;
case 245:
//#line 1226 "jparser.y"
{ yyval.obj = AbsentTreeNode.instance; }
break;
case 247:
//#line 1232 "jparser.y"
{ yyval.obj = new MultNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 248:
//#line 1234 "jparser.y"
{ yyval.obj = new DivNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 249:
//#line 1236 "jparser.y"
{ yyval.obj = new RemNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 250:
//#line 1238 "jparser.y"
{ yyval.obj = new PlusNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 251:
//#line 1240 "jparser.y"
{ yyval.obj = new MinusNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 252:
//#line 1242 "jparser.y"
{ yyval.obj = new LeftShiftLogNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 253:
//#line 1244 "jparser.y"
{ yyval.obj = new RightShiftLogNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 254:
//#line 1246 "jparser.y"
{ yyval.obj = new RightShiftArithNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 255:
//#line 1248 "jparser.y"
{ yyval.obj = new LTNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 256:
//#line 1250 "jparser.y"
{ yyval.obj = new GTNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 257:
//#line 1252 "jparser.y"
{ yyval.obj = new LENode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 258:
//#line 1254 "jparser.y"
{ yyval.obj = new GENode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 259:
//#line 1256 "jparser.y"
{ yyval.obj = new InstanceOfNode((ExprNode) val_peek(2).obj, (TypeNode) val_peek(0).obj); }
break;
case 260:
//#line 1258 "jparser.y"
{ yyval.obj = new EQNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 261:
//#line 1260 "jparser.y"
{ yyval.obj = new NENode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 262:
//#line 1262 "jparser.y"
{ yyval.obj = new BitAndNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 263:
//#line 1264 "jparser.y"
{ yyval.obj = new BitOrNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 264:
//#line 1266 "jparser.y"
{ yyval.obj = new BitXorNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 265:
//#line 1268 "jparser.y"
{ yyval.obj = new CandNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 266:
//#line 1270 "jparser.y"
{ yyval.obj = new CorNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 267:
//#line 1272 "jparser.y"
{ yyval.obj = new IfExprNode((ExprNode) val_peek(4).obj, (ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 269:
//#line 1281 "jparser.y"
{ yyval.obj = new AssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 270:
//#line 1283 "jparser.y"
{ yyval.obj = new MultAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 271:
//#line 1285 "jparser.y"
{ yyval.obj = new DivAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 272:
//#line 1287 "jparser.y"
{ yyval.obj = new RemAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 273:
//#line 1289 "jparser.y"
{ yyval.obj = new PlusAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 274:
//#line 1291 "jparser.y"
{ yyval.obj = new MinusAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 275:
//#line 1293 "jparser.y"
{ yyval.obj = new LeftShiftLogAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 276:
//#line 1295 "jparser.y"
{ yyval.obj = new RightShiftLogAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 277:
//#line 1297 "jparser.y"
{ yyval.obj = new RightShiftArithAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 278:
//#line 1299 "jparser.y"
{ yyval.obj = new BitAndAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 279:
//#line 1301 "jparser.y"
{ yyval.obj = new BitXorAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
case 280:
//#line 1303 "jparser.y"
{ yyval.obj = new BitOrAssignNode((ExprNode) val_peek(2).obj, (ExprNode) val_peek(0).obj); }
break;
//#line 2920 "parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



}
//################### END OF CLASS yaccpar ######################
