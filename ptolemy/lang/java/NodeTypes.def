// This file provides the input to GenerateVisitor, which generates
// the JavaVisitor class and all the node classed in lang/java/nodetypes.
// The leading comment is included in all the generated files.
//
// Author: Jeff Tsay

<cheader>
/*
This file was generated automatically by GenerateVisitor.

Copyright (c) 1998-2001 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the above
copyright notice and the following two paragraphs appear in all copies
of this software.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

                                        PT_COPYRIGHT_VERSION_2
                                        COPYRIGHTENDKEY

@ProposedRating Red (ctsay@eecs.berkeley.edu)
@AcceptedRating Red (ctsay@eecs.berkeley.edu)

*/
</cheader>

<vheader>
package ptolemy.lang.java;

import java.util.LinkedList;
import java.util.List;

import ptolemy.lang.IVisitor;
import ptolemy.lang.TreeNode;
import ptolemy.lang.java.nodetypes.*;

/** A visitor for AST's for Java code. */
</vheader>

<nheader>
package ptolemy.lang.java.nodetypes;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import ptolemy.lang.IVisitor;
import ptolemy.lang.ITreeNode;
import ptolemy.lang.TreeNode;
import ptolemy.lang.java.JavaVisitor;

/** A specific type of node in the AST for Java code. */
</nheader>

<iheader>
package ptolemy.lang.java.nodetypes;

/** An interface containing the class ID's of all concrete node types. */
</iheader>

// interfaces
NamedNode I ITreeNode m NameNode getName m m void setName NameNode name m
ModifiedNode I ITreeNode m int getModifiers m m void setModifiers int modifiers m
StatementNode I ITreeNode

NameNode C TreeNode k 0 TreeNode qualifier String ident k
AbsentTreeNode S TreeNode

// base
TypeNode A TreeNode c 0 c
PrimitiveTypeNode A TypeNode c 0 c
ReferenceTypeNode A TypeNode c 0 c

VarDeclNode A TreeNode i NamedNode ModifiedNode i k 0 int modifiers TypeNode defType NameNode name k
VarInitDeclNode A VarDeclNode k 3 int modifiers TypeNode defType NameNode name TreeNode initExpr k

ConstructorCallNode A TreeNode i StatementNode i k 0 List args k
IterationNode A TreeNode i StatementNode i c 0 c
JumpStmtNode A TreeNode i StatementNode i k 0 TreeNode label k
ExprNode A TreeNode c 0 c
FieldAccessNode A ExprNode i NamedNode i k 0 NameNode name k
SingleExprNode A ExprNode k 0 ExprNode expr k
SingleOpNode A SingleExprNode c 1 ExprNode expr c
IncrDecrNode A SingleOpNode c 1 ExprNode expr c
UnaryArithNode A SingleOpNode c 1 ExprNode expr c
DoubleExprNode A ExprNode k 0 ExprNode expr1 ExprNode expr2 k
BinaryOpNode A DoubleExprNode c 2 ExprNode expr1 ExprNode expr2 c
BinaryArithNode A BinaryOpNode c 2 ExprNode expr1 ExprNode expr2 c
BinaryOpAssignNode A DoubleExprNode c 2 ExprNode expr1 ExprNode expr2 c
BinaryArithAssignNode A BinaryOpAssignNode c 2 ExprNode expr1 ExprNode expr2 c
ShiftNode A BinaryOpNode c 2 ExprNode expr1 ExprNode expr2 c
ShiftAssignNode A BinaryOpAssignNode c 2 ExprNode expr1 ExprNode expr2 c
RelationNode A BinaryOpNode c 2 ExprNode expr1 ExprNode expr2 c
EqualityNode A BinaryOpNode c 2 ExprNode expr1 ExprNode expr2 c
BitwiseNode A BinaryOpNode c 2 ExprNode expr1 ExprNode expr2 c
BitwiseAssignNode A BinaryOpAssignNode c 2 ExprNode expr1 ExprNode expr2 c
LogCondNode A BinaryOpNode c 2 ExprNode expr1 ExprNode expr2 c
OuterClassAccessNode A ExprNode k 0 TypeNameNode type k
UserTypeDeclNode A TreeNode i NamedNode ModifiedNode i k 0 int modifiers NameNode name List interfaces List members k
LiteralNode A ExprNode k 0 String literal k

// literals
IntLitNode C LiteralNode c 1 String literal c
LongLitNode C LiteralNode c 1 String literal c
FloatLitNode C LiteralNode c 1 String literal c
DoubleLitNode C LiteralNode c 1 String literal c
BoolLitNode C LiteralNode c 1 String literal c
CharLitNode C LiteralNode c 1 String literal c
StringLitNode C LiteralNode c 1 String literal c

// types
BoolTypeNode S PrimitiveTypeNode
CharTypeNode S PrimitiveTypeNode
ByteTypeNode S PrimitiveTypeNode
ShortTypeNode S PrimitiveTypeNode
IntTypeNode S PrimitiveTypeNode
FloatTypeNode S PrimitiveTypeNode
LongTypeNode S PrimitiveTypeNode
DoubleTypeNode S PrimitiveTypeNode
TypeNameNode C ReferenceTypeNode i NamedNode i k 0 NameNode name k
ArrayTypeNode C ReferenceTypeNode k 0 TypeNode baseType k
VoidTypeNode S TypeNode

// Types used by the parser that don't appear in the finished ASTs.

// initExpr may be ABSENT
DeclaratorNode CN TreeNode i NamedNode i k 0 int dims NameNode name TreeNode initExpr k

// Types that don't arise during parsing.

NullTypeNode SN TypeNode
ArrayInitTypeNode SN TypeNode

// Declarations

CompileUnitNode C TreeNode k 0 TreeNode pkg List imports List defTypes k
ImportNode C TreeNode i NamedNode i k 0 NameNode name k
ImportOnDemandNode C TreeNode i NamedNode i k 0 NameNode name k

ClassDeclNode C UserTypeDeclNode i NamedNode ModifiedNode i k 4 int modifiers NameNode name List interfaces List members TreeNode superClass k

FieldDeclNode C VarInitDeclNode c 4 int modifiers TypeNode defType NameNode name TreeNode initExpr c
LocalVarDeclNode C VarInitDeclNode i StatementNode i c 4 int modifiers TypeNode defType NameNode name TreeNode initExpr c

InvokableDeclNode A TreeNode i NamedNode ModifiedNode i k 0 int modifiers NameNode name List params List throwsList k
// body may be absent
MethodDeclNode C InvokableDeclNode k 4 int modifiers NameNode name List params List throwsList TreeNode body TypeNode returnType k
ConstructorDeclNode C InvokableDeclNode k 4 int modifiers NameNode name List params List throwsList BlockNode body ConstructorCallNode constructorCall k

ThisConstructorCallNode C ConstructorCallNode c 1 List args c
SuperConstructorCallNode C ConstructorCallNode c 1 List args c
StaticInitNode C TreeNode k 0 BlockNode block k
InstanceInitNode C TreeNode k 0 BlockNode block k
InterfaceDeclNode C UserTypeDeclNode k 4 int modifiers NameNode name List interfaces List members k
ParameterNode C VarDeclNode c 3 int modifiers TypeNode defType NameNode name c

// Statements

BlockNode C TreeNode i StatementNode i k 0 List stmts k
EmptyStmtNode C TreeNode i StatementNode i c 0 c
LabeledStmtNode C TreeNode i NamedNode StatementNode i k 0 NameNode name StatementNode stmt k
IfStmtNode C TreeNode i StatementNode i k 0 ExprNode condition StatementNode thenPart TreeNode elsePart k
SwitchNode C TreeNode i StatementNode i k 0 ExprNode expr List switchBlocks k
// expr may be absent
CaseNode C TreeNode k 0 TreeNode expr k
SwitchBranchNode C TreeNode k 0 List cases List stmts k
LoopNode C IterationNode k 0 TreeNode foreStmt ExprNode test TreeNode aftStmt k
ExprStmtNode C TreeNode i StatementNode i k 0 ExprNode expr k
UserTypeDeclStmtNode C TreeNode i StatementNode i k 0 UserTypeDeclNode defType k

// test will be a BoolLitNode("true") in "for(;;)"
ForNode C IterationNode k 0 List init ExprNode test List update StatementNode stmt k

// label may be absent !!!
BreakNode C JumpStmtNode k 1 TreeNode label k
// label may be absent
ContinueNode C JumpStmtNode k 1 TreeNode label k

// expr may be absent
ReturnNode C TreeNode i StatementNode i k 0 TreeNode expr k

ThrowNode C TreeNode i StatementNode i k 0 ExprNode expr k
SynchronizedNode C TreeNode i StatementNode i k 0 ExprNode expr TreeNode stmt k
CatchNode C TreeNode k 0 ParameterNode param BlockNode block k

// finly may be ABSENT
TryNode C TreeNode i StatementNode i k 0 BlockNode block List catches TreeNode finly k

// Expressions

ArrayInitNode C ExprNode k 0 List initializers k

NullPntrNode C ExprNode c 0 c
ThisNode C ExprNode c 0 c
ArrayAccessNode C ExprNode k 0 ExprNode array ExprNode index k
ObjectNode C ExprNode i NamedNode i k 0 NameNode name k
ObjectFieldAccessNode C FieldAccessNode k 1 NameNode name TreeNode object k
SuperFieldAccessNode C FieldAccessNode k 1 NameNode name k
TypeFieldAccessNode C FieldAccessNode k 1  NameNode name TypeNameNode fType k
ThisFieldAccessNode C FieldAccessNode k 1 NameNode name k
TypeClassAccessNode C ExprNode k 0 TypeNode fType k
OuterThisAccessNode C OuterClassAccessNode c 1 TypeNameNode type c
OuterSuperAccessNode C OuterClassAccessNode c 1 TypeNameNode type c
MethodCallNode C ExprNode k 0 ExprNode method List args k

// both may have an AbsentTreeNode as the enclosing instance if we are in static code
AllocateNode C ExprNode k 0 TypeNameNode dtype List args TreeNode enclosingInstance k
AllocateAnonymousClassNode C ExprNode k 0 TypeNameNode superType List superArgs List members TreeNode enclosingInstance k

AllocateArrayNode C ExprNode k 0 TypeNode dtype List dimExprs int dims TreeNode initExpr k
PostIncrNode C IncrDecrNode c 1 ExprNode expr c
PostDecrNode C IncrDecrNode c 1 ExprNode expr c
UnaryPlusNode C UnaryArithNode c 1 ExprNode expr c
UnaryMinusNode C UnaryArithNode c 1 ExprNode expr c
PreIncrNode C IncrDecrNode c 1 ExprNode expr c
PreDecrNode C IncrDecrNode c 1 ExprNode expr c
ComplementNode C SingleOpNode c 1 ExprNode expr c
NotNode C SingleOpNode c 1 ExprNode expr c
CastNode C ExprNode k 0 TypeNode dtype ExprNode expr k
MultNode C BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
DivNode C BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
RemNode C BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
PlusNode C BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
MinusNode C BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
LeftShiftLogNode C ShiftNode c 2 ExprNode expr1 ExprNode expr2 c
RightShiftLogNode C ShiftNode c 2 ExprNode expr1 ExprNode expr2 c
RightShiftArithNode C ShiftNode c 2 ExprNode expr1 ExprNode expr2 c
LTNode C RelationNode c 2 ExprNode expr1 ExprNode expr2 c
GTNode C RelationNode c 2 ExprNode expr1 ExprNode expr2 c
LENode C RelationNode c 2 ExprNode expr1 ExprNode expr2 c
GENode C RelationNode c 2 ExprNode expr1 ExprNode expr2 c
InstanceOfNode C ExprNode k 0 ExprNode expr TypeNode dtype k
EQNode C EqualityNode c 2 ExprNode expr1 ExprNode expr2 c
NENode C EqualityNode c 2 ExprNode expr1 ExprNode expr2 c
BitAndNode C BitwiseNode c 2 ExprNode expr1 ExprNode expr2 c
BitOrNode C BitwiseNode c 2 ExprNode expr1 ExprNode expr2 c
BitXorNode C BitwiseNode c 2 ExprNode expr1 ExprNode expr2 c
CandNode C LogCondNode c 2 ExprNode expr1 ExprNode expr2 c
CorNode C LogCondNode c 2 ExprNode expr1 ExprNode expr2 c
IfExprNode C ExprNode k 0 ExprNode expr1 ExprNode expr2 ExprNode expr3 k
AssignNode C DoubleExprNode c 2 ExprNode expr1 ExprNode expr2 c
MultAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
DivAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
RemAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
PlusAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
MinusAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
LeftShiftLogAssignNode C ShiftAssignNode c 2 ExprNode expr1 ExprNode expr2 c
RightShiftLogAssignNode C ShiftAssignNode c 2 ExprNode expr1 ExprNode expr2 c
RightShiftArithAssignNode C ShiftAssignNode c 2 ExprNode expr1 ExprNode expr2 c
BitAndAssignNode C BitwiseAssignNode c 2 ExprNode expr1 ExprNode expr2 c
BitXorAssignNode C BitwiseAssignNode c 2 ExprNode expr1 ExprNode expr2 c
BitOrAssignNode C BitwiseAssignNode c 2 ExprNode expr1 ExprNode expr2 c
