<cheader>
/* Copyright (c) 1998-1999 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the above
copyright notice and the following two paragraphs appear in all copies
of this software.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

                                        PT_COPYRIGHT_VERSION_2
                                        COPYRIGHTENDKEY

@ProposedRating Red (ctsay@eecs.berkeley.edu)
@AcceptedRating Red (ctsay@eecs.berkeley.edu)

*/

package ptolemy.lang.java;
</cheader>

<vheader>
import java.util.LinkedList;
import ptolemy.lang.IVisitor;
import ptolemy.lang.TreeNode;
</vheader>

<nheader>
import java.util.LinkedList;
import ptolemy.lang.TreeNode;
</nheader>

NamedNode I <none> m NameNode getName m m void setName NameNode name m
ModifiedNode I <none> m int getModifiers m m void setModifiers int modifiers m

NameNode C TreeNode k 0 TreeNode qualifier String ident k
TypeNode A TreeNode c 0 c
StatementNode A TreeNode c 0 c
FieldAccessNode A ExprNode c 0 c
AbsentTreeNode S TreeNode

// base
PrimitiveTypeNode A TypeNode c 0 c
ReferenceTypeNode A TypeNode c 0 c
ExprNode A TreeNode c 0 c
SingleExprNode A ExprNode k 0 ExprNode expr k
DoubleExprNode A ExprNode k 0 ExprNode expr1 ExprNode expr2 k
IncrDecrNode A SingleExprNode c 1 ExprNode expr c
UnaryArithNode A SingleExprNode c 1 ExprNode expr c
BinaryArithNode A DoubleExprNode c 2 ExprNode expr1 ExprNode expr2 c
BinaryArithAssignNode A DoubleExprNode c 2 ExprNode expr1 ExprNode expr2 c
ShiftNode A BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
ShiftAssignNode A BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
RelationNode A BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
EqualityNode A BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
BitwiseNode A BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
BitwiseAssignNode A BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
LogCondNode A BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
OuterClassAccessNode A ExprNode k 0 TypeNameNode type k

// literals
LiteralNode A ExprNode k 0 String literal k
IntLitNode C LiteralNode c 1 String literal c
LongLitNode C LiteralNode c 1 String literal c
FloatLitNode C LiteralNode c 1 String literal c
DoubleLitNode C LiteralNode c 1 String literal c
BoolLitNode C LiteralNode c 1 String literal c
CharLitNode C LiteralNode c 1 String literal c
StringLitNode C LiteralNode c 1 String literal c

// types
BoolTypeNode S PrimitiveTypeNode
CharTypeNode S PrimitiveTypeNode
ByteTypeNode S PrimitiveTypeNode
ShortTypeNode S PrimitiveTypeNode
IntTypeNode S PrimitiveTypeNode
FloatTypeNode S PrimitiveTypeNode
LongTypeNode S PrimitiveTypeNode
DoubleTypeNode S PrimitiveTypeNode
TypeNameNode C ReferenceTypeNode k 0 NameNode name k
ArrayTypeNode C ReferenceTypeNode k 0 TypeNode baseType k
VoidTypeNode S TypeNode

// Types used by the parser that don't appear in the finished ASTs.

// initExpr may be ABSENT
DeclaratorNode C TreeNode i NamedNode i k 0 int dims NameNode name TreeNode initExpr k

// Types that don't arise during parsing.

PackageNode C TreeNode i NamedNode i k 0 NameNode name k
NullTypeNode S TypeNode

// Declarations

CompileUnitNode C TreeNode k 0 TreeNode pkg LinkedList imports LinkedList defTypes k
ImportNode C TreeNode i NamedNode i k 0 NameNode name k
ImportOnDemandNode C TreeNode i NamedNode i k 0 NameNode name k

// may not work for anonymous classes
ClassDeclNode C ReferenceTypeNode i NamedNode ModifiedNode i k 0 int modifiers NameNode name TreeNode superClass LinkedList interfaces LinkedList members k

FieldDeclNode C TreeNode i NamedNode ModifiedNode i k 0 int modifiers TypeNode dtype NameNode name TreeNode initExpr k
VarDeclNode C TreeNode i NamedNode ModifiedNode i k 0 int modifiers TypeNode dtype NameNode name TreeNode initExpr k

// body may be absent
MethodDeclNode C TreeNode i NamedNode ModifiedNode i k 0 int modifiers LinkedList params TypeNode returnType NameNode name LinkedList throwsList TreeNode body k

// TreeNode constructorCall should be more specific -- maybe make a ConstructorCall superclass of ThisCCN and SuperCCN
ConstructorDeclNode C TreeNode i ModifiedNode i k 0 int modifiers String ident LinkedList params LinkedList throwsList TreeNode constructorCall BlockNode body k

ThisConstructorCallNode C TreeNode k 0 LinkedList args k
StaticInitNode C TreeNode k 0 BlockNode block k
InstanceInitNode C TreeNode k 0 BlockNode block k
InterfaceDeclNode C TreeNode i NamedNode ModifiedNode i k 0 int modifiers NameNode name LinkedList interfaces LinkedList members k
ArrayInitNode C ExprNode k 0 LinkedList initializers k
ParameterNode C TreeNode i NamedNode ModifiedNode i k 0 int modifiers TypeNode dtype NameNode name k
SuperConstructorCallNode C TreeNode k 0 LinkedList args k
BlockNode C StatementNode k 0 LinkedList stmts k
EmptyStmtNode C StatementNode c 0 c
LabeledStmtNode C StatementNode i NamedNode i k 0 NameNode name TreeNode stmt k
IfStmtNode C StatementNode k 0 ExprNode condition TreeNode thenPart TreeNode elsePart k
SwitchNode C StatementNode k 0 ExprNode expr LinkedList switchBlocks k
// expr may be absent
CaseNode C TreeNode k 0 TreeNode expr k
SwitchBranchNode C TreeNode k 0 LinkedList cases LinkedList stmts k
LoopNode C TreeNode k 0 TreeNode foreStmt ExprNode test TreeNode aftStmt k

// test will be a BoolLitNode in "for(;;)"
ForNode C TreeNode k 0 LinkedList init ExprNode test LinkedList update TreeNode stmt k

// label may be absent !!!
BreakNode C StatementNode k 0 TreeNode label k
// label may be absent
ContinueNode C StatementNode k 0 TreeNode label k

// expr may be absent
ReturnNode C StatementNode k 0 TreeNode expr k

ThrowNode C StatementNode k 0 ExprNode expr k
SynchronizedNode C StatementNode k 0 ExprNode expr TreeNode stmt k
CatchNode C TreeNode k 0 ParameterNode param BlockNode block k

// finly may be ABSENT
TryNode C StatementNode k 0 BlockNode block LinkedList catches TreeNode finly k

// Expressions

NullPntrNode C ExprNode c 0 c
ThisNode C ExprNode c 0 c
ArrayAccessNode C ExprNode k 0 ExprNode array ExprNode index k
ObjectNode C ExprNode i NamedNode i k 0 NameNode name k
ObjectFieldAccessNode C FieldAccessNode i NamedNode i k 0 TreeNode object NameNode name k
SuperFieldAccessNode C FieldAccessNode i NamedNode i k 0 NameNode name k
TypeFieldAccessNode C FieldAccessNode i NamedNode i k 0 TypeNode fType NameNode name k
ThisFieldAccessNode C FieldAccessNode i NamedNode i k 0 TreeNode theClass NameNode name boolean local k
TypeClassAccessNode C ExprNode k 0 TypeNode fType k
OuterThisAccessNode C OuterClassAccessNode c 1 TypeNameNode type c
OuterSuperAccessNode C OuterClassAccessNode c 1 TypeNameNode type c
MethodCallNode C ExprNode k 0 TreeNode method LinkedList args k
AllocateNode C ExprNode k 0 TypeNode dtype LinkedList args k
AllocateArrayNode C ExprNode k 0 TypeNode dtype LinkedList dimExprs int dims TreeNode initExpr k
AllocateAnonymousClassNode C ExprNode k 0 TypeNode superType LinkedList superArgs LinkedList members k
PostIncrNode C IncrDecrNode c 1 ExprNode expr c
PostDecrNode C IncrDecrNode c 1 ExprNode expr c
UnaryPlusNode C UnaryArithNode c 1 ExprNode expr c
UnaryMinusNode C UnaryArithNode c 1 ExprNode expr c
PreIncrNode C IncrDecrNode c 1 ExprNode expr c
PreDecrNode C IncrDecrNode c 1 ExprNode expr c
ComplementNode C SingleExprNode c 1 ExprNode expr c
NotNode C SingleExprNode c 1 ExprNode expr c
CastNode C ExprNode k 0 TypeNode dtype ExprNode expr k
MultNode C BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
DivNode C BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
RemNode C BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
PlusNode C BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
MinusNode C BinaryArithNode c 2 ExprNode expr1 ExprNode expr2 c
LeftShiftLogNode C ShiftNode c 2 ExprNode expr1 ExprNode expr2 c
RightShiftLogNode C ShiftNode c 2 ExprNode expr1 ExprNode expr2 c
RightShiftArithNode C ShiftNode c 2 ExprNode expr1 ExprNode expr2 c
LTNode C RelationNode c 2 ExprNode expr1 ExprNode expr2 c
GTNode C RelationNode c 2 ExprNode expr1 ExprNode expr2 c
LENode C RelationNode c 2 ExprNode expr1 ExprNode expr2 c
GENode C RelationNode c 2 ExprNode expr1 ExprNode expr2 c
InstanceOfNode C ExprNode k 0 ExprNode expr TypeNode dtype k
EQNode C EqualityNode c 2 ExprNode expr1 ExprNode expr2 c
NENode C EqualityNode c 2 ExprNode expr1 ExprNode expr2 c
BitAndNode C BitwiseNode c 2 ExprNode expr1 ExprNode expr2 c
BitOrNode C BitwiseNode c 2 ExprNode expr1 ExprNode expr2 c
BitXorNode C BitwiseNode c 2 ExprNode expr1 ExprNode expr2 c
CandNode C LogCondNode c 2 ExprNode expr1 ExprNode expr2 c
CorNode C LogCondNode c 2 ExprNode expr1 ExprNode expr2 c
IfExprNode C ExprNode k 0 ExprNode expr1 ExprNode expr2 ExprNode expr3 k
AssignNode C DoubleExprNode c 2 ExprNode expr1 ExprNode expr2 c
MultAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
DivAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
RemAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
PlusAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
MinusAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
LeftShiftLogAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
RightShiftLogAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
RightShiftArithAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
BitAndAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
BitXorAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c
BitOrAssignNode C BinaryArithAssignNode c 2 ExprNode expr1 ExprNode expr2 c


