package ptolemy.actor.ptalon.demo;

import java.util.List;
import java.util.concurrent.BlockingQueue;

import ptolemy.kernel.util.IllegalActionException;

public abstract class MapReduceAlgorithm extends Thread {

    public synchronized boolean isReduceFinished() throws IllegalActionException {
        if (_threadError) {
            throw new IllegalActionException("Error writing to key " + reduceKey);
        }
        return _threadDone;
    }
    
    /**
     * Subclasses should implement their map method here.
     * @param key The key passed to the map method.
     * @param value The value passed to the map method.
     * @return The list of key value pairs for the given input.
     */
    public abstract List<KeyValuePair> map(String key, String value);

    /**
     * Sublcasses should implement their reduce method here,
     * calling the take method of the BlockingQueue to get 
     * the next value, and checking the parameter noMoreInputs
     * to test if no more values can be put on the queue.  The
     * last value put on the queue may be the empty string.  If
     * this is the case, just discard it.
     * @param key The key to reduce over.
     * @param value The queue of values in reduction.
     * @return The reduced list of valeus.
     */
    public abstract List<String> reduce(String key, BlockingQueue<String> values)
            throws InterruptedException;

    /**
     * This is used to call the reduce algorithm.
     */
    public void run() {
        _threadDone = false;
        _threadError = false;
        try {
            reduceOutput = reduce(reduceKey, reduceValues);
        } catch (InterruptedException e) {
            _threadError = true;
        }
        _threadDone = true;
    }

    /**
     * Set this true when no more inputs values will be given to the
     * reduce method queue.
     */
    public synchronized void setNoMoreInputs() {
        _noMoreInputs = true;
    }
       
    /**
     * The key for the reduce algorithm, which should be set externally.
     */
    public String reduceKey;

    /**
     * The values for the reduce algorithm, which should be set externally.
     */
    public BlockingQueue<String> reduceValues;

    /**
     * The list generated by the reduce algorithm, which should be read
     * externally.
     */
    public List<String> reduceOutput;

    /**
     * @return true if no more elements will be added to the list.
     */
    protected synchronized boolean isQueueEmpty() {
        return reduceValues.size() == 0 && _noMoreInputs;
    }
    
    /**
     * True when the run method is done being called.
     */
    private boolean _threadDone = false;

    /**
     * True if an exception was thrown acessing the blocking queue.
     */
    private boolean _threadError = false;    
    
    /**
     * This is set externally to true when the reduceValues queue no longer
     * needs to accept values.
     */
    private boolean _noMoreInputs = false;


}
