<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="mapEntitiesToSVG" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{60, 65}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 94, 1325, 792}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1091, 682]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0000000000000016">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{142.03622819767446, 181.64163335755805}">
    </property>
    <entity name="ImageAnnotate" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor annotates an image provided at the _image_ input&#10; *  by rendering an SVG graphic overlaid on the image.&#10; *&#10; *  The _graphic_ input, if provided, gives an SVG specification of the graphic.&#10; *  Alternatively, if a _graphic_ input is not provided, or the _graphic_ input&#10; *  is empty, the _graphicURI_ input can provide a resource identifier for the graphic.&#10; *  This can be a URL or a local resource (a file) available on the host.&#10; *  Note that most hosts will restrict locations from which files can be read.&#10; *  Usually they will allow to read files in the directory where the swarmlet is located&#10; *  on the file system, or in a subdirectory of that directory.&#10; *  To read such a file, give a path relative to the location of the swarmlet.&#10; *&#10; *  The _translate_&#10; *  input can be used to shift the graphic in the X and Y directions,&#10; *  and the _rotate_ input can used to rotate the graphic.&#10; *&#10; *  The _options_ input can have the following fields:&#10; *  * __XOffset__: The horizontal offset for the graphic. If this is specified&#10; *    and a _translate_ input is also provided, the both offsets are applied.&#10; *  * __YOffset__: The vertical offset for the graphic. If this is specified&#10; *    and a _translate_ input is also provided, the both offsets are applied.&#10; *  &#10; *  @accessor image/ImageAnnotate&#10; *  @input image The image to annotate.&#10; *  @input graphic The location of an SVG graphic to overlay on the image.&#10; *  @input translate An offset to apply to the graphic, as two element array specifying&#10; *   horizontal and vertical offsets in pixels.&#10; *  @input options A JSON object specifying options.&#10; *  @output output The filtered image.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;var imageFilters = require('imageFilters');&#10;&#10;exports.setup = function() {&#10;    input('image');&#10;    input('graphic', {'value':'', 'type':'string'});&#10;    input('graphicURI', {'value':'', 'type':'string'});&#10;    input('scale', {'value':1.0, 'type':'number'});&#10;    input('rotation', {'value':0.0, 'type':'number'});&#10;    input('translate');&#10;    input('options', {'value':'', 'type':'JSON'});&#10;    output('output');&#10;}&#10;&#10;exports.initialize = function() {&#10;    addInputHandler('image', function() {&#10;        var image = get('image');&#10;        var options = get('options');&#10;        if (options === null) {&#10;            options = {};&#10;        }&#10;        &#10;        var scale = get('scale');&#10;        if (scale != null) {&#10;            // Combine with scale options, if specified.&#10;            if (options['Scale']) {&#10;                scale *= options['Scale'];&#10;            }&#10;            options['Scale'] = scale;&#10;        }&#10;        &#10;        var rotation = get('rotation');&#10;        if (rotation != null) {&#10;            // Combine with rotation options, if specified.&#10;            if (options['Rotation']) {&#10;                rotation += options['Rotation'];&#10;            }&#10;            options['Rotation'] = rotation;&#10;        }&#10;            &#10;        var translate = get('translate');&#10;        if (translate !== null &amp;&amp; translate[0] !== null &amp;&amp; translate[1] !== null) {&#10;            // Combine with offset options, if specified.&#10;            var xOffset = translate[0];&#10;            if (options['XOffset']) {&#10;                xOffset += options['XOffset'];&#10;            }&#10;            options['XOffset'] = xOffset;&#10;            &#10;            var yOffset = translate[1];&#10;            if (options['YOffset']) {&#10;                yOffset += options['YOffset'];&#10;            }&#10;            options['YOffset'] = yOffset;&#10;        }&#10;        var graphic = get('graphic');&#10;        if (graphic) {&#10;            options['Graphic'] = graphic;&#10;        } else {&#10;            var graphicURI = get('graphicURI');&#10;            if (graphicURI) {&#10;                // Second argument is a timeout.&#10;                options['Graphic'] = getResource(graphicURI, 3000);&#10;            }&#10;        }&#10;        var result = imageFilters.filter(image, 'Annotate', options);&#10;        send('output', result);&#10;    });&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/image/ImageAnnotate.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor annotates an image provided at the &lt;em&gt;image&lt;/em&gt; input&#10; by rendering an SVG graphic overlaid on the image.&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;graphic&lt;/em&gt; input, if provided, gives an SVG specification of the graphic.&#10; Alternatively, if a &lt;em&gt;graphic&lt;/em&gt; input is not provided, or the &lt;em&gt;graphic&lt;/em&gt; input&#10; is empty, the &lt;em&gt;graphicURI&lt;/em&gt; input can provide a resource identifier for the graphic.&#10; This can be a URL or a local resource (a file) available on the host.&#10; Note that most hosts will restrict locations from which files can be read.&#10; Usually they will allow to read files in the directory where the swarmlet is located&#10; on the file system, or in a subdirectory of that directory.&#10; To read such a file, give a path relative to the location of the swarmlet.&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;translate&lt;/em&gt;&#10; input can be used to shift the graphic in the X and Y directions,&#10; and the &lt;em&gt;rotate&lt;/em&gt; input can used to rotate the graphic.&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;options&lt;/em&gt; input can have the following fields:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;strong&gt;XOffset&lt;/strong&gt;: The horizontal offset for the graphic. If this is specified&#10;and a &lt;em&gt;translate&lt;/em&gt; input is also provided, the both offsets are applied.&lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;YOffset&lt;/strong&gt;: The vertical offset for the graphic. If this is specified&#10;and a &lt;em&gt;translate&lt;/em&gt; input is also provided, the both offsets are applied.&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="image (port)" class="ptolemy.kernel.util.StringAttribute" value="undefined The image to annotate.">
            </property>
            <property name="graphic (port)" class="ptolemy.kernel.util.StringAttribute" value="undefined The location of an SVG graphic to overlay on the image.">
            </property>
            <property name="translate (port)" class="ptolemy.kernel.util.StringAttribute" value="undefined An offset to apply to the graphic, as two element array specifying&#10;  horizontal and vertical offsets in pixels.">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="undefined A JSON object specifying options.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="undefined The filtered image.">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[410.0, 255.0]">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="graphic" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="graphicURI" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="scale" class="ptolemy.actor.parameters.PortParameter" value="2">
        </property>
        <port name="graphic" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="graphicURI" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="image" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="scale" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="rotation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="translate" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ImageDisplay" class="ptolemy.actor.lib.image.ImageDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={218, 132, 600, 644}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_pictureSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 600]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[495.0, 165.0]">
        </property>
    </entity>
    <entity name="ImageReader" class="ptolemy.actor.lib.image.ImageReader">
        <property name="fileOrURL" class="ptolemy.data.expr.FileParameter" value="/Users/matt.weber/Desktop/White_square.jpg">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 170.0]">
        </property>
        <property name="DocAttribute" class="ptolemy.vergil.basic.DocAttribute">
        </property>
    </entity>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{-105, 195}">
        </property>
    </entity>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="mapManager = require('mapManager');&#10;&#10;exports.initialize = function(){&#10;	&#10;	var myCoords = new mapManager.CoordinateSystem(&quot;myCoordsName&quot;);&#10;	var myMap = new mapManager.Map(&quot;myMapName&quot; , mapManager.SpaceTypeEnum.EUCLIDEAN, myCoords);&#10;	mapManager.registerMap(myMap);&#10;	&#10;	var cat = new mapManager.Entity(&quot;cat&quot;);&#10;	mapManager.registerEntity(cat);&#10;	myMap.addEntity(cat);&#10;	&#10;	var catMapSource = new mapManager.MapSource(&quot;petTracker&quot;);&#10;	var catTimestamp = Date.UTC(2015, 11);&#10;	&#10;	var catMetadata = new mapManager.ObservationMetadata(catMapSource, catTimestamp);&#10;	var catCenter = [ 10, 15 ];&#10;	var catPose = new mapManager.Quaternion(1,0,0,0);&#10;	var catShape = [ [1,1], [-1,1], [-1,-1], [1,-1] ];&#10;	&#10;&#10;	var catLocation = new mapManager.Placement(catMetadata, catCenter,&#10;			catPose, catShape);&#10;	&#10;	cat.setPlacement(catLocation);&#10;	&#10;	&#10;	var dog = new mapManager.Entity(&quot;dog&quot;);&#10;	mapManager.registerEntity(dog);&#10;	myMap.addEntity(dog);&#10;	&#10;	var dogMapSource = new mapManager.MapSource(&quot;petTracker&quot;);&#10;	var dogTimestamp = Date.UTC(2015, 11);&#10;	&#10;	var dogMetadata = new mapManager.ObservationMetadata(dogMapSource, dogTimestamp);&#10;	var dogCenter = [ 20, 35 ];&#10;	var dogPose = new mapManager.Quaternion(1,0,0,0);&#10;	var dogShape = [ [1,1], [-1,1], [-1,-1], [1,-1] ];&#10;	&#10;&#10;	var dogLocation = new mapManager.Placement(dogMetadata, dogCenter,&#10;			dogPose, dogShape);&#10;	&#10;	dog.setPlacement(dogLocation);&#10;	&#10;	var image = myMap.mapEntitiesToSVG(400,400);&#10;	send(&quot;output&quot;, image);&#10;&#10;}">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{55.0, 305.0}">
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
            </property>
        </port>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={470, 346, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{325, 70}">
        </property>
    </entity>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[270.0, 280.0]">
        </vertex>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[315.0, 145.0]">
        </vertex>
    </relation>
    <link port="ImageAnnotate.graphic" relation="relation5"/>
    <link port="ImageAnnotate.image" relation="relation2"/>
    <link port="ImageAnnotate.output" relation="relation3"/>
    <link port="ImageDisplay.input" relation="relation3"/>
    <link port="ImageReader.output" relation="relation2"/>
    <link port="ImageReader.trigger" relation="relation4"/>
    <link port="SingleEvent.output" relation="relation4"/>
    <link port="JavaScript.output" relation="relation5"/>
    <link port="Display.input" relation="relation5"/>
</entity>
