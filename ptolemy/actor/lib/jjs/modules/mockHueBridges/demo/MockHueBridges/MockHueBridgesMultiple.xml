<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="MockHueBridgesMultiple" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={59, 63, 1203, 615}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[975, 498]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.8000000000000007">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{547.7562028894473, 281.095555904522}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[70.0, 50.0]">
        </property>
    </property>
    <property name="WebServer" class="org.ptolemy.ptango.lib.WebServer">
        <property name="preferredPort" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="resourceLocation" class="ptolemy.data.expr.FileParameter" value="$CLASSPATH/org/ptolemy/ptango/test/auto/pages">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[790.0, 85.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Test multiple Hue accessors using the MockHueBridge accessor&#10;as a substitute for a real Hue bridge.&#10;&#10;Each Hue accessor checks that the bridge is accessible,&#10;registers a new username, gets the status of all lights,&#10;then sets the status of one of the lights.&#10;&#10;Please check console window for output.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[170.0, 25.0]">
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="port" class="ptolemy.data.expr.Parameter" value="8078">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[895.0, 50.0]">
        </property>
    </property>
    <property name="bridgeIPAddress" class="ptolemy.data.expr.Parameter" value="&quot;localhost&quot;">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[895.0, 65.0]">
        </property>
    </property>
    <property name="numPutRequests" class="ptolemy.data.expr.Parameter" value="2">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{895.0, 80.0}">
        </property>
    </property>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[205.0, 240.0]">
        </property>
    </entity>
    <entity name="Discrete TimeDelay" class="ptolemy.actor.lib.TimeDelay">
        <property name="delay" class="ptolemy.actor.parameters.PortParameter" value="10">
        </property>
        <property name="minimumDelay" class="ptolemy.data.expr.Parameter" value="5.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[340.0, 240.0]">
        </property>
    </entity>
    <entity name="Service" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[200.0, 460.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={47, 0, 1273, 728}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1045, 550]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0000000000000004">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{958.1522691082803, 338.68570859872614}">
        </property>
        <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Route incoming GET, POST and PUT requests to MockHueBridge accessors.">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[745.0, 115.0]">
            </property>
        </property>
        <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Stop model after 2 PUT requests">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1160.0, 575.0]">
            </property>
        </property>
        <port name="done" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1365.0, 540.0]">
            </property>
        </port>
        <entity name="HttpActor" class="org.ptolemy.ptango.lib.HttpActor">
            <property name="path" class="ptolemy.data.expr.StringParameter" value="/*">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[820.0, 325.0]">
            </property>
            <port name="postBody" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
            <port name="putBody" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
                </property>
            </port>
        </entity>
        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[830.0, 215.0]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="EAST">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="WEST">
                </property>
            </port>
        </entity>
        <entity name="Const2" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;GET&quot;">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1000.0, 315.0]">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;PUT&quot;">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[929.0937805175781, 448.86460876464844]">
            </property>
        </entity>
        <entity name="MicrostepDelay2" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[821.9267272949219, 507.6922912597656]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="EAST">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="WEST">
                </property>
            </port>
        </entity>
        <entity name="MicrostepDelay3" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1205.0, 540.0]">
            </property>
        </entity>
        <entity name="Test" class="ptolemy.actor.lib.Test">
            <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;{\&quot;lights\&quot;:{\&quot;1\&quot;:{\&quot;state\&quot;:{\&quot;on\&quot;:true,\&quot;bri\&quot;:255,\&quot;hue\&quot;:65280,\&quot;sat\&quot;:255,\&quot;xy\&quot;:[0.5128,0.4147],\&quot;ct\&quot;:467,\&quot;alert\&quot;:\&quot;none\&quot;,\&quot;effect\&quot;:\&quot;none\&quot;,\&quot;colormode\&quot;:\&quot;xy\&quot;,\&quot;reachable\&quot;:true},\&quot;type\&quot;:\&quot;Test light\&quot;,\&quot;name\&quot;:\&quot;Light 1\&quot;,\&quot;modelid\&quot;:\&quot;TESTMODEL\&quot;,\&quot;swversion\&quot;:\&quot;1\&quot;,\&quot;pointsymbol\&quot;:{\&quot;1\&quot;:\&quot;none\&quot;,\&quot;2\&quot;:\&quot;none\&quot;,\&quot;3\&quot;:\&quot;none\&quot;,\&quot;4\&quot;:\&quot;none\&quot;,\&quot;5\&quot;:\&quot;none\&quot;,\&quot;6\&quot;:\&quot;none\&quot;,\&quot;7\&quot;:\&quot;none\&quot;,\&quot;8\&quot;:\&quot;none\&quot;}},\&quot;2\&quot;:{\&quot;state\&quot;:{\&quot;on\&quot;:false,\&quot;bri\&quot;:0,\&quot;hue\&quot;:0,\&quot;sat\&quot;:0,\&quot;xy\&quot;:[0,0],\&quot;ct\&quot;:0,\&quot;alert\&quot;:\&quot;none\&quot;,\&quot;effect\&quot;:\&quot;none\&quot;,\&quot;colormode\&quot;:\&quot;hs\&quot;,\&quot;reachable\&quot;:true},\&quot;type\&quot;:\&quot;Test light\&quot;,\&quot;name\&quot;:\&quot;Light 2\&quot;,\&quot;modelid\&quot;:\&quot;TESTMODEL\&quot;,\&quot;swversion\&quot;:\&quot;1\&quot;,\&quot;pointsymbol\&quot;:{\&quot;1\&quot;:\&quot;none\&quot;,\&quot;2\&quot;:\&quot;none\&quot;,\&quot;3\&quot;:\&quot;none\&quot;,\&quot;4\&quot;:\&quot;none\&quot;,\&quot;5\&quot;:\&quot;none\&quot;,\&quot;6\&quot;:\&quot;none\&quot;,\&quot;7\&quot;:\&quot;none\&quot;,\&quot;8\&quot;:\&quot;none\&quot;}}}}&quot;, &quot;{\&quot;lights\&quot;:{\&quot;1\&quot;:{\&quot;state\&quot;:{\&quot;on\&quot;:true,\&quot;bri\&quot;:88,\&quot;hue\&quot;:88,\&quot;sat\&quot;:88,\&quot;xy\&quot;:[0.5128,0.4147],\&quot;ct\&quot;:467,\&quot;alert\&quot;:\&quot;none\&quot;,\&quot;effect\&quot;:\&quot;none\&quot;,\&quot;colormode\&quot;:\&quot;xy\&quot;,\&quot;reachable\&quot;:true},\&quot;type\&quot;:\&quot;Test light\&quot;,\&quot;name\&quot;:\&quot;Light 1\&quot;,\&quot;modelid\&quot;:\&quot;TESTMODEL\&quot;,\&quot;swversion\&quot;:\&quot;1\&quot;,\&quot;pointsymbol\&quot;:{\&quot;1\&quot;:\&quot;none\&quot;,\&quot;2\&quot;:\&quot;none\&quot;,\&quot;3\&quot;:\&quot;none\&quot;,\&quot;4\&quot;:\&quot;none\&quot;,\&quot;5\&quot;:\&quot;none\&quot;,\&quot;6\&quot;:\&quot;none\&quot;,\&quot;7\&quot;:\&quot;none\&quot;,\&quot;8\&quot;:\&quot;none\&quot;}},\&quot;2\&quot;:{\&quot;state\&quot;:{\&quot;on\&quot;:false,\&quot;bri\&quot;:0,\&quot;hue\&quot;:0,\&quot;sat\&quot;:0,\&quot;xy\&quot;:[0,0],\&quot;ct\&quot;:0,\&quot;alert\&quot;:\&quot;none\&quot;,\&quot;effect\&quot;:\&quot;none\&quot;,\&quot;colormode\&quot;:\&quot;hs\&quot;,\&quot;reachable\&quot;:true},\&quot;type\&quot;:\&quot;Test light\&quot;,\&quot;name\&quot;:\&quot;Light 2\&quot;,\&quot;modelid\&quot;:\&quot;TESTMODEL\&quot;,\&quot;swversion\&quot;:\&quot;1\&quot;,\&quot;pointsymbol\&quot;:{\&quot;1\&quot;:\&quot;none\&quot;,\&quot;2\&quot;:\&quot;none\&quot;,\&quot;3\&quot;:\&quot;none\&quot;,\&quot;4\&quot;:\&quot;none\&quot;,\&quot;5\&quot;:\&quot;none\&quot;,\&quot;6\&quot;:\&quot;none\&quot;,\&quot;7\&quot;:\&quot;none\&quot;,\&quot;8\&quot;:\&quot;none\&quot;}}}}&quot;}">
            </property>
            <property name="trainingMode" class="ptolemy.actor.parameters.SharedParameter" value="false">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1350.0, 430.0]">
            </property>
        </entity>
        <entity name="Const3" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;POST&quot;">
            </property>
            <doc>Create a constant sequence.</doc>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1005.0, 380.0]">
            </property>
        </entity>
        <entity name="MicrostepDelay4" class="ptolemy.actor.lib.MicrostepDelay">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1190.0, 175.0]">
            </property>
            <port name="input" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="EAST">
                </property>
            </port>
            <port name="output" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="WEST">
                </property>
            </port>
        </entity>
        <entity name="SetVariable" class="ptolemy.actor.lib.SetVariable">
            <property name="variableName" class="ptolemy.kernel.util.StringAttribute" value="numPutRequests">
            </property>
            <property name="delayed" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="variableName">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[710.0, 575.0]">
            </property>
        </entity>
        <entity name="Expression" class="ptolemy.actor.lib.Expression">
            <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="numPutRequests + 1">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                </property>
                <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[565.0, 575.0]">
            </property>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
                <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
        </entity>
        <entity name="BooleanSwitch" class="ptolemy.actor.lib.BooleanSwitch">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1030.0, 550.0]">
            </property>
        </entity>
        <entity name="Const4" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[935.0, 550.0]">
            </property>
        </entity>
        <entity name="Comparator" class="ptolemy.actor.lib.logic.Comparator">
            <property name="comparison" class="ptolemy.kernel.util.StringAttribute" value="&gt;=">
                <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                    <property name="gt" class="ptolemy.kernel.util.StringAttribute" value="&gt;">
                    </property>
                    <property name="ge" class="ptolemy.kernel.util.StringAttribute" value="&gt;=">
                    </property>
                    <property name="lt" class="ptolemy.kernel.util.StringAttribute" value="&lt;">
                    </property>
                    <property name="le" class="ptolemy.kernel.util.StringAttribute" value="&lt;=">
                    </property>
                    <property name="eq" class="ptolemy.kernel.util.StringAttribute" value="==">
                    </property>
                </property>
            </property>
            <property name="tolerance" class="ptolemy.data.expr.Parameter" value="2">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.AttributeValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="comparison">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[948.8651428222656, 622.3766174316406]">
            </property>
        </entity>
        <entity name="Const5" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="2">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[863.8651428222656, 612.3766174316406]">
            </property>
        </entity>
        <entity name="Discard" class="ptolemy.actor.lib.Discard">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1115.0, 595.0]">
            </property>
        </entity>
        <entity name="MockHueBridge" class="org.terraswarm.accessor.JSAccessor">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.  // All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &lt;p&gt; This accessor simulates selected features of a Hue light bridge.  &#10; * It accepts commands in the form of http requests (URL and body), and &#10; * simulates the output of a Hue light bridge.  The simulated bridge has&#10; * two lights which all start in the off state with 0 for hue, saturation&#10; * and brightness.  The bridge's state is stored by the mockHueBridgeHelper &#10; * module.  &#10; * &lt;/p&gt;&#10; * &#10; *  &lt;p&gt; Some Hue examples are available here:&#10; *  http://www.developers.meethue.com/documentation/getting-started&#10; *  with the full API available here (free registration required):&#10; *  http://www.developers.meethue.com/philips-hue-api&#10; *  Please see the HueTermsOfUse.txt file for the API's terms of use.&#10; *  &lt;/p&gt;&#10; *  &#10; *  &lt;p&gt; The following API requests are implemented.  Each request &#10; *  (other than GET /  and POST /api/) is checked for user authorization.&#10; *  Any new username registration request will be accepted.&#10; *  &#10; *  GET /&#10; *  Check if bridge is available.  Returns {available : true}. &#10; *  &#10; *  POST /api/&#10; *  Add a user to list of registered users, optionally specifying a username.  &#10; *  Body is of the form &#10; *  {&quot;devicetype&quot;: &quot;my_hue_app#iphone peter&quot;} &#10; *  to request a newly generated username, where &quot;devicetype&quot; is of the form&#10; *  &lt;application_name&gt;#&lt;devicename&gt;&#10; *  Add a &quot;username&quot; field to explicitly specify the username,&#10; *  {&quot;devicetype&quot;: &quot;my_hue_app#iphone peter&quot;, &quot;username&quot;: &quot;peter&quot;}&#10; *  Returns a list with a single item indicating success or failure, and the&#10; *  (possibly newly generated) username, e.g.:&#10; *  [{&quot;success&quot;:{&quot;username&quot;: &quot;83b7780291a6ceffbe0bd049104df&quot;}}]&#10; *  &#10; *  GET /api/&lt;username&gt;/&#10; *  Get entire datastore. &#10; *  &#10; *  GET /api/&lt;username&gt;/lights/&#10; *  GET information on all lights.&#10; *  &#10; *  GET /api/&lt;username&gt;/lights/&lt;id&gt;/&#10; *  Get information about the light with id &lt;id&gt; .&#10; *  &#10; *  PUT /api/&lt;username&gt;/lights/&lt;id&gt;/state/&#10; *  Set the state of the light with id &lt;id&gt; .&#10; *  &#10; *  Other requests return {supported : false} .&#10; *  &lt;/p&gt;&#10; * &#10; *  @accessor devices/MockHueBridge&#10; *  @input {string} URI The path of the request.  &#10; *  @input {string} method The HTTP request method.&#10; *  @input {JSON} body The body of the HTTP request, if any.&#10; *  @output {string} response The response to be returned to the HTTP request.&#10; *  @output {JSON} state The state of the bridge.  May include multiple lights.&#10; *  @parameter {string} bridgeID The identifier of the bridge to access.  Can be &#10; *    any string.&#10; *  @author Elizabeth Osyk&#10; *  @version $$Id$$ &#10; */&#10;&#10;var mockHueBridges = require(&quot;mockHueBridges&quot;);&#10;var bridge;&#10;var connection;&#10;var handle;&#10;var transitionTime = 400;  // Default transition time is 400 ms&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  input('URI', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;&quot;&#10;  });&#10;  input('method', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;GET&quot;&#10;  });&#10;  input('body', {&#10;	  type: &quot;JSON&quot;,&#10;	  value: &quot;&quot;&#10;  });&#10;  output('response', {&#10;	    type: &quot;string&quot;,&#10;	    value: &quot;&quot;&#10;	  });&#10;  output('state', {&#10;		  type: &quot;JSON&quot;,&#10;		  value: &quot;&quot;&#10;  });&#10;  parameter('bridgeID', {&#10;	  type: &quot;string&quot;,&#10;	  value: &quot;Bridge1&quot;&#10;  });&#10;}&#10;&#10;/** Initialize the accessor.  Create a bridge object, connect to the bridge, and &#10; * initialize its state.&#10; */&#10;exports.initialize = function() {&#10;	// mockHueBridges.MockHueBridge is an object containing the results&#10;	// of a self-executing function.  This, in essence, creates a singleton&#10;	// object with a set of functions as its public API.&#10;	bridge = mockHueBridges.MockHueBridge;&#10;	connection = bridge.connect(get('bridgeID'));&#10;	connection.initializeToDefault();&#10;	&#10;	/** React to a change in the bridge state by outputting the new state.  */&#10;	connection.on('change', function(data) {&#10;		send('state', data);&#10;	});&#10;  &#10;	// Register input handler&#10;	handle = addInputHandler('URI', inputHandler);&#10;}&#10;&#10;/** Input HTTP request information and generate a response from the bridge.  */&#10;function inputHandler() {&#10;  var method = get('method').toString();&#10;  var uri = get('URI').toString();&#10;  var output;&#10;  &#10;  // Check if body exists.  If so, include the body in the command.&#10;  var body = get('body');&#10;  if (typeof body !== 'undefined') {&#10;	  output = connection.command(method, uri, body);&#10;  } else {&#10;	  output = connection.command(method, uri);&#10;  }&#10; &#10;  send('response', output);&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    removeInputHandler(handle);&#10;};&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/devices/MockHueBridge.js">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt; This accessor simulates selected features of a Hue light bridge.&lt;br&gt;It accepts commands in the form of http requests (URL and body), and &#10;simulates the output of a Hue light bridge.  The simulated bridge has&#10;two lights which all start in the off state with 0 for hue, saturation&#10;and brightness.  The bridge's state is stored by the mockHueBridgeHelper &#10;module.&lt;br&gt;&lt;/p&gt;&#10;&#10; &lt;p&gt; Some Hue examples are available here:&#10; http://www.developers.meethue.com/documentation/getting-started&#10; with the full API available here (free registration required):&#10; http://www.developers.meethue.com/philips-hue-api&#10; Please see the HueTermsOfUse.txt file for the API's terms of use.&#10; &lt;/p&gt;&#10;&#10; &lt;p&gt; The following API requests are implemented.  Each request &#10; (other than GET /  and POST /api/) is checked for user authorization.&#10; Any new username registration request will be accepted.&#10;&#10; GET /&#10; Check if bridge is available.  Returns {available : true}. &#10;&#10; POST /api/&#10; Add a user to list of registered users, optionally specifying a username.&lt;br&gt; Body is of the form &#10; {&amp;quot;devicetype&amp;quot;: &amp;quot;my_hue_app#iphone peter&amp;quot;} &#10; to request a newly generated username, where &amp;quot;devicetype&amp;quot; is of the form&#10; &lt;application_name&gt;#&lt;devicename&gt;&#10; Add a &amp;quot;username&amp;quot; field to explicitly specify the username,&#10; {&amp;quot;devicetype&amp;quot;: &amp;quot;my_hue_app#iphone peter&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;peter&amp;quot;}&#10; Returns a list with a single item indicating success or failure, and the&#10; (possibly newly generated) username, e.g.:&#10; [{&amp;quot;success&amp;quot;:{&amp;quot;username&amp;quot;: &amp;quot;83b7780291a6ceffbe0bd049104df&amp;quot;}}]&#10;&#10; GET /api/&lt;username&gt;/&#10; Get entire datastore. &#10;&#10; GET /api/&lt;username&gt;/lights/&#10; GET information on all lights.&#10;&#10; GET /api/&lt;username&gt;/lights/&lt;id&gt;/&#10; Get information about the light with id &lt;id&gt; .&#10;&#10; PUT /api/&lt;username&gt;/lights/&lt;id&gt;/state/&#10; Set the state of the light with id &lt;id&gt; .&#10;&#10; Other requests return {supported : false} .&#10; &lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Elizabeth Osyk">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
                </property>
                <property name="URI (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The path of the request.">
                </property>
                <property name="method (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The HTTP request method.">
                </property>
                <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;JSON&quot;]}) The body of the HTTP request, if any.">
                </property>
                <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The response to be returned to the HTTP request.">
                </property>
                <property name="state (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;JSON&quot;]}) The state of the bridge.  May include multiple lights.">
                </property>
                <property name="bridgeID (parameter)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The identifier of the bridge to access.  Can be &#10;   any string.">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1115.0, 280.0]">
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="URI" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="method" class="ptolemy.actor.parameters.PortParameter" value="GET">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="body" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="bridgeID" class="ptolemy.data.expr.Parameter" value="Bridge1">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <port name="URI" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="method" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="body" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="state" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
        </entity>
        <entity name="MockHueBridge2" class="org.terraswarm.accessor.JSAccessor">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.  // All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &lt;p&gt; This accessor simulates selected features of a Hue light bridge.  &#10; * It accepts commands in the form of http requests (URL and body), and &#10; * simulates the output of a Hue light bridge.  The simulated bridge has&#10; * two lights which all start in the off state with 0 for hue, saturation&#10; * and brightness.  The bridge's state is stored by the mockHueBridgeHelper &#10; * module.  &#10; * &lt;/p&gt;&#10; * &#10; *  &lt;p&gt; Some Hue examples are available here:&#10; *  http://www.developers.meethue.com/documentation/getting-started&#10; *  with the full API available here (free registration required):&#10; *  http://www.developers.meethue.com/philips-hue-api&#10; *  Please see the HueTermsOfUse.txt file for the API's terms of use.&#10; *  &lt;/p&gt;&#10; *  &#10; *  &lt;p&gt; The following API requests are implemented.  Each request &#10; *  (other than GET /  and POST /api/) is checked for user authorization.&#10; *  Any new username registration request will be accepted.&#10; *  &#10; *  GET /&#10; *  Check if bridge is available.  Returns {available : true}. &#10; *  &#10; *  POST /api/&#10; *  Add a user to list of registered users, optionally specifying a username.  &#10; *  Body is of the form &#10; *  {&quot;devicetype&quot;: &quot;my_hue_app#iphone peter&quot;} &#10; *  to request a newly generated username, where &quot;devicetype&quot; is of the form&#10; *  &lt;application_name&gt;#&lt;devicename&gt;&#10; *  Add a &quot;username&quot; field to explicitly specify the username,&#10; *  {&quot;devicetype&quot;: &quot;my_hue_app#iphone peter&quot;, &quot;username&quot;: &quot;peter&quot;}&#10; *  Returns a list with a single item indicating success or failure, and the&#10; *  (possibly newly generated) username, e.g.:&#10; *  [{&quot;success&quot;:{&quot;username&quot;: &quot;83b7780291a6ceffbe0bd049104df&quot;}}]&#10; *  &#10; *  GET /api/&lt;username&gt;/&#10; *  Get entire datastore. &#10; *  &#10; *  GET /api/&lt;username&gt;/lights/&#10; *  GET information on all lights.&#10; *  &#10; *  GET /api/&lt;username&gt;/lights/&lt;id&gt;/&#10; *  Get information about the light with id &lt;id&gt; .&#10; *  &#10; *  PUT /api/&lt;username&gt;/lights/&lt;id&gt;/state/&#10; *  Set the state of the light with id &lt;id&gt; .&#10; *  &#10; *  Other requests return {supported : false} .&#10; *  &lt;/p&gt;&#10; * &#10; *  @accessor devices/MockHueBridge&#10; *  @input {string} URI The path of the request.  &#10; *  @input {string} method The HTTP request method.&#10; *  @input {JSON} body The body of the HTTP request, if any.&#10; *  @output {string} response The response to be returned to the HTTP request.&#10; *  @output {JSON} state The state of the bridge.  May include multiple lights.&#10; *  @parameter {string} bridgeID The identifier of the bridge to access.  Can be &#10; *    any string.&#10; *  @author Elizabeth Osyk&#10; *  @version $$Id$$ &#10; */&#10;&#10;var mockHueBridges = require(&quot;mockHueBridges&quot;);&#10;var bridge;&#10;var connection;&#10;var handle;&#10;var transitionTime = 400;  // Default transition time is 400 ms&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  input('URI', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;&quot;&#10;  });&#10;  input('method', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;GET&quot;&#10;  });&#10;  input('body', {&#10;	  type: &quot;JSON&quot;,&#10;	  value: &quot;&quot;&#10;  });&#10;  output('response', {&#10;	    type: &quot;string&quot;,&#10;	    value: &quot;&quot;&#10;	  });&#10;  output('state', {&#10;		  type: &quot;JSON&quot;,&#10;		  value: &quot;&quot;&#10;  });&#10;  parameter('bridgeID', {&#10;	  type: &quot;string&quot;,&#10;	  value: &quot;Bridge1&quot;&#10;  });&#10;}&#10;&#10;/** Initialize the accessor.  Create a bridge object, connect to the bridge, and &#10; * initialize its state.&#10; */&#10;exports.initialize = function() {&#10;	// mockHueBridges.MockHueBridge is an object containing the results&#10;	// of a self-executing function.  This, in essence, creates a singleton&#10;	// object with a set of functions as its public API.&#10;	bridge = mockHueBridges.MockHueBridge;&#10;	connection = bridge.connect(get('bridgeID'));&#10;	connection.initializeToDefault();&#10;	&#10;	/** React to a change in the bridge state by outputting the new state.  */&#10;	connection.on('change', function(data) {&#10;		send('state', data);&#10;	});&#10;  &#10;	// Register input handler&#10;	handle = addInputHandler('URI', inputHandler);&#10;}&#10;&#10;/** Input HTTP request information and generate a response from the bridge.  */&#10;function inputHandler() {&#10;  var method = get('method').toString();&#10;  var uri = get('URI').toString();&#10;  var output;&#10;  &#10;  // Check if body exists.  If so, include the body in the command.&#10;  var body = get('body');&#10;  if (typeof body !== 'undefined') {&#10;	  output = connection.command(method, uri, body);&#10;  } else {&#10;	  output = connection.command(method, uri);&#10;  }&#10; &#10;  send('response', output);&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    removeInputHandler(handle);&#10;};&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/devices/MockHueBridge.js">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt; This accessor simulates selected features of a Hue light bridge.&lt;br&gt;It accepts commands in the form of http requests (URL and body), and &#10;simulates the output of a Hue light bridge.  The simulated bridge has&#10;two lights which all start in the off state with 0 for hue, saturation&#10;and brightness.  The bridge's state is stored by the mockHueBridgeHelper &#10;module.&lt;br&gt;&lt;/p&gt;&#10;&#10; &lt;p&gt; Some Hue examples are available here:&#10; http://www.developers.meethue.com/documentation/getting-started&#10; with the full API available here (free registration required):&#10; http://www.developers.meethue.com/philips-hue-api&#10; Please see the HueTermsOfUse.txt file for the API's terms of use.&#10; &lt;/p&gt;&#10;&#10; &lt;p&gt; The following API requests are implemented.  Each request &#10; (other than GET /  and POST /api/) is checked for user authorization.&#10; Any new username registration request will be accepted.&#10;&#10; GET /&#10; Check if bridge is available.  Returns {available : true}. &#10;&#10; POST /api/&#10; Add a user to list of registered users, optionally specifying a username.&lt;br&gt; Body is of the form &#10; {&amp;quot;devicetype&amp;quot;: &amp;quot;my_hue_app#iphone peter&amp;quot;} &#10; to request a newly generated username, where &amp;quot;devicetype&amp;quot; is of the form&#10; &lt;application_name&gt;#&lt;devicename&gt;&#10; Add a &amp;quot;username&amp;quot; field to explicitly specify the username,&#10; {&amp;quot;devicetype&amp;quot;: &amp;quot;my_hue_app#iphone peter&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;peter&amp;quot;}&#10; Returns a list with a single item indicating success or failure, and the&#10; (possibly newly generated) username, e.g.:&#10; [{&amp;quot;success&amp;quot;:{&amp;quot;username&amp;quot;: &amp;quot;83b7780291a6ceffbe0bd049104df&amp;quot;}}]&#10;&#10; GET /api/&lt;username&gt;/&#10; Get entire datastore. &#10;&#10; GET /api/&lt;username&gt;/lights/&#10; GET information on all lights.&#10;&#10; GET /api/&lt;username&gt;/lights/&lt;id&gt;/&#10; Get information about the light with id &lt;id&gt; .&#10;&#10; PUT /api/&lt;username&gt;/lights/&lt;id&gt;/state/&#10; Set the state of the light with id &lt;id&gt; .&#10;&#10; Other requests return {supported : false} .&#10; &lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Elizabeth Osyk">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
                </property>
                <property name="URI (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The path of the request.">
                </property>
                <property name="method (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The HTTP request method.">
                </property>
                <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;JSON&quot;]}) The body of the HTTP request, if any.">
                </property>
                <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The response to be returned to the HTTP request.">
                </property>
                <property name="state (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;JSON&quot;]}) The state of the bridge.  May include multiple lights.">
                </property>
                <property name="bridgeID (parameter)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The identifier of the bridge to access.  Can be &#10;   any string.">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1115.0, 360.0]">
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="URI" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="method" class="ptolemy.actor.parameters.PortParameter" value="POST">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="body" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="bridgeID" class="ptolemy.data.expr.Parameter" value="Bridge1">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <port name="URI" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="method" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="body" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="state" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
        </entity>
        <entity name="MockHueBridge3" class="org.terraswarm.accessor.JSAccessor">
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.  // All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &lt;p&gt; This accessor simulates selected features of a Hue light bridge.  &#10; * It accepts commands in the form of http requests (URL and body), and &#10; * simulates the output of a Hue light bridge.  The simulated bridge has&#10; * two lights which all start in the off state with 0 for hue, saturation&#10; * and brightness.  The bridge's state is stored by the mockHueBridgeHelper &#10; * module.  &#10; * &lt;/p&gt;&#10; * &#10; *  &lt;p&gt; Some Hue examples are available here:&#10; *  http://www.developers.meethue.com/documentation/getting-started&#10; *  with the full API available here (free registration required):&#10; *  http://www.developers.meethue.com/philips-hue-api&#10; *  Please see the HueTermsOfUse.txt file for the API's terms of use.&#10; *  &lt;/p&gt;&#10; *  &#10; *  &lt;p&gt; The following API requests are implemented.  Each request &#10; *  (other than GET /  and POST /api/) is checked for user authorization.&#10; *  Any new username registration request will be accepted.&#10; *  &#10; *  GET /&#10; *  Check if bridge is available.  Returns {available : true}. &#10; *  &#10; *  POST /api/&#10; *  Add a user to list of registered users, optionally specifying a username.  &#10; *  Body is of the form &#10; *  {&quot;devicetype&quot;: &quot;my_hue_app#iphone peter&quot;} &#10; *  to request a newly generated username, where &quot;devicetype&quot; is of the form&#10; *  &lt;application_name&gt;#&lt;devicename&gt;&#10; *  Add a &quot;username&quot; field to explicitly specify the username,&#10; *  {&quot;devicetype&quot;: &quot;my_hue_app#iphone peter&quot;, &quot;username&quot;: &quot;peter&quot;}&#10; *  Returns a list with a single item indicating success or failure, and the&#10; *  (possibly newly generated) username, e.g.:&#10; *  [{&quot;success&quot;:{&quot;username&quot;: &quot;83b7780291a6ceffbe0bd049104df&quot;}}]&#10; *  &#10; *  GET /api/&lt;username&gt;/&#10; *  Get entire datastore. &#10; *  &#10; *  GET /api/&lt;username&gt;/lights/&#10; *  GET information on all lights.&#10; *  &#10; *  GET /api/&lt;username&gt;/lights/&lt;id&gt;/&#10; *  Get information about the light with id &lt;id&gt; .&#10; *  &#10; *  PUT /api/&lt;username&gt;/lights/&lt;id&gt;/state/&#10; *  Set the state of the light with id &lt;id&gt; .&#10; *  &#10; *  Other requests return {supported : false} .&#10; *  &lt;/p&gt;&#10; * &#10; *  @accessor devices/MockHueBridge&#10; *  @input {string} URI The path of the request.  &#10; *  @input {string} method The HTTP request method.&#10; *  @input {JSON} body The body of the HTTP request, if any.&#10; *  @output {string} response The response to be returned to the HTTP request.&#10; *  @output {JSON} state The state of the bridge.  May include multiple lights.&#10; *  @parameter {string} bridgeID The identifier of the bridge to access.  Can be &#10; *    any string.&#10; *  @author Elizabeth Osyk&#10; *  @version $$Id$$ &#10; */&#10;&#10;var mockHueBridges = require(&quot;mockHueBridges&quot;);&#10;var bridge;&#10;var connection;&#10;var handle;&#10;var transitionTime = 400;  // Default transition time is 400 ms&#10;&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;  input('URI', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;&quot;&#10;  });&#10;  input('method', {&#10;    type: &quot;string&quot;,&#10;    value: &quot;GET&quot;&#10;  });&#10;  input('body', {&#10;	  type: &quot;JSON&quot;,&#10;	  value: &quot;&quot;&#10;  });&#10;  output('response', {&#10;	    type: &quot;string&quot;,&#10;	    value: &quot;&quot;&#10;	  });&#10;  output('state', {&#10;		  type: &quot;JSON&quot;,&#10;		  value: &quot;&quot;&#10;  });&#10;  parameter('bridgeID', {&#10;	  type: &quot;string&quot;,&#10;	  value: &quot;Bridge1&quot;&#10;  });&#10;}&#10;&#10;/** Initialize the accessor.  Create a bridge object, connect to the bridge, and &#10; * initialize its state.&#10; */&#10;exports.initialize = function() {&#10;	// mockHueBridges.MockHueBridge is an object containing the results&#10;	// of a self-executing function.  This, in essence, creates a singleton&#10;	// object with a set of functions as its public API.&#10;	bridge = mockHueBridges.MockHueBridge;&#10;	connection = bridge.connect(get('bridgeID'));&#10;	connection.initializeToDefault();&#10;	&#10;	/** React to a change in the bridge state by outputting the new state.  */&#10;	connection.on('change', function(data) {&#10;		send('state', data);&#10;	});&#10;  &#10;	// Register input handler&#10;	handle = addInputHandler('URI', inputHandler);&#10;}&#10;&#10;/** Input HTTP request information and generate a response from the bridge.  */&#10;function inputHandler() {&#10;  var method = get('method').toString();&#10;  var uri = get('URI').toString();&#10;  var output;&#10;  &#10;  // Check if body exists.  If so, include the body in the command.&#10;  var body = get('body');&#10;  if (typeof body !== 'undefined') {&#10;	  output = connection.command(method, uri, body);&#10;  } else {&#10;	  output = connection.command(method, uri);&#10;  }&#10; &#10;  send('response', output);&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    removeInputHandler(handle);&#10;};&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/devices/MockHueBridge.js">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt; This accessor simulates selected features of a Hue light bridge.&lt;br&gt;It accepts commands in the form of http requests (URL and body), and &#10;simulates the output of a Hue light bridge.  The simulated bridge has&#10;two lights which all start in the off state with 0 for hue, saturation&#10;and brightness.  The bridge's state is stored by the mockHueBridgeHelper &#10;module.&lt;br&gt;&lt;/p&gt;&#10;&#10; &lt;p&gt; Some Hue examples are available here:&#10; http://www.developers.meethue.com/documentation/getting-started&#10; with the full API available here (free registration required):&#10; http://www.developers.meethue.com/philips-hue-api&#10; Please see the HueTermsOfUse.txt file for the API's terms of use.&#10; &lt;/p&gt;&#10;&#10; &lt;p&gt; The following API requests are implemented.  Each request &#10; (other than GET /  and POST /api/) is checked for user authorization.&#10; Any new username registration request will be accepted.&#10;&#10; GET /&#10; Check if bridge is available.  Returns {available : true}. &#10;&#10; POST /api/&#10; Add a user to list of registered users, optionally specifying a username.&lt;br&gt; Body is of the form &#10; {&amp;quot;devicetype&amp;quot;: &amp;quot;my_hue_app#iphone peter&amp;quot;} &#10; to request a newly generated username, where &amp;quot;devicetype&amp;quot; is of the form&#10; &lt;application_name&gt;#&lt;devicename&gt;&#10; Add a &amp;quot;username&amp;quot; field to explicitly specify the username,&#10; {&amp;quot;devicetype&amp;quot;: &amp;quot;my_hue_app#iphone peter&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;peter&amp;quot;}&#10; Returns a list with a single item indicating success or failure, and the&#10; (possibly newly generated) username, e.g.:&#10; [{&amp;quot;success&amp;quot;:{&amp;quot;username&amp;quot;: &amp;quot;83b7780291a6ceffbe0bd049104df&amp;quot;}}]&#10;&#10; GET /api/&lt;username&gt;/&#10; Get entire datastore. &#10;&#10; GET /api/&lt;username&gt;/lights/&#10; GET information on all lights.&#10;&#10; GET /api/&lt;username&gt;/lights/&lt;id&gt;/&#10; Get information about the light with id &lt;id&gt; .&#10;&#10; PUT /api/&lt;username&gt;/lights/&lt;id&gt;/state/&#10; Set the state of the light with id &lt;id&gt; .&#10;&#10; Other requests return {supported : false} .&#10; &lt;/p&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Elizabeth Osyk">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
                </property>
                <property name="URI (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The path of the request.">
                </property>
                <property name="method (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The HTTP request method.">
                </property>
                <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;JSON&quot;]}) The body of the HTTP request, if any.">
                </property>
                <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The response to be returned to the HTTP request.">
                </property>
                <property name="state (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;JSON&quot;]}) The state of the bridge.  May include multiple lights.">
                </property>
                <property name="bridgeID (parameter)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The identifier of the bridge to access.  Can be &#10;   any string.">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[1115.0, 435.0]">
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="URI" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="method" class="ptolemy.actor.parameters.PortParameter" value="PUT">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="body" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="bridgeID" class="ptolemy.data.expr.Parameter" value="Bridge1">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <port name="URI" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="method" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="body" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
            <port name="response" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="state" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
                <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </port>
        </entity>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[765.0, 215.0]">
            </vertex>
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[965.0, 215.0]">
            </vertex>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[965.0, 270.0]">
            </vertex>
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[895.0, 410.0]">
            </vertex>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[1156.9267272949219, 507.6922912597656]">
            </vertex>
        </relation>
        <relation name="relation9" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[860.0, 470.0]">
            </vertex>
        </relation>
        <relation name="relation10" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation11" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[766.9267272949219, 507.6922912597656]">
            </vertex>
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[1205.0, 430.0]">
            </vertex>
        </relation>
        <relation name="relation13" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[970.0, 350.0]">
            </vertex>
        </relation>
        <relation name="relation15" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[1220.0, 350.0]">
            </vertex>
        </relation>
        <relation name="relation16" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[750.0, 175.0]">
            </vertex>
        </relation>
        <relation name="relation19" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation20" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[795.0, 575.0]">
            </vertex>
        </relation>
        <relation name="relation21" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation22" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation23" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation24" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation25" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation26" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation18" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="done" relation="relation10"/>
        <link port="HttpActor.response" relation="relation3"/>
        <link port="HttpActor.response" relation="relation11"/>
        <link port="HttpActor.response" relation="relation16"/>
        <link port="HttpActor.getRequestURI" relation="relation"/>
        <link port="HttpActor.postRequestURI" relation="relation13"/>
        <link port="HttpActor.postBody" relation="relation8"/>
        <link port="HttpActor.putRequestURI" relation="relation4"/>
        <link port="HttpActor.putBody" relation="relation9"/>
        <link port="MicrostepDelay.input" relation="relation5"/>
        <link port="MicrostepDelay.output" relation="relation3"/>
        <link port="Const2.output" relation="relation26"/>
        <link port="Const2.trigger" relation="relation"/>
        <link port="Const.output" relation="relation6"/>
        <link port="Const.trigger" relation="relation4"/>
        <link port="MicrostepDelay2.input" relation="relation7"/>
        <link port="MicrostepDelay2.output" relation="relation11"/>
        <link port="MicrostepDelay3.input" relation="relation24"/>
        <link port="MicrostepDelay3.output" relation="relation10"/>
        <link port="Test.input" relation="relation2"/>
        <link port="Const3.output" relation="relation18"/>
        <link port="Const3.trigger" relation="relation13"/>
        <link port="MicrostepDelay4.input" relation="relation15"/>
        <link port="MicrostepDelay4.output" relation="relation16"/>
        <link port="SetVariable.input" relation="relation19"/>
        <link port="SetVariable.output" relation="relation20"/>
        <link port="Expression.output" relation="relation19"/>
        <link port="Expression.trigger" relation="relation11"/>
        <link port="BooleanSwitch.input" relation="relation21"/>
        <link port="BooleanSwitch.control" relation="relation23"/>
        <link port="BooleanSwitch.trueOutput" relation="relation24"/>
        <link port="BooleanSwitch.falseOutput" relation="relation25"/>
        <link port="Const4.output" relation="relation21"/>
        <link port="Const4.trigger" relation="relation20"/>
        <link port="Comparator.left" relation="relation22"/>
        <link port="Comparator.right" relation="relation20"/>
        <link port="Comparator.output" relation="relation23"/>
        <link port="Const5.output" relation="relation22"/>
        <link port="Const5.trigger" relation="relation20"/>
        <link port="Discard.input" relation="relation25"/>
        <link port="MockHueBridge.URI" relation="relation"/>
        <link port="MockHueBridge.method" relation="relation26"/>
        <link port="MockHueBridge.response" relation="relation5"/>
        <link port="MockHueBridge2.URI" relation="relation13"/>
        <link port="MockHueBridge2.method" relation="relation18"/>
        <link port="MockHueBridge2.body" relation="relation8"/>
        <link port="MockHueBridge2.response" relation="relation15"/>
        <link port="MockHueBridge3.URI" relation="relation4"/>
        <link port="MockHueBridge3.method" relation="relation6"/>
        <link port="MockHueBridge3.body" relation="relation9"/>
        <link port="MockHueBridge3.response" relation="relation7"/>
        <link port="MockHueBridge3.state" relation="relation2"/>
    </entity>
    <entity name="Init" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[925.0, 140.0]">
        </property>
        <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
            <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 50.0]">
            </property>
        </entity>
        <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
            <property name="init" class="ptolemy.actor.parameters.PortParameter" value="WebServer.getAttribute(&quot;deployedPort&quot;).getToken().intValue()">
            </property>
            <property name="step" class="ptolemy.actor.parameters.PortParameter" value="0">
            </property>
            <doc>Create a sequence of tokens with increasing value</doc>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[195.0, 60.0]">
            </property>
        </entity>
        <entity name="SetVariable" class="ptolemy.actor.lib.SetVariable">
            <property name="variableName" class="ptolemy.kernel.util.StringAttribute" value="port">
            </property>
            <property name="delayed" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="variableName">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[300.0, 60.0]">
            </property>
        </entity>
        <entity name="SetVariable2" class="ptolemy.actor.lib.SetVariable">
            <property name="variableName" class="ptolemy.kernel.util.StringAttribute" value="numPutRequests">
            </property>
            <property name="delayed" class="ptolemy.data.expr.Parameter" value="false">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="variableName">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[340.0, 120.0]">
            </property>
        </entity>
        <entity name="Const" class="ptolemy.actor.lib.Const">
            <property name="value" class="ptolemy.data.expr.Parameter" value="0">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                </property>
                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[185.0, 120.0]">
            </property>
        </entity>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
            <vertex name="vertex1" value="[115.0, 50.0]">
            </vertex>
        </relation>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
        </relation>
        <link port="SingleEvent.output" relation="relation3"/>
        <link port="Ramp.output" relation="relation2"/>
        <link port="Ramp.trigger" relation="relation3"/>
        <link port="SetVariable.input" relation="relation2"/>
        <link port="SetVariable2.input" relation="relation"/>
        <link port="Const.output" relation="relation"/>
        <link port="Const.trigger" relation="relation3"/>
    </entity>
    <entity name="Stop" class="ptolemy.actor.lib.Stop">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[550.0, 460.0]">
        </property>
    </entity>
    <entity name="Const" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[440.0, 460.0]">
        </property>
    </entity>
    <entity name="Discrete TimeDelay2" class="ptolemy.actor.lib.TimeDelay">
        <property name="delay" class="ptolemy.actor.parameters.PortParameter" value="10">
        </property>
        <property name="minimumDelay" class="ptolemy.data.expr.Parameter" value="5.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[310.0, 460.0]">
        </property>
    </entity>
    <entity name="Hue" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.  // All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor controls a Philips Hue lightbulb.&#10; *  &lt;p&gt;&#10; *  It sets the parameters of the specified&#10; *  light according to the input values.&#10; *  &lt;/p&gt;&lt;p&gt;&#10; *  Logging on: This script attempts to access the bridge as a user with&#10; *  name given by &lt;i&gt;userName&lt;/i&gt;, which defaults to &quot;ptolemyuser&quot;.&#10; *  If there is no such user on the bridge, the script registers such a user and requests&#10; *  (via an alert dialog) that the&#10; *  link button on the bridge be pushed to authorize registration of this user.&#10; *  The user is given 20s to do this before an exception is thrown&#10; *  &lt;/p&gt;&lt;p&gt;&#10; *  Verifying the light: The final initialization step is to get a list of accessible lights.&#10; *  If the input light is not accessible, this accessor warns but does not error.&#10; *  Sometimes Hue lights are transient (get unplugged, become temporarily disconnected)&#10; *  and may be valid in the future. Rather than terminating the model, we hope&#10; *  that the lights come back.&#10; *  &lt;/p&gt;&lt;p&gt;&#10; *  Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; *  The bridge acquires its address via DHCP, so the address will typically change&#10; *  each time the bridge is rebooted. Moreover, the address will likely not be&#10; *  accessible except on the local network.  The bridge responds to UPnP packets&#10; *  (universal plug-and-play), so it is possible to use software such as&#10; *  &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; *  Ideally, UPnP discover would be provided via an accessor. In this case, a&#10; *  swarmlet could be created that runs periodically on a local network and publishes&#10; *  the URL of any discovered bridges to a key-value store. Then the KeyValueStore&#10; *  accessor could be used to provide the &lt;i&gt;bridgeIPAdress&lt;/i&gt; input to this accessor.&#10; *  &lt;/p&gt;&#10; *  @accessor devices/Hue&#10; *  @input {string} bridgeIPAddress The bridge IP address (and port, if needed).&#10; *  @parameter {string} userName The user name for logging on to the Hue Bridge.&#10; *   This must be at least 11 characters, or the Hue regards it as invalid.&#10; *  @input {int} lightID The light identifier (an integer beginning with 1).&#10; *  @input {number} brightness The brightness (an integer between 0 and 255).&#10; *  @input {number} hue The hue (an integer between 0 and 62580).&#10; *  @input {number} saturation The saturation (an integer between 0 and 255).&#10; *  @output {boolean} on Whether the light is on (true) or off (false).&#10; *  @input {int} transitionTime The transition time, in multiples of 100ms.&#10; *  @input {int} trigger Triggers a PUT request with all the light settings. Can be any type.&#10; *  @author Edward A. Lee, Marcus Pan &#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, clearTimeout, console, error, exports, get, getParameter, httpRequest, input, parameter, removeInputHandler, require, setTimeout,  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;&#10;// State variables.&#10;var timeout = 3000;&#10;var url = &quot;&quot;;&#10;var userName = &quot;&quot;;&#10;var reachableLights = [];&#10;var changedLights = [];&#10;var strReachableLights = &quot;&quot;;&#10;var handleRegisterUser;&#10;var registerInterval = 2000;&#10;var registerTimeout = 20000;&#10;var registerAttempts = 0;&#10;var handlers = [];&#10;var triggerHandle;&#10;&#10;// Uncomment the following to see the URL being used for the bridge.&#10;// alert(&quot;Connecting to: &quot; + bridge);&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;    input('bridgeIPAddress', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    parameter('userName', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;ptolemyuser&quot;&#10;    });&#10;    input('lightID', {&#10;        type: &quot;int&quot;,&#10;        value: 1&#10;    });&#10;    input('brightness', {&#10;        type: &quot;number&quot;,&#10;        value: 255&#10;    });&#10;    input('hue', {&#10;        type: &quot;number&quot;,&#10;        value: 65280&#10;    });&#10;    input('saturation', {&#10;        type: &quot;number&quot;,&#10;        value: 255&#10;    });&#10;    input('on', {&#10;        type: &quot;boolean&quot;,&#10;        value: false&#10;    });&#10;    input('transitionTime', {&#10;        type: &quot;int&quot;,&#10;        value: 4&#10;    });&#10;    input('trigger', {value: true});&#10;};&#10;&#10;/** Initialize connection.&#10; *  Register user if not registered&#10; *  Input handlers are not added here in case we need to wait for user to register.&#10; */&#10;exports.initialize = function() {&#10;	&#10;    var ipAddress = get('bridgeIPAddress');&#10;    userName = getParameter('userName');&#10;&#10;    if (userName.length &lt; 11) {&#10;        throw &quot;Username too short. Hue only accepts usernames that contain at least 11 characters.&quot;;&#10;    }&#10;&#10;    if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;        throw &quot;No IP Address is given for the Hue Bridge.&quot;;&#10;    }&#10;&#10;    url = &quot;http://&quot; + ipAddress + &quot;/&quot;;&#10;&#10;    function bridge_req_err_fn (err) {&#10;        // FIXME: We should do a UPnP discovery here and find a bridge.&#10;        // Could not connect to the bridge&#10;        console.log('Error connecting to Hue basestation.');&#10;        console.log(err);&#10;        error('Could not reach the Hue basestation.');&#10;    }&#10;    &#10;&#10;&#10;    // First make sure the bridge is actually there and responding.&#10;    var bridge_req = http.get(url, function (response) {&#10;        if (response.statusCode != 200) {&#10;            bridge_req_err_fn(response.statusMessage);&#10;&#10;        } else {&#10;            // Contacting the bridge succeeded. Next step is validating that the&#10;            // provided username is valid.&#10;            url = url + &quot;api/&quot;;&#10;            http.get(url + userName + '/', function (response) {&#10;                if (response.statusCode == 200) {&#10;                    var lights = JSON.parse(response.body);&#10;&#10;                    if (isNonEmptyArray(lights) &amp;&amp; lights[0].error) {&#10;                        var description = lights[0].error.description;&#10;&#10;                        if (description.match(&quot;unauthorized user&quot;)) {&#10;                            // Add this user.&#10;                            console.log(userName + &quot; is not a registered user.\n&quot; +&#10;                                        &quot; Push the link button on the Hue bridge to register.&quot;);&#10;                            registerUser();&#10;                        } else {&#10;                            console.log('Error occurred when trying to get Hue light status.');&#10;                            error(description);&#10;                        }&#10;&#10;                    } else if (lights.lights) {&#10;                        // Proceed to next stage of initialization&#10;                        getReachableLights();&#10;&#10;                    } else {&#10;                        error(&quot;Unknown error. Could not authorize user.&quot;);&#10;                    }&#10;                } else {&#10;                    error('Error with HTTP GET for lights status. Code: ' + response.statusCode);&#10;                }&#10;            });&#10;&#10;        }&#10;    });&#10;    bridge_req.on('error', bridge_req_err_fn);&#10;};&#10;&#10;/** Register a new user.&#10; * This function repeats at registerInterval until registration is&#10; * successful, or until registerTimeout.&#10; * It does so because it needs to wait until the user clicks&#10; * the button on the Hue bridge.&#10; */&#10;function registerUser() {&#10;&#10;	var registerData = {&#10;		devicetype : userName,&#10;		username : userName&#10;	};&#10;    var options = {&#10;    		body : JSON.stringify(registerData),&#10;    		url : url&#10;    };&#10;    &#10;    http.post(options, function(response) {&#10;    	console.log(JSON.stringify(response));&#10;        if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;            var description = response[0].error.description;&#10;&#10;            if (description.match(&quot;link button not pressed&quot;)) {&#10;                //repeat registration attempt unless registerTimeout has been reached&#10;                console.log('link button');&#10;                registerAttempts++;&#10;                if ((registerAttempts * registerInterval) &gt; registerTimeout) {&#10;                    throw &quot;Failed to create user after &quot; + registerTimeout/1000 +&#10;                        &quot;s.&quot;;&#10;                }&#10;                handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;                return;&#10;            }&#10;&#10;            else {&#10;                throw description;&#10;            }&#10;&#10;        } else if ((isNonEmptyArray(response) &amp;&amp; response[0].success) || &#10;        		JSON.parse(response.body)[0].success) {&#10;        		&#10;            //registration is successful - proceed to next stage of initialization&#10;            if (handleRegisterUser !== null) {&#10;                clearTimeout(handleRegisterUser);&#10;            }&#10;            getReachableLights();&#10;&#10;        } else {&#10;        	console.log(&quot;response &quot; + JSON.stringify(response));&#10;        	console.log(JSON.stringify(JSON.parse(response.body)[0].success));&#10;            throw &quot;Error registering new user&quot;;&#10;        }&#10;    });&#10;}&#10;&#10;/** This function is only called after user has been registered.&#10; * Get reachable lights.&#10; * Add input handlers&#10; */&#10;function getReachableLights() {&#10;    url = url + userName + &quot;/&quot; + &quot;lights/&quot;;&#10;    http.get(url, function (response) {&#10;        if (response.statusCode == 200) {&#10;            var lights = JSON.parse(response.body);&#10;            for (var id in lights) {&#10;                if (lights[id].state.reachable) {&#10;                    reachableLights.push(id);&#10;                    console.log('Reachable bulb ID: ' + id);&#10;                }&#10;            }&#10;        }&#10;    });&#10;    /*&#10;      handlers.push(addInputHandler('brightness', inputHandler));&#10;      handlers.push(addInputHandler('hue', inputHandler));&#10;      handlers.push(addInputHandler('saturation', inputHandler));&#10;      handlers.push(addInputHandler('on', inputHandler));&#10;      handlers.push(addInputHandler('transitionTime', inputHandler));&#10;      handlers.push(addInputHandler('lightID', inputHandler));&#10;    */&#10;    triggerHandle = addInputHandler('trigger', inputHandler);&#10;}&#10;&#10;/** Get light settings from inputs and PUT */&#10;function inputHandler() {&#10;    // Check if light is reachable&#10;    var lightID = get('lightID').toString();&#10;    if (reachableLights.indexOf(lightID) == -1) {&#10;        console.log('Light ' + lightID + ' may not be reachable.');&#10;    }&#10;    // Keep track of changed lights to turn off during wrap up&#10;    if (changedLights.indexOf(lightID) == -1) {&#10;        changedLights.push(lightID);&#10;    }&#10;&#10;    // Get inputs and send command to light&#10;    var command = {&#10;        on: get('on') === true,&#10;        bri: limit(get('brightness'), 0, 255),&#10;        hue: limit(get('hue'), 0, 65280),&#10;        sat: limit(get('saturation'), 0, 255),&#10;        transitiontime: limit(get('transitionTime'), 0, 65535)&#10;    };&#10;&#10;    var cmd = JSON.stringify(command);&#10;    var options = {&#10;    		body : cmd,&#10;    		url : url + lightID + &quot;/state/&quot;&#10;    };&#10;    &#10;    http.put(options, function(response) {&#10;    	console.log(JSON.stringify(response));&#10;        if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;            error(&quot;Server responds with error: &quot; + response[0].error.description);&#10;        } &#10;    });&#10;}&#10;&#10;/** Turn off changed lights on wrapup. */&#10;exports.wrapup = function() {&#10;    /*&#10;      for (var i = 0; i &lt; handlers.length; i++) {&#10;      removeInputHandler(handlers[i]);&#10;      }&#10;    */&#10;    if (triggerHandle) {&#10;        removeInputHandler(triggerHandle);&#10;    }&#10;    &#10;    var errorLights = [];&#10;    var cmd = JSON.stringify({on:false});&#10;    var options = {};&#10;    &#10;    for (var i = 0; i &lt; changedLights.length; i++) {&#10;        options = {&#10;        		body : cmd,&#10;        		url : url + changedLights[i] + &quot;/state/&quot;&#10;        };&#10;        &#10;        http.put(options, function(response) {&#10;        	console.log(JSON.stringify(response));&#10;            if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;                var lightID = get('lightID').toString();&#10;                errorLights.push(lightID);&#10;            }&#10;        });&#10;    }&#10;&#10;    if (errorLights.length !== 0) {&#10;        error(&quot;Error turning of lights &quot; + errorLights.toString());&#10;    }&#10;};&#10;&#10;/** utility function to check that an object is a nonempty array */&#10;function isNonEmptyArray(obj) {&#10;    return (obj instanceof Array &amp;&amp; obj.length &gt; 0);&#10;}&#10;&#10;/** Utility function to limit the range of a number&#10; * and to force it to be an integer. If the value argument&#10; * is a string, then it will be converted to a Number.&#10; */&#10;function limit(value, low, high) {&#10;    var parsed = parseInt(value);&#10;    if (!parsed) {&#10;        error(&quot;Expected a number between &quot; + low + &quot; and &quot; + high + &quot;, but got &quot; + value);&#10;        return 0;&#10;    }&#10;    if (parsed &lt; low) {&#10;        return low;&#10;    } else if (parsed &gt; high) {&#10;        return high;&#10;    } else {&#10;        return parsed;&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="C:\workspaceluna\accessors\web\devices/Hue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[550.0, 250.0]">
        </property>
        <property name="bridgeIPAddress" class="ptolemy.actor.parameters.PortParameter" value="localhost:$port">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="userName" class="ptolemy.data.expr.Parameter" value="newusername">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="on" class="ptolemy.actor.parameters.PortParameter" value="true">
        </property>
        <property name="transitionTime" class="ptolemy.actor.parameters.PortParameter" value="300">
        </property>
        <port name="bridgeIPAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="on" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="transitionTime" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="lightID" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="brightness" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="hue" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="saturation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="trigger" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Hue2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.  // All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor controls a Philips Hue lightbulb.&#10; *  &lt;p&gt;&#10; *  It sets the parameters of the specified&#10; *  light according to the input values.&#10; *  &lt;/p&gt;&lt;p&gt;&#10; *  Logging on: This script attempts to access the bridge as a user with&#10; *  name given by &lt;i&gt;userName&lt;/i&gt;, which defaults to &quot;ptolemyuser&quot;.&#10; *  If there is no such user on the bridge, the script registers such a user and requests&#10; *  (via an alert dialog) that the&#10; *  link button on the bridge be pushed to authorize registration of this user.&#10; *  The user is given 20s to do this before an exception is thrown&#10; *  &lt;/p&gt;&lt;p&gt;&#10; *  Verifying the light: The final initialization step is to get a list of accessible lights.&#10; *  If the input light is not accessible, this accessor warns but does not error.&#10; *  Sometimes Hue lights are transient (get unplugged, become temporarily disconnected)&#10; *  and may be valid in the future. Rather than terminating the model, we hope&#10; *  that the lights come back.&#10; *  &lt;/p&gt;&lt;p&gt;&#10; *  Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; *  The bridge acquires its address via DHCP, so the address will typically change&#10; *  each time the bridge is rebooted. Moreover, the address will likely not be&#10; *  accessible except on the local network.  The bridge responds to UPnP packets&#10; *  (universal plug-and-play), so it is possible to use software such as&#10; *  &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; *  Ideally, UPnP discover would be provided via an accessor. In this case, a&#10; *  swarmlet could be created that runs periodically on a local network and publishes&#10; *  the URL of any discovered bridges to a key-value store. Then the KeyValueStore&#10; *  accessor could be used to provide the &lt;i&gt;bridgeIPAdress&lt;/i&gt; input to this accessor.&#10; *  &lt;/p&gt;&#10; *  @accessor devices/Hue&#10; *  @input {string} bridgeIPAddress The bridge IP address (and port, if needed).&#10; *  @parameter {string} userName The user name for logging on to the Hue Bridge.&#10; *   This must be at least 11 characters, or the Hue regards it as invalid.&#10; *  @input {int} lightID The light identifier (an integer beginning with 1).&#10; *  @input {number} brightness The brightness (an integer between 0 and 255).&#10; *  @input {number} hue The hue (an integer between 0 and 62580).&#10; *  @input {number} saturation The saturation (an integer between 0 and 255).&#10; *  @output {boolean} on Whether the light is on (true) or off (false).&#10; *  @input {int} transitionTime The transition time, in multiples of 100ms.&#10; *  @input {int} trigger Triggers a PUT request with all the light settings. Can be any type.&#10; *  @author Edward A. Lee, Marcus Pan &#10; *  @version $$Id$$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, clearTimeout, console, error, exports, get, getParameter, httpRequest, input, parameter, removeInputHandler, require, setTimeout,  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;&#10;// State variables.&#10;var timeout = 3000;&#10;var url = &quot;&quot;;&#10;var userName = &quot;&quot;;&#10;var reachableLights = [];&#10;var changedLights = [];&#10;var strReachableLights = &quot;&quot;;&#10;var handleRegisterUser;&#10;var registerInterval = 2000;&#10;var registerTimeout = 20000;&#10;var registerAttempts = 0;&#10;var handlers = [];&#10;var triggerHandle;&#10;&#10;// Uncomment the following to see the URL being used for the bridge.&#10;// alert(&quot;Connecting to: &quot; + bridge);&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;    input('bridgeIPAddress', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    parameter('userName', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;ptolemyuser&quot;&#10;    });&#10;    input('lightID', {&#10;        type: &quot;int&quot;,&#10;        value: 1&#10;    });&#10;    input('brightness', {&#10;        type: &quot;number&quot;,&#10;        value: 255&#10;    });&#10;    input('hue', {&#10;        type: &quot;number&quot;,&#10;        value: 65280&#10;    });&#10;    input('saturation', {&#10;        type: &quot;number&quot;,&#10;        value: 255&#10;    });&#10;    input('on', {&#10;        type: &quot;boolean&quot;,&#10;        value: false&#10;    });&#10;    input('transitionTime', {&#10;        type: &quot;int&quot;,&#10;        value: 4&#10;    });&#10;    input('trigger', {value: true});&#10;};&#10;&#10;/** Initialize connection.&#10; *  Register user if not registered&#10; *  Input handlers are not added here in case we need to wait for user to register.&#10; */&#10;exports.initialize = function() {&#10;	&#10;    var ipAddress = get('bridgeIPAddress');&#10;    userName = getParameter('userName');&#10;&#10;    if (userName.length &lt; 11) {&#10;        throw &quot;Username too short. Hue only accepts usernames that contain at least 11 characters.&quot;;&#10;    }&#10;&#10;    if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;        throw &quot;No IP Address is given for the Hue Bridge.&quot;;&#10;    }&#10;&#10;    url = &quot;http://&quot; + ipAddress + &quot;/&quot;;&#10;&#10;    function bridge_req_err_fn (err) {&#10;        // FIXME: We should do a UPnP discovery here and find a bridge.&#10;        // Could not connect to the bridge&#10;        console.log('Error connecting to Hue basestation.');&#10;        console.log(err);&#10;        error('Could not reach the Hue basestation.');&#10;    }&#10;    &#10;&#10;&#10;    // First make sure the bridge is actually there and responding.&#10;    var bridge_req = http.get(url, function (response) {&#10;        if (response.statusCode != 200) {&#10;            bridge_req_err_fn(response.statusMessage);&#10;&#10;        } else {&#10;            // Contacting the bridge succeeded. Next step is validating that the&#10;            // provided username is valid.&#10;            url = url + &quot;api/&quot;;&#10;            http.get(url + userName + '/', function (response) {&#10;                if (response.statusCode == 200) {&#10;                    var lights = JSON.parse(response.body);&#10;&#10;                    if (isNonEmptyArray(lights) &amp;&amp; lights[0].error) {&#10;                        var description = lights[0].error.description;&#10;&#10;                        if (description.match(&quot;unauthorized user&quot;)) {&#10;                            // Add this user.&#10;                            console.log(userName + &quot; is not a registered user.\n&quot; +&#10;                                        &quot; Push the link button on the Hue bridge to register.&quot;);&#10;                            registerUser();&#10;                        } else {&#10;                            console.log('Error occurred when trying to get Hue light status.');&#10;                            error(description);&#10;                        }&#10;&#10;                    } else if (lights.lights) {&#10;                        // Proceed to next stage of initialization&#10;                        getReachableLights();&#10;&#10;                    } else {&#10;                        error(&quot;Unknown error. Could not authorize user.&quot;);&#10;                    }&#10;                } else {&#10;                    error('Error with HTTP GET for lights status. Code: ' + response.statusCode);&#10;                }&#10;            });&#10;&#10;        }&#10;    });&#10;    bridge_req.on('error', bridge_req_err_fn);&#10;};&#10;&#10;/** Register a new user.&#10; * This function repeats at registerInterval until registration is&#10; * successful, or until registerTimeout.&#10; * It does so because it needs to wait until the user clicks&#10; * the button on the Hue bridge.&#10; */&#10;function registerUser() {&#10;&#10;	var registerData = {&#10;		devicetype : userName,&#10;		username : userName&#10;	};&#10;    var options = {&#10;    		body : JSON.stringify(registerData),&#10;    		url : url&#10;    };&#10;    &#10;    http.post(options, function(response) {&#10;    	console.log(JSON.stringify(response));&#10;        if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;            var description = response[0].error.description;&#10;&#10;            if (description.match(&quot;link button not pressed&quot;)) {&#10;                //repeat registration attempt unless registerTimeout has been reached&#10;                console.log('link button');&#10;                registerAttempts++;&#10;                if ((registerAttempts * registerInterval) &gt; registerTimeout) {&#10;                    throw &quot;Failed to create user after &quot; + registerTimeout/1000 +&#10;                        &quot;s.&quot;;&#10;                }&#10;                handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;                return;&#10;            }&#10;&#10;            else {&#10;                throw description;&#10;            }&#10;&#10;        } else if ((isNonEmptyArray(response) &amp;&amp; response[0].success) || &#10;        		JSON.parse(response.body)[0].success) {&#10;        		&#10;            //registration is successful - proceed to next stage of initialization&#10;            if (handleRegisterUser !== null) {&#10;                clearTimeout(handleRegisterUser);&#10;            }&#10;            getReachableLights();&#10;&#10;        } else {&#10;        	console.log(&quot;response &quot; + JSON.stringify(response));&#10;        	console.log(JSON.stringify(JSON.parse(response.body)[0].success));&#10;            throw &quot;Error registering new user&quot;;&#10;        }&#10;    });&#10;}&#10;&#10;/** This function is only called after user has been registered.&#10; * Get reachable lights.&#10; * Add input handlers&#10; */&#10;function getReachableLights() {&#10;    url = url + userName + &quot;/&quot; + &quot;lights/&quot;;&#10;    http.get(url, function (response) {&#10;        if (response.statusCode == 200) {&#10;            var lights = JSON.parse(response.body);&#10;            for (var id in lights) {&#10;                if (lights[id].state.reachable) {&#10;                    reachableLights.push(id);&#10;                    console.log('Reachable bulb ID: ' + id);&#10;                }&#10;            }&#10;        }&#10;    });&#10;    /*&#10;      handlers.push(addInputHandler('brightness', inputHandler));&#10;      handlers.push(addInputHandler('hue', inputHandler));&#10;      handlers.push(addInputHandler('saturation', inputHandler));&#10;      handlers.push(addInputHandler('on', inputHandler));&#10;      handlers.push(addInputHandler('transitionTime', inputHandler));&#10;      handlers.push(addInputHandler('lightID', inputHandler));&#10;    */&#10;    triggerHandle = addInputHandler('trigger', inputHandler);&#10;}&#10;&#10;/** Get light settings from inputs and PUT */&#10;function inputHandler() {&#10;    // Check if light is reachable&#10;    var lightID = get('lightID').toString();&#10;    if (reachableLights.indexOf(lightID) == -1) {&#10;        console.log('Light ' + lightID + ' may not be reachable.');&#10;    }&#10;    // Keep track of changed lights to turn off during wrap up&#10;    if (changedLights.indexOf(lightID) == -1) {&#10;        changedLights.push(lightID);&#10;    }&#10;&#10;    // Get inputs and send command to light&#10;    var command = {&#10;        on: get('on') === true,&#10;        bri: limit(get('brightness'), 0, 255),&#10;        hue: limit(get('hue'), 0, 65280),&#10;        sat: limit(get('saturation'), 0, 255),&#10;        transitiontime: limit(get('transitionTime'), 0, 65535)&#10;    };&#10;&#10;    var cmd = JSON.stringify(command);&#10;    var options = {&#10;    		body : cmd,&#10;    		url : url + lightID + &quot;/state/&quot;&#10;    };&#10;    &#10;    http.put(options, function(response) {&#10;    	console.log(JSON.stringify(response));&#10;        if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;            error(&quot;Server responds with error: &quot; + response[0].error.description);&#10;        } &#10;    });&#10;}&#10;&#10;/** Turn off changed lights on wrapup. */&#10;exports.wrapup = function() {&#10;    /*&#10;      for (var i = 0; i &lt; handlers.length; i++) {&#10;      removeInputHandler(handlers[i]);&#10;      }&#10;    */&#10;    if (triggerHandle) {&#10;        removeInputHandler(triggerHandle);&#10;    }&#10;    &#10;    var errorLights = [];&#10;    var cmd = JSON.stringify({on:false});&#10;    var options = {};&#10;    &#10;    for (var i = 0; i &lt; changedLights.length; i++) {&#10;        options = {&#10;        		body : cmd,&#10;        		url : url + changedLights[i] + &quot;/state/&quot;&#10;        };&#10;        &#10;        http.put(options, function(response) {&#10;        	console.log(JSON.stringify(response));&#10;            if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;                var lightID = get('lightID').toString();&#10;                errorLights.push(lightID);&#10;            }&#10;        });&#10;    }&#10;&#10;    if (errorLights.length !== 0) {&#10;        error(&quot;Error turning of lights &quot; + errorLights.toString());&#10;    }&#10;};&#10;&#10;/** utility function to check that an object is a nonempty array */&#10;function isNonEmptyArray(obj) {&#10;    return (obj instanceof Array &amp;&amp; obj.length &gt; 0);&#10;}&#10;&#10;/** Utility function to limit the range of a number&#10; * and to force it to be an integer. If the value argument&#10; * is a string, then it will be converted to a Number.&#10; */&#10;function limit(value, low, high) {&#10;    var parsed = parseInt(value);&#10;    if (!parsed) {&#10;        error(&quot;Expected a number between &quot; + low + &quot; and &quot; + high + &quot;, but got &quot; + value);&#10;        return 0;&#10;    }&#10;    if (parsed &lt; low) {&#10;        return low;&#10;    } else if (parsed &gt; high) {&#10;        return high;&#10;    } else {&#10;        return parsed;&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="C:\workspaceluna\accessors\web\devices/Hue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[705.0, 325.0]">
        </property>
        <property name="bridgeIPAddress" class="ptolemy.actor.parameters.PortParameter" value="localhost:$port">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="userName" class="ptolemy.data.expr.Parameter" value="ptolemyuser">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="on" class="ptolemy.actor.parameters.PortParameter" value="true">
        </property>
        <property name="transitionTime" class="ptolemy.actor.parameters.PortParameter" value="500">
        </property>
        <property name="brightness" class="ptolemy.actor.parameters.PortParameter" value="88">
        </property>
        <property name="hue" class="ptolemy.actor.parameters.PortParameter" value="88">
        </property>
        <property name="saturation" class="ptolemy.actor.parameters.PortParameter" value="88">
        </property>
        <port name="bridgeIPAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="on" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="transitionTime" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="brightness" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="hue" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="saturation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="lightID" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="trigger" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Discrete TimeDelay3" class="ptolemy.actor.lib.TimeDelay">
        <property name="delay" class="ptolemy.actor.parameters.PortParameter" value="10">
        </property>
        <property name="minimumDelay" class="ptolemy.data.expr.Parameter" value="5.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[455.0, 365.0]">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[410.0, 290.0]">
        </vertex>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="SingleEvent.output" relation="relation"/>
    <link port="Discrete TimeDelay.input" relation="relation"/>
    <link port="Discrete TimeDelay.output" relation="relation3"/>
    <link port="Service.done" relation="relation5"/>
    <link port="Stop.input" relation="relation2"/>
    <link port="Const.output" relation="relation2"/>
    <link port="Const.trigger" relation="relation4"/>
    <link port="Discrete TimeDelay2.input" relation="relation5"/>
    <link port="Discrete TimeDelay2.output" relation="relation4"/>
    <link port="Hue.trigger" relation="relation3"/>
    <link port="Hue2.trigger" relation="relation6"/>
    <link port="Discrete TimeDelay3.input" relation="relation3"/>
    <link port="Discrete TimeDelay3.output" relation="relation6"/>
</entity>
