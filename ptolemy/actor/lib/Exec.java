/* Execute a subprocess.

 Copyright (c) 2003 The Regents of the University of California.
 All rights reserved.
 Permission is hereby granted, without written agreement and without
 license or royalty fees, to use, copy, modify, and distribute this
 software and its documentation for any purpose, provided that the above
 copyright notice and the following two paragraphs appear in all copies
 of this software.

 IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
 ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

 THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
 PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
 CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 ENHANCEMENTS, OR MODIFICATIONS.

                                        PT_COPYRIGHT_VERSION_2
                                        COPYRIGHTENDKEY

@ProposedRating Green (eal@eecs.berkeley.edu)
@AcceptedRating Green (bilung@eecs.berkeley.edu)
*/

package ptolemy.actor.lib;

import ptolemy.actor.parameters.PortParameter;
import ptolemy.actor.TypedAtomicActor;
import ptolemy.actor.TypedIOPort;
import ptolemy.data.StringToken;
import ptolemy.data.BooleanToken;
import ptolemy.data.expr.Parameter;
import ptolemy.data.type.BaseType;
import ptolemy.kernel.CompositeEntity;
import ptolemy.kernel.util.Attribute;
import ptolemy.kernel.util.IllegalActionException;
import ptolemy.kernel.util.NameDuplicationException;
import ptolemy.util.StringUtilities;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;

//////////////////////////////////////////////////////////////////////////
//// Execute
/**
Execute a subprocess.

The <code>commandLine</code> PortParameter contains the command

@author Christopher Hylands Brooks, Contributor: Edward A. Lee
@version $Id$
@since Ptolemy II 0.3
*/

public class Exec extends TypedAtomicActor {

    /** Construct an actor with the given container and name.
     *  @param container The container.
     *  @param name The name of this actor.
     *  @exception IllegalActionException If the actor cannot be contained
     *   by the proposed container.
     *  @exception NameDuplicationException If the container already has an
     *   actor with this name.
     */
    public Exec(CompositeEntity container, String name)
            throws NameDuplicationException, IllegalActionException  {
        super(container, name);

        blocking = new Parameter(this, "blocking");
        blocking.setTypeEquals(BaseType.BOOLEAN);
        blocking.setToken(BooleanToken.FALSE);

        command = new PortParameter(this, "command", new StringToken("echo 'Hello, world.'"));
        // Make command be a StringParameter (no surrounding double quotes).
        command.setStringMode(true);

        error = new TypedIOPort(this, "error", false, true);
        error.setTypeEquals(BaseType.STRING);

        input = new TypedIOPort(this, "input", true, false);
        input.setTypeEquals(BaseType.STRING);

        output = new TypedIOPort(this, "output", false, true);
        output.setTypeEquals(BaseType.STRING);

    }

    ///////////////////////////////////////////////////////////////////
    ////                     ports and parameters                  ////


    /** Indicator of whether fire method blocks on the process.
     *  The type is boolean with default false.
     */
    public Parameter blocking;

    /** The command to be executed.  The command is parsed by
     * java.util.StringTokenizer into tokens and then executed as a s
     * separate process.
     * The initial default is the string "echo 'Hello, world.'".   
     */  
    public PortParameter command;

    /** Data that is generated by the subprocess on standard error.
     */
    public TypedIOPort error;

    /** Strings to pass to the standard in of the subprocess.
     */
    public TypedIOPort input;

    /** Data that is generated by the subprocess on standard out.
     */
    public TypedIOPort output;


    /**
     *  @param attribute The attribute that changed.
     *  @exception IllegalActionException Not thrown in this base class.
     */
    public void attributeChanged(Attribute attribute)
            throws IllegalActionException {
        if (attribute == blocking) {
            _blocking =
                ((BooleanToken)blocking.getToken()).booleanValue();
        } else {
            super.attributeChanged(attribute);
        }
    }


    /** Send input to the subprocess and read output and errors
     */
    public synchronized void fire() throws IllegalActionException {
        super.fire();
        String line = null;

        try {
            if (_process == null) {
                _exec(command.getExpression());
            }
            if (input.hasToken(0)) {
                // FIXME: Do we need to append a new line?
                if ((line = ((StringToken)input.get(0)).stringValue())
                            != null) {
                    System.out.println("Exec: input: " + line);
                    if (_inputBufferedWriter != null) { 
                            _inputBufferedWriter.write(line);
                    }
                }
            }

            if (!_blocking) {
                if (_errorBufferedReader != null
                        && _errorBufferedReader.ready()
                        && (line = _errorBufferedReader.readLine()) != null) {
                    System.out.println("Exec: error: " + line);
                    error.send(0, new StringToken(line));
                }

                if (_outputBufferedReader != null
                        && _outputBufferedReader.ready()
                        && (line = _outputBufferedReader.readLine()) != null) {
                    System.out.println("Exec: output: " + line);
                    output.send(0, new StringToken(line));
                }
            }
        } catch (IOException ex) {
            throw new IllegalActionException(this, ex,
                    "Problem reading or writing '" + line + "'");
        }
    }

    /** Create the subprocess
     *  @exception IllegalActionException If a derived class throws it.
     */
    public void initialize() throws IllegalActionException {
        super.initialize();

        _exec(command.getExpression());
    }

    /** Terminate the subprocess.
     *  This method is invoked exactly once per execution
     *  of an application.  None of the other action methods should be
     *  be invoked after it.
     *  @exception IllegalActionException Not thrown in this base class.
     */
    public void wrapup() throws IllegalActionException {
        try {
            if (_errorBufferedReader != null) {
                _errorBufferedReader.close();
            }
            if (_inputBufferedWriter != null) {
                _inputBufferedWriter.close();
            }
            if (_outputBufferedReader != null) {
                _outputBufferedReader.close();
            }
        } catch (IOException ex) {
            // ignore
        }
        //synchronized(this) {
        if (_process != null) {
            _process.destroy();
        }
        //    _process = null;
        //}
    }

    // Execute a command.o
    private void _exec( String command) throws IllegalActionException {
       try {
            //final String [] commandTokens =
            //    StringUtilities
            //    .tokenizeForExec((String)command.getExpression());
            if (_process != null) {
                _process.destroy();
            }
            Runtime runtime = Runtime.getRuntime();
            _process = runtime.exec(command);
            // The notion of output and input is confusing here.
            // This actor reads from its input port and writes that data
            // to the process.
            InputStreamReader errorStreamReader =
                new InputStreamReader(_process.getErrorStream());
            _errorBufferedReader =
                new BufferedReader(errorStreamReader);
            
            OutputStreamWriter inputStreamWriter =
                new OutputStreamWriter(_process.getOutputStream());
            _inputBufferedWriter =
                new BufferedWriter(inputStreamWriter);

            InputStreamReader outputStreamReader =
                new InputStreamReader(_process.getInputStream());
            _outputBufferedReader =
                new BufferedReader(outputStreamReader);
        } catch (IOException ex) {
            throw new IllegalActionException(this, ex,
                    "Problem setting up command '" + command + "'");
        }
    }


    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////

    // Whether this actor is blocking.
    private boolean _blocking;

    private BufferedReader _errorBufferedReader;
    private BufferedWriter _inputBufferedWriter;
    private BufferedReader _outputBufferedReader;

    // The Process that we are running.
    private Process _process;
}
