/* Interface for defining how an CORBA actor can be invoked remotely.

 Copyright (c) 1997-1999 The Regents of the University of California.
 All rights reserved.
 Permission is hereby granted, without written agreement and without
 license or royalty fees, to use, copy, modify, and distribute this
 software and its documentation for any purpose, provided that the above
 copyright notice and the following two paragraphs appear in all copies
 of this software.

 IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
 ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

 THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
 PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
 CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 ENHANCEMENTS, OR MODIFICATIONS.

                                        PT_COPYRIGHT_VERSION_2
                                        COPYRIGHTENDKEY
@ProposedRating Red (liuj@eecs.berkeley.edu)
@AcceptedRating Red (moderator@eecs.berkeley.edu)
*/

#pragma javaPackage "ptolemy.actor.corba"

module util {
	/* Exception for generic illegal actions on the server side.
	*/
	exception CorbaIllegalActionException{
		string message;
	};
	//Exception for unknow parameter name when passing a parameter.
	exception CorbaUnknownParamException {
		string paramName;
		string message;	
	};
	//Exception for illegal value when passing data.
	exception CorbaIllegalValueException{
		string message;
	};
	//Exception for unknow port when accessing a remote port/
	exception CorbaUnknownPortException{
		string portName;
		string message;	
	};
	//Exception for channel indeces.
	exception CorbaIndexOutofBoundException{
		short index;
	};
	//A CORBA compatible interface that implements the execution 
	//methods of Ptolemy II.
	interface CorbaActor {
		void fire() raises (CorbaIllegalActionException);
		string getParameter(in string paramName)		
			raises (CorbaIllegalActionException,
				CorbaUnknownParamException);
		void initialize() raises (CorbaIllegalActionException);
		boolean hasData(in string portName, 
				in short portIndex)
			raises (CorbaIllegalActionException);
		boolean postfire() raises (CorbaIllegalActionException);
		boolean prefire() raises (CorbaIllegalActionException);
		
		//NVList getParameters();
		void setParameter(in string paramName,
				  in string paramValue)
			raises (CorbaIllegalActionException,
				CorbaUnknownParamException,
				CorbaIllegalValueException);
		void stopFire() raises (CorbaIllegalActionException);
		void terminate() raises (CorbaIllegalActionException);
		void transferInput(in string portName,
				   in short portIndex,
				   in string tokenValue)
			raises (CorbaIllegalActionException,
				CorbaUnknownPortException,
				CorbaIndexOutofBoundException,
				CorbaIllegalValueException);
		string transferOutput(in string portName,
				      in short portIndex)
			raises (CorbaIllegalActionException,
			    	CorbaUnknownPortException,
				CorbaIndexOutofBoundException);
		void wrapup() raises (CorbaIllegalActionException);
	};
};
