/* Generated By:JJTree: Do not edit this line. ASTPtSumNode.java */

/* ASTPtSumNode represent sum(+,-) nodes in the parse tree

 Copyright (c) 1998 The Regents of the University of California.
 All rights reserved.
 Permission is hereby granted, without written agreement and without
 license or royalty fees, to use, copy, modify, and distribute this
 software and its documentation for any purpose, provided that the above
 copyright notice and the following two paragraphs appear in all copies
 of this software.

 IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
 ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

 THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
 PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
 CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 ENHANCEMENTS, OR MODIFICATIONS.
 
                                        PT_COPYRIGHT_VERSION_2
                                        COPYRIGHTENDKEY

@ProposedRating Red (nsmyth@eecs.berkeley.edu)

Created : May 1998

*/

//////////////////////////////////////////////////////////////////////////
//// ASTPtSumNode
/**
 * The parse tree created from the expression string consists of a 
 * hierarchy of node objects. This class represents sum(+,-) nodes in 
 * the parse tree.
 * 
 * @author Neil Smyth
 * @version $Id$
 * @see pt.data.parser.ASTPtSimpleNode
 * @see pt.data.parser.PtParser 
 * @see pt.data.Token 
*/

package pt.data.parser;

//import java.util.*;

public class ASTPtSumNode extends ASTPtSimpleNode {
    
    protected void _resolveValue() throws Exception {
        int num =  jjtGetNumChildren();
        if (num ==1) {
            String str = childTokens[0].toString();
            _ptToken.fromString(String.valueOf(str));
            return;
        }
        if (jjtGetNumChildren() != ( _tokenList.size() +1) ) {
            throw new ParseException();
        }
        _ptToken = _ptToken.add(_ptToken, childTokens[0]);
        int size = _tokenList.size();
        for (int i=0; i<size; i++) {
            // When start using 1.2 will change this
            Token x = (Token)_tokenList.take();
            if (x.image.compareTo("+") == 0) {
                _ptToken = _ptToken.add(_ptToken, childTokens[i+1]);
            } else if (x.image.compareTo("-") == 0) {
                _ptToken = _ptToken.subtract(_ptToken, childTokens[i+1]);
            } else {
                throw new Exception();
            }
        }
    }


  public ASTPtSumNode(int id) {
    super(id);
  }

  public ASTPtSumNode(PtParser p, int id) {
    super(p, id);
  }

  public static Node jjtCreate(int id) {
      return new ASTPtSumNode(id);
  }

  public static Node jjtCreate(PtParser p, int id) {
      return new ASTPtSumNode(p, id);
  }
}
