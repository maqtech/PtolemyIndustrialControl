/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MatrixParser.jj */
/*@egen*//* Input file to JJTree and JavaCC to generate Matrix Parser */

options {
    LOOKAHEAD=1;
    STATIC = true;                             
}


PARSER_BEGIN(MatrixParser)

package ptolemy.data.expr;

import java.util.Vector;
import java.io.ByteArrayInputStream;
import java.io.FileReader;

public class MatrixParser/*@bgen(jjtree)*/implements MatrixParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTMatrixParserState jjtree = new JJTMatrixParserState();

/*@egen*/

    /** Read a Matrix from File. */
    public Vector readMatrix() {
	Vector m = null;
        System.out.println(" --- In Matrix Parser -- ");
	try {
	    m = matrix();
            System.out.println(" --- got Matrix -- ");
	} catch (Exception e) {
	    System.out.println("Oops.");
	    System.out.println(e.getMessage());
	    e.printStackTrace();
	} 
	return m;
    }	
}

PARSER_END(MatrixParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


<DEFAULT> TOKEN : /* numeric constants */
{
	< CONSTANT: <FLOAT>
	    | <FLOAT> ( ["e","E"] ([ "-","+"])? <INTEGER> )?
    	>
  | 	< #FLOAT: <INTEGER> 
	    | <INTEGER> ( "." <INTEGER> )?
	    | "." <INTEGER>
    	>
  | 	< #INTEGER: ( <DIGIT> )+ >
  | 	< #DIGIT: ["0" - "9"] >
}

<DEFAULT> TOKEN :
{
    < NAME     : ( ["a"-"z" , "A"-"Z" , "_"] )+ ( ["a"-"z" , "A"-"Z" , "_" , "'", "0"-"9"] )* >
 |  < NATURAL  : ( ["0"-"9"] )+ ( ["0"-"9"] )* >
 |  < SIGN     : ["-","+"] > 
}


SPECIAL_TOKEN :
{
  < COMMENT : "#" (~["\n","\r"])* ["\n","\r"] >
}


Vector matrix() :
{/*@bgen(jjtree) matrix */
    SimpleNode jjtn000 = new SimpleNode(null, JJTMATRIX);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Vector m = new Vector();;
    Vector row = null;
    //Matrix m;
    //Matrix row = null;
}
{/*@bgen(jjtree) matrix */
   try {
/*@egen*/  (
      "[" [row=row()]  {m.add(row);}
      (";"  row=row()  {m.add(row);} )* "]"
   )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
	   
   {  
       return m;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

Vector row() :
{/*@bgen(jjtree) row */
  SimpleNode jjtn000 = new SimpleNode(null, JJTROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Vector row = new Vector();
  double element;
}
{/*@bgen(jjtree) row */
   try {
/*@egen*/  (   element=element()       {row.add(new Double(element));}
       ( "," element=element() {row.add(new Double(element));} )*
   )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {	
       return row;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}


double element() :
{/*@bgen(jjtree) element */
  SimpleNode jjtn000 = new SimpleNode(null, JJTELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token i;
  Token s;
  int sign = 1;
  double value;
}
{/*@bgen(jjtree) element */
    try {
/*@egen*/   (	[s=<SIGN> {if ( (s.image).equals("-") ) sign=-1*sign; }]
    	i=<CONSTANT> {value = sign*(new Double(i.image)).doubleValue();}
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return value; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
 
