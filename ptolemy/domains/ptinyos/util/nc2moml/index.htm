<!-- $Id$ -->
<html>
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
    <title>nc2moml</title>
  </head>
  <body>
    <h1>nc2moml</h1> 

    <p> <a href="http://www.tinyos.net#in_browser" target="_top">TinyOS</a> is an
    event-driven operating system designed for sensor network nodes
    that have very limited resources (e.g., 8K bytes of program
    memory, 512 bytes of RAM).  TinyOS, is used, for example, on the
    Berkeley MICA motes, which are small wireless sensor nodes.  <a
    href="httP://nescc.sourceforge.net#in_browser" target="_top">nesC</a> is an
    extension to the C programming language designed to embody the
    structuring concepts and execution model of TinyOS.

    <p>nc2moml is used to convert nesC files (.nc) into <a
    href="http://ptolemy.eecs.berkeley.edu/publications/papers/00/moml#in_browser" target="_top">MoML</a>
    (.moml) files.  This will create the Ptolemy II libraries of
    components that are used to assemble models.  TinyOS provides a
    rich library of nesC components. If you install TinyOS 1.x in
    <code>$PTII/vendors/ptinyos/tinyos-1.x</code> , then the Ptolemy
    II configure script will find it and automatically make the TinyOS
    libraries available.

    <h2>Installation notes</h2>

    These installation instructions assume that you already have
    Ptolemy II installed, and that if you are running on Windows, you
    already have Cygwin installed.  These instructions also assume
    that you have neither the nesC compiler nor TinyOS installed
    already.  If you wish to use pre-existing installations, please
    set up the environment variables described in the steps below to
    point to the proper directories.

    <BLOCKQUOTE>

      <h3>Using preexisting installations of TinyOS 1.x and nesC (v1.2.2 or later)</h3>
      <ol>
        <li>If you already have TinyOS 1.x and nesC (version 1.2.2
          or later, from CVS or a .tar.gz distribution) installed, try:

          <pre>
cd $PTII
mkdir -p vendors/ptinyos
cd $PTII/vendors/ptinyos
ln -s <I>location_of_your_tinyos-1.x_tree</I> tinyos-1.x
ln -s <I>location_of_your_nesc_tree</I> nesc
          </pre>
        </li>
        
        <li>Proceed to the step to <a href="#environmentVariables">Set up the
        necessary environment variables</a> below.

        <li>You may skip the step for configuring and installing the
        TinyOS nesC tools.

        <li>Proceed to the step to <a href="#unzip">Run the script
        that will unzip the file that contains additional compiler
        flags</a> and follow the rest of the instuctions to running
        <CODE>nc2moml</CODE>.
      </ol>

    </BLOCKQUOTE>

    <h2>How to install nc2moml</h2>
    
    <ol>
      <li>Make a directory into which to store the source code for
      TinyOS and nesC, for example:
        <pre>
    mkdir -p $PTII/vendors/ptinyos
        </pre>
	Note that <CODE>$PTII</CODE> should not have spaces in it.
        
      <li> You can either get nesC <a href="#nesCfromtargz">from the .tar.gz distribution (v1.2.2 or later)</a> or <a href="#nesCfromCVS">from CVS</a>.

    <h3><a name="nesCfromtargz">Getting nesC from a .tar.gz distribution</a></h3>
    <ol> 
      <li>Download the <a href="http://prdownloads.sourceforge.net/nescc/nesc-1.2.2.tar.gz?download">nesc-1.2.2.tar.gz</a> or later version.
        
      <li> Unzip and untar the nesc .tar.gz file:
        <pre>
cd $PTII/vendors/ptinyos
gunzip nesc-1.2.2.tar.gz
tar xvf nesc-1.2.2.tar  
        </pre>
        This should create a directory called <code>nesc</code>.

      <li> <a href="#configurenesC">Skip ahead</a> to the step to configure nesC.
    </ol>


    <h3><a name="nesCfromCVS">Getting nesC from CVS</a></h3>

    The nesC compiler can be downloaded and compiled from source,
    which requires an impressive suite of tools.  These instructions
    ask you to first verify that you have the necessary programs
    installed, then to install the AVR tools, followed by TinyOS, then
    nesC.

    <p>Under Linux or Cygwin, you must have the following programs
      installed on your system:

    <ul> 
      <li> autoconf 2.50 or later 
      <li> bison 
      <li> emacs 
      <li> emacs-el 
      <li> gperf 
      <li> perl 
      <li> rpm 
    </ul>
        
    <p>For help with how to install these in Cygwin, see the <a
    href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptIIlatest/install.htm#cygwin">Ptolemy
    II Cygwin Instructions</a>.  Note that most installations will not
    have gperf on them, at least, so you will likely need to install
    at least that.</p>

    <ol>
      <li> Get the nesC CVS Tree, see <a
          href="http://sourceforge.net/cvs/?group_id=56288#in_browser" target="_top"><CODE>http://sourceforge.net/cvs/?group_id=56288</CODE></a>

        <pre>
cd $PTII/vendors/ptinyos
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/nescc login
<i>Hit Enter when prompted for a password</i>
cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/nescc co nesc
        </pre>

      <li> Boostrap nesC 
        <pre>
cd $PTII/vendors/ptinyos/nesc
./Bootstrap
        </pre>
    </ol>


    <li><a name="configurenesC">Configure nesc:</a>
      <pre>
./configure
      </pre>

      By default, this configuration will cause nesC to be installed
      in <code>/usr/local</code>.  We assume that
      <code>/usr/local/bin</code> is in your path.  If you wish to
      install in a different directory, run <code>./configure
      --prefix=&lt;MYDIR&gt;</code> instead and add the
      <code>bin</code> directory to your path.
    </li>

    <li>Install nesc:
      <pre>
make
make install
      </pre>
      
    </li>
      
    <li>If you have mote hardware, you can also install the
    appropriate cross compiler tools (AVR for mica), though this step
    is not necessary if you are only planning on running in
    simulation: <a href="http://www.tinyos.net/dist-1.2.0/tools"
    target="_top"><code>
    http://www.tinyos.net/dist-1.2.0/tools</code></a>.
    </li>

    <li> We have put into the TinyOS makefiles a rule that you can run
    to create all the TinyOS libraries in one step. To use this, as of
    this writing, you need to get TinyOS from the CVS repository
    rather than getting the packaged install version. To do this,
    type:
      
      <pre>
cd $PTII/vendors/ptinyos
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/tinyos login
<i>Hit Enter when prompted for a password</i>
cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/tinyos co tinyos-1.x
      </pre>

      <p><I>Note to tinyos developers: why is this download so large?  Perhaps there should be a core cvs module and then a contrib module?</I>

        This will create a directory <code>tinyos-1.x</code>.  For more
        information, see <a
        href="http://sourceforge.net/cvs/?group_id=28656#in_browser"><code>http://sourceforge.net/cvs/?group_id=28656</code></a>.
    </li>

    <li> <a name="environmentVariables">Set up the necessary
    environment variables.</a> TOSROOT sets the location of the TinyOS
    source tree.  TOSDIR sets the subdirectory in the TinyOS source
    tree.  PTINYOS_MOMLROOT sets the MoML output directory.

      <ul>
        <li>Under bash, type: 
          <pre>
export TOSROOT=$PTII/vendors/ptinyos/tinyos-1.x
export TOSDIR=$TOSROOT/tos
export PTINYOS_MOMLROOT=$PTII/vendors/ptinyos/moml
          </pre>

        <li>Under csh or tcsh:
          <pre>
setenv TOSROOT $PTII/vendors/ptinyos/tinyos-1.x
setenv TOSDIR $TOSROOT/tos
setenv PTINYOS_MOMLROOT $PTII/vendors/ptinyos/moml
          </pre>

        <li>Under Windows with Cygwin, you can permanently set
        environment variables from the System control panel. (For
        details, see <a
        href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII4.0/ptII/doc/install.htm#settingptII">Set
        the value of the PTII environment variable</a>).

          <p>
            Go to Start Menu -> Settings -> Control Panels -> System -> Advanced -> Environment Variables.
            <br>
            Set <code>TOSROOT</code> to <code>%PTII%/vendors/ptinyos/tinyos-1.x</code>
            <br>
            Set <code>TOSDIR</code> to <code>%PTII%/vendors/ptinyos/tinyos-1.x/tos</code>
            <br>
            Set <code>PTINYOS_MOMLROOT</code> to <code>%PTII%/vendors/ptinyos/moml</code>

          <p> FIXME: Necessary? If you are using Cygwin, and configure
          has trouble finding <code>TOSROOT</code> or
          <code>TOSDIR</code>, try expanding your <code>$PTII</code>
          environment variable to <code>/cygdrive/c/ptII</code> or
          something similar.  Also try expanding the
          <code>TOSROOT</code> and <code>TOSDIR</code> environment
          variables if you still have problems.

      </ul>

      <li> Configure and install the TinyOS nesC tools
        <pre>
cd $TOSROOT/tools/src/ncc
./Bootstrap
./configure
        </pre>
        By default, this configuration will cause the tools to be
        installed in <code>/usr/local</code>.  We assume that
        <code>/usr/local/bin</code> is in your path.  If you wish to
        install in a different directory, run <code>./configure
        --prefix=&lt;MYDIR&gt;</code> instead and add the
        <code>bin</code> directory to your path.

	<pre>
make
make install

	</pre>

      </li>

      <li><a name="unzip">Run the script</a> that will unzip the file
      that contains additional compiler flags.  It will place "opts"
      files into various directories in your tinyos-1.x tree.  The
      script assumes that you have placed your tinyos-1.x tree as
      indicated in the instructions above.
        <pre>
cd $PTII/ptolemy/domains/ptinyos/util
./unzip-opts.sh
        </pre>

        <p>
          If the executable permissions are not set correctly, run:
        <pre>
chmod a+x unzip-opts.sh
        </pre>
        then try the step above again.
      </li>
      
      <li> Run the script to generate the .moml files from the .nc files.
        <pre>
cd $PTII/ptolemy/domains/ptinyos/util/nc2moml
./nc2moml
        </pre>

          If the executable permissions are not set correctly, run:
        <pre>
chmod a+x nc2moml*
        </pre>
        then try the step above again.

	The <CODE>nc2moml</CODE> command will take 10-30 minutes to complete.

        <p> Note: The nc2moml tool requires that you build the tools in <CODE>$PTII/bin</CODE>.  Do the following and rerun the script above if they are missing:
        <pre>
cd $PTII/bin
make
        </pre>
      </li>

      <li> See if it worked:
        <ol> 
          <li> You should see some valid MoML code in:
            <pre>$PTII/vendors/ptinyos/moml</pre>
            <br>
            The directory structure should reflect that of the TinyOS
            directory structure.

          <li> 
            <ol>
              <li>Try running Viptos:
                <pre>$PTII/bin/vergil -viptos</pre>

              <li>Create a new PtinyOS Graph Editor from the File |
              New menu.

              <li>Click in the left hand pane under Actors to see the
              newly generated directory structure.
            </ol>
        </ol>
    </ol>


</body>
</html>
