<!-- $Id$
  @author: Bart Kienhuis
 -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Process Network Demo</title>
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
</head>
<body>
<H1>Process Network Demo</H1>
<P>
<CENTER>
<OBJECT classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93"
 width=600 height=500 name="QR"
 codebase="http://java.sun.com/products/plugin/1.3/jinstall-13-win32.cab#Version=1,3,0,0">
<PARAM NAME=CODE VALUE=ptolemy.actor.gui.MoMLApplet>
<PARAM NAME=CODEBASE VALUE=../../../../..>
<PARAM NAME=ARCHIVE VALUE=" ptolemy/ptsupport.jar, ptolemy/domains/pn/pn.jar, ptolemy/domains/pn/demo/QR/QR.jar">
<PARAM NAME="type" VALUE="application/x-java-applet;version=1.3">
<PARAM NAME="name" VALUE="QR">
<PARAM NAME="background" VALUE="#faf0e6">
<PARAM NAME="modelURL" VALUE="QR.xml">
<COMMENT>
<EMBED type="application/x-java-applet;version=1.3"
  code=ptolemy.actor.gui.MoMLApplet
  codebase=../../../../..
  archive="ptolemy/ptsupport.jar,
           ptolemy/domains/pn/pn.jar,
           ptolemy/domains/pn/demo/QR/QR.jar"
  name="QR"
  width=600
  height=500
  background="#faf0e6"
  modelURL="QR.xml"
  pluginspage="http://java.sun.com/products/plugin/1.3/plugin-install.html">
<NOEMBED></COMMENT>
<a href="QR.xml">MoML specification for this model.</a>
</NOEMBED>
</EMBED>
</OBJECT>
</CENTER>
<P>
The above applet shows the result of a Process Network (PN) executing
the QR-algorithm on a continuous stream of data that is coming from an
array of antennas. Each execution of the algorithm on a new set of
data from the antennas is called an update. The applet shows the
matrix R in a <I>MatrixViewer</I>. This matrix is of size NxN, where N
is the number of antenna's involved. The individual entries in the
matrix are also shown in the <I>Plotter</I>. The matrix R is obtained
after doing a certain number of QR-algorithm updates on a stream of
data coming from the antenna array of a certain size.
</p>

<P>
In the demo, if we select 10 QR-updates for an array of 6 antenna's,
the following R matrix must be found: </P>

<PRE>
# name: Rout
# type: matrix
# rows: 6
# columns: 6

270.843 206.234  60.482 -39.318 -89.100 -38.568
  0.000 144.933 181.192 172.919 104.333  10.488
  0.000   0.000  32.964  18.280  10.909   9.170
  0.000   0.000   0.000  24.739   7.446   7.208
  0.000   0.000   0.000   0.000  20.30   11.206
  0.000   0.000   0.000   0.000   0.000   8.535
</PRE>
<P>

The QR algorithm describes a linear algebra problem in which a matrix
A can be written as a product of two matrices Q and R (A=QR). The
matrix R is an upper triangular matrix and matrix Q is an orthogonal
matrix. A program that does this QR transformation is given below in
the Matlab programming language. The algorithm uses the Cordic
functions <I>Vectorize </I>and <I>Rotate </I>to find the QR
transform. If we execute this program in Matlab, we would find the
same matrix R.</P>

<PRE>
%% Initialize Matrix r
for j = 1:1:N,
  for i = j:1:N,
    [r(j,i)] = _ReadMatrix_Zeros_64x64();
  end
end

%% Initialize Matrix x
for k = 1:1:K,
  for j = 1:1:N,
    [x(k,j)] = _ReadMatrix_U_1000x16();
  end
end

%% do the QR updates
for k = 1:1:K,
  for j = 1:1:N,
    [r(j,j), x(k,j), t ] = Vectorize( r(j,j), x(k,j) );
    for i = j+1:1:N,
       [r(j,i), x(k,i), t] = Rotate( r(j,i), x(k,i), t );
    end
  end
end

%% After the K iterations, collect the values of the R Matrix
for j = 1:1:N,
  for i = j:1:N,
    [ Sink(j,i) ] = Rout( r(j,i) );
  end
end
</PRE>

<P>
However, we can also describe the same QR-algorithm as a <I>Process
Network</I>, as shown in the <a href="QRVergil.htm">block diagram</a>.
</P>
<P></P>
</BODY>
</HTML>
