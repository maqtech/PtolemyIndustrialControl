There are two programs:

PitchSlider
Move the slider to change the pitch scale factor. Output pitch =
(input pitch)(pitch scale factor). The pitch scale factor can also
be changed by entering a new value into the text field.

HarmonizerSlider
Same as PitchSlider, but has three independent sliders.

Usage:
To run PitchSlider
java -classpath ".;math.jar" PitchSlider &
To run HarmonizerSlider
java -classpath ".;math.jar" HarmonizerSlider &
To run at a different sampling rate (e.g. 44100), default is 22050 Hz.
java -classpath ".;math.jar" PitchSlider 44100 &


Other notes
This application requires JDK 1.3 beta and at least a Pentium II 400
MHz class processor to run at 22050 Hz sample rate. 
44100 Hz performance might be possible on a 600 MHz Pentium III, but I
have not tried this since I don't have access to such a system.
If you hear clicks or the sound skips, try increasing the buffer
size, readWriteDataSizeInFrames, in ProcessAudio.java (for
PitchSlider), or in ProcessAudioHarmonizer.java (for HarmonizerSlider).


Since the pitch shifting algorithm is pitch-synchronous, a pitch
detector is used to provide a pitch estimate of the input signal. I am
currently using cepstrum analysis. The pitch detector will only look
for pitches in the range of the fundamental of human vocal sounds, and
will not work on sources with a fundamental much higher than 300 Hz.
The pitch detector works by computing the (real) cepstrum, given by
IDFT(log(magnitude(DFT(input_signal)))), and then doing peak finding
in the high-time part of the cepstrum.



