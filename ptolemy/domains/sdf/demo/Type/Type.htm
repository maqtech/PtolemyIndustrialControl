<!-- $Id$-->
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../../../../../doc/default.css" rel="stylesheet" type="text/css">
<TITLE>Type Demo</TITLE>
</HEAD>
<BODY>

<H1>Type System Demo</H1>
The applet below shows the topology and the parameters in the model.
The rightmost actor is a display actor, it can be chosen to be a
plotter or a printer through a checkbox. The types of the ports
are annotated by the ports, they will be updated during type resolution.

 <!-- All of the controls of the applet should be visible when the
applet is displayed on a XGA screen-->
<center>
<!-- The HTML below is for the Java Plugin.  The first 
     section is for IE, the second is for Netscape
 -->
<OBJECT classid="clsid:8AD9C840-044E-11D1-B3E9-00805F499D93"
 width=800 height=870
 name="Type"
 codebase="http://java.sun.com/products/plugin/1.2/jinstall-12-win32.cab#Version=1,2,0,0">
<PARAM NAME=CODE VALUE=ptolemy.domains.sdf.demo.Type.Type.class>
<PARAM NAME=CODEBASE VALUE=../../../../..>
<PARAM NAME=ARCHIVE VALUE="
	lib/diva.jar,
	ptolemy/ptsupport.jar,
	ptolemy/domains/sdf/sdf.jar"
<PARAM NAME=NAME VALUE="Type">
<PARAM NAME="type" VALUE="application/x-java-applet;version=1.2">
<PARAM NAME="background" VALUE="#faf0e6">
<PARAM NAME = "defaultIterations" VALUE ="8">
<COMMENT>
<EMBED type="application/x-java-applet;version=1.2"
 code=ptolemy.domains.sdf.demo.Type.Type
 codebase=../../../../..
 archive="
	lib/diva.jar,
	ptolemy/ptsupport.jar,
	ptolemy/domains/sdf/sdf.jar"

 java_CODE=ptolemy.domains.sdf.demo.Type.Type.class
 java_CODEBASE=../../../../..
 java_ARCHIVE="
	lib/diva.jar,
	ptolemy/ptsupport.jar,
	ptolemy/domains/sdf/sdf.jar"
 name="Type"
 width=800 height=870
 background="#faf0e6"
 defaultIterations="8"
 pluginspage="http://java.sun.com/products/plugin/1.2/plugin-install.html">
<NOEMBED></COMMENT>
<I>If you were able to run applets, you would have a demo here.</I>
</NOEMBED></EMBED>
</OBJECT>
</center>

The lower left portion of the applet shows part of the type lattice,
the lower right portion shows colored traces during type resolution,
which indicates how the types are updated. Each trace corresponds
to one port, every time a type is updated, all the traces are extended
by a certain amount. The color of the trace corresponds to the color
of the elements of the type lattice on the left.<p>

The type constraints are:
<ul>
  <li> For each Ramp, the types of the initial value and the step size 
	are <= the output type. (4 inequalities)
  <li> The types of the Expression inputs <= the output. (2 inequalities)
  <li> Plus the constraints enforced by the connections. (3 inequalities)
</ul>

Some examples of type resolution are:
<ul>
  <li> Using the default parameters, click "go", the type on all the
	ports of the Ramps and the Expression are resolved to Int,
	since all the Ramp parameters are integers.
  <li> Change the Ramp1 step size to 0.5, a double, then click "go".
	The output of Ramp1, input1 and the output of the Expression
	are resolved to Double.
  <li> Change the Ramp1 initial value to the string "A", step size
	to the string "BC". (When fires, Ramp1 will generate the
	sequence of strings "A", "ABC", "ABCBC", ...) The output
	of Ramp1, input1 and output of the Expression will be
	resolved to "String", but there is a type conflict between
	the output of Expression and the input of the plotter, as
	indicated by the message in Java console.
  <li> Now choose printer as the display, its input type is String.
	The model does not have a type conflict anymore, and will
	run correctly. The output from the printer should read:
	<pre>
	A0
	ABC1
	ABCBC2
	...
	</pre>
	The last number is the output from Ramp2, appended to the
	string generated from Ramp1.

</ul>
	
</BODY>
</HTML>

