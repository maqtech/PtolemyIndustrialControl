<html>
<head>
<!-- $Id$ -->
</head>
<body>
<h1>
Quick Tour
</h1>
<!-- 
Note:  demos should go with in the directory of their respective
domains.
demo xml files should usually be lower case, and have the
same name as the directory they reside in, so we should
have sdf/demo/foo/foo.xml.

One exception is that if the demo contains a java file that
also implements the demo, then the directory name will be capitalized,
so we will have
sdf/demo/Foo/Foo.java
and
sdf/demo/Foo/Foo.xml

-->


The following links open Ptolemy models in Vergil.
To run the models, follow the link, then select "Run Window"
from the "View" menu.
The diagrams are fully editable, so feel free to explore.
The top-level parameters are the model are shown in the run window.
Edit these to explore the models.  They can be edited while the
models are running.
<ul>
<li><a href="../../moml/demo/modulation.xml">Spectrum of a modulated sine wave</a>.
<br> This example shows simple spectral estimation of the product
of two sinusoids in noise.  It illustrates hierarchical models,
the Expression actor, and the FFT actor.
The Sinewave actors with the red outline are hierarchical.
Right click on them and select "look inside" to see their refinement.
This model is build using the <i>synchronous dataflow</i> (SDF) domain,
which statically schedules the firing of the actors.
</br></li>

<li><a href="../../domains/sdf/demo/eye/eye.xml">Eye diagram of a PAM communications signal</a>.
<br> This example shows a simple pulse-amplitude moduldation, physical
layer communication system.  It illustrates live parameter editing and
the scope style plotter.  To get documentation on any actor, right
click on it, and select "Get Documentation."
</br></li>

<li><a href="../../domains/ct/demo/Lorenz/Lorenz.xml">Lorenz attractor chaotic system</a>.
<br> This example shows a nonlinear feedback system that exhibits
chaotic behavior.  It illustrates the continuous-time (CT) domain,
which uses an underlying solver for ordinary differential equations,
the Expression actor, and the X-Y plotter.
</br></li>

<li><a href="../../domains/de/demo/Inspection/Inspection.xml">
Inspection paradox</a>.
<br> This example shows
a famous paradox in probability called the inspection paradox.
It illustrates use of the discrete-event (DE) domain, where random
data stimulates a model and statics are collected and reported
in various ways.  Note the way that the final waiting time averages
are reported.  This technique heavily uses Ptolemy II's polymorphic
type system to do string manipulation.
</br></li>

<li><a href="../../domains/ct/demo/StickyMasses/StickyMasses.xml">
Hybrid system model</a>.
<br> This example illustrates the use of the finite-state-machine (FSM)
domain together with another domain to get a <i>modal model</i>.
A special case of modal models are <i>hybrid systems</i>, where FSM
is combined with CT, as in this example.
</br></li>

<li><a href="../../domains/gr/demo/pendulum/pendulum.xml">
Pendulum model</a>.<br>
<font color="red">NOTE: This model requires that you have
installed Java 3D from Sun
(see http://java.sun.com/products/java-media/3D/).</font>
This example shows a continuous-time physical model of pendulum
animated in the graphics (GR) domain, in which graphical components
can be assembled and dynamically manipulated.  Note that clicking
and dragging in the graphics window rotates the model.
</br></li>

<li><a href="FIXME">
Karplus-Strong Algorithm</a>.<br>
<font color="red">NOTE: This model requires that you have
the 1.3 version of Java (see http://java.sun.com/j2se/).</font>
This example shows the Karplus-Strong algorithm, which synthesizes
a musical sound that closely resembles a plucked string instrument.
It illustrates the audio capabilities of Ptolemy II, which require
version 1.3 of Java, and a reasonable capable computer.
</br></li>

<li><a href="../../moml/demo/networked.xml">
Network Integration</a>.<br>
This model contains a component that is defined on the Ptolemy project
website.  When you open the model, you will be alerted to the fact
that it requires loading a model definition from a remote source.
If you agree to proceed, then you will have a model with a remotely
defined component.  The component itself is at
<a href="http://ptolemy.eecs.berkeley.edu/xml/models/Waveform.xml">
http://ptolemy.eecs.berkeley.edu/xml/models/Waveform.xml</a>.
</br></li>

<li>Type system and polymorphism</li>
</ul>
<p></p>
</body>
</html>
