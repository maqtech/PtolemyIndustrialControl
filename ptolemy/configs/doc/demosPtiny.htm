<!-- DO NOT EDIT this file, it is created by running make.
     The file to edit is $PTII/doc/ptIIx.x.release.htm
     where x.x is the release number, then run 'make update'
     to update the derived files and check them in to cvs. -->
<html>
<head>
<!-- $Id$ -->
<!--

demosPtiny.htm is derived from this file by including
anything between the tags vergilDoc and /vergilDoc.
The vergilDoc tags are used by $PTII/doc/javahtml.awk
to generate demosPtiny.htm.


-->
</head>
<body>
<!--vergilDocs-->
<h1>
Quick Tour
</h1>

<!--
Note:  demos should go with in the directory of their respective
domains. Demo xml files should usually be upper case, and have the
same name as the directory they reside in; so we should
have sdf/demo/Foo/Foo.xml.
The reason that the xml files are upcased is so that if
we do codegen, we get Foo.java instead of foo.java
-->

The following links open models that highlight the
key features of Ptolemy II. To run the models,
follow the link, then select "Run Window" from the "View" menu. The
diagrams are fully editable, so feel free to explore. The top-level
parameters are the model are shown in the run window. Edit these to
explore the models. They can be edited while the models are running.
You can also access the <a href="completeDemosPtiny.htm">complete
list of demos</a> and the summary of
<a href="whatsNew.htm">new capabilities</a>.

<ul>
<li><a href="../../domains/sdf/demo/Spectrum/Spectrum.xml">
Simple Signal Processing</a> (See also
<a href="../../domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.xml">Maximum Entropy Spectrum</a>,
<a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">Fourier Series</a>, and
<a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">Sound Spectrum</a>)
<br> This example shows simple spectral estimation of the product
of two sinusoids in noise.  It illustrates models for signal
processing, hierarchical models,
the Expression actor, and the FFT actor.
This model is build using the <i>synchronous dataflow</i> (SDF) domain,
which statically schedules the firing of the actors.
</li>

<!--vergilDocs-->

<li><a href="../../domains/ct/demo/Lorenz/Lorenz.xml">
Continuous-Time Modeling</a> (see also
<a href="../../domains/ct/demo/SquareWave/SquareWave.xml">Square Wave Response</a>)
<br> This example shows a continuous-time
nonlinear feedback system that exhibits
chaotic behavior (this system is called a Lorenz attractor).
It illustrates the <i>continuous-time</i> (CT) domain,
which uses an underlying solver for ordinary differential equations.
</li>

<li><a href="../../domains/de/demo/Inspection/Inspection.xml">
Discrete-Event Modeling</a> (see also
<a href="../../data/type/demo/Router/Router.xml">Router</a>
and <a href="../../domains/de/demo/TimingParadox/TimingParadox.xml">
Timing Paradox</a>).
<br> This example shows
a famous paradox in probability called the inspection paradox.
It illustrates use of the <i>discrete-event</i> (DE) domain, where
events occur on a time line and are processed chronologically.
In this example, random
data stimulates a model and statistics are collected and reported
in various ways.
</li>

<li> <a href="../../domains/ct/demo/SigmaDelta/SigmaDelta.xml">
Mixed-Signal Modeling</a> (see also
<a href="../../domains/ct/demo/Switch/Switch.xml">Switching Continuous</a>)
<br> This example shows how to combine continuous-time modeling
with discrete-event modeling to get mixed-signal modeling.
The example models a MEMS accelerometer where a digital circuit
implements feedback control and A/D conversion (a design due to
Mark Lemkin).

<li> <a href="../../domains/de/demo/ModalModel/ModalModel.xml">
Modal Models</a>
<br>A modal model is one whose behavior depends on its "mode"
of operation. A modal model in Ptolemy II uses the
<i>finite state machine</i> (FSM) domain
combined hierarchically with other models. A state in the FSM represents
a mode of operation, and can have a refinement that gives the behavior
in that mode.
The refinement can be another FSM or some other model using some other
Ptolemy domain. This example combines DE, FSM, and SDF to model a
system where regularly sampled signals are perturbed by irregular
events in time.
</li>

<li><a href="../../domains/ct/demo/StickyMasses/StickyMasses.xml">
Hybrid Systems</a> 
(see also


<!-- GR does not get included in demosPtiny.htm -->
<!--vergilDocs-->

<a href="../../domains/ct/demo/Transmission/Transmission.xml">Transmission</a>,

<!--Ptiny does not include the GR domain-->
<!--vergilDocs-->
and
<a href="../../domains/ct/demo/CarTracking/CarTracking.xml">Car Tracking</a>).
<br> <i>Hybrid systems</i> are a special case of modal models
where the FSM domain is combined with the CT domain
to get mixed continuous-time and discrete-event models.
This example models a physical system consisting of two point masses
on springs that stick together when they collide.
</li>

<li>
<a href="ClassesIllustrated.xml">
Classes, subclasses, and inner classes</a> (see also
<a href="../../domains/sdf/demo/NoisySinewave/NoisySinewave.xml">
Noisy sinewaves</a> and
<a href="../../domains/sdf/demo/RijndaelEncryption/RijndaelEncryption.xml">
Rijndael Encryption</a>).
<br>
Version 4.0 introduces actor-oriented classes, subclasses, and
inner classes with inheritance. This is a major improvement in
the modularity mechanisms available in actor-oriented design. 

<li><a href="../../domains/pn/demo/OrderedMerge/OrderedMerge.xml">
Process Networks</a> (see also
<a href="../../domains/pn/demo/QR/QR.xml">QR</a>).<br>
This example illustrates the <i>process networks</i> (PN) domain,
where each actor executes in a separate Ptolemy II thread.
The example calculates numbers whose prime
factors are 2, 3, and 5, only, and produces
them in an ordered sequence.
</li>

<!--vergilDocs-->

<li><a href="../../data/type/demo/Router/Router.xml">
The Type System</a>.
<br>
This model illustrates the very sophisticated type system
of Ptolemy II, where type constraints propagate transparently,
actors are polymorphic, and composite types such as records and
arrays are supported.
This example illustrates composite types, where records are
constructed out of tokens with various types. Here, a record
models a packet in a packet-switched network, where variable
delays may result in out-of-order arrival of packets.
</li>

<li><a href="../../domains/ct/demo/Transmission/Transmission.xml">
Higher-order expressions</a>.
<br>
To simplify creating new components, Ptolemy II contains a functional
expression language.  The expression language is integrated with the
type system, allowing static type checking of polymorphic expressions
with few type annotations.  The expression language also allows new,
encapsulated functions, called function closures, to be defined and
passed as data.  This model illustrates how function closures can be
used to make model much more compact. </li>

<li><a href="../../domains/sdf/demo/Sketch/Sketch.xml">Sketched Signal</a>
(see also <a href="../../domains/sdf/demo/FourierSeries/FourierSeries.xml">Fourier Series</a>).
<br>
This model illustrates the use of plotter to provide input
as well as rendering output from a model.  Right click and drag
on the plot to trace out a new signal. The model runs each time you
do this.

<li><a href="../../matlab/demo/MatlabExpression/MatlabExpression.xml">
Matlab Integration</a> (see also
<a href="../../matlab/demo/MatlabCT/MatlabCT.xml">Matlab in CT</a>).
<br>
This example uses the Matlab interface created by
Zoltan Kemenczy and Sean Simmons, of Research in Motion Ltd.,
to plot a 3-D surface. This works only if Matlab is installed locally.

<li><a href="../../actor/parameters/demo/SliderParameter/SliderParameter.xml">Interactive
User Interface</a>  (see also
<a href="../../actor/parameters/demo/Bouncer/Bouncer.xml">Bouncer</a>).
<br>
This model illustrates features of the user interface that
make it easier to create models that execute with rich interaction
with the user.  In this example, sliders in the run control parameter
control the values of "port parameters," which in turn control the
execution of a model.

<li>
<a href="../../data/unit/demo/StaticUnits/StaticUnits.xml">
Statically Checked Units System</a> (see also
<a href="../../data/unit/demo/Units/Units.xml">
Dynamically Checked Units System</a>).
<br>
This model illustrates the use of the statically
checked units system. A unit system
defines a set of interrelated dimensions and measures. For example, in
the time dimension, we might have seconds, minutes, hours, days, weeks,
and fortnights. Ptolemy II includes two experimental units systems,
one that is statically checked and one that is dynamically checked.
</li>

<li><a href="../../moml/demo/Networked/Networked.xml">
Network Integration</a>.<br>
This example illustrates that models may be defined in a networked,
distributed fashion.
This model contains a component that is defined on the Ptolemy project
website.  When you open the model, you will be alerted to the fact
that it requires loading a model definition from a remote source.
If you agree to proceed, then you will have a model with a remotely
defined component.  The component itself is at
<a href="http://ptolemy.eecs.berkeley.edu/xml/models/Waveform.xml">
http://ptolemy.eecs.berkeley.edu/xml/models/Waveform.xml</a>.
You can open that definition by clicking on the hyperlink, or by
using the "Open URL" command in the File menu.
</li>

<li><a href="../../actor/lib/javasound/demo/KarplusStrong/KarplusStrong.xml">
Audio</a> (see also <a href="../../domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml">SoundSpectrum</a>).
<br>
This example shows the Karplus-Strong algorithm, which synthesizes
a musical sound that closely resembles a plucked string instrument.
It illustrates the audio capabilities of Ptolemy II.
</li>

</ul>

<!--vergilDocs-->
<h1>Experimental Facilities</h1>
<p>
Ptolemy II has a number of less well-developed experimental
capabilities that may continue to evolve over time.
These are illustrated in the following examples.

<ul>
<li><a href="../../actor/lib/hoc/demo/HocDE/HocDE.xml">Higher-Order Components</a>.
<br>Higher-order components are components that operate on components.
This example contains a component that is a composite actor that
replicates itself some specified number of times to operate on
multiple channels of input.  This capability was created by
Zoltan Kemenczy and Sean Simmons, Research In Motion, Ltd.


<!--vergilDocs-->

<!--vergilDocs-->

<!--vergilDocs-->

<!--vergilDocs-->

<!--vergilDocs-->

<!--vergilDocs-->

<!--vergilDocs-->
</ul>
</body>
</html>
</body>
</html>
