<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.1 [Build 934]: Last Updated: Tue Oct 28 15:08:12 2008
<BR><P>
<H3>Maximum Stack Usage =        392 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; processEvents &rArr; fire_actor &rArr; computation_fire &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b633f0]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b633f0]">NMI_Handler</a><BR>
 <LI><a href="#[b633a8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b633a8]">HardFault_Handler</a><BR>
 <LI><a href="#[b63360]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63360]">MemManage_Handler</a><BR>
 <LI><a href="#[b63318]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63318]">BusFault_Handler</a><BR>
 <LI><a href="#[b632d0]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b632d0]">UsageFault_Handler</a><BR>
 <LI><a href="#[b63288]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63288]">SVC_Handler</a><BR>
 <LI><a href="#[b63240]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63240]">DebugMon_Handler</a><BR>
 <LI><a href="#[b631f8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b631f8]">PendSV_Handler</a><BR>
 <LI><a href="#[b631b0]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b631b0]">SysTick_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b63438]">Reset_Handler</a>
 <LI><a href="#[b633f0]">NMI_Handler</a>
 <LI><a href="#[b633a8]">HardFault_Handler</a>
 <LI><a href="#[b63360]">MemManage_Handler</a>
 <LI><a href="#[b63318]">BusFault_Handler</a>
 <LI><a href="#[b632d0]">UsageFault_Handler</a>
 <LI><a href="#[b63288]">SVC_Handler</a>
 <LI><a href="#[b63240]">DebugMon_Handler</a>
 <LI><a href="#[b631f8]">PendSV_Handler</a>
 <LI><a href="#[b631b0]">SysTick_Handler</a>
 <LI><a href="#[101b678]">__main</a>
 <LI><a href="#[b62040]">main</a>
 <LI><a href="#[10f2ae0]">fputc</a>
 <LI><a href="#[10f2ae0]">fputc</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[101b678]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, entry.o($$startup$$))
<BR><BR>[Calls]<UL><LI><a href="#[10f30d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>

<P><STRONG><a name="[10f3120]"></a>__call_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10f30d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>

<P><STRONG><a name="[b63438]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b633f0]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b633f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b633f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b633a8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b633a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63360]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63318]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b63318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b632d0]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b632d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b632d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63288]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b63288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63240]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b63240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b631f8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b631b0]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b631b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b631b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b62598]"></a>event_remove</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = event_remove &rArr; __1printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1018348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
<LI><a href="#[10f3b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b620d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b62280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_actor
<LI><a href="#[b62358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computation_fire
<LI><a href="#[b624c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_fire
</UL>

<P><STRONG><a name="[b62550]"></a>setActuationInterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b624c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_fire
</UL>

<P><STRONG><a name="[b62508]"></a>getCurrentPhysicalTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b62088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[b620d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b623a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[b624c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_fire
</UL>

<P><STRONG><a name="[b624c0]"></a>actuator_fire</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = actuator_fire &rArr; event_remove &rArr; __1printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b62508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[b62550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setActuationInterrupt
<LI><a href="#[b62598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b62280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_actor
</UL>

<P><STRONG><a name="[b62478]"></a>die</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = die &rArr; perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[101b2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>
<BR>[Called By]<UL><LI><a href="#[b62040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b62238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_event
<LI><a href="#[b62280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_actor
<LI><a href="#[b62430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_add
</UL>

<P><STRONG><a name="[b62430]"></a>event_add</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = event_add &rArr; die &rArr; perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[b62478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[101ae90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10f3ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b62088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[b622c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delay_fire
<LI><a href="#[b62310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_fire
<LI><a href="#[b62358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computation_fire
<LI><a href="#[b623a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[b623e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_fire
</UL>

<P><STRONG><a name="[b623e8]"></a>clock_fire</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = clock_fire &rArr; event_add &rArr; die &rArr; perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[b62430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_add
<LI><a href="#[101ae90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b620d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[b623a0]"></a>clock_init</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = clock_init &rArr; event_add &rArr; die &rArr; perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[b62430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_add
<LI><a href="#[b62508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[101ae90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b62040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b62358]"></a>computation_fire</STRONG> (Thumb, 90 bytes, Stack size 80 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = computation_fire &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b62430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_add
<LI><a href="#[b62598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_remove
<LI><a href="#[101ae90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10f36d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b62280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_actor
</UL>

<P><STRONG><a name="[b62310]"></a>merge_fire</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = merge_fire &rArr; event_add &rArr; die &rArr; perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[b62430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_add
<LI><a href="#[101ae90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b62280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_actor
</UL>

<P><STRONG><a name="[b622c8]"></a>model_delay_fire</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = model_delay_fire &rArr; event_add &rArr; die &rArr; perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[b62430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_add
<LI><a href="#[101ae90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b62280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_actor
</UL>

<P><STRONG><a name="[b62280]"></a>fire_actor</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = fire_actor &rArr; computation_fire &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b622c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delay_fire
<LI><a href="#[b62310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_fire
<LI><a href="#[b62358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computation_fire
<LI><a href="#[b62478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[b624c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_fire
<LI><a href="#[b62598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_remove
<LI><a href="#[1018348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b620d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b62238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_event
</UL>

<P><STRONG><a name="[b62238]"></a>execute_event</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, simpleptidesos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b62280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_actor
<LI><a href="#[b62478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>

<P><STRONG><a name="[b621f0]"></a>enableInterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b620d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[b621a8]"></a>setTimedInterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b620d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[b62160]"></a>safeToProcess</STRONG> (Thumb, 382 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b620d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[b62118]"></a>disableInterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, simpleptidesos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b620d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
</UL>

<P><STRONG><a name="[b620d0]"></a>processEvents</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = processEvents &rArr; fire_actor &rArr; computation_fire &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b62118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInterrupt
<LI><a href="#[b62160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safeToProcess
<LI><a href="#[b621a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimedInterrupt
<LI><a href="#[b621f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableInterrupt
<LI><a href="#[b62280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_actor
<LI><a href="#[b623e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_fire
<LI><a href="#[b62508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[b62598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b62040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b62088]"></a>sensor_init</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sensor_init &rArr; event_add &rArr; die &rArr; perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[b62430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_add
<LI><a href="#[b62508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentPhysicalTime
<LI><a href="#[101ae90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10f3398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b62040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b62040]"></a>main</STRONG> (Thumb, 344 bytes, Stack size 144 bytes, simpleptidesos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = main &rArr; processEvents &rArr; fire_actor &rArr; computation_fire &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b62088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[b620d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processEvents
<LI><a href="#[b623a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[b62478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
<LI><a href="#[1018348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
<LI><a href="#[10183d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.text)
</UL>
<P><STRONG><a name="[101b2d0]"></a>perror</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, perror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = perror &rArr; fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[10f1ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[10f2168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[10f2dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[b62478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;die
</UL>

<P><STRONG><a name="[101aed8]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[101ae90]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b62088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[b622c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_delay_fire
<LI><a href="#[b62310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_fire
<LI><a href="#[b62358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computation_fire
<LI><a href="#[b623a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[b623e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_fire
<LI><a href="#[b62430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_add
</UL>

<P><STRONG><a name="[101ae48]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[10f36d8]"></a>__aeabi_dadd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f3720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[b62358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computation_fire
</UL>

<P><STRONG><a name="[10f3690]"></a>__aeabi_dsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f3720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[10f3648]"></a>__aeabi_drsub</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f3720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[10f3398]"></a>__aeabi_i2d</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dflt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f18f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b62088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
</UL>

<P><STRONG><a name="[10f30d8]"></a>__init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10f3120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__call_main
</UL>
<BR>[Called By]<UL><LI><a href="#[101b678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[10f3090]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10f2dc0]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[101b2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[10f2ae0]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, fputc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printf2.o(i.__0printf_2)
<LI> printf2.o(i.__0fprintf_2)
</UL>
<P><STRONG><a name="[10f24c8]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f3720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[10f2480]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[10f2318]"></a>__aeabi_llsr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f3720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[10f22d0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[10f2168]"></a>strerror</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101b2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[10f1940]"></a>_double_round</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10f18f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[10f18f8]"></a>_double_epilogue</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f1940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10f3398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10f3720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1018420]"></a>__0fprintf_2</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf2.o(i.__0fprintf_2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10184b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10183d8]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf2.o(i.__0fprintf_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __1fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b62040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1018390]"></a>__0printf_2</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf2.o(i.__0printf_2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10184b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1018348]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf2.o(i.__0printf_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b62040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b62280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_actor
<LI><a href="#[b62598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_remove
</UL>

<P><STRONG><a name="[10f1ce8]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[101b2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perror
</UL>

<P><STRONG><a name="[10f1ca0]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[10f0dc8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10f0d80]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10f0d38]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10f3b00]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[b62598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_remove
</UL>

<P><STRONG><a name="[10f3ab8]"></a>malloc</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b62430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_add
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10184b0]"></a>_printf_core</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, printf2.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1018390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf_2
<LI><a href="#[1018420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf_2
</UL>

<P><STRONG><a name="[10f3720]"></a>_double_addcore</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f18f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10f2318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[10f24c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10f3648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10f3690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10f36d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
