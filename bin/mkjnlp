#!/bin/sh
# Script to build .jnlp files for use with Web Start.  See $PTII/mk/jnlp.mk
#
# @author: Christopher Hylands
# @version: $Id$
#
# Copyright (c) 2001 The Regents of the University of California.
# 	All Rights Reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
# 

if [ $# -lt 3 ]; then 
    echo "Usage: mkjnlp jnlpfile mainjar otherjars . . ."
    exit 5
fi

jnlpfile=$1
mainjar=$2
shift; shift
tmpfile=/tmp/mkjnlp.$$

otherjars="$@"

for file in $otherjars
do
    otherjarssizes="$otherjarssizes `ls -l $file | awk '{print $5}' - `"
done

# Read in the jar files and generate jar and package lines for them
# * We need to take in to account that one of the jar files
# will need main="true"
# * A lib/foo.jar file provides classes in the foo package
awk '{
    if ($0 ~ /<!-- Start Jars -->/) {
	sawStartJars = 1
	print $0
	printf("\t<!-- The list of jars below is automatically generated\n") 
	printf("\t     by $PTII/bin/mkjnlp -->\n");
	njars = split(otherjars, jars, " ") 
	nsizes = split(otherjarssizes, sizes, " ") 
	if (njars != nsizes) {
	    error "njars != nsizes (" nsizes " != " njars ")"
	}

	for(n = 1; n <= njars; n++) {
	    ndirs = split(jars[n], dirs, "/")
	    # If the jar file is in the lib directory then skip 
	    # the lib part.
	    if (dirs[1] == "lib" && ndirs == 2) {
		split(dirs[2],filename,".")
		package = filename[1]
	    } else {
    		package = dirs[1]
		# Skip the .jar part at the end.
		for (m = 2; m < ndirs; m++) {
		    package = package "." dirs[m]
		}
	    }
	    part = package
	    printf("\t<jar href=%c%s%c\n\t\tpart=%c%s%c", 34, jars[n], 34, 34, part, 34)
	    printf("\n\t\tsize=%c%s%c", 34, sizes[n], 34)
	    if (jars[n] == mainjar) {
		printf("\n\t\tmain=%ctrue%c", 34, 34)
	    } else {
		printf("\n\t\tdownload=%clazy%c", 34, 34)
	    }
	    printf("/>\n")
	    printf("\t<package name=%c%s.*%c\n\t\tpart=%c%s%c recursive=%ctrue%c/>\n", 34, package, 34, 34, part, 34, 34, 34)
	}
    } else {
        if (sawStartJars != 1) {
	    print $0
	} else {
	    if ($0 ~ /<!-- End Jars -->/) {
		print $0
		sawStartJars = 0
	    }
	}
    }
}' mainjar=$mainjar \
    otherjars="$otherjars" \
    otherjarssizes="$otherjarssizes" \
    $jnlpfile > $tmpfile

#diff $tmpfile $jnlpfile
cp $tmpfile $jnlpfile
rm -f $tmpfile