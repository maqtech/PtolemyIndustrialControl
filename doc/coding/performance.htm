<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../default.css" rel="stylesheet" type="text/css">
<title>Performance</title>
</head>
<body>
<h1>Performance</h1>
Contents
<menu>
<li> <a href="#profiling">Profiling</a>
<li> <a href="#remoteresources">Remote resources</a>
</menu>

<h2><a name="profiling">Profiling</a></h2>
In JDK1.1, <CODE>java -prof</CODE> creates a <CODE>java.prof</CODE>
file that contains columns for:
	<menu>
	<li> # of calls
	<li> method called
	<li> called by
	<li> time spent
	</menu>
To sort by time, use the following:
<pre>
sort -r +82 &lt; java.prof &gt; java.sort
</pre>
 <p>In JDK1.2, try
<pre>
java -Xrunhprof:help
</pre>

<h2>Simple timing</h2>
One simple way to time a run is to modify
the <CODE>run()</CODE> method in ptolemy.actor.Manager so that
<CODE>System.out.println(new Date()).getTime())</CODE> is called
at the start and the end of the <CODE>run()</CODE> method.

 <p>You may also need to include the following at the top with the other
import statements.
<pre>
import java.util.Date;
</pre>

<h2><a name="performance">Performance</a></h2>
Measuring the performance of an Applet inside a browser is tricky.

 <p><a href="http://help.netscape.com/kb/client/970907-1.html"><CODE>http://help.netscape.com/kb/client/970907-1.html</CODE></a> says:
<pre>
To troubleshoot your Java applets in UNIX environment, you can start Communicator with the "-java" switch.


 #netscape -java
 Usage: -java [-options] class

 where options include:
     -help             print out this message
     -version          print out the build version
     -v -verbose       turn on verbose mode
     -debug            enable remote JAVA debugging
     -noasyncgc        don't allow asynchronous garbage collection
     -verbosegc        print a message when garbage collection occurs
     -noclassgc        disable class garbage collection
     -cs -checksource  check if source is newer when loading classes
     -ss<number>       set the maximum native stack size for any thread
     -oss<number>      set the maximum Java stack size for any thread
     -ms<number>       set the initial Java heap size
     -mx<number>       set the maximum Java heap size
     -D<name>=<value>  set a system property
     -classpath <directories separated by ':'>
                       list directories in which to look for classes
     -prof[:<file>]    output profiling data to ./java.prof or ./<file>
     -verify           verify all classes when read in
     -verifyremote     verify classes read in over the network [default]
     -noverify         do not verify any class
</pre>

<a href="http://help.netscape.com/kb/client/970907-2.html"><CODE>http://help.netscape.com/kb/client/970907-2.html</CODE></a>
<pre>
You can automatically startup the Java Virtual Machine as you launch
 Communicator. This will prevent Communicator from restarting the
 Java Virtual Machine each time you browse pages that have Java applets
 or audio files played by the liveaudio plugin.

 The command to use is :
 "C:\Program Files\Netscape\Communicator\Program\netscape.exe" -start_java

 You can edit the properties of your start icon of the Communicator
 to add the option. You can also start the messenger (or other
 component) the same way by :
 "C:\Program Files\Netscape\Communicator\Program\netscape.exe" -start_java -mail

 Note: This doesn't seem to work on NT3.51
</pre>

<h2><a name="remoteresources">Remote resources</a></h2>

<h3>Commercial Profilers</h3>
<menu>
<li> <a href="http://www.klg.com/jprobe" target="_top">JProbe</a>

<li> <a href="http://www.optimizeit.com" target="_top">Optimizeit</a>

<li> <a href="http://www.metrowerks.com" target="_top">Metrowerks</a>

<li> <a href="http://www.sun.com/forte/ffj/index.html" target="_top">Sun's Forte For Java</a><a href="http://www.sun.com/workshop/" target="_top">Sun's Java Workshop</a>

- <A HREF="http://freeware.thesphere.com/" target="_top">Sun software available for free to Universities</A>
<li> <a href="http://www.rational.com/products/quantify_unix/index.jsp" target="_top">Quantify</a>
</menu>

<h3>Java and Optimization</h3>

<menu>

<li> <a href="http://java.sun.com/j2se/docs/PerformanceFAQ.html" target="_top">Java HotSpot FAQ</a>

<li> <a href="http://developer.java.sun.com/developer//technicalArticles/Programming/perfanal/index.html" target="_top">PerfAnal: A Performance Analysis Tool</a>
(March 2000 Java Developer Connection Article - The JDC requires registration, but is free to join)

<li> <a href="http://www.javaworld.com/javaworld/jw-09-1998/jw-09-speed.html" target="_top"> September 1998 Javaworld article</a> - includes a benchmark applet
<li> <a href="http://www.javaworld.com/javaworld/jw-04-1997/jw-04-optimize.html" target="_top">March 1997 Javaworld article</a> - includes a benchmark applet
<li> <a href="http://www.javasoft.com/docs/books/tutorial/essential/system/garbage.html" target="_top">JavaSoft Tutorial garbage collection information</a>
<li> <A HREF="http://www.cs.cmu.edu/~jch/java/" target="_top">CMU Java optimization page</A>
</menu>


<h3>Benchmarks</h3>

<menu>

<li> <a href="http://dir.yahoo.com/Computers_and_Internet/Programming_Languages/Java/Benchmarks/" target="_top">Yahoo Java Benchmarks</a>

<li> <a href="http://www.webfayre.com/pendragon/jpr/index.html" target="_top">Java Performance Report</a> (1997)
</menu>

<h3>Scripting and Java</h3>

<menu>
<li> <A HREF="http://cm.bell-labs.com/cm/cs/who/bwk/interps/pap.html" target="_top">Kernighan Scripting Benchmark paper</A>
<li> <a href="http://ptolemy.eecs.berkeley.edu/~cxh/java/tclblend/scriptperf/index.html" target="_top">Ptolemy Group Scripting Benchmark paper</a>
</menu>

<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
</body>
</html>
