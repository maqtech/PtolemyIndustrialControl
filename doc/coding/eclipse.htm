<!-- $Id$ -->
<html>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<link href="../default.css" rel="stylesheet" type="text/css">
<head>
<title>Eclipse</title>
</head>
<body>
<h1>Eclipse</h1>
Eclipse is an Integrated Development Environment available
from
<a href="http://www.eclipse.org" target="_top"><CODE>http://www.eclipse.org</CODE></a>

<h2>Installation</h2>

<h2><a name="dotFileSetup">Using dot files in $PTII to set up</a></h2>

Eclipse uses projects to manage source trees.

<p> Eclipse uses <code>.project</code> to manage the project
and <code>.classpath</code> to set the classpath and exclude files.

<p> When <code>$PTII/configure</code> is run, it 
reads in <code>$PTII/.classpath.in</code> substitutes in variables
that are surrounded with <code>@</code> and generates
<code>$PTII/.classpath</code>, which will contain the
proper classpath and directories to exclude

<ol>
<li>You may find that running <code>make clean</code>
in your ptII tree speeds things up.

<li> If necessary download Eclipse from
<a href="http://www.eclipse.org" target="_top"><CODE>http://www.eclipse.org</CODE></a>

<li> If you have already used Eclipse and you would like to start
over with new settings,
remove the <code>workspace</code> directory in the Eclipse directory.
(This directory will only appear if you have already run Eclipse).

<li> Start eclipse by clicking on the <code>eclipse.exe</code> icon.

<li> <a name="importPreferences">Import the Ptolemy II specific preferences</a>:
Window -&gt; Preferences -&gt; Import, and then browse
to <code>$PTII/.eclipse.epf</code>.
<li> Unfortunately, not all the preferences are set, you will need
to do:
Window-&gt;Preferences. Deselect Workbench-&gt;"Perform build automatically on resource modification."
<br>If you edit .tcl files, you will also need to follow the
instructions in
<a href="#tcl">Associating the Text editor with .tcl files</a>

<li> Import the Ptolemy II preferences by doing:

<li> File -&gt; Import -&gt Existing Project into Workspace
<li> Browse to the <code>ptII</code> directory (Folder: should say <code>ptII</code>). Hit OK, then Finish.
<li> Project -&gt; Rebuild All <i>Probably not necessary</i>
<li> Proceed with the <a name="simpleDebug">Simple Debugging Session</a>. 
</ol>
See <a href="#troubleshooting">Troubleshooting</a> for hints

<h2>Setting up for Ptolemy II By Hand</h2>
Below are instructions on how to set up a project by hand.
Note that the Ptolemy II tree includes <code>.classpath</code>
and <code>.project</code> files, so rather than
setting up by hand, you might want to try 
<a href="#dotFileSetup">Using dot files in $PTII to set up</a>.

<p>It is probably faster if you do:
<pre>
cd $PTII
make clean
</pre>
before setting up Eclipse.

<ol>
 <li> Download and install Eclipse from
<a href="http://www.eclipse.org" target="_top"><CODE>http://www.eclipse.org</CODE></a>

 <li> Start Eclipse.
 <li> Window-&gt;Preferences. Deselect Workbench-&gt;"Perform build automatically on resource modification."
Deselect Debug-&gt;"Build (if required) before launching"
 <li> File-&gt;New-&gt;Project. Select 'Java project'. Name it PtolemyII.
Deselect 'Use default' and browse to the PTII directory. Finish.
<li>When asked if you want to shift to the Java perspective, click on Yes.
 <li> Right click on the <code>PtolemyII</code> icon in the Package Explorer
 and select Properties</i>.
 select Java Build Path -&gt; Libraries tab -&gt
Add JARs. Browse to <code>PtolemyII/lib/</code>
and select all the jar files by holding down the Control key
and clicking on each jar file.  Hit OK, then Finish.
<li> Exclude some of the larger directories that will not compile.
<br>In the 'Properties for PtolemyII' window, select
Source, then expand the PtolemyII folder by clicking on the +,
then click on the Exclusion Filter and hit Edit.  
<br>Note that the filter paths should have trailing slashes.
<br><code>**</code> is specially interpreted.
<br>Click on Add and type in <code>**/CVS/</code>. Ok
<br>Click on Add and type in <code>**/codeDoc/</code>. Ok
<br>Click on Add and type in <code>ptolemy/apps/</code>. Ok
<br>Click on Add and type in <code>vendors/</code>. Ok
<br>Click on OK to close the Exclusion Filter
<br>Click on OK to close the 'Properties for Ptolemy II' window.
 <li> In the top level Eclipse window: Project-&gt; Rebuild All.
</ol>

<h2><a name="simpleDebug">Simple Debugging Session</a></h2>
Before editing any files, follow the steps in
<a href="#tabs">Don't use tabs in the editor</a> below

<ol>
 <li> Locate ptolemy/vergil/VergilApplication in the Explorer and
double click. Place a breakpoint on the first line of main()
<I>[with Run-&gt;Add/Remove Breakpoint]</I>
 <li> Run-&gt;Run. On the Main tab, select the Ptolemy II package and
enter ptolemy.vergil.VergilApplication as Main class.
 <li> Press the Run button...
 <li> To debug, quit Vergil, and place a breakpoint in, say, the fire() method
of ptolemy.domains.ct.kernel.CTBaseIntegrator. Then Run-&gt;Debug, and
as above. Open the Lorenz CT demo from the Quick Tour and run it.
</ol>

<h2>Additional setup for compiling just what's necessary</h2>


   There are parts of the CVS ptII tree that are not meant to be
   compiled, or are meant to be compiled only in certain situations.
   However, Eclipse will attempt to compile every .java in the project
   which typically leads to many, many error messages. To restrict
   Eclipse to compile just the appropriate .javas

<ol>
<li> You must be using Eclipse 2.1. If necessary, obtain from
       <a href="http://www.eclipse.org" target="_top"><CODE>http://www.eclipse.org</CODE></a>

<li>  Exit Eclipse if it is running

<li> In the PTII directory replace the <CODE>.classpath</CODE>
 file contents with
(but change occurrences of <CODE>C:/ptII</CODE>
 to reflect the location of  the
 <CODE>$PTII</CODE> on your system)

<pre>
   &lt;?xml version="1.0" encoding="UTF-8"?&gt;
   &lt;classpath&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/lib/sootclasses.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/lib/jasminclasses.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/lib/jython.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/lib/matlab.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/lib/matlabSunOS.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/lib/matlabWindows.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/lib/ptCal.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/lib/ptjacl.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/lib/saxon7.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/lib/diva.jar"/&gt;
       &lt;classpathentry
   excluding="vendors/|ptolemy/matlab/|ptolemy/plot/servlet/|ptolemy/acto
   r/lib/joystick/|ptolemy/apps/|ptolemy/domains/gr/|ptolemy/domains/pdf/
   |ptolemy/domains/ct/demo/Saber/|doc/coding/templates/|config/|ptolemy/
   copernicus/jhdl/|ptolemy/copernicus/c/test/"
           kind="src" path=""/&gt;
       &lt;classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/vendors/sun/jxta/jxta.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/vendors/sun/jxta/cryptix-asn1.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/vendors/sun/jxta/cryptix32.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/vendors/sun/jxta/beepcore.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/vendors/sun/jxta/minimalBC.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/vendors/sun/jxta/jxtasecurity.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/vendors/sun/jxta/log4j.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/vendors/sun/jxta/jxtaptls.jar"/&gt;
       &lt;classpathentry kind="lib" path="C:/ptII/vendors/sun/commapi/comm.jar"/&gt;
       &lt;classpathentry kind="output" path="dotclasses"/&gt;
   &lt;/classpath&gt;
</pre>


</ol>       


<h2><a name="tabs">Don't use tabs in the editor</a></h2>
This setting is in the <code>$PTII/.eclipse.epf</code> file.
See <a href="#importPreferences">Import the Ptolemy II specific preferences</a>
for details.

<p><b>Before editing any files, adjust the Editor Preference to not
use tabs</b>. 
<p>Either import the Ptolemy II specific preferences or follow
the steps below


<ol>
<li> Window -&gt;Preferences: expand the Java tree, select
'Code Formatter' and then the Style tab.  Uncheck 'Insert tabs for indentation, not spaces'.

<li> Go back to to the Java tree on the left, select
'Editor' and then the Typing tab.
Check 'InsertSpace for tabs (see Code Formatter preference page)

<li> Click Ok
</ol>


<h2><a name="tcl">Associating the Text editor with .tcl files</a></h2>
This setting is <b>not</b> in the <code>$PTII/.eclipse.epf</code> file.


<p>In the initial default settings, when you double click on a .tcl file
it tries to execute it.

 <p>The fix is:
<ol>
<li> Window -&gt;Preferences: expand the Workbench tree, select
'File Associations'

<li> In the 'File types:' section, hit Add and enter 
<CODE>*.tcl</CODE>, then hit OK

<li> In the 'Associated editors' section, hit Add
and select the Text editor, then hit OK.
</ol>


<h2><a name="troubleshooting">Troubleshooting</a></h2>

<h3>Rebuilding Briefly flashes a window</h3> 
<p>If you have problems where clicking on build briefly flashes up
a window, look in <code>$PTII/.classpath</code> for and empty
exclusion that looks like <code>||</code>

<p>If you have problems with the classpath, look in the 
<code>workspace/.metadata/log</code> file that is in
the directory where eclipse is installed. For more information
about the <code>.metadata</code> directory, see
<a href="#metadata">below</a>.


<h3>Eclipse takes a long time to start up</h3>

If Eclipse takes a long time to start up, then the problem could be that

 <p>Basically, when eclipse starts up, it might try to update
<a name="metadata"><CODE>H:/workspace/.metadata</CODE></a>
.  The solution is covered in
<a href="http://www.eclipse.org/documentation/html/plugins/org.eclipse.platform.doc.user/doc/tasks/running_eclipse.htm" target="_top"><CODE>http://www.eclipse.org/documentation/html/plugins/org.eclipse.platform.doc.user/doc/tasks/running_eclipse.htm</CODE></a>:

<BLOCKQUOTE>
<B>Running Eclipse</B>

After installing (unzipping) the Eclipse install into a directory
(e.g., c:\eclipse), the workbench is started by running the Eclipse
executable found in the top-level install directory.  The file is
eclipse.exe on Windows systems and simply eclipse on Linux
systems. Note, the following discussion details the setup on Windows
systems.  The Linux setup is analogous.

If you don't specify differently, the platform creates a default
workspace directory as a sibling of the executable (e.g.,
c:\eclipse\workspace).  This workspace directory is used as the
default content area for your projects as well as for holding any
required metadata.  For shared or multi-workspace installs you should
explicitly state the location of your workspace rather than using the
default.  There are two ways to control the location of your
workspace; using the current working directory or using the -data
command line argument.

 <p>Perhaps the easiest way of using the current working directory is
to create a shortcut using the following steps:


<ol>
<li>  Navigate to eclipse.exe in the Windows Explorer and using a right button drag, create a shortcut to eclipse.exe.

<li>  Edit the properties of the shortcut such that the "Start in:" box identifies the location of your workspace (e.g., c:\myworkspace).

<li>  Close the properties dialog and double-click on the shortcut.
</ol>

 <p>Of course you can get the same effect using a command prompt by changing directory to your workspace directory and then running eclipse.exe.

 <p>To use the -data command line argument, simply add -data &lt;your workspace location&gt; (e.g., -data c:\myworkspace) to the "Target:" line in the shortcut or include it explicitly on your command prompt command line. 
Advanced topics in running Eclipse 
</BLOCKQUOTE>


The way I figured this out was by running Norton Antivirus and
doing View -&gt; File System Realtime Scan Statistics and then I noticed 
that my machine was updating H:/workspace/.metadata

 <p>I think I introduced the problem by clicking on the Eclipse.exe
binary and selecting Pin to Start Menu.  My solution was to remove the
Eclipse bogus entry in the start menu and then create a shortcut,
change Start in property and then pin that shortcut to my start menu.


<h3>Running Eclipse under JDK1.4 on an IBM T30</h3>
If you are running on an IBM T30 laptop with JDK1.4, and
your machine locks up upon exiting an application, then
you may
need to invoke java with the <CODE>-Dsun.java2d.d3d=false</CODE> 
argument.

The way to do this is to do
<CODE>Run</CODE> 0&gt; <CODE>Debug ...</CODE> -&gt; <CODE>Arguments</CODE>
and then add <CODE>-Dsun.java2d.d3d=false</CODE>  to the
<CODE>VM arguments</CODE> text area.

</body>
</html>
