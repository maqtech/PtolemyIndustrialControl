<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II</title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>The Ptolemy Project - Ptolemy II 2.0 devel</h1>
<table content="text/html; charset=iso-8859-1" http-equiv="Content-Type">
<tr>
<td>
<img vspace="6" align="left" src="img/PtolemyIISmall.gif" alt="Claudius Ptolemy">
</td>
<td>
<p>
Ptolemy II is a software framework developed as part of the Ptolemy project.
It is a Java-based component assembly framework with a graphical
user interface called Vergil.  Vergil itself is a component assembly
defined in Ptolemy II.
</p>
<p>
The Ptolemy project studies modeling, simulation, and design of
concurrent, real-time, embedded systems. The focus is on assembly of
concurrent components. The key underlying principle in the project is
the use of well-defined <i>models of computation</i> that govern the
interactions between components. A major problem area being addressed is
the use of heterogeneous mixtures of models of computation.
</p>
<p>
The Ptolemy Project web page
contains much more information about the
project. The work is conducted in the
Department of Electrical Engineering and Computer Sciences
of the
University of California at Berkeley.
The project is directed by
Prof. Edward Lee.
The project is named after
Claudius Ptolemaeus,
the second century Greek astronomer, mathematician, and geographer.
</p>
</table>
<p>
Ptolemy II includes a growing suite of <i>domains</i>, each of which
realizes a model of computation.  It also includes a component library,
in which most components are <i>domain polymorphic</i>, in that they
can operate in several of the domains.  Most are also <i>data polymorphic</i>,
in that they operate on several data types.
The domains that have been implemented are listed below.
Some of these are preliminary and/or experimental,
as indicated below.
<ul>
<li> CT:
	continuous-time modeling,
<li> DE:
	discrete-event modeling,
<li> FSM:
	 finite state machines,
<li> PN:
	process networks,
<li> SDF:
	synchronous dataflow
 <!-- full release only domains go here -->
<li> CSP:
	 communicating sequential processes, (shipped only in the full release)
 <!-- experimental domains only below here -->
<li> DDE:
	distributed discrete events (experimental - full release only),
<li> DT:
	discrete time, (experimental - full release only),
<li> Giotto:
	periodic time-driven (experimental - full release only) and
<li> GR:
	3-D graphics (experimental - full release only).
<li> SR:
	Synchronous Reactive (experimental - full release only).
<li> TM:
	Timed Multitasking (experimental - full release only).
</ul>
</body>
</html>
