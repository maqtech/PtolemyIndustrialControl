<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>KVM</title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body>
<h1>KVM</h1>
 <p>The Ptolemy II/Palm facility is extremely experimental, and is based
on the <a href="codegen.htm">Ptolemy II Code Generation</a> facility.


 <p>In June, 1999, Sun Microsystems released a Java Virtual Machine
that ran under PalmOS.  The first release of this product was called
the KVM, where the K stood for kilobytes, indicating that the 
virtual machine would run in a very small memory footprint (50-80k of object
code).
<BLOCKQUOTE>
[Object code measurement came from http://java.sun.com/products/cldc/ds/]
</BLOCKQUOTE>



 <p>In May 2000, Sun released the Java 2 Micro Edition (J2ME), which
uses the KVM and Connected, Limited Device Configuration (CLDC) technology 
to provide a Java environment under PalmOS.

 <p>The CLDC implementation for PalmOS is fairly limited in many ways.
Two key limitatios are that that floats and doubles are not supported
and it is not possible to access native code using JNI.

 <p>We decided to attempt to run simple Ptolemy II simulations on the
Palm.  Our first attempt was a simple Ramp/File Writer simulation
running on a HandSpring PalmOS compatible.
Unfortunatley, the download/run/reset cycle took far too long.
Fortunately, there are several simulators available for PalmOS.  Palm
OS Emulator (POSE) is available from the Palm website, but it requires
a copy of a Palm ROM image.  The Palm CLDC ships with a primitive
emulator for testing J2ME code only.  We used both emulators for 
our testing, and only occaisionally ran code on the actual hardware.

 <p>The overall procedure:
<ol>
<li> Generate .java files using the Ptolemy II code generation facility.

<li> Compile the .java files while setting the 
<CODE>javac</CODE> bootclasspath to include the KVM classes

<li> The J2ME can verify classes using an alternative verification scheme.
The <CODE>preverify</CODE> tool reads in classfiles, verifies them,
and writes out new classfiles with an annotation that they are
preverified and roughly 5% larger in size

<BLOCKQUOTE>
[http://java.sun.com/products/cldc/wp/KVMwp.pdf p22]
</BLOCKQUOTE>


<li> Run the Java Palm Simulator on the preverified .class files

<li> Generate a PalmOS binary by running the 
<CODE>palm.database.MakePalmApp</CODE> Java application

<li> Download the PalmOS binary to the PalmOS Emulator that runs
under Windows.  

<li> Download the PalmOS binary to the real PalmOS hardware.

</ol>
<h2>Performance Measurements</h2>
It seems like every paper that measures performance includes
"<I>There are three kinds of lies: lies, damned lies, and statistics.</I>"
<BLOCKQUOTE>

[Mark Twain attributes this to Disraeli in
Mark Twain, Mark Twain's Own Autobiography: The
Chapters from the North American Review, ed. Michael J.
Kiskis (Madison: University of Wisconsin Press, 1990).

http://marktwain.about.com/library/texts/bl_notmarktwain.htm?terms
http://marktwain.about.com/arts/marktwain/library/biography/bl_auto_ch020.htm?terms
]

</BLOCKQUOTE>

That being said, our test environment was an IBM 600X laptop with a 450Mhz Pentium III, 192Mb of memory running Windows 2000.  We used two JVMs, the Sun JDK1.3.0
<pre>
java version "1.3.0"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.3.0-C)
Java HotSpot(TM) Client VM (build 1.3.0-C, mixed mode)
</pre>

and the the IBM 1.3.0 JDK
<pre>
java version "1.3.0"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.3.0)
Classic VM (build 1.3.0, J2RE 1.3.0 IBM build cn130-20000622 (JIT enabled: jitc
)
</pre>
We used version 1.0 of the J2ME CLDC to run on a HandSpring Visor Deluxe PalmOS3.1 8Mb.
<h3>Ramp</h3>
We created a simple Ramp/FileWriter simulation that used
integers so that it would run on the Palm

 <table>
  <th>
   Test</td>
   <td>Sun JDK times</td>
   <td>Sun JDK average</td>
   <td>IBM JDK times</td>
   <td>IBM JDK average</td>
   <td>J2ME times</td>
   <td>J2ME average</td>
  </th>
  <tr>
   <td>Ramp - Standard PTII Simulation </td>
   <td>330ms 321ms 320ms 331ms 320ms</td>
   <td>324.4ms</td>
   <td>411ms 411ms 411ms 421ms 410ms</td>
   <td>412.8ms</td>
   <td>NA</td>
   <td>NA</td>
  </tr>
  <tr>
   <td>Ramp - codegen </td>
   <td>161ms 160ms 161ms 160ms 170ms</td>
   <td>162.4ms</td>
   <td>250ms 221ms 210ms 210ms 211ms</td>
   <td>220.4ms</td>
   <td>18210ms 18220ms 18210ms 18210ms 18210ms</td>
   <td>18212ms</td>
  </tr>
  <tr>
   <td>Orthocom - Standard PTII Simulation </td>
   <td>621ms 631ms 630ms 631ms 630ms</td>
   <td>628.6ms</td>
   <td>1261ms 1092ms 1112ms 1102ms 1192ms</td>
   <td>1151.8ms</td>
   <td>NA</td>
   <td>NA</td>
  </tr>
  <tr>
   <td>Orthcom - codegen </td>
   <td>210ms 230ms 230ms 230ms 230ms</td>
   <td>226.0ms</td>
   <td>421ms  440ms  450ms  461ms  440ms</td>
   <td>442.4ms</td>
   <td>NA</td>
   <td>NA</td>
  </tr>
 </table>

 <p>Interestingly running the Palm OS Emulator 3.0a6 yielded the following
printed run times for the Ramp codegen, but the actual walk clock time was more like 11 seconds

(46370ms 46380ms 50010ms 50000ms 50020ms)

<h2>Remote links</h2>
<menu>

<li> <a href="http://java.sun.com/products/cldc/" target="_top">CLDC and the K Virtual Machine (KVM)</a>
<li> <a href="http://java.sun.com/products/kvm/wp/KVMwp.pdf" target="_top">KVM White paper</a>
<li> <a href="http://java.sun.com/products/cldc/faqs.html" target="_top">CLDC FAQ</a>

<li> <a href="http://www.sun.com/software/communitysource/j2me/download.html" target="_top">Download j2me</a>

<li> <a href="http://kvm.exnet.com/" target="_top"><CODE>http://kvm.exnet.com/</CODE></a>KVM FAQ and bugs

<li> <a href="http://webdev.apl.jhu.edu/~rbe/kvm" target="_top">Robert Evans KVM Pages</a>
Tutorial with sample code, links

<li> <a href="http://www.trantor.de/kawt/" target="_top">KAWT Project</a>
An abstract window toolkit for the KVM 

<li> <a href="http://www.billday.com/KVMArchive/index.html" target="_top">Billday.com KVMArchive</a>
</menu>

<h3><a name="kvm_installation">Using the kvm with the Ptolemy II tree</a></h3>
The Ptolemy II tree has hacks in it so that it can be used to build
binaries to run on the Palm.
<ol>
<li> Download 
<a href="http://www.sun.com/software/communitysource/j2me/download.html" target="_top">j2me</a>.  Note that you need to grab two files
<dl>
<dt><code>j2me_cldc-1_0-src-winsol.zip</code>
<dd> The J2ME CLDC Reference implementation. 
<dt><code>j2me_cldc-1_0-src-palm_overlay.zip</code>
<dd> The PalmOS specific files
</dl>
<li> Unzip <code>j2me_cldc-1_0-src-winsol.zip</code> so it appears
in <CODE>$PTII/vendors/sun</CODE>.  This should
create a directory named <CODE>$PTII/vendors/sun/j2me_cldc</CODE>.

<li> Unzip <code>j2me_cldc-1_0-src-palm_overlay.zip</code>
from within <CODE>$PTII/vendors/sun/j2me_cldc</CODE>.
Note that you will extract this file from within the directory
that was just created by the previous step.  If you 
are asked about overwriting any files, say 'yes'.


<li> The
<a href="http://www.palmos.com/dev/tech/tools/emulator/" target="_top">Palm OS Emulator (POSE)</a>
can be used to run the KVM, but you need to have access to a Palm to
download the ROM code, or join the Palm Solution Provider Program and
snail mail a signed form back to them.

 <p>Note that the Palm OS Emulator does not work with the Handspring ROM
image.


<li> Start up the Palm emulator and point it at the ROM Image.

<li> To transfer applications to the Palm Emulator, right click
and select <CODE>Install Application/Database</CODE>

 <br> To transfer applications to the Palm or Handspring, start
up the <CODE>Palm Desktop</CODE>, click on the <CODE>Install</CODE>
icon, find the application(s) to transfer, then select <CODE>Done</CODE>, then
hotsync the Palm or Handspring.

<li> <CODE>$PTII/vendors/sun/j2me_cldc/bin</CODE> contains
<dl>
<dt> <CODE>KVM.prc</CODE>
<dd> The kvm Palm Program (required)
<dt> <CODE>KVMutil.prc</CODE>
<dd> The kvm Palm Utilities program which allows you to look at
stderr and stdout 
<dt> Several demos 
<dd> (optional)
</dl>
Transfer <CODE>KVM.pdb</CODE> and <CODE>KVMutil.prc</CODE> and any
demos to your Palm, Handspring or PalmOS emulator and try them out.

<li> Ptolemy II can compile kvm apps for the Palm.
 <br>Remove the Ptolemy configure cache files and rerun configure:
<pre>
cd $PTII
rm config.status config.cache
./configure
</pre>
configure should find the kvm installation and set the
<CODE>KVM_CLASSES</CODE> and <CODE>KVM_DIR</CODE> makefile variables
in <CODE>$PTII/mk/ptII.mk</CODE>


<li> Compile a simple Palm KVM demo:
<pre>
cd $PTII/ptolemy/apps/kvm/demo/hello
make
</pre>

<li> Transfer <CODE>$PTII/ptolemy/apps/kvm/demo/hello/Hello.prc</CODE> to your Palm
or Handspring and run it.

</ol>



<h2><a name="kvm_executable">kvm executable</a></h2>
<code>j2me_cldc</code> includes a simple Palm emulator for Windows
and Solaris.  Unfortunately, it looks like the emulator requires
a version of Solaris later than 2.5.1, but the Windows version
builds under Windows 2000.  The advantage of using kw or ku
is that you need not have PalmOS hardware or Palm ROM images.
<h3>Building <code>kvm.exe</code> under Windows</h3>
<ol>
<li>You will need Microsoft Visual C++.
<li>You will need a zip binary such as
<A HREF="ftp://ftp.cdrom.com/pub/tex/ctan/tools/zip/info-zip/WIN32/zip22x\
N.zip"><code>ftp://ftp.cdrom.com/pub/tex/ctan/tools/zip/info-zip/WIN32/zip22x</code></A>
<li> You will need Cygwin or MKS tools.
<li>To build:
<pre>
cd $PTII/vendors/sun/j2me_cldc/build/win32
make
</pre>
<li> To run:
<pre>
$PTII/vendors/sun/j2me_cldc/kvm/VmWin/build/kvm.exe -classpath "$PTII/vendors/sun/j2me_cldc/apiclasses;/j2me_cldc/samples/classes" Dragon
</pre>
</ol>

<h2>KVM Demonstration</h2>
<a href="../ptolemy/apps/kvm/demo/ramp"><code>$PTII/ptolemy/kvm/demo/ramp</code></a>
contains a simple SDF demonstration system that consists of a Ramp and
a FileWriter.
<br><bold>FIXME: Ramp stars do not work yet</bold>

<p>This simulation sets several makefile variables in
<a href="../ptolemy/apps/kvm/demo/ramp/makefile"><code>$PTII/ptolemy/apps/kvm/demo/ramp/makefile</code></a> and then includes
<a href="#kvm_mk"><code>$PTII/mk/kvm.mk</code></a>.
<p>To run the demonstration:
<ol>
<li><a href="#kvm_installation">Install the KVM</a> and rerun configure.
<li>Compile the <code>.java</code> files:
<pre>
cd $PTII/ptolemy/apps/kvm/demo
make
</pre>
<li> Run the demo as using the standard Ptolemy II runtime:
<pre>
make demo_interpreted
</pre>
<li> Run the demo as using the codegen facility
<pre>
make codegen
</pre>
The Palm binary should appear as
<code>$PTII/cg/ramp/CG_Main.prc</code>.  Download this binary
to your emulator or hardware and run it.
<li>This demo prints to stdout, to see the output run the
KVMutil application on your Palm.
</ol>


<h3><name="kvm_mk"<code>$PTII/mk/kvm.mk</code></a></h3> <a
href="../mk/kvm.mk"><code>$PTII/mk/kvm.mk</code></a> defines makefile
variables and rules that generate code, compile it and build a Palm
binary.  The comments in <code>kvm.mk</code> are the best
documentation of how the facility works.
<p> Note that to build a Palm binary, you should first
run the preverifier and then use the <code>.class</code>
files from the <code>output</code> directory that are
created by the preverifier.  If you use the
<code>.class</code> files that were created by
javac directly, then you may get verifier errors.


<h2>KVM limitations</h2>
<h3>doubles in the KVM</h3>
<a href="http://java.sun.com/products/cldc/faqs.html"><code>http://java.sun.com/products/cldc/faqs.html</code></a> says
<blockquote>
Specifically, some features of larger Java virtual machine implementations, like double and long data types, are not supported. For more detail on
specific differences, see the K virtual machine whitepaper at 
<a href="http://java.sun.com/products/kvm/wp/KVMwp.pdf">http://java.sun.com/products/kvm/wp/KVMwp.pdf</a>  
</blockquote>
At run time, lines like:
<pre>
    public final static double[] _cg_output_7 = new double[8];
</pre>
cause errors like:
<pre>
ALERT: Error verifying class ptolemy/apps/kvm/hello/Hello
</pre>
even though preverify does not indicate that there is an error

<h3>Verifier errors</h3>
The most common error message is 
<code>ALERT: Error verifying class <i>foo/bar/baz</i></code>
Unfortunately, this error is not very descriptive.
To get better error messages:
<ol>
<li> Modify the 
<code>j2me_cldc/kvm/VmCommon/src/class.c</code> so that 
the return code is printed by modifying <code>initializeClass()</code>:
<pre>
	if (results = verifyClass(thisClass)) {
	    START_TEMPORARY_ROOTS
	    sprintf(str_buffer, 
		    "Error verifying class %s: error code: %d", className(thisClass), results);
	    fatalError(str_buffer);
            END_TEMPORARY_ROOTS
	}
</pre>
The error codes themselves are in <code>verifier.c</code> in the
same directory.
<li> To get a trace of the verifier, add
<pre>
#define TRACEVERIFIER 1
</pre>
to the top of <code>verifier.c</code>.
<li> Recompile the kvm executable as per the
<a href="#kvm_executable">kvm executable</a> instructions
above.


</body>
</html>
