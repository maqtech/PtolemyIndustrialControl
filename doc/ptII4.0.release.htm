<!-- $Id$ -->
<html>
<head>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<title>Ptolemy II 4.0-beta Release Notes</title>
<link href="default.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#faf0e6">
<h1>Ptolemy II 4.0-beta Release Notes</h1>

Ptolemy II is a set of Java packages supporting heterogeneous,
concurrent modeling and design.  Its <code>kernel</code> package
supports clustered hierarchical graphs, which are collections of
<I>entities</I> and <I>relations</I> between those entities.  Its
<code>actor</code> package extends the kernel so that entities have
functionality and can communicate via the relations.  Its
<I>domains</I> extend the actor package by imposing <I>models of
computation</I> on the interaction between entities.  Examples of
models of computation include discrete-event systems, dataflow,
process networks, synchronous/reactive systems, and communicating
sequential processes.

 <p>Ptolemy II includes a number of support packages, such as 

 <br><code>data</code>, providing a type system, data encapsulation and an
 expression parser,

 <br><code>plot</code>, providing visual display of data,

 <br><code>math</code>, providing matrix and vector math and signal
processing functions, and

 <br><code>graph</code>, providing graph-theoretic manipulations.


 <p>The three volumes of the Ptolemy II Design Document
describes the Ptolemy II design and
the implementation of the Java classes.
<ul>
 <li><a href="design/ptIIdesign1-intro.pdf">Volume 1: Introduction to Ptolemy II</a> (Local PDF)
 <li><a href="design/ptIIdesign2-software.pdf">Volume 2: Ptolemy II Software Architecture</a> (Local PDF)
 <li><a href="design/ptIIdesign3-domains.pdf">Volume 3: Ptolemy II Domains</a> (Local PDF)
</ul>

 <p>The "Using Vergil" chapter (
<a href="design/usingVergil/usingVergil.pdf">PDF</a>
 - <a href="design/usingVergil/index.htm">HTML</a>) describes
how to use Vergil.


<h2>Complete List of Domains in Ptolemy II</h2>
 <!-- We include this list here since we will be posting the release notes
to the newsgroups etc.  See also main.htm
 -->
<ul>
<li> <a href="../ptolemy/domains/ci/doc/body.htm" target="body">CI</a>:
	 component interaction (experimental),
<li> <a href="../ptolemy/domains/csp/doc/body.htm" target="body">CSP</a>:
	 communicating sequential processes,
<li> <a href="../ptolemy/domains/ct/doc/body.htm" target="body">CT</a>:
	continuous-time modeling,
<li> <a href="../ptolemy/domains/de/doc/body.htm" target="body">DE</a>:
	discrete-event modeling,
<li> <a href="../ptolemy/domains/dde/doc/body.htm" target="body">DDE</a>:
	distributed discrete events (experimental),
<li> <a href="../ptolemy/domains/dt/doc/body.htm" target="body">DT</a>:
	discrete time,
<li> <a href="../ptolemy/domains/fsm/doc/body.htm" target="body">FSM</a>:
	finite state machines,
<li> <a href="../ptolemy/domains/giotto/doc/body.htm" target="body">Giotto</a>:
	periodic time-driven (experimental),
<li> <a href="../ptolemy/domains/gr/doc/body.htm" target="body">GR</a>:
	3-D graphics (experimental),
 <!-- petrinet ??-->
<li> <a href="../ptolemy/domains/pn/doc/body.htm" target="body">PN</a>:
	process networks,
<li> <a href="../ptolemy/domains/psdf/doc/body.htm" target="body">PSDF</a>:
	parameterized synchronous dataflow (experimental),
<li> <a href="../ptolemy/domains/sdf/doc/body.htm" target="body">SDF</a>:
	synchronous dataflow,
<li> <a href="../ptolemy/domains/sr/doc/body.htm" target="body">SR</a>:
	synchronous/reactive,
<li> <a href="../ptolemy/domains/tm/doc/body.htm" target="body">TM</a>:
	timed multitasking (experimental), and
<li> <a href="../ptolemy/domains/wireless/doc/body.htm" target="body">Wireless</a>:
	 wireless (experimental).

</ul>

<h2>Platforms</h2>

The core of Ptolemy II 4.0 is 100% Java, so it should work on any
platform that has JDK 1.4 or later

 <p>We developed Ptolemy II 4.0 under Solaris 8 and Windows XP sp1 
and with JDK1.4.2_04

<p>Ptolemy II 4.0 will not compile under Java 1.3 because we use the
java.lang.URI class, which is present only in Java 1.4 and later

<p>There are various problems with Java 1.5.0-beta:
<menu>
<li> <a href="#webstart1.5.0-beta">Web Start</a> does not work
<li> Caltrop does not work
</menu>

 <p>Ptolemy II has been compiled and run
under IBM JDK 1.4.0 and IBM JDK 1.4.1



<!--whatsnew-->
<h2>Major Features that are new in Ptolemy II 4.0 </h2>
Below are new features that were not present in Ptolemy II 3.x
<ul>
<li>
<a href="../ptolemy/domains/wireless/demo/WirelessSoundDetection/WirelessSoundDetection.htm">
Modeling wireless sensor networks</a> (see also
<a href="design/visualsense.pdf" target="_top">VisualSense</a>).
<br>
The wireless domain extends the DE domain with wireless channel modeling and
library of components and methodologies for modeling wireless systems.
This domain is packaged in a Ptolemy II configuration called
VisualSense, which includes
an extensive suite of demos.

<li>
<a href="../ptolemy/domains/sdf/demo/NoisySinewave/NoisySinewaveVergil.htm">
Hierarchical classes, subclasses, and inner classes</a>. (See also
<a href="../ptolemy/configs/doc/ClassesIllustrated.png">
classes illustrated visually</a> and
<a href="../ptolemy/domains/sdf/demo/RijndaelEncryption/RijndaelEncryption.htm">
Rijndael Encryption</a>).
<br>
Version 4.0 introduces actor-oriented classes, subclasses, and
inner classes with inheritance. This is a major improvement in
the modularity mechanisms available in actor-oriented design. 
A side effect of the class mechanism is that MoML files are now
much smaller since they do not duplicate information defined
in a base class.

<li>
<a href="../ptolemy/domains/sdf/demo/MultipleRuns/MultipleRuns.htm">
Lifecycle management</a> (see also
<a href="../ptolemy/actor/lib/hoc/demo/ModelReference/ModelReference.htm">
ModelReference</a>).
<br>
Version 4.0 introduces the first of a family of
<i>lifecycle management</i> actors, which are actors
that control the execution of associated models.
This example uses one model to control repeated runs of another.

</ul>

<h2>Other Features that are new in Ptolemy II 4.0</h2>
<ul>
<li>
<a href="../ptolemy/data/unit/demo/StaticUnits/NonAppletStaticUnits.htm">
Statically Checked Unit System</a> (see also the older
<a href="../ptolemy/data/unit/demo/Units/Units.htm">
Dynamically Checked Units System</a>).
<br>
The new statically checked units system associates
units with ports and checks compatibility in connections.

<li>
<a href="../ptolemy/actor/lib/hoc/demo/IterateOverArray/IterateOverArray.htm">
Higher-Order Components</a>.
Version 4.0 adds <i>higher-order components</i>,
which are components (like actors) that operate on other
components rather than directly on data.

<li>
<a href="../ptolemy/vergil/kernel/attributes/demo/AnimateVergil/AnimateVergil.htm">
Interactive decorations in Vergil diagrams</a>.
<br>
Actors can have custom icons, diagrams can be decorated with
decorative elements, and parameters of the icons and decorative
elements can be tied to values compute by the model.

<li>
<a href="../ptolemy/domains/psdf/demo/BlindCommunication/BlindCommunication.htm">Reconfiguration analysis</a>
<br>
A new capability helps to ensure the safe use of reconfiguration.
Currently it is primarily used by the code generator to
ensure that synchronous dataflow rate parameters are constant
over the lifetime of the model.  This analysis also enables
parameterized static scheduling of some models where rate parameters
change only between iterations of a sub-model.

<li>
<a href="../ptolemy/domains/de/demo/HierarchicalModel/HierarchicalModel.htm">
Causality analysis</a> (see also
<a href="../ptolemy/domains/sr/demo/FeedbackLoop/FeedbackLoop.htm">SR FeedbackLoop</a>).
<br>
A new (and still evolving) capability unifies causality analysis
that is required by several domains. It provides a systematic
framework for determining whether events at a particular input
affect a particular output.

<li>
Copernicus
<br>
The copernicus code generator has matured significantly:
<ul>
<li>Better handling of data types, reconfiguration, and attributes other than
simple parameters.
<li>Code Generation for the Giotto domain.
<li>A primitive code generator for generating atomic actors from models.
<li>Static analysis of reachable code for generating self-contained jar files.
</ul>

<!-- FIXME: String parameters -->

</ul>

<h3>New Demonstrations</h3>

<h2>
New and Enhanced Actor Libraries
</h2>
<ul>

<li> 
<a href="codeDoc/ptolemy/actor/lib/security/package-summary.html">Security library</a>.

<li>
<a href="codeDoc/ptolemy/actor/lib/security/package-summary.html">Array manipulatoin library</a> (See also
<a href="../ptolemy/domains/sdf/demo/Array/Array.htm">
Array</a>).

<li>
<a href="codeDoc/ptolemy/actor/lib/comm/package-summary.html#package_description">
Communications library</a> (see also
   <a href="../ptolemy/actor/lib/comm/demo/ConvolutionalCoder/ConvolutionalCoder.htm">ConvolutionalCoder</a>,
   <a href="../ptolemy/actor/lib/comm/demo/Scrambler/Scrambler.htm">Scrambler</a>,
   <a href="../ptolemy/actor/lib/comm/demo/TrellisDecoder/TrellisDecoder.htm">TrellisDecoder</a>,
   <a href="../ptolemy/actor/lib/comm/demo/ViterbiDecoder/ViterbiDecoder.htm">ViterbiDecoder</a>).
   
<!-- FIXME: String library -->

</ul>
<h2>
New Demonstrations of Older Capabilities
</h2>
<ul>
<!-- "../ptolemy/domains/de/demo/SmartSender/SmartSender.htm">
Self repairing model is not a very good applet-->

<li> <a href="../ptolemy/domains/ct/demo/Transmission/Transmission.htm">
Using function closures to simplify a hybrid system model (of a car transmission)</a>.

<li> <a href="../ptolemy/domains/sdf/demo/SynthesizedVoice/SynthesizedVoice.htm">
SynthesizedVoice</a>.

</ul>
<h2>
Capabilities requiring additional software and/or hardware
</h2>

<ul>
<li>
<a href="codeDoc/ptolemy/actor/lib/io/comm/SerialComm.html">
Serial port actors</a>.

<li>
<a href="codeDoc/ptolemy/actor/lib/x10/X10Interface.html">
X10 power-line network actors</a>.

<li>
The 
<a href="codeDoc/ptolemy/matlab/Expression.html">Matlab Expression actor</a>
now takes a String Parameter instead of a  StringAttribute.
This means that you can now reference parameters in scope using the
$name or ${name} syntax.  For instance, if there is a parameter named
foo, you can specify a Matlab expression like:
<pre>
    output = fft(in, $foo)
</pre>
Before, you would have to have read foo in a Const actor and
provided it as input to the Matlab expression actor.

<li> <a href="codeDoc/ptolemy/actor/lib/jmf/package-summary.html#package_description">
Java Media Framework (JMF) actors</a>.

<li><a href="codeDoc/ptolemy/domains/gr/lib/quicktime/package-summary.html#package_description">
GR Quicktime actors</a>.

</ul>


<h2>
<a name="features">
Additional Features
</a>
</h2>
<ul>


<li> Other updates to Vergil:
	<menu>
	<li> Expert mode parameter editing
	<li><CODE>vergil -help</CODE> lists available configurations.
	<li> Full-screen mode for use in presentations (accessible from the toolbar).
	<li> <a href="codeDoc/ptolemy/vergil/kernel/attributes/DocumentationAttribute.html">DocumentationAttribute</a>
	<li> <a href="codeDoc/ptolemy/kernel/attributes/IDAttribute.html">
	     IDAttribute</a>
    </menu>

<li> Single Window Mode (contributed by Thales).
<br> If <code>vergil -single</code> is invoked, then a single window interface
is used.  This interface is experimental.
<br>Limitations:
<ul>
<li>The <code>-single</code> argument should be the first argument.
<li>The plot windows come up outside of the single window interface.
</ul>

<li> XMLToken.
This is a preliminary mechanism for manipulating XML data in Ptolemy II models.

<li> Sandbox support
<br>Vergil has better support for operating in a security sandbox.
For details, see the
<a href="sandbox.htm">Ptolemy II Sandbox documentation</a>.
</ul>

<h2>New Actors</h2>


<menu>
<li> <b><a href="codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/ArrayAverage.html">ArrayAverage</a>:
<dd>(Mark Oliver, Edward A. Lee)
An actor that outputs the average of the input array.

<dt><a href="codeDoc/ptolemy/actor/lib/ArrayLevelCrossing.html">ArrayLevelCrossing</a>:
<dd>(Edward A. Lee, Steve Neuendorffer)
An actor that finds the index of the first item in an array to cross a specified threshold.

<dt><a href="codeDoc/ptolemy/actor/lib/ArrayPeakSearch.html">ArrayPeakSearch</a>:
<dd>(Edward A. Lee)
An actor that identifies peaks in an array.

<dt><a href="codeDoc/ptolemy/actor/lib/ArraySort.html">ArraySort</a>:
<dd>(Mark Oliver, Edward A. Lee)
An actor that sorts the elements of an array.

<dt><a href="codeDoc/ptolemy/actor/lib/ArrayToElements.html">ArrayToElements</a>:
<dd>(Rachel Zhou)
An actor that disassemble an ArrayToken to a multiport output.

<dt><a href="codeDoc/ptolemy/actor/lib/ComputeHistogram.html">ComputeHistogram</a>:
<dd>(Steve Neuendorffer)
Compute a histogram of input data.

<dt><a href="codeDoc/ptolemy/actor/lib/ElementsToArray.html">ElementsToArray</a>:
<dd>(Rachel Zhou)
An actor that reads a token from each input channel to assemble an ArrayToken.

<dt><a href="codeDoc/ptolemy/actor/lib/Exec.html">Exec</a>:
<dd>(Christopher Hylands Brooks, Contributor: Edward A. Lee)
Execute a command in a subprocess.

<dt><a href="codeDoc/ptolemy/actor/lib/Exit.html">Exit</a>:
<dd>(Edward A. Lee)
A simple sink actor that consumes and discards input tokens and then calls System.exit() in wrapup.

<dt><a href="codeDoc/ptolemy/actor/lib/GradientAdaptiveLattice.html">GradientAdaptiveLattice</a>:
<dd>(Steve Neuendorffer)
An IIR filter actor that uses a direct form II implementation.

<dt><a href="codeDoc/ptolemy/actor/lib/SetVariable.html">SetVariable</a>:
<dd>(Edward A. Lee, Steve Neuendorffer)
Set the value of a variable contained by the container.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/comm/package-summary.html">ptolemy.actor.lib.comm</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/comm/Slicer.html">Slicer</a>:
<dd>(Rachel Zhou)
A Slicer, which functions as a decoder of the LineCoder of complex type.

<dt><a href="codeDoc/ptolemy/actor/lib/comm/TrellisDecoder.html">TrellisDecoder</a>:
<dd>(Rachel Zhou, contributor: Edward A. Lee)
Decode convolutional code with non-antipodal constellation.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/conversions/package-summary.html">ptolemy.actor.lib.conversions</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/conversions/StringToXML.html">StringToXML</a>:
<dd>(Yang Zhao)
An actor that outputs data read from a URL.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/hoc/package-summary.html">ptolemy.actor.lib.hoc</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/hoc/IterateOverArray.html">IterateOverArray</a>:
<dd>(Edward A. Lee, Steve Neuendorffer)
An actor that iterates a contained actor over input arrays.

<dt><a href="codeDoc/ptolemy/actor/lib/hoc/MobileFunction.html">MobileFunction</a>:
<dd>(Yang Zhao)
An actor that apply dynamically defined functions to its input.

<dt><a href="codeDoc/ptolemy/actor/lib/hoc/MobileModel.html">MobileModel</a>:
<dd>(Yang Zhao)
A composite actor that apply models dynamically.

<dt><a href="codeDoc/ptolemy/actor/lib/hoc/ModelReference.html">ModelReference</a>:
<dd>(Edward A. Lee)
An atomic actor that executes a model specified by a file or URL.

<dt><a href="codeDoc/ptolemy/actor/lib/hoc/ModelUtilities.html">ModelUtilities</a>:
<dd>(Yang Zhao)
Utilities that manipulate a model.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/io/package-summary.html">ptolemy.actor.lib.io</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/io/DirectoryListing.html">DirectoryListing</a>:
<dd>( Christopher Hylands, Edward A. Lee)
An actor that produces an array that lists the contents of a directory.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/jai/package-summary.html">ptolemy.actor.lib.jai</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/jai/AdaptiveMedian.html">AdaptiveMedian</a>:
<dd>(James Yeh)
An actor that performs adaptive median filtering on a double matrix.

<dt><a href="codeDoc/ptolemy/actor/lib/jai/ImageToJAI.html">ImageToJAI</a>:
<dd>(James Yeh)
Convert an ImageToken to a JAIImageToken.

<dt><a href="codeDoc/ptolemy/actor/lib/jai/JAIConstant.html">JAIConstant</a>:
<dd>(James Yeh, Steve Neuendorffer)
An actor that produces a JAIImageToken with constant bands.

<dt><a href="codeDoc/ptolemy/actor/lib/jai/JAIDataConvert.html">JAIDataConvert</a>:
<dd>(James Yeh)
An actor that changes the data format in a JAIImageToken.

<dt><a href="codeDoc/ptolemy/actor/lib/jai/JAIPNGWriter.html">JAIPNGWriter</a>:
<dd>(James Yeh)
An actor that writes to a PNG file.

<dt><a href="codeDoc/ptolemy/actor/lib/jai/SaltAndPepper.html">SaltAndPepper</a>:
<dd>()
package ptolemy.actor.lib.jai;

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/javasound/package-summary.html">ptolemy.actor.lib.javasound</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/javasound/LiveSoundActor.html">LiveSoundActor</a>:
<dd>(Steve Neuendorffer)
An actor that reads in audio samples and plays the audio data.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/jmf/package-summary.html">ptolemy.actor.lib.jmf</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/jmf/AudioPlayer.html">AudioPlayer</a>:
<dd>(James Yeh)
An actor that plays a DataSource containing a music file.

<dt><a href="codeDoc/ptolemy/actor/lib/jmf/ImageToJMF.html">ImageToJMF</a>:
<dd>(Christopher Hylands Brooks)
Convert an ImageToken into a JMFImageToken.

<dt><a href="codeDoc/ptolemy/actor/lib/jmf/MovieReader.html">MovieReader</a>:
<dd>(James Yeh)
An actor that outputs frames from a video file.

<dt><a href="codeDoc/ptolemy/actor/lib/jmf/MovieWriter.html">MovieWriter</a>:
<dd>(James Yeh)
An actor that writes frames to a video file.

<dt><a href="codeDoc/ptolemy/actor/lib/jmf/StreamLoader.html">StreamLoader</a>:
<dd>(James Yeh)
Load a datasource from a URL.

<dt><a href="codeDoc/ptolemy/actor/lib/jmf/VideoPlayer.html">VideoPlayer</a>:
<dd>(James Yeh)
An actor that displays a AVI, Quicktime or MPEG video file.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/security/package-summary.html">ptolemy.actor.lib.security</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/security/CipherActor.html">CipherActor</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
A base class for actors that encrypt and decrypt data.

<dt><a href="codeDoc/ptolemy/actor/lib/security/CryptographyActor.html">CryptographyActor</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
A base class for cryptographic actors.

<dt><a href="codeDoc/ptolemy/actor/lib/security/KeyReader.html">KeyReader</a>:
<dd>( Christopher Hylands Brooks)
Read in a keystore from a FileParameter and output a Key.

<dt><a href="codeDoc/ptolemy/actor/lib/security/KeyStoreActor.html">KeyStoreActor</a>:
<dd>( Christopher Hylands Brooks)
A baseclass for actors that read or write keystores.

<dt><a href="codeDoc/ptolemy/actor/lib/security/KeyToken.html">KeyToken</a>:
<dd>(Christopher Hylands Brooks, Based on TestToken by Steve Neuendorffer)
Tokens that contain java.security.Keys

<dt><a href="codeDoc/ptolemy/actor/lib/security/KeyWriter.html">KeyWriter</a>:
<dd>( Christopher Brooks)
Read in a Key from the input port and write it out to a KeyStore.

<dt><a href="codeDoc/ptolemy/actor/lib/security/PrivateKeyReader.html">PrivateKeyReader</a>:
<dd>( Christopher Hylands Brooks)
Open a keystore from a FileParameter and output a PrivateKey.

<dt><a href="codeDoc/ptolemy/actor/lib/security/PublicKeyReader.html">PublicKeyReader</a>:
<dd>( Christopher Brooks)
Open a keystore from a FileParameter and output a PublicKey.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SecretKey.html">SecretKey</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
Create a secret key and send it on the output.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SecretKeyReader.html">SecretKeyReader</a>:
<dd>( Christopher Hylands Brooks)
Open a keystore from a FileParameter and output a SecretKey.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SignatureActor.html">SignatureActor</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
A base class for signature actors.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SignatureSigner.html">SignatureSigner</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
Sign the input data using a private key.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SignatureVerifier.html">SignatureVerifier</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
Verify the signature of the input data.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SymmetricDecryption.html">SymmetricDecryption</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
Decrypt an unsigned byte array using a symmetric algorithm.

<dt><a href="codeDoc/ptolemy/actor/lib/security/SymmetricEncryption.html">SymmetricEncryption</a>:
<dd>(Christopher Hylands Brooks, Contributor: Rakesh Reddy)
Encrypt an unsigned byte array using a symmetric algorithm.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/string/package-summary.html">ptolemy.actor.lib.string</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/string/StringCompare.html">StringCompare</a>:
<dd>(Vinay Krishnan, Daniel L\341zaro Cuadrado (contributor: Edward A. Lee))
An actor that computes a specified String comparison function on the two String inputs.

<dt><a href="codeDoc/ptolemy/actor/lib/string/StringFunction.html">StringFunction</a>:
<dd>(Mike Kofi Okyere, Ismael M. Sarmiento)
Trim a string, convert a string to uppercase, or convert a string to lowercase depending on the user's selection.

<dt><a href="codeDoc/ptolemy/actor/lib/string/StringIndexOf.html">StringIndexOf</a>:
<dd>(Rakesh Reddy, Philip Baldwin, Edward A. Lee)
Finds index of a string contained in a given text

<dt><a href="codeDoc/ptolemy/actor/lib/string/StringLength.html">StringLength</a>:
<dd>(Edward A. Lee)
Output the length of a string provided at the input.

<dt><a href="codeDoc/ptolemy/actor/lib/string/StringMatches.html">StringMatches</a>:
<dd>(Antonio Yordan-Nones, Colin Cochran (contributor Edward A. Lee))
Pattern match a string to a regular expression.

<dt><a href="codeDoc/ptolemy/actor/lib/string/StringReplace.html">StringReplace</a>:
<dd>(Antonio Yordan-Nones, Neil E. Turner, Edward A. Lee)
Replace an instance of a string with another input string according to a regular expression.

<dt><a href="codeDoc/ptolemy/actor/lib/string/StringSubstring.html">StringSubstring</a>:
<dd>(Neil E. Turner and Edward A. Lee)
Output a substring of the string provided at the input.

</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/x10/package-summary.html">ptolemy.actor.lib.x10</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/x10/ApplianceController.html">ApplianceController</a>:
<dd>(Colin Cochran (contributor: Edward A. Lee))
An ApplianceController actor sends x10-appliance-module commands to the x10 network.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/CommandListener.html">CommandListener</a>:
<dd>(Colin Cochran and Edward A. Lee)
This actor senses specified X10 commands.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/LampController.html">LampController</a>:
<dd>(Colin Cochran and Edward A. Lee)
A LampController actor sends X10-light-module commands to the X10 network.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/LevelListener.html">LevelListener</a>:
<dd>(Colin Cochran and Edward A. Lee)
This actor senses specified X10 commands.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/Listener.html">Listener</a>:
<dd>(Colin Cochran (contributor: Edward A. Lee))
Output X10 commands detected on the X10 network.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/Receiver.html">Receiver</a>:
<dd>(Colin Cochran and Edward A. Lee)
Receive x10 commands propagating through an x10 network.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/Sender.html">Sender</a>:
<dd>(Colin Cochran (contributor: Edward A. Lee))
Send commands to an x10 network.

<dt><a href="codeDoc/ptolemy/actor/lib/x10/X10Interface.html">X10Interface</a>:
<dd>(Colin Cochran and Edward A. Lee)
This class creates an x10 inteface device which can send and receive 
10 commands to and from an x10 network.
</dl>

<li> <b><a href="codeDoc/ptolemy/actor/lib/xslt/package-summary.html">ptolemy.actor.lib.xslt</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/actor/lib/xslt/XSLTransformer.html">XSLTransformer</a>:
<dd>( Yang Zhao, Christopher Hylands Brooks)
An actor that read an XSLT file and apply it to its input.

</dl>


<li> <b><a href="codeDoc/ptolemy/domains/gr/lib/package-summary.html">ptolemy.domains.gr.lib</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/domains/gr/lib/Box2D.html">Box2D</a>:
<dd>(Steve Neuendorffer)
An abstract base class for shaded GR Actors

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Circle2D.html">Circle2D</a>:
<dd>(Steve Neuendorffer)
An abstract base class for shaded GR Actors

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Ellipse2D.html">Ellipse2D</a>:
<dd>(Ismael M. Sarmiento, Steve Neuendorffer)
Create a rectangle, rounded rectangle, or ellipse with the size and position specified by the user.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/FigureInteractor.html">FigureInteractor</a>:
<dd>(Ismael M. Sarmiento)
Listen for and handle events on Diva figures.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/GRShape2D.html">GRShape2D</a>:
<dd>(Steve Neuendorffer, Ismael M. Sarmiento)
An abstract base class for shaded GR Actors

<dt><a href="codeDoc/ptolemy/domains/gr/lib/GRTransform2D.html">GRTransform2D</a>:
<dd>(Steve Neuendorffer)
An abstract base class for transforming input 3D shape

<dt><a href="codeDoc/ptolemy/domains/gr/lib/IconViewScreen3D.html">IconViewScreen3D</a>:
<dd>(Steve Neuendorffer)
A GR scene viewer

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Image2D.html">Image2D</a>:
<dd>(Ismael M. Sarmiento, Steve Neuendorffer)
Create a figure from a user specified image file.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Line2D.html">Line2D</a>:
<dd>(Steve Neuendorffer, Ismael M. Sarmiento)
Create a line with the endpoints provided by the user.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Rectangle2D.html">Rectangle2D</a>:
<dd>(Ismael M. Sarmiento, Steve Neuendorffer)
Create a rectangle, rounded rectangle, or ellipse with the size and position specified by the user.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/RectangularFigure2D.html">RectangularFigure2D</a>:
<dd>(Ismael M. Sarmiento, Steve Neuendorffer)
Create a rectangle, rounded rectangle, or ellipse with the size and position specified by the user.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Rotate2D.html">Rotate2D</a>:
<dd>(Ismael M. Sarmiento, Steve Neuendorffer)
Rotate a two-dimensional figure based on the angle and anchor point provided by the user.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Scale2D.html">Scale2D</a>:
<dd>(Ismael M. Sarmiento, Steve Neuendorffer)
Scale a two-dimensional figure based on the size provided by the user.

<dt><a href="codeDoc/ptolemy/domains/gr/lib/Translate2D.html">Translate2D</a>:
<dd>(Steve Neuendorffer)
An actor that translates the input 3D shape

<dt><a href="codeDoc/ptolemy/domains/gr/lib/ViewScreen2D.html">ViewScreen2D</a>:
<dd>(Steve Neuendorffer, Ismael M. Sarmiento)
A GR scene viewer

</dl>

<li> <b><a href="codeDoc/ptolemy/domains/sdf/lib/package-summary.html">ptolemy.domains.sdf.lib</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/domains/sdf/lib/CountTrues.html">CountTrues</a>:
<dd>(Steve Neuendorffer)
An actor that counts true inputs.

</dl>

<li> <b><a href="codeDoc/ptolemy/domains/sr/lib/package-summary.html">ptolemy.domains.sr.lib</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/domains/sr/lib/NonStrictTokenToExpression.html">NonStrictTokenToExpression</a>:
<dd>(Haiyang Zheng)
A non-strict actor that converts tokens into expressions.

</dl>

<li> <b><a href="codeDoc/ptolemy/domains/tm/lib/package-summary.html">ptolemy.domains.tm.lib</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/domains/tm/lib/PeriodicTrigger.html">PeriodicTrigger</a>:
<dd>(Edward A. Lee)
A source that emits a trigger signal periodically.

</dl>

<li> <b><a href="codeDoc/ptolemy/vergil/actor/lib/package-summary.html">ptolemy.vergil.actor.lib</a></b>

<dl>
<dt><a href="codeDoc/ptolemy/vergil/actor/lib/VisualModelReference.html">VisualModelReference</a>:
<dd>(Edward A. Lee)
An atomic actor that executes a model specified by a file or URL.

</dl>
</menu>

<h2>Backward Compatibility</h2>


Most models developed under Ptolemy II 1.0.1,
2.0.1, 3.0.2  or HyVisual 2.2-beta an Hyvisual 3.0
should run under Ptolemy II 4.0
The MoMLParser includes a list of backward
compatibility filters that make certain changes on models
when read, handling such issues as actors being moved or renamed
and parameter names being changed.
The filters themselves are defined in
<a href="codeDoc/ptolemy/moml/filter/package-summary.html">
ptolemy.moml.filter</a>.
If you have developed your own actors under Ptolemy II 3.0.2 by
writing your own Java files, you should recompile all your java code with
the new release.  In theory, copying the .class files should work, but
recompiling is safer.


<h3>Backward compatible issues that are handled automatically</h3>

<menu>
<li>ptolemy.moml.filter.AddEditorFactory:
If a parameter has a _location, then
add a VisibleParameterEditorFactory named _editorFactory.

<li>ptolemy.moml.filter.AddIcon:
Add specialized icons that display the value of one of the parameters.
<br>The affected actors are:
        <menu>
	<li>ptolemy.actor.lib.Const
	<li>ptolemy.actor.lib.MathFunction
	<li>ptolemy.actor.lib.TrigFunction
	<li>ptolemy.actor.lib.Scale
	<li>ptolemy.actor.lib.Expression
        </menu>
<li>ptolemy.moml.filter.ClassChanges:
change any class names that have been renamed and remove obsolete classes.
<br>Below are original class names followed by the new class names:
        <menu>
	<li>ptolemy.vergil.fsm.modal.ModalController	-&gt; ptolemy.domains.fsm.modal.ModalController
	<li>ptolemy.vergil.fsm.modal.ModalModel$ModalTableauFactory	-&gt; ptolemy.vergil.fsm.modal.ModalTableauFactory
	<li>ptolemy.vergil.fsm.modal.TransitionRefinement	-&gt; ptolemy.domains.fsm.modal.TransitionRefinement
	<li>ptolemy.vergil.fsm.modal.RefinementPort	-&gt; ptolemy.domains.fsm.modal.RefinementPort
	<li>ptolemy.vergil.fsm.modal.Refinement	-&gt; ptolemy.domains.fsm.modal.Refinement
	<li>ptolemy.kernel.util.VersionAttribute	-&gt; ptolemy.kernel.attributes.VersionAttribute
	<li>ptolemy.vergil.icon.ImageEditorIcon	-&gt; ptolemy.vergil.icon.ImageIcon
	<li>ptolemy.vergil.fsm.modal.ModalPort	-&gt; ptolemy.domains.fsm.modal.ModalPort
	<li>ptolemy.vergil.fsm.modal.TransitionRefinementPort	-&gt; ptolemy.domains.fsm.modal.TransitionRefinementPort
	<li>ptolemy.kernel.attributes.FileAttribute	-&gt; ptolemy.data.expr.FileParameter
	<li>ptolemy.domains.sdf.kernel.SDFIOPort	-&gt; ptolemy.actor.TypedIOPort
	<li>ptolemy.moml.Location	-&gt; ptolemy.kernel.util.Location
	<li>ptolemy.domains.fsm.lib.RelationList	-&gt; ptolemy.domains.fsm.kernel.RelationList
	<li>ptolemy.actor.lib.comm.SerialComm	-&gt; ptolemy.actor.lib.io.comm.SerialComm
	<li>ptolemy.actor.hoc.MultiInstanceComposite	-&gt; ptolemy.actor.lib.hoc.MultiInstanceComposite
	<li>ptolemy.vergil.fsm.modal.ModalModel	-&gt; ptolemy.domains.fsm.modal.ModalModel
	</menu>
Below are the classes to remove:
        <menu> 
	<li>ptolemy.data.expr.NotEditableParameter
        </menu>

<li>ptolemy.moml.filter.HideAnnotationNames: If an annotation name ends with
'annotation1', then add _hideName if necessary.

<li>ptolemy.moml.filter.MultiportToSinglePort:
Update any actor multiports that are now single ports.
<br>Below are the actors that are affected, along with the port name:
        <menu>
	<li>input	ptolemy.actor.lib.gui.MatrixViewer
	<li>input	ptolemy.domains.sdf.lib.Autocorrelation
	<li>output	ptolemy.actor.lib.Const
	<li>output	ptolemy.actor.lib.NonStrictTest
        </menu>
<li>ptolemy.moml.filter.ParameterNameChanges: Update any Parameter names
that have been renamed.
<br>Below are the actors that are affected, along with the Parameter name 
and the new name:
        <menu>
	<li>ptolemy.domains.pn.kernel.PNDirector
	<br>	Initial_queue_capacity	-&gt; initialQueueCapacity
	</menu>

<li>ptolemy.moml.filter.PortClassChanges: Update any actor port classes that have been changed.
<br>Below are the actors that are affected, along
with the old port class and the new port class:
        <menu>
	<li>ptolemy.domains.de.lib.VariableDelay.delay
	<li>ptolemy.domains.de.kernel.DEIOPort	-&gt; ptolemy.actor.parameters.ParameterPort
	</menu>

<li>ptolemy.moml.filter.PortNameChanges: Update any actor port names that have been renamed.
<br>Below are the actors that are affected, along
with the old port name and the new port name:
        <menu>
	<li>ptolemy.actor.lib.comm.Scrambler
	        <menu>
		<li>initial	-&gt; initialState
	        </menu>
	<li>ptolemy.actor.lib.conversions.CartesianToComplex
	        <menu>
		<li>imag	-&gt; y
		<li>real	-&gt; x
	        </menu>
	<li>ptolemy.actor.lib.comm.ConvolutionalCoder
	        <menu>
		<li>uncodeBlockSize	-&gt; uncodedRate
		<li>initial	-&gt; initialState
	        </menu>
	<li>ptolemy.actor.lib.comm.ViterbiDecoder
	        <menu>
		<li>uncodeBlockSize	-&gt; uncodedRate
		<li>amplitude	-&gt; constellation
	        </menu>
	<li>ptolemy.actor.lib.Sleep
	        <menu>
		<li>delay	-&gt; sleepTime
	        </menu>
	<li>ptolemy.actor.lib.conversions.ComplexToCartesian
	        <menu>
		<li>imag	-&gt; y
		<li>real	-&gt; x
	        </menu>

<li>ptolemy.moml.filter.PropertyClassChanges: Update any actor port class names
that have been renamed.
<br>Below are the actors that are affected, along with the port name
and the new classname:
	<li>ptolemy.domains.sdf.lib.ArrayToSequence
	<li>ptolemy.domains.sdf.lib.Autocorrelation
	<li>ptolemy.domains.sdf.lib.BitsToInt
	<li>ptolemy.domains.sdf.lib.Chop
	<li>ptolemy.domains.sdf.lib.CountTrues
	<li>ptolemy.domains.sdf.lib.DoubleToMatrix
	<li>ptolemy.domains.sdf.lib.DownSample
	<li>ptolemy.domains.sdf.lib.FFT
	<li>ptolemy.domains.sdf.lib.FIR
	<li>ptolemy.domains.sdf.lib.IFFT
	<li>ptolemy.domains.sdf.lib.IntToBits
	<li>ptolemy.domains.sdf.lib.LineCoder
	<li>ptolemy.domains.sdf.lib.MatrixToDouble
	<li>ptolemy.domains.sdf.lib.MatrixToSequence
	<li>ptolemy.domains.sdf.lib.Repeat
	<li>ptolemy.domains.sdf.lib.SampleDelay
	<li>ptolemy.domains.sdf.lib.SequenceToArray
	<li>ptolemy.domains.sdf.lib.SequenceToMatrix
	<li>ptolemy.domains.sdf.lib.UpSample
	<li>ptolemy.domains.sdf.lib.VariableFIR
	        <menu>
		<li>tokenProductionRate	-&gt; null
		<li>tokenInitProduction	-&gt; null
		<li>tokenConsumptionRate	-&gt; null
	        </menu>
	<li>ptolemy.actor.lib.MathFunction
	        <menu>
		<li>function	-&gt; ptolemy.data.expr.StringParameter
	        </menu>
	<li>ptolemy.domains.sdf.lib.vq.ImageUnpartition
	        <menu>
		<li>input	-&gt; ptolemy.actor.TypedIOPort
		<li>output	-&gt; ptolemy.actor.TypedIOPort
	        </menu>
	<li>ptolemy.actor.lib.TrigFunction
	        <menu>
		<li>function	-&gt; ptolemy.data.expr.StringParameter
	        </menu>
	<li>ptolemy.actor.lib.Expression
	        <menu>
		<li>expression	-&gt; ptolemy.kernel.util.StringAttribute
	        </menu>
	<li>ptolemy.domains.sdf.lib.vq.HTVQEncode
	        <menu>
		<li>input	-&gt; ptolemy.actor.TypedIOPort
		<li>output	-&gt; ptolemy.actor.TypedIOPort
	        </menu>
	<li>ptolemy.domains.sdf.lib.vq.VQDecode
	        <menu>
		<li>input	-&gt; ptolemy.actor.TypedIOPort
		<li>output	-&gt; ptolemy.actor.TypedIOPort
	        </menu>
	<li>ptolemy.domains.sdf.lib.vq.ImagePartition
	        <menu>
		<li>input	-&gt; ptolemy.actor.TypedIOPort
		<li>output	-&gt; ptolemy.actor.TypedIOPort
	        </menu>
	<li>ptolemy.matlab.Expression
	        <menu>
		<li>expression	-&gt; ptolemy.data.expr.StringParameter
	        </menu>

	</menu>

<!--/whatsnew-->

<h2>Features that were new in previous Ptolemy II releases </h2>

<a href="oldFeatures.htm">Features that were new in previous Ptolemy II releases </a>


<!--vergilDocs-->
<h2><a name="limitations">Limitations</a>
</h2>
Version 4.0 has the following limitations:

<h3>Release Limitations</h3>
<ul>

<li> Some of he documentation has not yet been updated
<menu>
<li> The three volume design doc has not yet been updated

<li> The HyVisual document has not yet been updated

<li> The UsingVergil document has not been updated.
In the interim, see the
<a href="design/visualsense.pdf">VisualSense</a> document 

<li> The <a href="expressions.htm">Expressions</a> document
has not yet been updated
</menu>

<li> The gzipped tar file that contains the Ptolemy II distribution
 <B>requires</B> GNU tar or WinZip.  Solaris 2.5.1 tar will fail to
untar this file with a checksum error because the pathnames are longer
than 100 characters.  If you do not have GNU tar, you can obtain
source and selected binaries from 
ftp://ptolemy.eecs.berkeley.edu/pub/gnu.
 <p>Note further that some of the .class names are longer than
31 characters, which may cause problems when downloading zip files
on the Macintosh and using Stuffit.

<li> The documentation for custom actors used in demonstrations is not
included in the release.  The source code for the custom actors can be found
in the source download.

<li> If a URL ends with <CODE>#in_browser</CODE>, then
Ptolemy II will invoke the User's web browser.  Unfortunately, this
does not always work, especially under Windows if Netscape is already
running.  The workaround is to exit Netscape and let Ptolemy II
start up Netscape for you.


<li> Web Start does not work very well if the pathname to the 
<CODE>vergil.jnlp</CODE> file has spaces in it.  The workaround is
to place your Ptolemy II tree in a directory that does not have spaces
in the path name if you plan on using Web Start.

<li> If your user library contains actors that are not present in
vergil, then you may see a dialog or dialogs asking if you want
to skip these elements.  This could happen if you had developed custom
actors and put them into your user library and these custom actors
are not present in the release.  The work around is to click 'Skip Element'
and continue with the start up.


<li> Ptolemy II has various problems under Mac OS X.  For details,
see <a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII4.0/mac.htm#in_browser"><CODE>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII4.0/mac.htm</CODE></a>.

<li> Applet issues:
	<ul>

	<li> Applets seems to be trying to download tmp.jar, which
	is not found.

        <li> The SDF TrellisDecoder and ViterbiDecoder applets sometimes do
	not properly display the result values.
	
	<li> We've experienced problems with the browser freezing
	when between applets.  What happens is that the previous
	applet gets a InterruptedException and pops up a modal dialog
	box, which freezed the browser.  We are working on a solution.


	<li> Applets do not correctly display the TextAttribute,
	DocumentationAttribute or the TM "Show schedule" icon.

	<li> The Ptolemy II Applets require java 1.4.1_02 or later so
	as to prevent problems with Windows XP and Radeon displays
	that causes XP to hang when a Java application is exiting.
	For details, see

<a href="http://developer.java.sun.com/developer/bugParade/bugs/4713003.html#in_browser" target="_top"><CODE>http://developer.java.sun.com/developer/bugParade/bugs/4713003.html</CODE></a>
	 <br>For non-applet situations, we can invoke the browser with
	<CODE>-Dsun.java2d.d3d=false</CODE> or 
	<CODE>-Dsun.java2d.noddraw=true</CODE>, but for applets we must
	require Java 1.4.1_02 or later.  
	 <br>As a result, the applet html code requires version 1.4.2 or later,

	<li>Applets seem to run out of memory after about 82Mb.

	<li>There are no Jython or Cal applets 

	<li> Opera has problems viewing applets that are on the local
	file system.  In particular, it seems to have problems with urls like
	<CODE>file:///d|/ptII/ptolemy/plot/demo/FourierSeries.htm</CODE>
	which work fine in Netscape 4.x, IE, Mozilla.

	 <p>However, if I use the following style of URL, then some of the applets
	work: 
<CODE>file://localhost/d:/ptII/ptolemy/plot/demo/FourierSeries.htm</CODE>.
	Unfortunately any applet that accesses a data file will
	not work with the above URL style because the data file will
	be outside the codebase.

	 <p> The solution is to install a web server on the local
	machine and view the applets using 
	<CODE>http://localhost/</CODE>
	
        <li> Opera 6.03/Windows 2000/Java 1.4.0, may have
        problems running applets that include diva.jar if diva.jar
	is not downloaded in the first applet.  To reproduce this problem:
	<ol>
	<li> Run <a href="../ptolemy/domains/sdf/demo/Butterfly/Butterfly.htm">SDF Butterfly</a>, which does not use diva.jar

	<li> <a href="../ptolemy/domains/sdf/demo/Expression/Expression.htm">SDF Expression</a>, which uses diva.jar

	<li> In Opera, do <CODE>Window</CODE> -&gt; <CODE>Special</CODE>
	-&gt; <CODE>Java Console</CODE>, and you will see the following
        stack trace
<pre>
java.lang.NoClassDefFoundError: diva/graph/GraphController	
at java.lang.Class.getDeclaredConstructors0(Native Method)  
at java.lang.Class.privateGetDeclaredConstructors(Class.java:1576) 
at java.lang.Class.getConstructor0(Class.java:1748) 
at java.lang.Class.newInstance0(Class.java:266)  
at java.lang.Class.newInstance(Class.java:249) 
at opera.PluginPanel.run(opera/PluginPanel.java:343) 
at java.lang.Thread.run(Thread.java:536)  
</pre>

	</ol>
	The problem only occurs under Opera.

	<li> Running the Networked demo via an applet on the local
	file system results in an AccessControlException.
<pre>
com.microstar.xml.XmlException: XML element "entity" triggers exception:
  java.lang.Exception: Attempted to lookup 'Waveform', but got: 
  java.lang.ClassNotFoundException: Waveform
Attempted to find as a moml class, but got: 
             java.security.AccessControlException: access denied
             (java.net.SocketPermission ptolemy.eecs.berkeley.edu resolve)
	     in file:/C:/Program Files/Ptolemy/Ptolemy II 3.0 beta2/
                   ptolemy/moml/demo/Networked/ at line 62 and column 118
	at ptolemy.moml.MoMLParser.startElement(MoMLParser.java:1341)
	at com.microstar.xml.XmlParser.parseElement(XmlParser.java:944)
	at com.microstar.xml.XmlParser.parseContent(XmlParser.java:1117)
	at com.microstar.xml.XmlParser.parseElement(XmlParser.java:946)
	at com.microstar.xml.XmlParser.parseDocument(XmlParser.java:495)
	at com.microstar.xml.XmlParser.doParse(XmlParser.java:175)
	at com.microstar.xml.XmlParser.parse(XmlParser.java:145)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:492)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:471)
	at ptolemy.moml.MoMLParser.parse(MoMLParser.java:456)
	at ptolemy.actor.gui.MoMLApplet._createModel(MoMLApplet.java:188)
</pre>

	The Network demo does not work as a local applet because the xml file
	includes a reference to http://ptolemy.eecs.berkeley.edu, which is
	not on the local file system, so we get a SecurityException.
	 <br>The workaround is to run the applet by downloading it
	from the Ptolemy Website:
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII4.0/ptII/ptolemy/moml/demo/Networked/Networked.htm"><CODE>http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII4.0/ptII/ptolemy/moml/demo/Networked/Networked.htm</CODE></a>
	</ul>

<li> Windows Installer Issues:
 	<ul>

	<li> Sometimes running a model that uses the Matlab interface
	will cause Ptolemy II to exit.  Usually this occurs if Vergil
	has been running for a while and then the Matlab interface is loaded.
	<br><b>Workaround #1</b>: Run a model that uses the Matlab interface
	as the first model by doing Quick Tour -&gt; Matlab CT.
	<br><b>Workaround #2</b>:
        We believe that the problem has to do with loading the Direct
	Draw library.
<a href="http://developer.java.sun.com/developer/bugParade/bugs/4838939.html#in_browser" target="_top"><code>http://developer.java.sun.com/developer/bugParade/bugs/4838939.html</code></a>
        suggests invoking java with <code>-Dsun.java2d.noddraw=true</code>.
	<br>The way to do this is to edit <code>vergil-full.<b>lax</b></code>
	and add the line
	<pre>
lax.nl.java.option.additional=-Dsun.java2d.noddraw=true	
</pre>
        which we went ahead and did.  Note that because of problems
	with Radeon displays, setting noddraw to true is not such
	a bad idea.  See above for details.
        <br>The way to check if this argument is being used is to
	hold down the Control key and double click on the
	<code>vergil-full.<b>exe</b></code> icon.
	<br>You should see something like:
	<pre>	
c:\j2sdk1.4.2\bin\java.exe -Dsun.java2d.noddraw=true com.zerog.lax.LAX C:\\Ptol
emy\\Ptolemy_II_4.0ptiny\\vergil-ptiny.lax C:\\DOCUME~1\\cxh\\LOCALS~1\\Temp
\\env.prop
executing java...
        </pre>
	Note that to debug the binary, you would use the following line:
        <pre>
lax.nl.java.option.additional=-Xdebug -Xrunjdwp:transport=dt_shmem,server=y,suspend=n 
        </pre>

	<li> The Windows installer works best if you are in the 
	Administrators Windows group.   Otherwise, the Windows installer
	tends to dump lots of icons on your desktop
	</ul>

<li> Web Start issues:
	<ul>

	<li> <a name="webstart1.5.0-beta">The Web Start</a>
	 installer does not work with Java 1.5.0-beta.
	The problem is that the certificate is not recognized.

	<p>You can either:
	<ol>
	<li>Uninstall 1.5.0-beta and use an earlier JVM.
	<b>or</b>
	<li> Try using the Java Web Start Application to select a different
	JVM.  The Java Web Start Application can be found under
	Start -&gt; Programs -&gt; Java Web Start
	or else you can look for it in the jre directory of your JDK.
	For example:
	<code>c:\j2sdk1.4.2_04\jre\javaws\javaws.exe</code>
	</ol>

	<li> The Matlab Wireless demo fails under Web Start.
	The problem is that the Matlab .m file cannot be found.

	<li> The Python Ptolemizer demo does not work under Web Start,
	probably because Jython cannot handle loading classes
	from the Ptolemy II classes. 

	<li> Viewing a pdf file may bring up a blank window along with
	the pdf file.  Running the code generator may bring up
	a blank window while the java or javac processes are running.

	<li> Some of the links on the GR domain instructions page
	might not work under Web Start because the files they refer
	to are not present. 
        </ul>

<li> Limitations in demonstrations
        <ul>

	<li> CT CarTracking should be run using View-&gt;Run
	so that the user can change the fault parameter.

        <li> HTVQ demo: The displays do not go away when
	the demo is exited.

        <li> GR demos: The ViewScreen actor does not go away when
	the demo is exited.


	<li> GR demos: Under Java 3D 1.3.1-beta, the ViewScreen
	actor may display a black image when a second GR demo is run.
	 <br>The workaround is to install Java 3D 1.2.1_04.

        <li> Bouncer demo: If the user drags the bouncing icon, it no
	longer bounces
        </ul>
</ul>

<h3>Limitations in the Actor Libraries</h3>
<ul>
<li>The actor library is far from complete.
<li>The Expression actor does not properly propagate type constraints in
an expression-dependent fashion. It works correctly for double-valued
expressions of double-valued inputs.

<li> The Ptolemy parameter parser uses comma "," to separate elements
in an array.  This causes problems when Ptolemy is run on
European machines that use a comma "1,0" instead of a period "1.1"
in floating point numbers.

<li> The Display actor uses the Swing JTextArea component which is 
known to have memory leaks.

<li> The readFile() parameter function does not work with applets.
Instead, use readResource().
<!-- If you change the next paragraph update install.htm -->

<li>The Matlab interface works only under Windows and it requires that
Matlab be installed on the local machine. 
The Matlab interface should work with version of Matlab from
R11 (5.3) and up to and including R13 (6.5)
<p>Didier Mauuary reports that under Windows 98, configure failed
to set up the <code>MATLAB_DIR</code>, <code>PTCC</code>
and <code>PTDLLTOOL</code> makefile variables, but after
he set them by hand:
<pre>
 MATLAB_DIR = /cygdrive/c/MATLABR11
 PTCC = gcc
 PTDLLTOOL = dlltool
</pre>
he was able to get farther with the recompilation of the Matlab interface.

<li> The actor.lib.comm.SerialComm actor requires that Javacomm is installed

<a href="http://java.sun.com/products/javacomm/index.html#in_browser" target="_top"><CODE>http://java.sun.com/products/javacomm/index.html</CODE></a>.
The SerialComm actor will only work under Windows.


<li> IterateOverArray has the following problems
     <menu>
     <li> Look inside of iterateOverArray does not work.
     <li> Rename a port inside a port of iterateOverArray, then it does
          not rename the ports in the higher level.
     </menu>

</ul>

<h3>Limitations in the PN Domain</h3>
The PN domain documents that it locally handles mutations.  However, this
is currently not true in the implementation.  For the basic PN model, this
doesn't really matter, since mutations happen pretty much the same as they
would otherwise.  (i.e. they are non-deterministic in when they execute) 
However, for timed PN models, there is actually some expressiveness
lost, since timed PN models can locally execute mutations deterministically.


<h3>Limitations in the User Interface</h3>

Below are some of the limitations of Vergil, the Ptolemy II Graphical
User Interface.

<ul>

<li> If there are multiple windows open for a model, say, the top
level vergil window and the tree view, or the top level window
and the inside look of a composite component, when the top
level window is closed, all other windows are closed, but the
user is not prompted to save any change to the model.

<li> When setting the type of a port, we should provide a combo
box that lists the common ports

<li> When creating a Modal Model, use Control-Right-Button to
drawn arcs between nodes.  One potential workaround would
be to have an information message in the status bar about this.

<li> You should not change the names of built in ports - The port
mechanism should disallow port name changes on ports that are
named in Java.  The UI could recognize this.  The UI should
not allow the user to remove built in Java defined ports.

<li> Manually setting of the types of actors like ArrayToSequence that
have constraints on their element types can cause problems.
<li> HTVQ demo is badly laid out when run under vergil.
<li>Weak support for multiports in the graph editor.
<li>It is difficult to control wire routing.
<li>Cannot have more than one vertex in a connection.
<li>No mechanism to set the width of a relation.
<li>The integrated web browser is not a full-featured browser.
<li>Debugger not yet integrated.
<li>It is difficult to add actors to the libraries.
<li>No dynamic class reloading.

<li>If an actor uses a slider, then the actor tree navigator pane
incorrectly shows the slider as a subitem of the actor.

<li> It seems that if you close a model that has been modified,
  get prompted to save it, and select save, then the model
  is saved but not closed.  It should be closed too...

<li> When I select a large number of items from one model, and
  copy and paste them into a new one, they sometimes all get
  placed at the origin.  Strangely, if I then auto-place,
  and then undo, they get their original (correct) placement!
</ul>
<h3>Limitations in JNI</h3>
<menu>
<li> The Interface to C actors using the Java Native Interface
	is not available via the Windows Installer (or Web Start).
	To use the JNI/Ptolemy II interface, you must download 
	Ptolemy II as source files and compile.


<li> The JNI user interface does not permit creation of new JNI actors.

<li> JNI will not work with Hierarchical classes, subclasses, and inner
classes

</menu>


<h3>Code Generation Limitations</h3>
Code Generation limitations are covered on the
<a href="codegen.htm#limitations">Code Generation</a> page. 

<h3>Missing Domains</h3>
<ul>
<li>Boolean and integer dataflow.
<li>Dynamic dataflow
</ul>
 <p>For limitations discovered after the release, see the
<a href="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII4.0/#in_browser">Ptolemy II 4.0 website</a>

<!--/vergilDocs-->
<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
 <!-- Leave a trailing p here so that there is a little space at the bottom -->
 <p>
</body>
</html>
