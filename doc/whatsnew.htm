<!-- DO NOT EDIT this file it is created by running make-->
<!-- $Id$ -->
<html>
<head>
<title>Ptolemy II 2.0beta Release Notes</title>
</head>
<body>
<!--whatsnew-->
<h2>Major Features that are new in Ptolemy 2.0 </h2>
<menu>

<li> <a href="../../domains/ct/demo/Switch/Switch.xml">Modal Models</a>
 (Xiaojun Liu, Edward A. Lee)
<!-- Text from ptweb/projects/mobies/reports/01/3 -->
A modal model is an FSM (finite state machine) combined
hierarchically with other models. In our visual syntax, the system
builder directly interacts with this hierarchical view. If you look
inside the modal model, you will see a visual rendition of the FSM. If
you create a state in this FSM, then you can create a refinement, and
also you can look inside the state using the context menu on the state.
The refinement can be another FSM or some other model using some other
Ptolemy domain. For example, by using the CT domain (continuous time),
one can easily build hybrid systems.


<li> <a href="codegen.htm">Code Generation</a>
(Primary Author: Stephen Neuendorffer, Contributor: Christopher Hylands)
This release includes a limited prototype of our code generation facility
that will generate .class files for non-hierarchical SDF models

<li> <a href="codeDoc/ptolemy/data/unit/package-summary.html">ptolemy.data.unit</a> -
<a href="../ptolemy/data/unit/demo/Units/Units.xml">Units Demo</a>
(Primary Authors: Yuhong Xiong, Xiaojun Liu, Contributors: Winthrop Williams, Edward A. Lee)
<br>
A major source of errors in embedded software is incorrect application
of units. Yuhong Xiong and Xiaojun Liu have created a unit system for
Ptolemy II that is quite clever. A suite of constants are defined, with
names such as "meter", "cm", "feet", "miles", "seconds", "hours", and
"days". In each unit category ("length" or "time" for example), there
is a primary unit with respect to which all the others are specified.
Thus, for example, if the primary unit of length is meters, then the
expression "1.0 * cm" will have an internal value of 0.01 * meters.
Compound units are specified by just multiplying and dividing, as in
for example "1.0 * cm/second".

<p>The way this is realized is that these unit constants are tokens just
like other Ptolemy II data, and multiplication and division are
overloaded in the base classes for numeric valued tokens.  We continue
to work on this architecture to enable users to customize the unit
system on a per-model basis.

<li> <a href="../ptolemy/domains/tm/doc/body.htm" target="body">Timed Multitasking Domain</a>
(Jie Liu) - an implementation of a model of
computation based on priority-driven multitasking, as common in
real-time operating systems (RTOSs), but with more deterministic
behavior

<li> <a href="../ptolemy/domains/sr/doc/body.htm" target="body">Synchronous/Reactive Domain</a>:
(Primary Author: Paul Whitaker, Contributors: Elaine Cheong, John Reekie)

<li> <a href="webStartHelp.htm">Web Start</a>
 (Christopher Hylands) -  
Ptolemy II includes support to build distributions using Sun's Web Start
facility, which allows end users to download fully functional distributions
via the web.

</menu>

<h2>Other Features that are new in Ptolemy II 2.0</h2>

<ul>

<li> Vergil updates
(Steve Neuendorffer, Edward A. Lee, John Reekie
 Vergil has been improved
 and the following features have been added
	<menu>
	<li> Annotations - It is now much easier to annotate a model with
	text.
	<li> Parameters - The model can display top level parameter
	names and values
	<li> Snap to grid - It is now much easier to line up actors
	<li> Panner, zoom - The panner and zoom facilities make
	it easier to navigate large
	<li> Improved FSM editor
	<li> Animation - It is now possible to show which actors are firing
	when.
	<li> Better icons - Some icons such as Const, Scale and Expression
	will display their values.  
	<li> set data types of ports
	</menu>
See <a href="design/usingVergil/index.htm"><code>$PTII/doc/design/usingVergil/index.htm</code></a> for more complete information


<li> <a href="codeDoc/ptolemy/data/ByteToken.html">ptolemy.data.ByteToken</a>
(Winthrop Williams, Steve Neuendorffer) - A new Token supporting bytes.

<li> <a href="codeDoc/ptolemy/data/expr/package-summary.html">Expression improvements</a>
(Zoltan Kemenczy, Research In Motion, Ltd.)

<li> <a href="../ptolemy/domains/fsm/demo/MultipleRuns/MultipleRuns.htm">Multiple Runs</a>:
(Xiaojun Liu, Edward A. Lee) - The FSM domain as been extended
to perform multiple runs of refinement on a model

<li> <a href="codeDoc/ptolemy/graph/package-summary.html">ptolemy.graph</a>
 (Shuvra S. Bhattacharyya (University of Maryland at College Park)) -
The graph package was redesigned and reimplemented.

 <!-- Tcl shell is not shipping in 2.0, it makes the download larger.-->

</ol>

<h3>New Demonstrations</h3>

<menu>
<li> <a href="../ptolemy/domains/ct/doc/body.htm" target="body">CT</a>:
	Continuous Time
 <menu>
 <li> <a href="../ptolemy/domains/ct/demo/BouncingBall/BouncingBall.htm">Bouncing Ball</a>  (Requires Java 3D, see the <a href="../ptolemy/domains/gr/doc/main.htm">GR domain</a>)
 A Continuous Time model that uses a Finite State Machine and the GR
 domain to simulate a bouncing ball.

 <li> <a href="../ptolemy/domains/ct/demo/CarTracking/CarTracking.htm">Car Tracking</a>
 A following car tracking a leading car in an unreliable 
 communication environment.

 <li> <a href="../ptolemy/domains/ct/demo/Switch/Switch.htm">Switching Continuous Signals</a>
 Shows how to handle hybrid systems with both continuous and discrete inputs
 and outputs.
 <li> <a href="../ptolemy/domains/ct/demo/Thermostat/Thermostat.htm">Modal Thermostat</a>
 A thermostat model where the refinements of the
 modes in the state machine are the same model.
 <li> <a href="../ptolemy/data/unit/demo/Units/Units.htm">Units</a>
 A demonstration of the Units facility
 </menu>



<li> <a href="../ptolemy/domains/fsm/doc/body.htm" target="body">FSM</a>:
	 Finite State Machines
 <menu>
 <li> <a href="../ptolemy/domains/fsm/demo/Blending/Blending.htm">Blending</a>
 A blending controller with two major control modes.
 <li> <a href="../ptolemy/domains/fsm/demo/MultipleRuns/MultipleRuns.htm">Multiple&nbsp;Runs</a> 
 A state machine performs multiple runs of the refinement of mode1. 
 </menu>

<li><a href="../ptolemy/domains/gr/doc/body.htm" target="body">GR</a>:
	3-D graphics (experimental)
 <menu>
 <li> <a href="../ptolemy/domains/gr/demo/FurutaPendulum/FurutaPendulum.htm">FurutaPendulum</a>
 The Furuta pendulum has a motor controlling the angle of an arm, from
 which a free-swinging pendulum hangs. The objective is to swing the
 pendulum up and then balance it.

 </menu>

<li> <a href="../ptolemy/domains/sdf/doc/body.htm" target="body">SDF</a>:
	Synchronous Dataflow
 <menu>
 <li><a href="../ptolemy/domains/sdf/demo/LMSAdaptive/LMSAdaptive.htm">LMSAdaptive</a>
 An adaptive filter
 <li><a href="../ptolemy/domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.htm">MaximumEntropySpectrum</a>
 A spectral estimation example
 </menu>


<li> <a href="../ptolemy/domains/sr/doc/body.htm" target="body">SR</a>:
	synchronous/reactive (experimental), and
 <menu>
 <li><a href="../ptolemy/domains/sr/demo/TokenRing/TokenRing.htm">TokenRing</a>
 A cyclic token-ring arbiter composed of three blocks.
 </menu>

<li> <a href="../ptolemy/domains/tm/doc/body.htm" target="body">TM</a>:
	timed multitasking (experimental).
 <menu>
 <li><a href="../ptolemy/domains/tm/demo/Controllers/Controllers.htm" target="main">Controllers</a>
   Two (independent) control loops whose controllers share the same CPU.
 <li><a href="../ptolemy/domains/tm/demo/FFT/FFT.htm" target="main">FFT</a>
   This model shows the use of background process for long running tasks in 
   the TM domain.
 <li><a href="../ptolemy/domains/tm/demo/MergedEvents/MergedEvents.htm" target="main">MergedEvents</a>
 <li><a href="../ptolemy/domains/tm/demo/SimpleTasks/SimpleTasks.htm" target="main">SimpleTasks</a>
  This model shows two independent tasks on a
  single CPU machine.
 </menu>


</menu>


<h3>New Actors</h3>

<menu>

<li> <a href="codeDoc/ptolemy/actor/lib/package-summary.html">ptolemy.actor.lib</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/actor/lib/Accumulator.html"><code>Accumulator</code></a>
<dd> (Edward A. Lee)
An actor that outputs the sum of the inputs so far.

<dt> <a href="codeDoc/ptolemy/actor/lib/BooleanMultiplexor.html"><code>BooleanMultiplexor</code></a> 
<dd> (Steve Neuendorffer)
A polymorphic multiplexor with boolean select.

<dt> <a href="codeDoc/ptolemy/actor/lib/BooleanSelect.html"><code>BooleanSelect</code></a> 
<dd> (Steve Neuendorffer)
A polymorphic multiplexor with boolean select.

<dt> <a href="codeDoc/ptolemy/actor/lib/BooleanSwitch.html"><code>BooleanSwitch</code></a> 
<dd> (Steve Neuendorffer)
A polymorphic multiplexor with boolean select.

<dt> <a href="codeDoc/ptolemy/actor/lib/ClassWrapper.html"><code>ClassWrapper</code></a> 
An actor that wraps (an instance of) a Java class.

<dd> (Xiaojun Liu)
<dt> <a href="codeDoc/ptolemy/actor/lib/Counter.html"><code>Counter</code></a> 
A constant source.

<dd> (Steve Neuendorffer)
<dt> <a href="codeDoc/ptolemy/actor/lib/Differential.html"><code>Differential</code></a> 
<dd> (Edward A. Lee)
An actor that outputs the difference between successive inputs.

<dt> <a href="codeDoc/ptolemy/actor/lib/DoubleReader.html"><code>DoubleReader</code></a> 
<dd> (Jie Liu, Christopher Hylands)
An actor that outputs doubles read from a URL.

<dt> <a href="codeDoc/ptolemy/actor/lib/Limiter.html"><code>Limiter</code></a> 
<dd> (Edward A. Lee)
An actor that limits the input to a specified range.

<dt> <a href="codeDoc/ptolemy/actor/lib/LinearDifferenceEquationSystem.html"><code>LinearDifferenceEquationSystem</code></a> 
<dd> (Jie Liu, Elaine Cheong)
Linear Difference Equation System.


<dt> <a href="codeDoc/ptolemy/actor/lib/LookupTable.html"><code>LookupTable</code></a> 
<dd> (Paul Whitaker, Christopher Hylands)
A lookup table that outputs internally stored data given an index Parameter.

<dt> <a href="codeDoc/ptolemy/actor/lib/NonStrictTest.html"><code>NonStrictTest</code></a> 
<dd> (Paul Whitaker, Christopher Hylands)
Check the input streams against a parameter value, ignoring absent values.

<dt> <a href="codeDoc/ptolemy/actor/lib/URLDirectoryReader.html"><code>URLDirectoryReader</code></a> 
<dd> (Christopher Hylands)
An actor that reads a URL naming a directory and outputs each
element of the directory one at a time.

<dt> <a href="codeDoc/ptolemy/actor/lib/VectorAssembler.html"><code>VectorAssembler</code></a> 
<dd> (Jie Liu, Elaine Cheong)
An actor that reads a token from each input channel to assemble a
DoubleMatrixToken.

<dt> <a href="codeDoc/ptolemy/actor/lib/VectorDisassembler.html"><code>VectorDisassembler</code></a> 
<dd> (Jie Liu, Elaine Cheong)
An actor that disassembles a DoubleMatrixToken to a multiport output.

<dt> <a href="codeDoc/ptolemy/actor/lib/WallClockTime.html"><code>WallClockTime</code></a> 
<dd> (Edward A. Lee)
Output the elapsed time in seconds.

</dl>

<li>  <a href="codeDoc/ptolemy/actor/lib/comm/package-summary.html">ptolemy.actor.lib.comm</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/comm/SerialComm.html"><code>SerialComm</code></a> 
<dd> (Winthrop Williams)
Read and write from a serial port
</dl>

<li> 
 <a href="codeDoc/ptolemy/actor/lib/conversions/package-summary.html">ptolemy.actor.lib.conversions</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/BooleanToAnything.html"><code>BooleanToAnything</code></a> 
<dd> (Edward A. Lee)
An actor that converts a boolean token into any other data type.

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/InUnitsOf.html"><code>InUnitsOf</code></a> 
<dd> (Yuhong Xiong, Xiaojun Liu, Edward Lee)
An actor that converts input tokens to specified units.

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/IntArrayToString.html"><code>IntArrayToString</code></a> 
<dd> (Michael Leung, Edward A. Lee, and Paul Whitaker)
An actor that converts an array of integers into a string.

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/LongToDouble.html"><code>LongToDouble</code></a> 
<dd> (Christopher Hylands)
An actor that converts a LongToken into a DoubleToken.

<dt> <a href="codeDoc/ptolemy/actor/lib/conversions/StringToIntArray.html"><code>StringToIntArray</code></a> 
<dd> (Winthrop Williams)
An actor that converts a string to an array of integers.

</dl>


<li> <a href="codeDoc/ptolemy/actor/lib/gui/package-summary.html">ptolemy.actor.lib/gui</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/gui/MatrixVisualizer.html"><code>MatrixVisualizer</code></a> 
<dd> (Neil Turner, Steve Neuendorffer)
An actor for 2-D visualization of matrices.

<dt> <a href="codeDoc/ptolemy/actor/lib/gui/RealTimePlotter.html"><code>RealTimePlotter</code></a> 
<dd> (Edward A. Lee)
Plot input data as a function of elapsed real time.

<dt> <a href="codeDoc/ptolemy/actor/lib/gui/SliderSource.html"><code>SliderSource</code></a> 
<dd> (Xiaojun Liu)
An actor whose output is controlled by a slider in the run window.

</dl>


<li> <a href="codeDoc/ptolemy/actor/lib/logic/package-summary.html">ptolemy.actor.lib.logic</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/logic/IsPresent.html"><code>IsPresent</code></a> 
<dd> (Edward A. Lee)
Output true if the input is present, false otherwise.
</dl>

<li> <a href="codeDoc/ptolemy/actor/lib/net/package-summary.html">ptolemy.actor.lib.net</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/actor/lib/net/DatagramReader.html"><code>DatagramReader</code></a> 
<dd> (Winthrop Williams)
An actor that asynchronously reads datagram packets.
<dt> <a href="codeDoc/ptolemy/actor/lib/net/DatagramWriter.html"><code>DatagramWriter</code></a> 
<dd> (Winthrop Williams)
An actor that sends its input as a UDP datagram packet.
</dl>

<li> <a href="codeDoc/ptolemy/domains/ct/lib/package-summary.html">ptolemy.domains.ct.lib</a>:

<dl>
<dt> <a href="codeDoc/ptolemy/domains/ct/lib/EventSource.html"><code>EventSource</code></a> 
<dd> (Jie Liu)
Generate discrete events at prespecified time instants.
<dt> <a href="codeDoc/ptolemy/domains/ct/lib/FirstOrderHold.html"><code>FirstOrderHold</code></a> 
<dd> (Jie Liu)
An actor that takes a value and a derivative and does first order projection.

<dt> <a href="codeDoc/ptolemy/domains/ct/lib/LevelCrossingDetector.html"><code>LevelCrossingDetector</code></a> 
<dd> (Jie Liu)
A CT actor that detects level crossings of its trigger input signal.

</dl>

<li> <a href="codeDoc/ptolemy/domains/de/lib/package-summary.html">ptolemy.domains.de.lib</a>:

<dl>

<dt> <a href="codeDoc/ptolemy/domains/de/lib/EventButton.html"><code>EventButton</code></a> 
<dd> (Winthrop Williams, Paul Whitaker)
An actor that generates an empty token in response to a click of a button.

<dt> <a href="codeDoc/ptolemy/domains/de/lib/EventFilter.html"><code>EventFilter</code></a> 
<dd> (Steve Neuendorffer, Sonia Sachs)
An actor that filters false boolean tokens.

<dt> <a href="codeDoc/ptolemy/domains/de/lib/Inhibit.html"><code>Inhibit</code></a>
<dd> (Steve Neuendorffer)
An actor that produces a copy of the most recent input each time

<dt> <a href="codeDoc/ptolemy/domains/de/lib/PreemptableTask.html"><code>PreemptableTask</code></a> 
<dd> (Elaine Cheong, Yang Zhao, Xiaojun Liu)
An actor that implements as preemptable task

<dt> <a href="codeDoc/ptolemy/domains/de/lib/Previous.html"><code>Previous</code></a> 
<dd> (Edward A. Lee)
An actor that outputs the previous event when it receives an event.


<dt> <a href="codeDoc/ptolemy/domains/de/lib/Queue.html"><code>Queue</code></a> 
<dd> (Steve Neuendorffer)
An actor that implements a queue of events.

<dt> <a href="codeDoc/ptolemy/domains/de/lib/QueueWithNextOut.html"><code>QueueWithNextOut</code></a> 
<dd> (Winthrop Williams, Steve Neuendorffer)
An actor that implements a queue of events with a nextOut port

<dt> <a href="codeDoc/ptolemy/domains/de/lib/SamplerWithDefault.html"><code>SamplerWithDefault</code></a> 
<dd> (Steve Neuendorffer, Jie Liu, Edward A. Lee)
An actor that produces a copy of the most recent input each time

</dl>

<li> <a href="codeDoc/ptolemy/domains/sdf/lib/package-summary.html">ptolemy.domains.sdf.lib</a>:


<dl>
<dt> <a href="codeDoc/ptolemy/domains/sdf/lib/DoubleToMatrix.html"><code>DoubleToMatrix</code></a> 
<dd> (Edward A. Lee)
An actor that converts a sequence of input tokens to a matrix.

<dt> <a href="codeDoc/ptolemy/domains/sdf/lib/MatrixToDouble.html"><code>MatrixToDouble</code></a> 
<dd> (Edward A. Lee)
An actor that converts a matrix to sequence of output tokens.

</dl>

</menu>


<h2>Backward compatibility issues</h2>
Most models developed under Ptolemy II 1.0.1 should run under Ptolemy II 2.0.

 <p>The MoMLParser includes a backward compatibility filter that looks
for actors that have changed while parsing a model.  The backward
compatibility filter will make what ever change is necessary, and
the user will eventually be prompted to save the model.

 <p>Below are the backward compatibility issues
that are handled automatically.

<menu>

<li> actor.lib.conversions.ComplexToCartesian,
actor.lib.conversions.CartesianToComplex: 
port <I>real</I>  is now called <CODE>x</CODE>
port <I>imag</I>  is now called <CODE>y</CODE>
 <br>The backward compatibility filter should make this change automatically

<li> actor.lib.Sleep: 
<I>delay</I> parameter is now called <I>sleepTime</I>
 <br>The backward compatibility filter should make this change automatically

<li> actor.lib.javasound.AudioReader:
<I>sourceURL</I> is now a parameter
 <br>The backward compatibility filter should make this change automatically

<li> sdf.lib.vq.ImagePartition, sdf.lib.vq.ImageUnpartition, 
sdf.lib.vq.HTVQEncode, sdf.lib.vq.VQDecode: 
<I>input</I> and <I>output</I> are not of type ptolemy.actor.TypedIOPort
</menu>

Below are the changes that are not handled automatically
<menu>
<li> ct.kernel.CTRealTimeDirector has been removed, the fix
is to use ct.kernel.CTDirector instead and to 
set the synchronizeToRealTime parameter to true.

<li> DDE: RcvrComparator renamed to ReceiverComparator

<li> actor.lib.Reader is now actor.lib.DoubleReader
 <br> The Reader class was
included in the Ptolemy II 1.0.1 download, but was not part of the 
default configuration.
</menu>

If you have developed your own actors under Ptolemy II 1.0.1 by
writing your own Java files, you should recompile all your java code with
the new release.  In theory, copying the .class files should work, but
recompiling is safer.

</body>
</html>
