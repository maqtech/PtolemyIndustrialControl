<!-- $Id$ -->
<html>
<head>
<title>Ptolemy II 2.0beta Release Notes</title>
</head>
<body bgcolor="#faf0e6">
<h1>Ptolemy II 2.0beta Release Notes</h1>
Ptolemy II 2.0beta is a release of the Ptolemy II 
java classes and the Ptolemy II design document

 <p>Ptolemy II 2.0beta includes Vergil, a graphical user interface for
developing models.

 <p>The design document describes the Ptolemy II design and the implementation
of the Java classes.  The design document is not included
with Ptolemy II 2.0beta, but will be shipped with the Ptolemy II 2.0
production release.   In the interim, please see the "Using Vergil"
chapter (<a href="design/usingVergil.pdf">PDF</a> - 
<a href="design/usingVergil/index.htm">HTML</a>)

<h2>Major Features that are new in Ptolemy 2.0 </h2>
<menu>
<li> Modal Models

<li> <a href="codegen.htm">Code Generation</a>
This release includes a limited prototype of our code generation facility
that will generate .class files for non-hierarchical SDF models

</menu>

<h2>Other Features in Ptolemy II</h2>

<ul>
<li> SR Domain

 <!-- petrinet ?-->

<li> Units
<li> FIXME: Zoltan's changes to data.expr

<li> The actor classes are more robust and have been reviewed.

<li> <a href="codeDoc/ptolemy/actor/gui/package-summary.html">User interface utilities for applets and applications</a>

<li> Live editing of models and parameters;
<li> Network integration;
<li> <a href="codeDoc/ptolemy/data/type/package-summary.html">A sophisticated type system including:</a>
     <ul>
     <li> <a href="../ptolemy/domains/sdf/demo/Type/Type.htm">Type constant propagation,</a>
     <li> <a href="codeDoc/ptolemy/data/type/RecordType.html">Record types,</a>
     <li> <a href="codeDoc/ptolemy/data/type/ArrayType.html">Array types,</a> and
     <li> <a href="codeDoc/ptolemy/data/FixToken.html">Fixed-point type</a>
     </ul>
<li> An expression language for parameter expressions;
<li> <a href="codeDoc/ptolemy/actor/lib/package-summary.html">Data and domain polymorphic component library;</a>
<li> <a href="codeDoc/ptolemy/actor/lib/Expression.html">A polymorphic expression actor;</a>
<li> <a href="codeDoc/ptolemy/moml/package-summary.html">A very simple XML file format called MoML;</a>
<li> <a href="../ptolemy/plot/doc/body.htm" target="body">A flexible signal plotter;</a>
<li> Several domains with concurrent models of computation (
<a href="../ptolemy/domains/csp/doc/body.htm" target="body">CSP</a>,
<a href="../ptolemy/domains/pn/doc/body.htm" target="body">PN</a>,
<a href="../ptolemy/domains/dde/doc/body.htm" target="body">DDE</a>
)
<li> Hierarchically interoperable domains
(<a href="../ptolemy/domains/ct/demo/SigmaDelta/SigmaDelta.htm" target="body">(CT/FSM Accelerometer demo</a>);

<li> <a href="docbody.htm" target="body">On-line documentation (in HTML);</a>
<li> <a href="../ptolemy/actor/lib/javasound/demo/KarplusStrong/KarplusStrong.htm" target="main">Audio signal processing capabilities;</a></br>

<li> <a href="webStartHelp.htm">Java Web Start</a> support
<li> Vergil can be run in a sandbox that provides a safer environment
for unknown code, try running <CODE>$PTII/bin/vergil -sandbox yourmodel.xml</CODE>
</ul>

<h2>Complete List of Domains in Ptolemy II</h2>
 <!-- We include this list here since we will be posting the release notes
to the newsgroups etc.  See also main.htm
 -->
<ul>
<li> <a href="../ptolemy/domains/csp/doc/body.htm" target="body">CSP</a>:
	 communicating sequential processes,
<li> <a href="../ptolemy/domains/ct/doc/body.htm" target="body">CT</a>:
	continuous-time modeling,
<li> <a href="../ptolemy/domains/de/doc/body.htm" target="body">DE</a>:
	discrete-event modeling,
<li> <a href="../ptolemy/domains/dde/doc/body.htm" target="body">DDE</a>:
	distributed discrete events (experimental),
<li> <a href="../ptolemy/domains/dt/doc/body.htm" target="body">DT</a>:
	discrete time,
<li> <a href="../ptolemy/domains/fsm/doc/body.htm" target="body">FSM</a>:
b	 finite state machines,
<li> <a href="../ptolemy/domains/giotto/doc/body.htm" target="body">Giotto</a>:
	periodic time-driven (experimental),
<li> <a href="../ptolemy/domains/gr/doc/body.htm" target="body">GR</a>:
	3-D graphics (experimental),
 <!-- petrinet ??-->
<li> <a href="../ptolemy/domains/pn/doc/body.htm" target="body">PN</a>:
	process networks,
<li> <a href="../ptolemy/domains/sdf/doc/body.htm" target="body">SDF</a>:
	synchronous dataflow, and
<li> <a href="../ptolemy/domains/sr/doc/body.htm" target="body">SR</a>:
	synchronous/reactive (experimental).

</ul>

<h2>Platforms</h2>

The core of Ptolemy II 2.0 is 100% Java, so it should work on any
platform that has JDK1.3

 <p>We developed Ptolemy II 2.0 under Solaris 8 and Windows 2000 sr2
and with JDK1.3.1 and JDK1.4beta.  Note that code generation 
only works under JDK1.3.0 or 1.3.1 because of limitations in soot.

Ptolemy II 2.0 will not compile under JDK1.2.2.

<p>Ptolemy II is available in two versions
   <menu>
   <li> Ptiny - which can be used to build models in 
   CT, DE, FSM, PN and SDF using built-in actors.
   <li> Full - which includes other domains and 
   support for devloping custom actors.
   </menu>

<h2>Changes from 1.0.1</h2>
<menu>


<li> data: Units
<li> data.expr: New ByteToken type

<li> ptolemy/graph rework Shuvra S. Bhattacharyya (University of Maryland at College Park)

</menu>

<h2>Backward compatibility issues</h2>
Models developed under Ptolemy II 1.0.1 should run under Ptolemy II 2.0.

 <p>The MoMLParser includes a backward compatibility filter that looks
for actors that have changed while parsing a model.  The backward
compatibility filter will make what ever change is necessary, and
the user will eventually be prompted to save the model.

 <p>Below are the backward compatibility issues
that are handled automatically.

<menu>

<li> actor.lib.conversions.ComplexToCartesian,
actor.lib.conversions.CartesianToComplex: 
port <I>real</I>  is now called <CODE>x</CODE>
port <I>imag</I>  is now called <CODE>y</CODE>
 <br>The backward compatibility filter should make this change automatically

<li> actor.lib.Sleep: 
<I>delay</I> parameter is now called <I>sleepTime</I>
 <br>The backward compatibility filter should make this change automatically

<li> actor.lib.javasound.AudioReader:
<I>sourceURL</I> is now a parameter
 <br>The backward compatibility filter should make this change automatically

<li> sdf.lib.vq.ImagePartition, sdf.lib.vq.ImageUnpartition, 
sdf.lib.vq.HTVQEncode, sdf.lib.vq.VQDecode: 
<I>input</I> and <I>output</I> are not of type ptolemy.actor.TypedIOPort
</menu>

Below are the changes that are not handled automatically
<menu>
<li> DDE: RcvrComparator renamed to ReceiverComparator

<li> actor.lib.Reader is now actor.lib.DoubleReader
 <br> The Reader class was
included in the Ptolemy II 1.0.1 download, but was not part of the 
default configuration.
</menu>

If you have developed your own actors under Ptolemy II 1.0.1 by
writing your own Java files, you should recompile all your java code with
the new release.  In theory, copying the .class files should work, but
recompiling is safer.

<h3>New Actors</h3>

<menu>

<li> actor.lib:
<pre>
Accumulator
BooleanMultiplexor
BooleanSelect
BooleanSwitch
ClassWrapper
Counter
Differential
DoubleReader (Was Reader)
Limiter
LinearDifferenceEquationSystem
LookupTable
NonStrictTest
URLDirectoryReader
URLReader
VectorAssembler
VectorDisassembler
WallClockTime
</pre>

<li> actor.lib.comm:
<pre>
SerialComm
</pre>

<li> actor.lib.conversions:
<pre>
BooleanToAnything
Converter
InUnitsOf.java
IntArrayToString
LongToDouble
StringToIntArray
</pre>

<li> actor.lib.gui:
<pre>
SliderSource
RealTimePlotter
MatrixVisualizer
</pre>

<li> actor.lib.logic:
<pre>
IsPresent
</pre>

<li> actor.lib.net:
<pre>
DatagramReader
DatagramWriter
</pre>

<li> ct.lib:
<pre>
LevelCrossingDetector
FirstOrderHold
EventSource
</pre>

<li> de.lib:
<pre>
SamplerWithDefault
QueueWithNextOut
Queue
Previous
PreemptableTask
Inhibit
EventFilter
EventButton
</pre>

<li> sdf.lib:
<pre>
SDFConverter
MatrixToDouble
DoubleToMatrix
</pre>

</menu>



<!--vergilDocs-->
<h2>Limitations</h2>
Version 2.0 has a number of limitations.

<h3>Release Limitations</h3>
<menu>

<li> Code generation does not work in the Ptolemy 2.0 Web Edition.
The problem is that some of the code generation facility requires
that the <CODE>PTII</CODE> environment variable be set.

<li> The gzipped tar file that contains the Ptolemy II distribution
 <B>requires</B> GNU tar or WinZip.  Solaris 2.5.1 tar will fail to
untar this file with a checksum error because the pathnames are longer
than 100 characters.  If you do not have GNU tar, you can obtain
source and selected binaries from 
ftp://ptolemy.eecs.berkeley.edu/pub/gnu.
</menu>


<h3>Limitations in the Actor Libraries</h3>
<menu>
<li>The actor library is far from complete.

<li>The Expression actor does not properly propagate type constraints in
an expression-dependent fashion. It works correctly for double-valued
expressions of double-valued inputs.

<li> The Ptolemy parameter parser uses comma "," to separate elements
in an array.  This causes problems when Ptolemy is run on
European machines that use a comma "1,0" instead of a period "1.1"
in floating point numbers.

<li> The readFile() parameter function does not work with applets.

<!-- If you change the next paragraph update install.htm -->
<li>The Matlab interface works only under Windows and it requires that
Matlab be installed on the local machine.  The Matlab interface has
been tested with Matlab 6.1, which corresponds with R12.1.

<li> The actor.lib.comm.SerialComm actor requires that Javacomm is installed
<a href="http://java.sun.com/products/javacomm/index.html"><CODE>http://java.sun.com/products/javacomm/index.html</CODE></a>.  The SerialComm actor
will only work under Windows.

</menu>

<h3>Limitations in the FSM Domain</h3>

<h3>Limitations in the GR Domain</h3>
Some of the demos do not work.

<h3>Limitations in the PN Domain</h3>
The PN domain documents that it locally handles mutations.  However, this
is currently not true in the implementation.  For the basic PN model, this
doesn't really matter, since mutations happen pretty much the same as they
would otherwise.  (i.e. they are non-deterministic in when they execute) 
However, for timed PN models, there is actually some expressiveness
lost, since timed PN models can locally execute mutations deterministically.


<h3>Limitations in the User Interface</h3>
Version 2.0 of Ptolemy II includes the Vergil, a graphical user
interface for Ptolemy II.  This UI is still preliminary, and is made
up mostly of code that is rated "red", meaning that both the APIs
and the implementations are likely to change.
There are quite a few limitations.
<menu>

<li> Under JDK1.4, the icon titles may be rendered in the middle
of the icons instead of on the top.  The workaround is to use JDK1.3.1
instead of JDK1.4 

<li> If I right click on a port and select Customize Name and then select
Show Name, the name appears twice.
<li>No undo mechanism.
<li>Weak support for multiports in the graph editor.
<li>It is difficult to control wire routing.
<li>Cannot have more than one vertex in a connection.
<li>No mechanism to set the width of a relation.
<li>The integrated web browser is not a full-featured browser.
<li>Icon editor not yet integrated.
<li>Debugger not yet integrated.
<li>It is difficult to add actors to the libraries.
<li>No dynamic class loading.
</menu>

<h3>Code Generation Limitations</h3>
<menu>
<li> This release includes a limited prototype of our code generation facility
that will generate .class files for non-hierarchical SDF models

<li> The code generator uses Soot, which requires JDK1.3.x.
Soot will not work with JDK1.4

</menu>

<h3>Missing Domains</h3>
<menu>
<li>Boolean and integer dataflow.
<li>Dynamic dataflow
</menu>
<!--/vergilDocs-->
<p><font size="2" color="#cc0000">Last Updated: $Date$</font>
</body>
</html>
