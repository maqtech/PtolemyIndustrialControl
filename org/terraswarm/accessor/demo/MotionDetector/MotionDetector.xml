<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="MotionDetector" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="200.0">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{55.0, 15.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={653, 22, 787, 639}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[553, 529]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{266.5, 254.5}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This demo perform simple motion detection on an image sequence.">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="{-5.0, 50.0}">
        </property>
    </property>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="0.1">
        </property>
        <property name="values" class="ptolemy.data.expr.Parameter" value="{true}">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{55.0, 265.0}">
        </property>
    </entity>
    <entity name="ImageDisplay" class="ptolemy.actor.lib.image.ImageDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={20, 22, 640, 524}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_pictureSize" class="ptolemy.actor.gui.SizeAttribute" value="[640, 480]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{435.0, 125.0}">
        </property>
    </entity>
    <entity name="Camera" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** An accessor for a camera on the local host. This can be a built-in camera or&#10; *  a USB-connected camera. This accessor has two modes of operation, &quot;triggered&quot;&#10; *  and &quot;open loop.&quot; In triggered mode, it captures an image whenever a trigger&#10; *  input is received and produces that image on its output. In open-loop mode,&#10; *  it captures every image produced by the camera, at the speed of the camera,&#10; *  and produces on the output a stream of such images.&#10; * &#10; *  @accessor Camera&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input trigger A trigger input for triggered mode.&#10; *  @output image A stream of captured images.&#10; *  @parameter {boolean} triggered If true, use triggered mode. Otherwise, use open-loop mode.&#10; *  @parameter {string} camera The name of the camera to use. A list of available cameras is presented as options. This defaults to &quot;default camera&quot;, which uses the system default, if there is one.&#10; *  @parameter {string} viewSize The view size to use for capture, in pixels. A list of available view sizes for the selected camara is presented as options.&#10; */&#10;var cameras = require(&quot;cameras&quot;);&#10;var camera;&#10;var handle = null;&#10;&#10;/** Create the inputs, outputs, and parameters, and update the parameters for the selected camera. */&#10;exports.setup = function() {&#10;  input('trigger');&#10;  output('image');&#10;  parameter('triggered', {'type':'boolean', 'value':true});&#10;  parameter('camera', {'type':'string', 'value':'default camera', 'options':cameras.cameras()});&#10;  // NOTE: The following assumes that setup() is reinvoked whenever a parameter value changes,&#10;  // since the camera will change and so will the available options.&#10;  camera = new cameras.Camera(getParameter('camera'));&#10;  parameter('viewSize', {'type':'JSON', 'value':camera.getViewSize(), 'options':camera.viewSizes()});&#10;}&#10;&#10;/** Set the view size of the camera, open it, and depending on the triggered mode, either&#10; *  set up an input handler for the trigger input or set up a handler for the 'image'&#10; *  event notification from the camera.&#10; */&#10;exports.initialize = function() {&#10;  camera.setViewSize(getParameter('viewSize'));&#10;  camera.open();&#10;  if (getParameter('triggered')) {&#10;    handle = addInputHandler('trigger', function() {&#10;      send('image', camera.snapshot());&#10;    });&#10;  } else {&#10;    camera.on('image', function(image) {&#10;      send('image', image);&#10;    });&#10;  }&#10;}&#10;&#10;/** Remove handlers and close the camera. */&#10;exports.wrapup = function() {&#10;  camera.removeAllListeners('image');&#10;  if (handle != null) {&#10;    removeInputHandler(handle);&#10;  }&#10;  camera.close();&#10;}&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="http://www.terraswarm.org/accessors/cameras/Camera.js">
        </property>
        <property name="triggered" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="camera" class="ptolemy.data.expr.StringParameter" value="default camera">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="viewSize" class="ptolemy.data.expr.StringParameter" value="{&quot;width&quot;:640, &quot;height&quot;:480}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{175.0, 265.0}">
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="image" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="MotionDetector" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** A motion detector accessor.&#10; *  This accessor compares each input image against the previous&#10; *  input image. There are three outputs.&#10; *  The one named 'output' is a modified image that graphically illustrates&#10; *  the center of gravity of motion, if motion is detected.&#10; *  If enough of the pixels differ by enough, then the 'cog'&#10; *  output will produce the center of gravity of the pixels that&#10; *  differ by enough.&#10; *  Finally, the 'area' output produces the percentage of area&#10; *  covered by motion in the input image, where 0 means no motion&#10; *  and 100 means full image motion.&#10; *  &#10; *  The options parameter can include the following fields:&#10; *  * _PixelThreshold_: Intensity threshold whereby a pixel is&#10; *    deemed to different (an int in the range of 0 to 255, with default 25).&#10; *  * _AreaThreshold_: The percentage threshold of image&#10; *    that has different pixels for motion to be detected&#10; *    (a double 0-100, with default 0.2).&#10; *&#10; *  The implementation for the Ptolemy II host is taken from&#10; *  the webcam-capture package by Bartosz Firyn (SarXos), available from&#10; *  [https://github.com/sarxos/webcam-capture](https://github.com/sarxos/webcam-capture).&#10; *  The webcam-capture package is licensed under the MIT License.&#10; * &#10; *  @accessor MotionDetector&#10; *  @input input A stream of images.&#10; *  @input {{PixelThreshold: number, AreaThreshold: number}} options The options controlling the filter.&#10; *  @output {[number, number]} cog The horizontal and vertical position of the center of gravity of motion, in pixels.&#10; *  @output {Object} output The filtered image.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;var motionDetector = require('motionDetector');&#10;&#10;exports.setup = function() {&#10;    input('input');&#10;    output('output');&#10;    output('cog');&#10;    output('area');&#10;    input('options', {'value':{}, 'type':'JSON'});&#10;}&#10;&#10;exports.initialize = function() {&#10;    handle = addInputHandler('input', function() {&#10;        var options = get('options');&#10;        var image = get('input');&#10;        var result = motionDetector.filter(image, options);&#10;        send('output', result);&#10;        var cog = motionDetector.cog();&#10;        if (cog) {&#10;            send('cog', cog);&#10;        }&#10;        send('area', motionDetector.area());&#10;    });&#10;}&#10;&#10;exports.wrapup = function() {&#10;    if (handle) {&#10;        removeInputHandler(handle);&#10;    }&#10;}&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="/ptII/org/terraswarm/accessor/accessors/web/image/MotionDetector.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;A motion detector accessor.&#10; This accessor compares each input image against the previous&#10; input image. There are three outputs.&#10; The one named 'output' is a modified image that graphically illustrates&#10; the center of gravity of motion, if motion is detected.&#10; If enough of the pixels differ by enough, then the 'cog'&#10; output will produce the center of gravity of the pixels that&#10; differ by enough.&#10; Finally, the 'area' output produces the percentage of area&#10; covered by motion in the input image, where 0 means no motion&#10; and 100 means full image motion.&lt;/p&gt;&#10;&lt;p&gt; The options parameter can include the following fields:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;PixelThreshold&lt;/em&gt;: Intensity threshold whereby a pixel is&#10;deemed to different (an int in the range of 0 to 255, with default 25).&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;em&gt;AreaThreshold&lt;/em&gt;: The percentage threshold of image&#10;that has different pixels for motion to be detected&#10;(a double 0-100, with default 0.2).&lt;/p&gt;&#10;&lt;p&gt;The implementation for the Ptolemy II host is taken from&#10;the webcam-capture package by Bartosz Firyn (SarXos), available from&#10;&lt;a href=&quot;https://github.com/sarxos/webcam-capture&quot;&gt;https://github.com/sarxos/webcam-capture&lt;/a&gt;.&#10;The webcam-capture package is licensed under the MIT License.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$Id$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="undefined A stream of images.">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;Object&quot;]}) The options controlling the filter.">
            </property>
            <property name="undefined (port)" class="ptolemy.kernel.util.StringAttribute" value="undefined undefined">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;Object&quot;]}) The filtered image.">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{300.0, 255.0}">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="cog" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="area" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="CenterOfGravity" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={334, 553, 259, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[259, 164]">
        </property>
        <property name="columnsDisplayed" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{430.0, 190.0}">
        </property>
    </entity>
    <entity name="AreaPercentage" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={24, 553, 259, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[259, 164]">
        </property>
        <property name="columnsDisplayed" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{430.0, 265.0}">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.basic.layout.kieler.LayoutHint" value="{ { head={id=&quot;DiscreteClock.output&quot;,x=55.0,y=265.0}, tail={id=&quot;Camera.trigger&quot;,x=175.0,y=265.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.basic.layout.kieler.LayoutHint" value="{ { head={id=&quot;Camera.image&quot;,x=175.0,y=265.0}, tail={id=&quot;MotionDetector.input&quot;,x=300.0,y=255.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.basic.layout.kieler.LayoutHint" value="{ { head={id=&quot;ImageDisplay.input&quot;,x=435.0,y=125.0}, tail={id=&quot;MotionDetector.output&quot;,x=300.0,y=255.0}, points={375.0,125.0,375.0,245.0} } }">
        </property>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.basic.layout.kieler.LayoutHint" value="{ { head={id=&quot;MotionDetector.cog&quot;,x=300.0,y=255.0}, tail={id=&quot;CenterOfGravity.input&quot;,x=430.0,y=190.0}, points={390.0,255.0,390.0,190.0} } }">
        </property>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.basic.layout.kieler.LayoutHint" value="{ { head={id=&quot;MotionDetector.area&quot;,x=300.0,y=255.0}, tail={id=&quot;AreaPercentage.input&quot;,x=430.0,y=265.0}, points={} } }">
        </property>
    </relation>
    <link port="DiscreteClock.output" relation="relation"/>
    <link port="ImageDisplay.input" relation="relation2"/>
    <link port="Camera.trigger" relation="relation"/>
    <link port="Camera.image" relation="relation4"/>
    <link port="MotionDetector.input" relation="relation4"/>
    <link port="MotionDetector.output" relation="relation2"/>
    <link port="MotionDetector.cog" relation="relation3"/>
    <link port="MotionDetector.area" relation="relation5"/>
    <link port="CenterOfGravity.input" relation="relation3"/>
    <link port="AreaPercentage.input" relation="relation5"/>
</entity>
