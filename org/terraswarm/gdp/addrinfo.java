package org.terraswarm.gdp;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import org.terraswarm.gdp.Gdp10Library.sockaddr;
/**
 * <i>native declaration : /usr/include/netdb.h:43</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class addrinfo extends Structure {
	/** AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST */
	public int ai_flags;
	/** PF_xxx */
	public int ai_family;
	/** SOCK_xxx */
	public int ai_socktype;
	/** 0 or IPPROTO_xxx for IPv4 and IPv6 */
	public int ai_protocol;
	/**
	 * length of ai_addr<br>
	 * C type : socklen_t
	 */
	public int ai_addrlen;
	/**
	 * canonical name for hostname<br>
	 * C type : char*
	 */
	public Pointer ai_canonname;
	/**
	 * binary address<br>
	 * C type : sockaddr*
	 */
	public sockaddr ai_addr;
	/**
	 * next structure in linked list<br>
	 * C type : addrinfo*
	 */
	public addrinfo.ByReference ai_next;
	public addrinfo() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("ai_flags", "ai_family", "ai_socktype", "ai_protocol", "ai_addrlen", "ai_canonname", "ai_addr", "ai_next");
	}
	/**
	 * @param ai_flags AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST<br>
	 * @param ai_family PF_xxx<br>
	 * @param ai_socktype SOCK_xxx<br>
	 * @param ai_protocol 0 or IPPROTO_xxx for IPv4 and IPv6<br>
	 * @param ai_addrlen length of ai_addr<br>
	 * C type : socklen_t<br>
	 * @param ai_canonname canonical name for hostname<br>
	 * C type : char*<br>
	 * @param ai_addr binary address<br>
	 * C type : sockaddr*<br>
	 * @param ai_next next structure in linked list<br>
	 * C type : addrinfo*
	 */
	public addrinfo(int ai_flags, int ai_family, int ai_socktype, int ai_protocol, int ai_addrlen, Pointer ai_canonname, sockaddr ai_addr, addrinfo.ByReference ai_next) {
		super();
		this.ai_flags = ai_flags;
		this.ai_family = ai_family;
		this.ai_socktype = ai_socktype;
		this.ai_protocol = ai_protocol;
		this.ai_addrlen = ai_addrlen;
		this.ai_canonname = ai_canonname;
		this.ai_addr = ai_addr;
		this.ai_next = ai_next;
	}
	public addrinfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends addrinfo implements Structure.ByReference {
		
	};
	public static class ByValue extends addrinfo implements Structure.ByValue {
		
	};
}
