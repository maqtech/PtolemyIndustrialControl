package org.terraswarm.gdp;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>gdp</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("gdp") 
@Runtime(CRuntime.class) 
public class GdpLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4610</i>
	 */
	public enum gdp_iomode_t implements IntValuedEnum<gdp_iomode_t > {
		/// no mode specified
		GDP_MODE_ANY(0),
		/// read only
		GDP_MODE_RO(1),
		/// append only
		GDP_MODE_AO(2);
		gdp_iomode_t(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<gdp_iomode_t > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<gdp_iomode_t > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_CREATED = (int)201;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_NOTACCEPTABLE = (int)406;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_FORBIDDEN = (int)403;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_VALID = (int)203;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_NOTIMPL = (int)501;
	/// <i>native declaration : src/gdp/gdp/gdp.h</i>
	public static final String PRIgdp_rid = (String)"u";
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_PROXYNOTSUP = (int)505;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_NOTFOUND = (int)404;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_BADGATEWAY = (int)502;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_CHANGED = (int)204;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_BADREQ = (int)400;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_SUCCESS = (int)200;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_GWTIMEOUT = (int)504;
	/// <i>native declaration : src/gdp/gdp/gdp.h</i>
	public static final int GDP_EVENT_DATA = (int)1;
	/// <i>native declaration : src/gdp/gdp/gdp.h</i>
	public static final int GDP_GCL_PNAME_LEN = (int)43;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_TOOLARGE = (int)413;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_UNAUTH = (int)401;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_DELETED = (int)202;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_CONTENT = (int)205;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_INTERNAL = (int)500;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_BADOPT = (int)402;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_SVCUNAVAIL = (int)503;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_MODULE = (int)1;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_PRECONFAILED = (int)412;
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_UNSUPMEDIA = (int)415;
	/// <i>native declaration : src/gdp/gdp/gdp.h</i>
	public static final String PRIgdp_recno = (String)"q";
	/// <i>native declaration : src/gdp/gdp/gdp_stat.h</i>
	public static final int GDP_COAP_METHNOTALLOWED = (int)405;
	/**
	 * type of signal function<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:537</i>
	 */
	/**
	 * type of signal function<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:537</i>
	 */
	public static abstract class sig_t extends Callback<sig_t > {
		abstract public void apply(int int1);
	};
	/**
	 * status handling function<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:1278</i>
	 */
	/**
	 * status handling function<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:1278</i>
	 */
	public static abstract class EP_STAT_HANDLER_FUNCP extends Callback<EP_STAT_HANDLER_FUNCP > {
		/**
		 * SKIPPED:<br>
		 * @param estat status code<br>
		 * @param defmsg default message<br>
		 * <i>native declaration : src/gdp/gdp/gdp.h</i><br>
		 * @param estat status code<br>
		 * @param defmsg default message<br>
		 * /<br>
		 * EP_STAT EP_STAT_HANDLER_FUNCP(EP_STAT estat, const char* defmsg, va_list av);<br>
		 * Conversion Error : EP_STAT (Unsupported type)
		 */
	};
	/**
	 * If you don't specific cbfunc, events are generated instead<br>
	 * the callback function<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4709</i>
	 */
	/**
	 * If you don't specific cbfunc, events are generated instead<br>
	 * the callback function<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4709</i>
	 */
	public static abstract class gdp_gcl_sub_cbfunc_t extends Callback<gdp_gcl_sub_cbfunc_t > {
		/**
		 * @param gclh the GCL triggering the call<br>
		 * @param datum the message triggering the call
		 */
		abstract public void apply(Pointer<GdpLibrary.gdp_gcl > gclh, Pointer<gdp_datum_t > datum, Pointer<? > cbarg);
	};
	/**
	 * Original signature : <code>void gdp_buf_dump(gdp_buf_t*, FILE*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_buf.h:4591</i>
	 */
	public static void gdp_buf_dump(Pointer<GdpLibrary.evbuffer > buf, Pointer fp) {
		gdp_buf_dump(Pointer.getPeer(buf), Pointer.getPeer(fp));
	}
	protected native static void gdp_buf_dump(@Ptr long buf, @Ptr long fp);
	/**
	 * Original signature : <code>void _gdp_stat_init()</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp_stat.h:4593</i>
	 */
	native public static void _gdp_stat_init();
	/**
	 * SKIPPED:<br>
	 * allocate an event<br>
	 * Original signature : <code>EP_STAT gdp_event_new(gdp_event_t**)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4632</i><br>
	 * allocate an event<br>
	 * Original signature : <code>EP_STAT gdp_event_new(gdp_event_t**)</code><br>
	 * /<br>
	 * extern EP_STAT gdp_event_new(gdp_event_t** gevp);<br>
	 * Conversion Error : EP_STAT (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * free an event<br>
	 * Original signature : <code>EP_STAT gdp_event_free(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4637</i><br>
	 * free an event<br>
	 * Original signature : <code>EP_STAT gdp_event_free(gdp_event_t*)</code><br>
	 * /<br>
	 * extern EP_STAT gdp_event_free(gdp_event_t* gev);<br>
	 * Conversion Error : EP_STAT (Unsupported type)
	 */
	/**
	 * add an event to the active queue<br>
	 * Original signature : <code>void gdp_event_trigger(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4642</i>
	 */
	public static void gdp_event_trigger(Pointer<GdpLibrary.gdp_event > gev) {
		gdp_event_trigger(Pointer.getPeer(gev));
	}
	protected native static void gdp_event_trigger(@Ptr long gev);
	/**
	 * get next event (fills in gev structure)<br>
	 * Original signature : <code>gdp_event_t* gdp_event_next(bool)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4647</i>
	 */
	public static Pointer<GdpLibrary.gdp_event > gdp_event_next(boolean wait$) {
		return Pointer.pointerToAddress(gdp_event_next$2(wait$), GdpLibrary.gdp_event.class);
	}
	@Ptr 
	@Name("gdp_event_next") 
	protected native static long gdp_event_next$2(boolean wait$);
	/**
	 * get the type of an event<br>
	 * Original signature : <code>int gdp_event_gettype(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4652</i>
	 */
	public static int gdp_event_gettype(Pointer<GdpLibrary.gdp_event > gev) {
		return gdp_event_gettype(Pointer.getPeer(gev));
	}
	protected native static int gdp_event_gettype(@Ptr long gev);
	/**
	 * get the GCL handle<br>
	 * Original signature : <code>gdp_gcl_t* gdp_event_getgcl(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4657</i>
	 */
	public static Pointer<GdpLibrary.gdp_gcl > gdp_event_getgcl(Pointer<GdpLibrary.gdp_event > gev) {
		return Pointer.pointerToAddress(gdp_event_getgcl(Pointer.getPeer(gev)), GdpLibrary.gdp_gcl.class);
	}
	@Ptr 
	protected native static long gdp_event_getgcl(@Ptr long gev);
	/**
	 * get the datum<br>
	 * Original signature : <code>gdp_datum_t* gdp_event_getdatum(gdp_event_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4662</i>
	 */
	public static Pointer<gdp_datum_t > gdp_event_getdatum(Pointer<GdpLibrary.gdp_event > gev) {
		return Pointer.pointerToAddress(gdp_event_getdatum(Pointer.getPeer(gev)), gdp_datum_t.class);
	}
	@Ptr 
	protected native static long gdp_event_getdatum(@Ptr long gev);
	/**
	 * SKIPPED:<br>
	 * initialize the library<br>
	 * Original signature : <code>EP_STAT gdp_init()</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4669</i><br>
	 * initialize the library<br>
	 * Original signature : <code>EP_STAT gdp_init()</code><br>
	 * /<br>
	 * extern EP_STAT gdp_init();<br>
	 * Conversion Error : EP_STAT (Unsupported type)
	 */
	/**
	 * run event loop (normally run from gdp_init; never returns)<br>
	 * Original signature : <code>void* gdp_run_accept_event_loop(void*)</code><br>
	 * @param voidPtr1 unused<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4675</i>
	 */
	public static Pointer<? > gdp_run_accept_event_loop(Pointer<? > voidPtr1) {
		return Pointer.pointerToAddress(gdp_run_accept_event_loop(Pointer.getPeer(voidPtr1)));
	}
	@Ptr 
	protected native static long gdp_run_accept_event_loop(@Ptr long voidPtr1);
	/**
	 * SKIPPED:<br>
	 * create a new GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_create(gcl_name_t, gdp_gcl_t**)</code><br>
	 * @param gdp_gcl_tPtrPtr1 pointer to result GCL handle<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4681</i><br>
	 * create a new GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_create(gcl_name_t, gdp_gcl_t**)</code><br>
	 * @param gdp_gcl_tPtrPtr1 pointer to result GCL handle<br>
	 * /<br>
	 * extern EP_STAT gdp_gcl_create(gcl_name_t gcl_name_t1, gdp_gcl_t** gdp_gcl_tPtrPtr1);<br>
	 * Conversion Error : EP_STAT (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * open an existing GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_open(gcl_name_t, gdp_iomode_t, gdp_gcl_t**)</code><br>
	 * @param name GCL name to open<br>
	 * @param rw read/write (append)<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4688</i><br>
	 * open an existing GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_open(gcl_name_t, gdp_iomode_t, gdp_gcl_t**)</code><br>
	 * @param name GCL name to open<br>
	 * @param rw read/write (append)<br>
	 * /<br>
	 * extern EP_STAT gdp_gcl_open(gcl_name_t name, gdp_iomode_t rw, gdp_gcl_t** gclh);<br>
	 * Conversion Error : EP_STAT (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * close an open GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_close(gdp_gcl_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4693</i><br>
	 * close an open GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_close(gdp_gcl_t*)</code><br>
	 * /<br>
	 * extern EP_STAT gdp_gcl_close(gdp_gcl_t* gclh);<br>
	 * Conversion Error : EP_STAT (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * append to a writable GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_publish(gdp_gcl_t*, gdp_datum_t*)</code><br>
	 * @param gclh writable GCL handle<br>
	 * @param gdp_datum_tPtr1 message to write<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4700</i><br>
	 * append to a writable GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_publish(gdp_gcl_t*, gdp_datum_t*)</code><br>
	 * @param gclh writable GCL handle<br>
	 * @param gdp_datum_tPtr1 message to write<br>
	 * /<br>
	 * extern EP_STAT gdp_gcl_publish(gdp_gcl_t* gclh, gdp_datum_t* gdp_datum_tPtr1);<br>
	 * Conversion Error : EP_STAT (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * read from a readable GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_read(gdp_gcl_t*, gdp_recno_t, gdp_datum_t*)</code><br>
	 * @param gclh readable GCL handle<br>
	 * @param recno GCL record number<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4707</i><br>
	 * read from a readable GCL<br>
	 * Original signature : <code>EP_STAT gdp_gcl_read(gdp_gcl_t*, gdp_recno_t, gdp_datum_t*)</code><br>
	 * @param gclh readable GCL handle<br>
	 * @param recno GCL record number<br>
	 * /<br>
	 * extern EP_STAT gdp_gcl_read(gdp_gcl_t* gclh, gdp_recno_t recno, gdp_datum_t* datum);<br>
	 * Conversion Error : EP_STAT (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * Original signature : <code>EP_STAT gdp_gcl_subscribe(gdp_gcl_t*, gdp_recno_t, gdp_recno_t, gdp_gcl_sub_cbfunc_t, void*)</code><br>
	 * @param gclh readable GCL handle<br>
	 * @param start first record to retrieve<br>
	 * @param stop last record to retrieve<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4716</i><br>
	 * Original signature : <code>EP_STAT gdp_gcl_subscribe(gdp_gcl_t*, gdp_recno_t, gdp_recno_t, gdp_gcl_sub_cbfunc_t, void*)</code><br>
	 * @param gclh readable GCL handle<br>
	 * @param start first record to retrieve<br>
	 * @param stop last record to retrieve<br>
	 * /<br>
	 * extern EP_STAT gdp_gcl_subscribe(gdp_gcl_t* gclh, gdp_recno_t start, gdp_recno_t stop, gdp_gcl_sub_cbfunc_t cbfunc, void* cbarg);<br>
	 * Conversion Error : EP_STAT (Unsupported type)
	 */
	/**
	 * XXX: should this be in a more generic "getstat" function?<br>
	 * Original signature : <code>gcl_name_t* gdp_gcl_getname(const gdp_gcl_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4721</i>
	 */
	public static Pointer<Pointer<Byte > > gdp_gcl_getname(Pointer<GdpLibrary.gdp_gcl > gclh) {
		return Pointer.pointerToAddress(gdp_gcl_getname(Pointer.getPeer(gclh)), DefaultParameterizedType.paramType(Pointer.class, Byte.class));
	}
	@Ptr 
	protected native static long gdp_gcl_getname(@Ptr long gclh);
	/**
	 * check to see if a GCL name is valid<br>
	 * Original signature : <code>bool gdp_gcl_name_is_zero(const gcl_name_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4726</i>
	 */
	public static boolean gdp_gcl_name_is_zero(Pointer<Byte > gcl_name_t1) {
		return gdp_gcl_name_is_zero(Pointer.getPeer(gcl_name_t1));
	}
	protected native static boolean gdp_gcl_name_is_zero(@Ptr long gcl_name_t1);
	/**
	 * print a GCL (for debugging)<br>
	 * Original signature : <code>void gdp_gcl_print(const gdp_gcl_t*, FILE*, int, int)</code><br>
	 * @param gclh GCL handle to print<br>
	 * @param fp file to print it to<br>
	 * @param detail not used at this time<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4734</i>
	 */
	public static void gdp_gcl_print(Pointer<GdpLibrary.gdp_gcl > gclh, Pointer fp, int detail, int indent) {
		gdp_gcl_print(Pointer.getPeer(gclh), Pointer.getPeer(fp), detail, indent);
	}
	protected native static void gdp_gcl_print(@Ptr long gclh, @Ptr long fp, int detail, int indent);
	/**
	 * make a printable GCL name from a binary version<br>
	 * Original signature : <code>char* gdp_gcl_printable_name(const gcl_name_t, gcl_pname_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4739</i>
	 */
	public static Pointer<Byte > gdp_gcl_printable_name(Pointer<Byte > internal, Pointer<Byte > external) {
		return Pointer.pointerToAddress(gdp_gcl_printable_name(Pointer.getPeer(internal), Pointer.getPeer(external)), Byte.class);
	}
	@Ptr 
	protected native static long gdp_gcl_printable_name(@Ptr long internal, @Ptr long external);
	/**
	 * SKIPPED:<br>
	 * make a binary GCL name from a printable version<br>
	 * Original signature : <code>EP_STAT gdp_gcl_internal_name(const gcl_pname_t, gcl_name_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4744</i><br>
	 * make a binary GCL name from a printable version<br>
	 * Original signature : <code>EP_STAT gdp_gcl_internal_name(const gcl_pname_t, gcl_name_t)</code><br>
	 * /<br>
	 * EP_STAT gdp_gcl_internal_name(const gcl_pname_t external, gcl_name_t internal);<br>
	 * Conversion Error : EP_STAT (Unsupported type)
	 */
	/**
	 * SKIPPED:<br>
	 * parse a (possibly human-friendly) GCL name<br>
	 * Original signature : <code>EP_STAT gdp_gcl_parse_name(const char*, gcl_name_t)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4749</i><br>
	 * parse a (possibly human-friendly) GCL name<br>
	 * Original signature : <code>EP_STAT gdp_gcl_parse_name(const char*, gcl_name_t)</code><br>
	 * /<br>
	 * EP_STAT gdp_gcl_parse_name(const char* ext, gcl_name_t internal);<br>
	 * Conversion Error : EP_STAT (Unsupported type)
	 */
	/**
	 * allocate a new message<br>
	 * Original signature : <code>gdp_datum_t* gdp_datum_new()</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4754</i>
	 */
	public static Pointer<gdp_datum_t > gdp_datum_new() {
		return Pointer.pointerToAddress(gdp_datum_new$2(), gdp_datum_t.class);
	}
	@Ptr 
	@Name("gdp_datum_new") 
	protected native static long gdp_datum_new$2();
	/**
	 * free a message<br>
	 * Original signature : <code>void gdp_datum_free(gdp_datum_t*)</code><br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4759</i>
	 */
	public static void gdp_datum_free(Pointer<gdp_datum_t > gdp_datum_tPtr1) {
		gdp_datum_free(Pointer.getPeer(gdp_datum_tPtr1));
	}
	protected native static void gdp_datum_free(@Ptr long gdp_datum_tPtr1);
	/**
	 * print a message (for debugging)<br>
	 * Original signature : <code>void gdp_datum_print(const gdp_datum_t*, FILE*)</code><br>
	 * @param datum message to print<br>
	 * <i>native declaration : src/gdp/gdp/gdp.h:4765</i>
	 */
	public static void gdp_datum_print(Pointer<gdp_datum_t > datum, Pointer fp) {
		gdp_datum_print(Pointer.getPeer(datum), Pointer.getPeer(fp));
	}
	protected native static void gdp_datum_print(@Ptr long datum, @Ptr long fp);
	/// Conversion Error : null (void type !)
	public int __mb_cur_max() {
		try {
			return (int)BridJ.getNativeLibrary("gdp").getSymbolPointer("__mb_cur_max").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public GdpLibrary __mb_cur_max(int __mb_cur_max) {
		try {
			{
				BridJ.getNativeLibrary("gdp").getSymbolPointer("__mb_cur_max").as(int.class).set(__mb_cur_max);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int getdate_err() {
		try {
			return (int)BridJ.getNativeLibrary("gdp").getSymbolPointer("getdate_err").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public GdpLibrary getdate_err(int getdate_err) {
		try {
			{
				BridJ.getNativeLibrary("gdp").getSymbolPointer("getdate_err").as(int.class).set(getdate_err);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int daylight() {
		try {
			return (int)BridJ.getNativeLibrary("gdp").getSymbolPointer("daylight").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public GdpLibrary daylight(int daylight) {
		try {
			{
				BridJ.getNativeLibrary("gdp").getSymbolPointer("daylight").as(int.class).set(daylight);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * the base for GDP I/O events<br>
	 * C type : event_base*
	 */
	public Pointer<GdpLibrary.event_base > GdpIoEventBase() {
		try {
			return (Pointer<GdpLibrary.event_base >)BridJ.getNativeLibrary("gdp").getSymbolPointer("GdpIoEventBase").as(DefaultParameterizedType.paramType(Pointer.class, GdpLibrary.event_base.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * the base for GDP I/O events<br>
	 * C type : event_base*
	 */
	public GdpLibrary GdpIoEventBase(Pointer<GdpLibrary.event_base > GdpIoEventBase) {
		try {
			{
				BridJ.getNativeLibrary("gdp").getSymbolPointer("GdpIoEventBase").as(DefaultParameterizedType.paramType(Pointer.class, GdpLibrary.event_base.class)).set(GdpIoEventBase);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public static class gdp_gcl_t extends TypedPointer {
		public gdp_gcl_t(long address) {
			super(address);
		}
		public gdp_gcl_t(Pointer address) {
			super(address);
		}
	};
	public static class gdp_event_t extends TypedPointer {
		public gdp_event_t(long address) {
			super(address);
		}
		public gdp_event_t(Pointer address) {
			super(address);
		}
	};
	public static class gdp_buf_t extends TypedPointer {
		public gdp_buf_t(long address) {
			super(address);
		}
		public gdp_buf_t(Pointer address) {
			super(address);
		}
	};
	public static class EP_THR_MUTEX extends TypedPointer {
		public EP_THR_MUTEX(long address) {
			super(address);
		}
		public EP_THR_MUTEX(Pointer address) {
			super(address);
		}
	};
	/// Undefined type
	/// Undefined type
	public static interface event_base {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface evbuffer {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface gdp_gcl {
		
	};
	/// Undefined type
	/// Undefined type
	public static interface gdp_event {
		
	};
}
