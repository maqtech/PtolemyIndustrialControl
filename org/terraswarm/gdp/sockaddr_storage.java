package org.terraswarm.gdp;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * Structure large enough to hold any socket address (with the historical<br>
 * exception of AF_UNIX).  We reserve 128 bytes.<br>
 * <i>native declaration : /usr/include/bits/socket.h:13</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public abstract class sockaddr_storage extends Structure {
	/**
	 * Address family, etc.<br>
	 * C type : sa_family_t
	 */
	public short ss_family;
	/** Force desired alignment. */
	public NativeLong __ss_align;
	/** Conversion Error : sizeof(unsigned long) */
	public sockaddr_storage() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("ss_family", "__ss_align");
	}
	/**
	 * @param ss_family Address family, etc.<br>
	 * C type : sa_family_t<br>
	 * @param __ss_align Force desired alignment.
	 */
	public sockaddr_storage(short ss_family, NativeLong __ss_align) {
		super();
		this.ss_family = ss_family;
		this.__ss_align = __ss_align;
	}
	public sockaddr_storage(Pointer peer) {
		super(peer);
	}
	public static abstract class ByReference extends sockaddr_storage implements Structure.ByReference {
		
	};
	public static abstract class ByValue extends sockaddr_storage implements Structure.ByValue {
		
	};
}
