package org.terraswarm.gdp;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * Assumption here is that a network number<br>
 * fits in an unsigned long -- probably a poor one.<br>
 * <i>native declaration : /usr/include/netdb.h:22</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class netent extends Structure {
	/**
	 * official name of net<br>
	 * C type : char*
	 */
	public Pointer n_name;
	/**
	 * alias list<br>
	 * C type : char**
	 */
	public PointerByReference n_aliases;
	/** net address type */
	public int n_addrtype;
	/** network # */
	public int n_net;
	public netent() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("n_name", "n_aliases", "n_addrtype", "n_net");
	}
	/**
	 * @param n_name official name of net<br>
	 * C type : char*<br>
	 * @param n_aliases alias list<br>
	 * C type : char**<br>
	 * @param n_addrtype net address type<br>
	 * @param n_net network #
	 */
	public netent(Pointer n_name, PointerByReference n_aliases, int n_addrtype, int n_net) {
		super();
		this.n_name = n_name;
		this.n_aliases = n_aliases;
		this.n_addrtype = n_addrtype;
		this.n_net = n_net;
	}
	public netent(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends netent implements Structure.ByReference {
		
	};
	public static class ByValue extends netent implements Structure.ByValue {
		
	};
}
